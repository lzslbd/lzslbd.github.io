<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分布式系统的问题]]></title>
      <url>http://linbingdong.com/2018/04/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文内容翻译自《Designing Data-Intensive Applications》一书的第8章。</p>
</blockquote>
<a id="more"></a>

<p>近几章主要介绍系统如何处理错误。例如，我们讨论了副本故障转移，复制滞后和事务的并发控制。当我们理解实际系统中可能出现的各种边界情况时，我们就能更好地处理它们。</p>
<p>前几章虽然谈论了很多关于错误的问题，但是还是太乐观了。在本章中，我们将最悲观地假设“任何可能出故障的，最终都会出故障”。</p>
<p>分布式系统编程与在单机上编写软件有本质区别——主要区别在于分布式系统中有很多新奇的可能出故障的方式。 本章中，我们将了解在实践中出现的问题，并了解哪些我们可以依赖，哪些不行。</p>
<p>最后，作为工程师，我们的任务是构建能够完成工作的系统（即满足用户所期望的保证），尽管各个部件都出错了。 在第9章中，我们将看看可以在分布式系统中提供这种保证的算法的一些示例。 但首先，在本章中，我们必须了解我们面临的挑战。</p>
<p>本章是对分布式系统中可能出现的问题的悲观和沮丧的概述。 我们将研究网络问题（第277页的“不可靠的网络”）; 时钟和时序问题（第287页上的“不可靠的时钟”）; 我们将讨论它们可以避免的程度。 所有这些问题造成的后果都会让人迷惑，因此我们将探讨如何思考分布式系统的状态以及如何推理已发生的事情（第300页的“知识，真相和谎言”）。</p>
<h2 id="错误和部分故障"><a href="#错误和部分故障" class="headerlink" title="错误和部分故障"></a>错误和部分故障</h2><p>当你在单机上写程序时，它通常会以一种可预测的方式运行：要么正常工作，要么无法工作。有bug的软件可能会让人觉得电脑出问题了（通常重新启动就能解决问题），但大部分还是软件写得不好的后果。</p>
<p>没有什么根本原因能让单机上的软件表现得奇怪：当硬件正常工作时，相同的操作总是产生相同的结果（这是确定性的）。如果存在硬件问题（例如，内存损坏或连接器松动），其后果通常是整个系统失效（例如“蓝屏死机”，无法启动）。具有良好软件的单机通常功能完好或完全损坏，而不在两者之间。</p>
<p>这是计算机设计中的一个慎重选择：如果发生内部故障，我们宁愿计算机完全崩溃，而不是返回错误的结果，因为错误的结果很难处理，并且令人困惑。因此，计算机隐藏了它们实现所依赖的模糊物理现实，并提出了一个理想化的系统模型，它可以与数学完美结合起来。CPU指令总是做同样的事情; 如果你将一些数据写入内存或磁盘，则该数据保持完好并且不会随机损坏。 这种始终正确计算的设计目标可以追溯到第一台数字计算机。</p>
<p>当你编写运行在多台计算机上并通过网络连接的软件时，情况完全不同。 在分布式系统中，我们不再处于理想系统模型中 - 我们别无选择，只能面对物理世界的混乱现实。 而在现实世界中，正如这个轶事所示，各种各样的事情可能会出错：</p>
<blockquote>
<p>在我有限的经验中，我处理过单个数据中心（DC）中的长时间网络分区，PDU（配电单元）故障，交换机故障，整个机架的意外电源故障，全DC主干故障，全DC 电力故障和一位低血糖驾驶员将他的福特皮卡撞进空调系统。我甚至不是一个运维人员。——Coda Hale</p>
</blockquote>
<p>在分布式系统中，可能出现这样的情况，尽管系统的其他部分工作正常，但系统的某些部分可能会以某种不可预知的方式出故障。这就叫做部分故障。该问题的难点在于部分故障是不确定的：如果你试图做任何包含多个节点和网络的事情，它可能有时工作正常，有时出现不可预知的故障。正如我们将要看到的，你可能甚至不知道某件事是否成功，因为消息在网络中传播所花费的时间也是不确定的！</p>
<p>这种不确定性和部分故障的可能性是分布式系统难以处理的原因。</p>
<h3 id="云计算和超级计算"><a href="#云计算和超级计算" class="headerlink" title="云计算和超级计算"></a>云计算和超级计算</h3><p>关于如何构建大型计算系统有一系列哲学：</p>
<ul>
<li><p>规模的一端是高性能计算（HPC）领域。拥有数千个CPU的超级计算机通常用于计算密集型科学计算任务，如天气预报或分子动力学（模拟原子和分子的运动）。</p>
</li>
<li><p>另一端是云计算，云计算没有非常明确的定义，但通常与多租户数据中心，连接IP网络的商品计算机（通常是以太网），弹性/按需资源分配以及按时计费联系在一起。</p>
</li>
</ul>
<p>有了这些哲学，处理错误的方法就非常不同了。在超级计算机中，作业通常会对其计算状态不时地做检查点到持久存储上。如果一个节点发生故障，通常的解决方案是简单地停止整个集群工作负载。故障节点修复后，从上一个检查点重新开始计算。因此，超级计算机更像是一台单节点计算机而不是分布式系统：它通过升级为完全故障来处理部分故障 - 当系统的任何部分发生故障，简单地让整个系统崩溃（就像单机上的内核恐慌一样）。</p>
<p>在本书中，我们重点介绍实现互联网服务的系统，这些系统通常看起来与超级计算机有很大不同：</p>
<ul>
<li><p>许多与互联网有关的应用程序都是在线的，在某种意义上它们需要能够随时为用户提供低延迟服务。服务不可用（例如，停止群集以进行修复）是不可接受的。相比之下，像天气模拟这样的离线（批处理）作业可以停止并重启，而且影响很小。</p>
</li>
<li><p>超级计算机通常由专用硬件构建，其中每个节点都非常可靠，并且节点通过共享内存和远程直接内存访问（RDMA）进行通信。另一方面，云服务中的节点是由普通机器构建的，它们能以较低的成本提供相同的性能，但也具有较高的故障率。</p>
</li>
<li><p>大型数据中心网络通常基于IP和以太网，以Clos拓扑排列来提供高对分带宽。超级计算机通常使用专门的网络拓扑结构，例如多维网格和toruses，这为具有已知通信模式的HPC工作负载提供了更好的性能。</p>
</li>
<li><p>系统越大，系统中有组件出故障的概率越高。随着时间的推移，故障被修复，新的组件又出故障，但是在一个有数千个节点的系统中，认为系统中总是在发生故障是一个合理的假设。当错误处理策略不够有效时，一个大型系统最终会花费大量的时间从故障中恢复，而不是做有用的工作。</p>
</li>
<li><p>如果系统可以容忍失败的节点并且仍然作为一个整体继续工作，这对于操作和维护是一个非常有用的特性：例如，可以执行滚动升级（参阅第4章），一次重启一个节点，系统继续为用户提供服务而不中断。在云环境中，如果一台虚拟机运行不佳，可以将其杀死并请求一台新的虚拟机（希望新的虚拟机速度更快）。</p>
</li>
<li><p>在地理分布式部署中（保持数据在地理位置上接近用户以减少访问延迟），通信很可能通过互联网进行，与本地网络相比，速度慢且不可靠。超级计算机通常假设它们的所有节点都靠近在一起。</p>
</li>
</ul>
<p>如果我们想让分布式系统工作，就必须接受部分故障的可能性，并在软件中建立容错机制。换句话说，我们需要从不可靠的组件中构建可靠的系统。（正如在第6页的“可靠性”中所讨论的那样，没有完美的可靠性，所以我们需要了解我们可以实际承诺的极限。）</p>
<p>即使在只有少数节点的小型系统中，考虑部分故障也很重要。在一个小型系统中，很可能大部分组件在大多数时间都正常工作。但是，迟早会有一部分系统出现故障，软件将不得不以某种方式处理它。故障处理必须是软件设计的一部分，并且软件的操作员需要知道发生故障时软件会出现什么行为。</p>
<p>假定错误很少发生，并只往好的想是不明智的。考虑各种可能的错误（甚至是不太可能的错误），并在测试环境中人为地创建这些情况以查看会发生什么是非常重要的。在分布式系统中，抱着怀疑，悲观和偏执的态度才能取得成功。</p>
<h3 id="从不可靠的组件中构建可靠的系统"><a href="#从不可靠的组件中构建可靠的系统" class="headerlink" title="从不可靠的组件中构建可靠的系统"></a>从不可靠的组件中构建可靠的系统</h3><p>你可能会怀疑这是否有道理——直觉上，一个系统只能和其最不可靠的组件（它最薄弱的环节）一样可靠。事实并非如此：事实上，从不太可靠的基础构建更可靠的系统，这在计算中是一个古老的想法。 例如：</p>
<ul>
<li><p>纠错码允许数字数据在通信信道上准确传输，偶尔会出现某些位错误，例如由于无线网络上的无线电干扰。</p>
</li>
<li><p>IP（互联网协议）是不可靠的：数据包可能丢失，延迟，重复或乱序。TCP（传输控制协议）在IP之上提供了一个更可靠的传输层：它确保丢失的数据包被重传，消除重复，并且数据包被重新组装为它们的发送顺序。</p>
</li>
</ul>
<p>虽然系统可能比其基础部分更可靠，但它的可靠性总是有限的。例如，纠错码可以处理少量的单比特错误，但是如果信号被干扰所淹没，那么通过通信信道可以获得的数据量就有一个基本限制。TCP可以对我们隐藏数据包丢失，重复和乱序，但它不能在网络中奇迹般地消除延迟。</p>
<p>虽然更可靠的更高级别的系统并不完美，但它仍然很有用，因为它可以处理一些棘手的低级故障，因此通常也可以更轻松地解决和处理其余的故障。</p>
<h2 id="不可靠的网络"><a href="#不可靠的网络" class="headerlink" title="不可靠的网络"></a>不可靠的网络</h2><p>正如在第二部分的介绍中所讨论的，我们在本书中关注的分布式系统是shared-nothing系统：即一堆机器通过网络连接。网络是这些机器可以通信的唯一方式。我们假设每台机器有自己的内存和磁盘，一台机器无法访问另一台机器的内存或磁盘（除了通过网络向服务发出请求外）。</p>
<p>shared-nothing并不是构建系统的唯一方式，但它已经成为构建互联网服务的主要方式，原因有几个：它相对便宜，因为它不需要特殊的硬件，可以利用商品化的云计算服务， 可以通过跨多个地理分布的数据中心进行冗余来实现高可靠性。</p>
<p>互联网和数据中心的大部分内部网络（通常是以太网）都是异步分组网络。 在这种网络中，一个节点可以向另一个节点发送一个消息（一个数据包），但是网络不能保证它何时到达，甚至是否能到达。如果你发送请求并期待响应，很多事情可能会出错（其中一些如图8-1所示）：</p>
<ol>
<li>你的请求可能已经丢失（可能是某人拔掉了网线）。</li>
<li>你的请求可能正在队列中等待，稍后会被发送（也许网络或收件人过载）。</li>
<li>远程节点可能失败（可能崩溃或掉电）。</li>
<li>远程节点可能暂时停止了响应（可能正在经历长时间的垃圾回收暂停;请参阅第295页上的“进程暂停”），但稍后它会再次开始响应。</li>
<li>远程节点可能处理了你的请求，但响应在网络上丢失了（可能是网络交换机配置错误）。</li>
<li>远程节点可能已经处理了你的请求，但响应已经延迟并且将稍后发送（可能是网络或你自己的机器过载）。</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/1752522-5d73a60621d1b78f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8-1 如果你发送了一个请求没有得到响应，无法区分是发生了以下哪种情况：（a）请求丢失了（b）对方节点宕机（c）响应丢失了"></p>
<p>发送方甚至无法知道数据包是否已经被发送：唯一的选择是让接收方发送响应消息，这可能会丢失或延迟。这些问题在异步网络中难以区分：你拥有的唯一信息是你尚未收到响应。如果你向另一个节点发送请求并且未收到回复，也无法知道是什么原因。</p>
<p>处理该问题通常的方法是使用超时：一段时间后就放弃等待并假设响应不会送达。但是，当发生超时时，你仍然不知道远程节点是否收到了你的请求（如果请求仍然在某个地方排队，它仍然可能会被传送给接收方，即使发送方已经放弃了）。</p>
<h3 id="网络故障实践"><a href="#网络故障实践" class="headerlink" title="网络故障实践"></a>网络故障实践</h3><p>几十年来我们一直在建立计算机网络——人们可能希望现在我们已经知道了如何使它们变得可靠。但是，似乎我们还没有成功。</p>
<p>有一些系统的研究和大量的轶事证据表明，即使在由公司运营的数据中心那样的受控环境中，网络问题也可能非常普遍。在一家中等规模的数据中心进行的一项研究发现，每个月大约发生12次网络故障，其中一半单台机器断开连接，一半整个机架断开连接。另一项研究测量了架顶式交换机，汇聚交换机和负载平衡器等组件的故障率，发现添加冗余网络设备不会像你所希望的那样减少故障，因为它不能防范人为错误（例如，配置错误的交换机），这是造成网络中断的主要原因。</p>
<p>公共云服务（如EC2）因频繁出现短暂的网络故障而臭名昭着，管理良好的专用数据中心网络会比较稳定。尽管如此，没有人能够避免网络问题的干扰：例如，交换机软件升级期间的问题可能会触发网络拓扑重新配置，在此期间网络数据包可能会延迟超过一分钟。鲨鱼可能咬住海底电缆并损坏它们。其他令人惊讶的故障包括网络接口有时会丢弃所有入站数据包，但成功发送出站数据包。因此，仅仅因为网络链接在一个方向上正常工作并不能保证它也在相反的方向也正常工作。</p>
<blockquote>
<p><strong>网络分区</strong><br>当网络的一部分由于网络故障而与其余部分断开时，有时称为网络分区或网络分割。 在本书中，我们使用更一般的术语网络故障，以避免与如第6章所述的存储系统的分区（碎片）混淆。</p>
</blockquote>
<p>即使你的环境中很少发生网络故障，但可能发生故障的事实意味着你的软件需要能够处理它们。网络上的通信总有可能会失败，这是没有办法的。</p>
<p>如果网络故障的错误处理未经过定义和测试，则可能会发生反复无常的错误：例如，即使网络恢复，群集也可能会死锁并永久无法为请求提供服务，甚至可能会删除你的所有数据。如果软件不在受控的情况下，可能会有意想不到的行为。</p>
<p>处理网络故障并不一定意味着容忍它们：如果你的网络通常相当可靠，则有效的方法可能是在网络遇到问题时向用户简单显示错误消息。但是，你需要知道你的软件会对网络问题做出什么反应，并确保系统能够从中恢复。刻意地触发网络问题并测试系统响应是有意义的（这是Chaos Monkey背后的想法;请参阅第6页的“可靠性”）。</p>
<h3 id="检测故障"><a href="#检测故障" class="headerlink" title="检测故障"></a>检测故障</h3><p>很多系统都需要自动检测故障节点。 例如：</p>
<ul>
<li>负载平衡器需要停止向死节点发送请求。</li>
<li>在single-leader复制的分布式数据库中，如果leader发生故障，需要提升一个follower成为新的leader（参阅第152页的“处理节点故障”）。</li>
</ul>
<p>不幸的是，网络的不确定性使得判断一个节点是否正常工作变得很困难。在某些特定情况下，你可能会收到一些反馈信息，以明确告诉你某些组件不正常工作：</p>
<ul>
<li><p>如果你可以到达运行节点的机器，但没有进程正在监听目标端口（例如，因为进程崩溃），操作系统将通过发送RST或FIN数据包来帮助关闭或拒绝TCP连接。但是，如果节点在处理请求过程中崩溃，你将无法知道远程节点实际已经处理了多少数据。</p>
</li>
<li><p>如果节点进程崩溃（或被管理员杀死）但节点的操作系统仍在运行，脚本可以通知其他节点有关崩溃的信息，以便另一个节点可以快速接管而无需等待超时。</p>
</li>
<li><p>如果你有权限访问数据中心网络交换机的管理界面，则可以查询它们以检测硬件级别的链路故障（例如，远程机器是否关闭电源）。如果你通过互联网连接，或者你处于共享数据中心但无权限无法访问交换机，或者由于网络问题而无法访问管理界面，则无法使用该选项。</p>
</li>
<li><p>如果路由器确定你尝试连接的IP地址无法访问，它可能会用ICMP目标无法访问的数据包回复你。但是，路由器不具备神奇的故障检测能力——它受到与网络其他组成部分相同的限制。</p>
</li>
<li><p>远程节点宕机的快速反馈很有用，但你不能指望它。即使TCP确认数据包已发送，应用程序在处理数据之前可能已崩溃。如果你想确认一个请求是成功的，需要在应用程序本身积极响应。</p>
</li>
<li><p>相反，如果出现问题，你可能会在某个层次上得到错误响应，但通常你必须假设根本得不到响应。你可以重试几次（TCP重试是透明的，但您你可以在应用程序级别重试），等待超时过去，并且如果在超时范围内没有收到响应，才最终宣布节点失效。</p>
</li>
</ul>
<h3 id="超时和无限延迟"><a href="#超时和无限延迟" class="headerlink" title="超时和无限延迟"></a>超时和无限延迟</h3><p>如果超时是检测故障的唯一可靠方法，那么超时时间应该多长？不幸的是没有简单的答案。</p>
<p>超时时间长意味着需要长时间等待才能宣告一个节点死亡（并且在此期间，用户可能不得不等待或看到错误消息）。超时时间短可以更快地检测到故障，但是会带来更高的误判的风险，例如节点可能只是暂时变慢（比如由于工作或网络负载高峰）就被误判为死亡。</p>
<p>过早地宣告一个节点已经死亡是有问题的：如果节点实际上处于活动状态并且正在执行一些操作（例如，发送电子邮件），然后另一个节点接管，那么该操作最终可能会执行两次。我们将在第300页的“知识，真相和谎言”以及第9章和第11章中更详细地讨论该问题。</p>
<p>当一个节点被宣告死亡时，其职责需要转移到其他节点，这会给其他节点和网络带来额外的负担。如果系统已经处于高负载状态，过早宣告节点死亡会使问题变得更糟。特别地，可能节点实际上并未死亡，只是由于负载太高而响应缓慢。将其负载转移到其他节点可能会导致瀑布式的失败（在极端情况下，所有节点都宣告对方死亡，然后一切都停止工作）。</p>
<p>假设一个虚拟系统的网络可以保证数据包的最大延迟——每个数据包要么在一段时间内送达，要么丢失，但时间永远不会超过d。此外，假设可以保证非故障节点在总是在一段时间r内处理请求。在这种情况下，可以保证每个成功的请求都会在2d + r的时间内收到响应，并且如果在此时间内没有收到响应，则知道网络或远程节点不工作。如果情况真如上述那样，2d + r将是一个合理的超时时间。</p>
<p>不幸的是，我们所使用的大多数系统都没有这些保证：异步网络具有无限的延迟（即它们尽可能快地发送数据包，但数据包到达所需的时间没有上限） ，并且大多数服务器实现不能保证它们可以在特定时间内处理请求（请参阅“响应时间保证”（第298页））。对于故障检测，大部分时间内快是不够的：如果超时时间较短，则往返时间只需要瞬间上升就会导致系统失去平衡。</p>
<h4 id="网络拥塞和排队"><a href="#网络拥塞和排队" class="headerlink" title="网络拥塞和排队"></a>网络拥塞和排队</h4><p>在开车汽车时，由于交通堵塞，在路上花的时间往往不尽相同。类似的，计算机网络上的数据包延迟的可变性通常也是由于排队：</p>
<ul>
<li>如果多个不同的节点同时尝试向相同的目的地发送数据包，则网络交换机必须将它们排队并将它们逐个送入目标网络链路（如图8-2所示）。在繁忙的网络链路上，数据包可能需要等待一段时间才能获得一个槽（这称为网络拥塞）。如果传入的数据太多以至于交换机队列填满，数据包将被丢弃，因此需要重新发送数据包，即使网络运行良好。</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/1752522-24120c1100abacf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8-2"></p>
<ul>
<li><p>当数据包到达目标机器时，如果所有CPU内核当前都处于繁忙状态，则来自网络的传入请求将被操作系统排队，直到应用程序准备好处理它为止。根据机器的负载情况，这可能需要一段任意长度的时间。</p>
</li>
<li><p>在虚拟化环境中，当另一个虚拟机正在使用CPU核的时候，正在运行的操作系统通常会暂停几十毫秒。在此期间，虚拟机无法使用网络中的任何数据，因此输入数据被虚拟机监视器排队（缓冲），这进一步增加了网络延迟的可变性。</p>
</li>
<li><p>TCP执行流量控制（也称为拥塞避免或背压），节点限制自己的发送速率以避免网络链路或接收节点过载。这意味着甚至在数据进入网络之前，发送者也会让数据排队。</p>
</li>
</ul>
<p>此外，如果TCP在某个超时时间内未得到确认（根据观察的往返时间计算），则认为数据包丢失，并且丢失的数据包将自动重新发送。尽管应用程序没有看到数据包丢失和重传，但它确实会看到由此产生的延迟（等待超时过期，然后等待重传的数据包得到确认）。</p>
<p><strong>TCP与UDP</strong></p>
<p>一些对延迟敏感的应用程序（如视频会议和IP语音（VoIP））使用UDP而不是TCP。这是延迟的可靠性和可变性之间的折衷：由于UDP不执行流量控制并且不重传丢失的数据包，所以它避免了一些可变网络延迟的原因（尽管它仍然易受交换机队列和调度延迟的影响）。</p>
<p>在延迟数据毫无价值的情况下，UDP是一个不错的选择。例如，在VoIP电话呼叫中，可能没有足够的时间在其数据将在扬声器上播放之前重新传输丢失的数据包。在这种情况下，重传数据包没有意义——应用程序必须用无声填充丢失数据包的时隙（导致声音短暂中断），然后在数据流中继续。相反，重试发生在人类层面。（“你能再说一遍吗？刚刚没声音了。”）</p>
<p>所有这些因素都会造成网络延迟的变化。当系统接近其最大容量时，排队延迟的范围很大：拥有大量备用容量的系统可以轻松消化队列，而在高度使用的系统中，很快就会排起长队列。</p>
<p>在公有云和多租户数据中心中，资源被许多客户共享：网络链路和交换机，甚至每台计算机的网络接口和CPU（在虚拟机上运行时）都是共享的。批处理工作负载（如MapReduce）（请参阅第10章）可以轻松地使网络链接饱和。由于你无法控制或了解其他客户对共享资源的使用情况，如果你身边的某个人正在使用大量资源，网络延迟可能会变化无常。</p>
<p>在这样的环境中，你只能通过实验来选择超时时间：在一个延长的周期中测试和多台机器的网络往返时间分布，以确定延迟可变性的期望。然后，考虑应用程序的特性，你可以在故障检测延迟与过早超时风险之间确定一个适当的折衷。</p>
<p>更好的是，系统不是使用配置的常量超时，而是能够连续测量响应时间及其变化（抖动），并根据观察到的响应时间分布自动调整超时。这可以用Phi Accrual故障检测器完成，该检测器在Akka和Cassandra中被使用。TCP重传超时运行原理类似。</p>
<h4 id="同步与异步网络"><a href="#同步与异步网络" class="headerlink" title="同步与异步网络"></a>同步与异步网络</h4><p>如果我们可以依赖网络来传递具有固定最大延迟的数据包，而不是丢弃数据包，那么分布式系统就会简单得多。为什么我们不能在硬件级别解决这个问题，并使网络可靠，以便软件不必考虑这些问题？</p>
<p>为了回答这个问题，将数据中心网络与非常可靠的传统固定电话网络（非蜂窝，非VoIP）进行比较是很有趣的：延迟音频帧和掉话是非常罕见的。电话呼叫需要始终较低的端到端延迟和足够的带宽来传输语音的音频样本。在计算机网络中拥有类似的可靠性和可预测性不是很好吗？</p>
<p>当你通过电话网络拨打电话时，它会建立一条线路：沿着两个呼叫者之间的整个路由为呼叫分配固定的有保证的带宽量。该线路保持占用，直到通话结束。例如，ISDN网络以每秒4000帧的固定速率运行。呼叫建立后，每个帧内（每个方向）分配16位空间。因此，在通话期间，每一方都保证能够每250微秒发送一个精确的16位音频数据。</p>
<p>这种网络是同步的：即使数据通过多个路由器，也不会受到排队的影响，因为呼叫的16位空间已经在网络的下一跳中保留下来了。而且由于没有排队，网络的最大端到端延迟是固定的。我们称之为有限的延迟。</p>
<p><strong>我们不能简单地使网络延迟可预测吗？</strong></p>
<p>请注意，电话网络中的线路与TCP连接非常不同：线路是固定数量的预留带宽，在线路建立时没有人可以使用，而TCP连接的数据包有机会使用任何可用的网络带宽。你可以为TCP提供可变大小的数据块（例如电子邮件或网页），TCP会尽可能在最短的时间内传输它。当TCP连接空闲时，不使用任何带宽。如果数据中心网络和互联网是线路交换网络，那么建立线路后可以确保最大往返时间。然而，它们并不是：以太网和IP是分组交换协议，它们受到排队的影响，从而导致网络无限延迟。这些协议没有线路的概念。</p>
<p>为什么数据中心网络和互联网使用分组交换？答案是，它们针对突发流量进行了优化。一个电路适用于音频或视频通话，在通话期间需要每秒传送相当恒定的比特数。另一方面，请求网页，发送电子邮件或传输文件没有任何特定的带宽需求，我们只是希望它尽快完成。</p>
<p>如果你想通过线路传输文件，则必须猜测带宽分配。如果你猜的太低，传输速度会不必要的太慢，导致网络容量没有使用。如果你猜得太高，线路就无法建立（因为如果无法保证其带宽分配，网络不能建立线路）。因此，使用线路进行突发数据传输会浪费网络容量，并导致传输不必要的缓慢。相比之下，TCP会动态调整数据传输速率以适应可用的网络容量。</p>
<p>已经有一些尝试构建支持线路交换和分组交换的混合网络，例如ATM。例如InfiniBand：它实现了链路层的端到端流量控制，减少了网络排队的概率，尽管它仍然可能因链路拥塞而遭受延迟。通过谨慎使用服务质量（QoS，数据包的优先级和调度）和准入控制（限速发送器），可以仿真分组网络上的线路交换，或提供统计上有界的延迟。</p>
<p><strong>延迟和资源使用</strong></p>
<p>更一般地说，你可以将可变延迟视为动态资源分区的结果。</p>
<p>假设两台电话交换机之间有一条线路，可以同时进行10,000个呼叫。通过此线路切换的每个电路都占用其中一个呼叫插槽。因此，你可以将线路视为可由多达10,000个并发用户共享的资源。资源以静态方式分配：即使你现在是线路上唯一的电话，并且所有其他9,999个插槽都未使用，你的线路仍将分配跟线路被充分利用时相同的固定数量的带宽。</p>
<p>相比之下，互联网动态分享网络带宽。发送者竞争以尽可能快地通过网络获得它们的分组，并且网络交换机决定发送哪个分组（即，带宽分配）。这种方法有排队的缺点，但优点是它最大限度地利用了线路。线路成本固定，所以如果你更充分地利用它，通过该线路发送的每个字节都更便宜。</p>
<p>CPU也会出现类似的情况：如果你在多个线程之间动态共享每个CPU核，则有时候一个线程必须在另一个线程运行时等待操作系统的运行队列，因此线程可能被暂停不同的时间长度。但是，与为每个线程分配静态数量的CPU周期相比，这会更充分地利用硬件（请参阅第298页的“响应时间保证”）。更高的硬件利用率也是使用虚拟机的重要动机。</p>
<p>如果资源是静态分区的（例如，专用硬件和专用带宽分配），则在某些环境中可实现延迟保证。但是，这是以降低利用率为代价的。换句话说，它是更昂贵的。另一方面，动态资源分配下的多租户提供了更好的利用率，所以它更便宜，但它具有可变延迟的缺点。</p>
<p>网络中的可变延迟不是自然规律，而仅仅是成本/收益折衷的结果。</p>
<p>但是，此类服务质量目前尚未在多租户数据中心和公有云或通过互联网进行通信时可用。当前部署的技术无法让我们对网络的延迟或可靠性做出任何保证：我们必须假定网络拥塞，排队和无限延迟可能发生。因此，超时时间没有“正确”的值，需要通过实验确定。</p>
<p><strong>未完待续。。。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PhxPaxos源码分析——Paxos算法实现]]></title>
      <url>http://linbingdong.com/2017/11/21/PhxPaxos%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>这篇主要来分析Paxos算法实现的部分，我想这应该也是读者最感兴趣的。在看这篇文章之前，如果之前对Paxos算法没有了解的童鞋可以看下这篇文章：<a href="http://linbingdong.com/2017/04/17/分布式系列文章——Paxos算法原理与推导/">Paxos算法原理与推导</a>，相信了解Paxos算法后再来通过源码看算法实现应该会很酸爽。</p>
<a id="more"></a>

<p>Paxos算法中最重要的两个角色是<strong>Proposer</strong>和<strong>Acceptor</strong>。当然Leaner也很重要，特别是在PhxPaxos的实现中，Leaner具有重要的功能。但是因为《Paxos Made Simple》论文中主要还是Proposer和Acceptor，因此这篇文章还是以这两个角色为主，通过源码来回顾论文中Paxos算法的过程，同时也看看工程实现和论文的描述有什么区别。</p>
<p>这里先贴出Paxos算法的过程，方便大家对照接下来的工程实现。</p>
<ul>
<li><p><strong>Prepare阶段：</strong></p>
<p>(a) Proposer选择一个提案编号N，然后向半数以上的Acceptor发送编号为N的Prepare请求。</p>
<p>(b) 如果一个Acceptor收到一个编号为N的Prepare请求，且N大于该Acceptor已经响应过的所有Prepare请求的编号，那么它就会将它已经接受过的编号最大的提案（如果有的话）作为响应反馈给Proposer，同时该Acceptor承诺不再接受任何编号小于N的提案。</p>
</li>
<li><p><strong>Accept阶段：</strong></p>
<p>(a) 如果Proposer收到半数以上Acceptor对其发出的编号为N的Prepare请求的响应，那么它就会发送一个针对[N,V]提案的Accept请求给半数以上的Acceptor。注意：V就是收到的响应中编号最大的提案的value，如果响应中不包含任何提案，那么V就由Proposer自己决定。</p>
<p>(b) 如果Acceptor收到一个针对编号为N的提案的Accept请求，只要该Acceptor没有对编号大于N的Prepare请求做出过响应，它就接受该提案。</p>
</li>
</ul>
<h2 id="Proposer"><a href="#Proposer" class="headerlink" title="Proposer"></a>Proposer</h2><p>因为Proposer需要维护或者说记录一些状态信息，包括自己的提案编号ProposalID、提出的Value、其他Proposer提出的最大的提案编号HighestOtherProposalID、Acceptor已经接受过的编号最大的提案的值等，因此这里专门有一个ProposerState类来管理这些信息。同样Acceptor也有一个AcceptorState类来管理Acceptor相关的信息。</p>
<p>先来看下ProposerState的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> ProposerState</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProposerState(<span class="keyword">const</span> Config * poConfig);</span><br><span class="line">    ~ProposerState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStartProposalID</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> llProposalID)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NewPrepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddPreAcceptValue</span><span class="params">(<span class="keyword">const</span> BallotNumber &amp; oOtherPreAcceptBallot, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sOtherPreAcceptValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> uint64_t <span class="title">GetProposalID</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp; <span class="title">GetValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sValue)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetOtherProposalID</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> llOtherProposalID)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ResetHighestOtherPreAcceptBallot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">uint64_t</span> m_llProposalID;</span><br><span class="line">    <span class="keyword">uint64_t</span> m_llHighestOtherProposalID;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> m_sValue;</span><br><span class="line"></span><br><span class="line">    BallotNumber m_oHighestOtherPreAcceptBallot;</span><br><span class="line"></span><br><span class="line">    Config * m_poConfig;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>基本都是对这些信息的set跟get，很容易理解。直接来看Proposer类的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Proposer : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Proposer(</span><br><span class="line">            <span class="keyword">const</span> Config * poConfig, </span><br><span class="line">            <span class="keyword">const</span> MsgTransport * poMsgTransport,</span><br><span class="line">            <span class="keyword">const</span> Instance * poInstance,</span><br><span class="line">            <span class="keyword">const</span> Learner * poLearner,</span><br><span class="line">            <span class="keyword">const</span> IOLoop * poIOLoop);</span><br><span class="line">    ~Proposer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置起始的ProposalID</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetStartProposalID</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> llProposalID)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化新的一轮Paxos过程，每一轮叫做一个Paxos Instance，每一轮确定一个值</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InitForNewPaxosInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Proposer发起提案的入口函数。参数sValue即Proposer自己想提出的value，当然最终提出的value不一定是这个，需要根据Acceptor再Prepare阶段的回复来确定</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NewValue</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sValue)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断Proposer是否处于Prepare阶段或Accept阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsWorking</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对应Paxos算法中的Prepare阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Prepare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bool</span> bNeedNewBallot = <span class="literal">true</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Prepare阶段等待Acceptor的回复，统计投票并确定是否进入Accept阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPrepareReply</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Prepare阶段被拒绝</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnExpiredPrepareReply</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对应Paxos算法中的Accept阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Accept阶段等待Acceptor的回复，统计投票并确定值(Value)是否被选定(Chosen)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAcceptReply</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Accept阶段被拒绝</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnExpiredAcceptReply</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Prepare阶段超时</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPrepareTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Accept阶段超时</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAcceptTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出Prepare阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ExitPrepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出Accept阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ExitAccept</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消跳过Prepare阶段，也就是必须先Prepare阶段再Accept阶段</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CancelSkipPrepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddPrepareTimer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iTimeoutMs = <span class="number">0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddAcceptTimer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iTimeoutMs = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProposerState m_oProposerState;</span><br><span class="line">    MsgCounter m_oMsgCounter;</span><br><span class="line">    Learner * m_poLearner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> m_bIsPreparing;</span><br><span class="line">    <span class="keyword">bool</span> m_bIsAccepting;</span><br><span class="line"></span><br><span class="line">    IOLoop * m_poIOLoop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> m_iPrepareTimerID;</span><br><span class="line">    <span class="keyword">int</span> m_iLastPrepareTimeoutMs;</span><br><span class="line">    <span class="keyword">uint32_t</span> m_iAcceptTimerID;</span><br><span class="line">    <span class="keyword">int</span> m_iLastAcceptTimeoutMs;</span><br><span class="line">    <span class="keyword">uint64_t</span> m_llTimeoutInstanceID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> m_bCanSkipPrepare;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> m_bWasRejectBySomeone;</span><br><span class="line"></span><br><span class="line">    TimeStat m_oTimeStat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="NewValue"><a href="#NewValue" class="headerlink" title="NewValue"></a>NewValue</h3><p>下面就从NewValue方法入手：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Proposer :: NewValue(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sValue)</span><br><span class="line">&#123;</span><br><span class="line">    BP-&gt;GetProposerBP()-&gt;NewProposal(sValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_oProposerState.GetValue().size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_oProposerState.SetValue(sValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_iLastPrepareTimeoutMs = START_PREPARE_TIMEOUTMS;</span><br><span class="line">    m_iLastAcceptTimeoutMs = START_ACCEPT_TIMEOUTMS;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果可以跳过Prepare阶段并且没有被Acceptor拒绝过，则直接进入Accept阶段</span></span><br><span class="line">    <span class="keyword">if</span> (m_bCanSkipPrepare &amp;&amp; !m_bWasRejectBySomeone)</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;NewProposalSkipPrepare();</span><br><span class="line"></span><br><span class="line">        PLGHead(<span class="string">"skip prepare, directly start accept"</span>);</span><br><span class="line">        Accept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//否则先进入Prepare阶段</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//if not reject by someone, no need to increase ballot</span></span><br><span class="line">        Prepare(m_bWasRejectBySomeone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以直接进入Accept阶段的前提是该Proposer已经发起过Prepare请求且得到半数以上的同意（即通过了Prepare阶段），并且没有被任何Acceptor拒绝（说明没有Acceptor响应过比该Proposer的提案编号更高的提案）。那么，什么情况下可以跳过Prepare请求呢，这里应该对应的是选出一个master的情况？相当于raft里的leader？</p>
<h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><p>接下来直接看Prepare阶段：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Proposer :: Prepare(<span class="keyword">const</span> <span class="keyword">bool</span> bNeedNewBallot)</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START Now.InstanceID %lu MyNodeID %lu State.ProposalID %lu State.ValueLen %zu"</span>,</span><br><span class="line">            GetInstanceID(), m_poConfig-&gt;GetMyNodeID(), m_oProposerState.GetProposalID(),</span><br><span class="line">            m_oProposerState.GetValue().size());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetProposerBP()-&gt;Prepare();</span><br><span class="line">    m_oTimeStat.Point();</span><br><span class="line">    </span><br><span class="line">    ExitAccept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表明Proposer正处于Prepare阶段</span></span><br><span class="line">    m_bIsPreparing = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不能跳过Prepare阶段</span></span><br><span class="line">    m_bCanSkipPrepare = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目前还未被任意一个Acceptor拒绝</span></span><br><span class="line">    m_bWasRejectBySomeone = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    m_oProposerState.ResetHighestOtherPreAcceptBallot();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果需要产生新的投票，就调用NewPrepare产生新的ProposalID，新的ProposalID为当前已知的最大ProposalID+1</span></span><br><span class="line">    <span class="keyword">if</span> (bNeedNewBallot)</span><br><span class="line">    &#123;</span><br><span class="line">        m_oProposerState.NewPrepare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PaxosMsg oPaxosMsg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Prepare消息的各个字段</span></span><br><span class="line">    oPaxosMsg.set_msgtype(MsgType_PaxosPrepare);</span><br><span class="line">    oPaxosMsg.set_instanceid(GetInstanceID());</span><br><span class="line">    oPaxosMsg.set_nodeid(m_poConfig-&gt;GetMyNodeID());</span><br><span class="line">    oPaxosMsg.set_proposalid(m_oProposerState.GetProposalID());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MsgCount是专门用来统计票数的，根据计算的结果确定是否通过Prepare阶段或者Accept阶段</span></span><br><span class="line">    m_oMsgCounter.StartNewRound();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Prepare超时定时器</span></span><br><span class="line">    AddPrepareTimer();</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END OK"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Prepare消息发送到各个节点</span></span><br><span class="line">    BroadcastMessage(oPaxosMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Proposer在Prepare阶段主要做了这么几件事：</p>
<ol>
<li>重置各个状态位，表明当前正处于Prepare阶段。</li>
<li>获取提案编号ProposalID。当bNeedNewBallot为true时需要将ProposalID+1。否则沿用之前的ProposalID。bNeedNewBallot是在NewValue中调用Prepare方法时传入的m_bWasRejectBySomeone参数。也就是如果之前没有被任何Acceptor拒绝（说明还没有明确出现更大的ProposalID），则不需要获取新的ProposalID。对应的场景是Prepare阶段超时了，在超时时间内没有收到过半Acceptor同意的消息，因此需要重新执行Prepare阶段，此时只需要沿用原来的ProposalID即可。</li>
<li>发送Prepare请求。该请求PaxosMsg是Protocol Buffer定义的一个message，包含MsgType、InstanceID、NodeID、ProposalID等字段。在BroadcastMessage(oPaxosMsg)中还会将oPaxosMsg序列化后才发送出去。</li>
</ol>
<p>PaxosMsg的定义如下，Prepare和Accept阶段Proposer和Acceptor的所有消息都用PaxosMsg来表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">message PaxosMsg</span><br><span class="line">&#123;</span><br><span class="line">	required int32 MsgType = <span class="number">1</span>;</span><br><span class="line">	optional uint64 InstanceID = <span class="number">2</span>;</span><br><span class="line">	optional uint64 NodeID = <span class="number">3</span>;</span><br><span class="line">	optional uint64 ProposalID = <span class="number">4</span>;</span><br><span class="line">	optional uint64 ProposalNodeID = <span class="number">5</span>;</span><br><span class="line">	optional bytes Value = <span class="number">6</span>;</span><br><span class="line">	optional uint64 PreAcceptID = <span class="number">7</span>;</span><br><span class="line">	optional uint64 PreAcceptNodeID = <span class="number">8</span>;</span><br><span class="line">	optional uint64 RejectByPromiseID = <span class="number">9</span>;</span><br><span class="line">	optional uint64 NowInstanceID = <span class="number">10</span>;</span><br><span class="line">	optional uint64 MinChosenInstanceID = <span class="number">11</span>;</span><br><span class="line">	optional uint32 LastChecksum = <span class="number">12</span>;</span><br><span class="line">	optional uint32 Flag = <span class="number">13</span>;</span><br><span class="line">	optional bytes SystemVariables = <span class="number">14</span>;</span><br><span class="line">	optional bytes MasterVariables = <span class="number">15</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="OnPrepareReply"><a href="#OnPrepareReply" class="headerlink" title="OnPrepareReply"></a>OnPrepareReply</h3><p>Proposer发出Prepare请求后就开始等待Acceptor的回复。当Proposer所在节点收到PaxosPrepareReply消息后，就会调用Proposer的OnPrepareReply(oPaxosMsg)，其中oPaxosMsg是Acceptor回复的消息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Proposer :: OnPrepareReply(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START Msg.ProposalID %lu State.ProposalID %lu Msg.from_nodeid %lu RejectByPromiseID %lu"</span>,</span><br><span class="line">            oPaxosMsg.proposalid(), m_oProposerState.GetProposalID(), </span><br><span class="line">            oPaxosMsg.nodeid(), oPaxosMsg.rejectbypromiseid());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetProposerBP()-&gt;OnPrepareReply();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果Proposer不是在Prepare阶段，则忽略该消息</span></span><br><span class="line">    <span class="keyword">if</span> (!m_bIsPreparing)</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;OnPrepareReplyButNotPreparing();</span><br><span class="line">        <span class="comment">//PLGErr("Not preparing, skip this msg");</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果ProposalID不同，也忽略</span></span><br><span class="line">    <span class="keyword">if</span> (oPaxosMsg.proposalid() != m_oProposerState.GetProposalID())</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;OnPrepareReplyNotSameProposalIDMsg();</span><br><span class="line">        <span class="comment">//PLGErr("ProposalID not same, skip this msg");</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入一个收到的消息，用于MsgCounter统计</span></span><br><span class="line">    m_oMsgCounter.AddReceive(oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果该消息不是拒绝，即Acceptor同意本次Prepare请求</span></span><br><span class="line">    <span class="keyword">if</span> (oPaxosMsg.rejectbypromiseid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BallotNumber oBallot(oPaxosMsg.preacceptid(), oPaxosMsg.preacceptnodeid());</span><br><span class="line">        PLGDebug(<span class="string">"[Promise] PreAcceptedID %lu PreAcceptedNodeID %lu ValueSize %zu"</span>, </span><br><span class="line">                oPaxosMsg.preacceptid(), oPaxosMsg.preacceptnodeid(), oPaxosMsg.value().size());</span><br><span class="line">        <span class="comment">//加入MsgCounter用于统计投票</span></span><br><span class="line">        m_oMsgCounter.AddPromiseOrAccept(oPaxosMsg.nodeid());</span><br><span class="line">        <span class="comment">//将Acceptor返回的它接受过的编号最大的提案记录下来（如果有的话），用于确定Accept阶段的Value</span></span><br><span class="line">        m_oProposerState.AddPreAcceptValue(oBallot, oPaxosMsg.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Acceptor拒绝了Prepare请求</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PLGDebug(<span class="string">"[Reject] RejectByPromiseID %lu"</span>, oPaxosMsg.rejectbypromiseid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同样也要记录到MsgCounter用于统计投票</span></span><br><span class="line">        m_oMsgCounter.AddReject(oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录被Acceptor拒绝过，待会儿如果重新进入Prepare阶段的话就需要获取更大的ProposalID</span></span><br><span class="line">        m_bWasRejectBySomeone = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录下别的Proposer提出的更大的ProposalID。这样重新发起Prepare请求时才知道需要用多大的ProposalID</span></span><br><span class="line">        m_oProposerState.SetOtherProposalID(oPaxosMsg.rejectbypromiseid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//本次Prepare请求通过了。也就是得到了半数以上Acceptor的同意</span></span><br><span class="line">    <span class="keyword">if</span> (m_oMsgCounter.IsPassedOnThisRound())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iUseTimeMs = m_oTimeStat.Point();</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;PreparePass(iUseTimeMs);</span><br><span class="line">        PLGImp(<span class="string">"[Pass] start accept, usetime %dms"</span>, iUseTimeMs);</span><br><span class="line">        m_bCanSkipPrepare = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进入Accept阶段</span></span><br><span class="line">        Accept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本次Prepare请求没有通过</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_oMsgCounter.IsRejectedOnThisRound()</span><br><span class="line">            || m_oMsgCounter.IsAllReceiveOnThisRound())</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;PrepareNotPass();</span><br><span class="line">        PLGImp(<span class="string">"[Not Pass] wait 30ms and restart prepare"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//随机等待一段时间后重新发起Prepare请求</span></span><br><span class="line">        AddPrepareTimer(OtherUtils::FastRand() % <span class="number">30</span> + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该阶段Proposer主要做了以下事情：</p>
<ol>
<li><p>判断消息是否有效。包括ProposalID是否相同，自身是否处于Prepare阶段等。因为网络是不可靠的，有些消息可能延迟很久，等收到的时候已经不需要了，所以需要做这些判断。</p>
</li>
<li><p>将收到的消息加入MsgCounter用于统计。</p>
</li>
<li><p>根据收到的消息更新自身状态。包括Acceptor承诺过的ProposalID，以及Acceptor接受过的编号最大的提案等。</p>
</li>
<li><p>根据MsgCounter统计的Acceptor投票结果决定是进入Acceptor阶段还是重新发起Prepare请求。这里如果判断需要重新发起Prepare请求的话，也不是立即进行，而是等待一段随机的时间，这样做的好处是减少不同Proposer之间的冲突，采取的策略跟raft中leader选举冲突时在一段随机的选举超时时间后重新发起选举的做法类似。</p>
</li>
</ol>
<p>注：这里跟Paxos算法中提案编号对应的并不是ProposalID，而是BallotNumber。BallotNumber由ProposalID和NodeID组成。还实现了运算符重载。如果ProposalID大，则BallotNumber（即提案编号）大。在ProposalID相同的情况下，NodeID大的BallotNumber大。</p>
<h3 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h3><p>接下来Proposer就进入Accept阶段：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Proposer :: Accept()</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START ProposalID %lu ValueSize %zu ValueLen %zu"</span>, </span><br><span class="line">            m_oProposerState.GetProposalID(), m_oProposerState.GetValue().size(), m_oProposerState.GetValue().size());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetProposerBP()-&gt;Accept();</span><br><span class="line">    m_oTimeStat.Point();</span><br><span class="line">    </span><br><span class="line">    ExitPrepare();</span><br><span class="line">    m_bIsAccepting = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置Accept请求的消息内容</span></span><br><span class="line">    PaxosMsg oPaxosMsg;</span><br><span class="line">    oPaxosMsg.set_msgtype(MsgType_PaxosAccept);</span><br><span class="line">    oPaxosMsg.set_instanceid(GetInstanceID());</span><br><span class="line">    oPaxosMsg.set_nodeid(m_poConfig-&gt;GetMyNodeID());</span><br><span class="line">    oPaxosMsg.set_proposalid(m_oProposerState.GetProposalID());</span><br><span class="line">    oPaxosMsg.set_value(m_oProposerState.GetValue());</span><br><span class="line">    oPaxosMsg.set_lastchecksum(GetLastChecksum());</span><br><span class="line"></span><br><span class="line">    m_oMsgCounter.StartNewRound();</span><br><span class="line"></span><br><span class="line">    AddAcceptTimer();</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发给各个节点</span></span><br><span class="line">    BroadcastMessage(oPaxosMsg, BroadcastMessage_Type_RunSelf_Final);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Accept请求中PaxosMsg里的Value是这样确定的：如果Prepare阶段有Acceptor的回复中带有提案值，则该Value为所有的Acceptor的回复中，编号最大的提案的值。否则就是Proposer在最初调用NewValue时传入的值。</p>
<h3 id="OnAcceptReply"><a href="#OnAcceptReply" class="headerlink" title="OnAcceptReply"></a>OnAcceptReply</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Proposer :: OnAcceptReply(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START Msg.ProposalID %lu State.ProposalID %lu Msg.from_nodeid %lu RejectByPromiseID %lu"</span>,</span><br><span class="line">            oPaxosMsg.proposalid(), m_oProposerState.GetProposalID(), </span><br><span class="line">            oPaxosMsg.nodeid(), oPaxosMsg.rejectbypromiseid());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetProposerBP()-&gt;OnAcceptReply();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_bIsAccepting)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PLGErr("Not proposing, skip this msg");</span></span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;OnAcceptReplyButNotAccepting();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oPaxosMsg.proposalid() != m_oProposerState.GetProposalID())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PLGErr("ProposalID not same, skip this msg");</span></span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;OnAcceptReplyNotSameProposalIDMsg();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_oMsgCounter.AddReceive(oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oPaxosMsg.rejectbypromiseid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLGDebug(<span class="string">"[Accept]"</span>);</span><br><span class="line">        m_oMsgCounter.AddPromiseOrAccept(oPaxosMsg.nodeid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PLGDebug(<span class="string">"[Reject]"</span>);</span><br><span class="line">        m_oMsgCounter.AddReject(oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">        m_bWasRejectBySomeone = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        m_oProposerState.SetOtherProposalID(oPaxosMsg.rejectbypromiseid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_oMsgCounter.IsPassedOnThisRound())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iUseTimeMs = m_oTimeStat.Point();</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;AcceptPass(iUseTimeMs);</span><br><span class="line">        PLGImp(<span class="string">"[Pass] Start send learn, usetime %dms"</span>, iUseTimeMs);</span><br><span class="line">        ExitAccept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让Leaner学习被选定（Chosen）的值</span></span><br><span class="line">        m_poLearner-&gt;ProposerSendSuccess(GetInstanceID(), m_oProposerState.GetProposalID());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_oMsgCounter.IsRejectedOnThisRound()</span><br><span class="line">            || m_oMsgCounter.IsAllReceiveOnThisRound())</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetProposerBP()-&gt;AcceptNotPass();</span><br><span class="line">        PLGImp(<span class="string">"[Not pass] wait 30ms and Restart prepare"</span>);</span><br><span class="line">        AddAcceptTimer(OtherUtils::FastRand() % <span class="number">30</span> + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里跟OnPrepareReply的过程基本一致，因此就不加太多注释了。比较大的区别在于最后如果过半的Acceptor接受了该Accept请求，则说明该Value被选定（Chosen）了，就发送消息，让每个节点上的Learner学习该Value。因为Leaner不是本文的重点，这里就不详细介绍了。</p>
<h2 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor"></a>Acceptor</h2><p>Acceptor的逻辑比Proposer更简单。同样先看它的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Acceptor : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Acceptor(</span><br><span class="line">            <span class="keyword">const</span> Config * poConfig, </span><br><span class="line">            <span class="keyword">const</span> MsgTransport * poMsgTransport, </span><br><span class="line">            <span class="keyword">const</span> Instance * poInstance,</span><br><span class="line">            <span class="keyword">const</span> LogStorage * poLogStorage);</span><br><span class="line">    ~Acceptor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InitForNewPaxosInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">AcceptorState * <span class="title">GetAcceptorState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Prepare阶段回复Prepare请求</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">OnPrepare</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Accept阶段回复Accept请求</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAccept</span><span class="params">(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line">    AcceptorState m_oAcceptorState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="OnPrepare"><a href="#OnPrepare" class="headerlink" title="OnPrepare"></a>OnPrepare</h3><p>OnPrepare用于处理收到的Prepare请求，逻辑如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Acceptor :: OnPrepare(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START Msg.InstanceID %lu Msg.from_nodeid %lu Msg.ProposalID %lu"</span>,</span><br><span class="line">            oPaxosMsg.instanceid(), oPaxosMsg.nodeid(), oPaxosMsg.proposalid());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetAcceptorBP()-&gt;OnPrepare();</span><br><span class="line">    </span><br><span class="line">    PaxosMsg oReplyPaxosMsg;</span><br><span class="line">    oReplyPaxosMsg.set_instanceid(GetInstanceID());</span><br><span class="line">    oReplyPaxosMsg.set_nodeid(m_poConfig-&gt;GetMyNodeID());</span><br><span class="line">    oReplyPaxosMsg.set_proposalid(oPaxosMsg.proposalid());</span><br><span class="line">    oReplyPaxosMsg.set_msgtype(MsgType_PaxosPrepareReply);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造接收到的Prepare请求里的提案编号</span></span><br><span class="line">    BallotNumber oBallot(oPaxosMsg.proposalid(), oPaxosMsg.nodeid());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提案编号大于承诺过的提案编号</span></span><br><span class="line">    <span class="keyword">if</span> (oBallot &gt;= m_oAcceptorState.GetPromiseBallot())</span><br><span class="line">    &#123;</span><br><span class="line">        PLGDebug(<span class="string">"[Promise] State.PromiseID %lu State.PromiseNodeID %lu "</span></span><br><span class="line">                <span class="string">"State.PreAcceptedID %lu State.PreAcceptedNodeID %lu"</span>,</span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llProposalID, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llNodeID,</span><br><span class="line">                m_oAcceptorState.GetAcceptedBallot().m_llProposalID,</span><br><span class="line">                m_oAcceptorState.GetAcceptedBallot().m_llNodeID);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//返回之前接受过的提案的编号</span></span><br><span class="line">		oReplyPaxosMsg.set_preacceptid(m_oAcceptorState.GetAcceptedBallot().m_llProposalID);</span><br><span class="line">        oReplyPaxosMsg.set_preacceptnodeid(m_oAcceptorState.GetAcceptedBallot().m_llNodeID);</span><br><span class="line">        <span class="comment">//如果接受过的提案编号大于0（&lt;=0说明没有接受过提案），则设置接受过的提案的Value</span></span><br><span class="line">        <span class="keyword">if</span> (m_oAcceptorState.GetAcceptedBallot().m_llProposalID &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            oReplyPaxosMsg.set_value(m_oAcceptorState.GetAcceptedValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新承诺的提案编号为新的提案编号（因为新的提案编号更大）</span></span><br><span class="line">        m_oAcceptorState.SetPromiseBallot(oBallot);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//信息持久化</span></span><br><span class="line">        <span class="keyword">int</span> ret = m_oAcceptorState.Persist(GetInstanceID(), GetLastChecksum());</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BP-&gt;GetAcceptorBP()-&gt;OnPreparePersistFail();</span><br><span class="line">            PLGErr(<span class="string">"Persist fail, Now.InstanceID %lu ret %d"</span>,</span><br><span class="line">                    GetInstanceID(), ret);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BP-&gt;GetAcceptorBP()-&gt;OnPreparePass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提案编号小于承诺过的提案编号，需要拒绝</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetAcceptorBP()-&gt;OnPrepareReject();</span><br><span class="line"></span><br><span class="line">        PLGDebug(<span class="string">"[Reject] State.PromiseID %lu State.PromiseNodeID %lu"</span>, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llProposalID, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llNodeID);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//拒绝该Prepare请求，并返回承诺过的ProposalID      </span></span><br><span class="line">		oReplyPaxosMsg.set_rejectbypromiseid(m_oAcceptorState.GetPromiseBallot().m_llProposalID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">nodeid_t</span> iReplyNodeID = oPaxosMsg.nodeid();</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END Now.InstanceID %lu ReplyNodeID %lu"</span>,</span><br><span class="line">            GetInstanceID(), oPaxosMsg.nodeid());;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向发出Prepare请求的Proposer回复消息</span></span><br><span class="line">    SendMessage(iReplyNodeID, oReplyPaxosMsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="OnAccept"><a href="#OnAccept" class="headerlink" title="OnAccept"></a>OnAccept</h3><p>再来看看OnAccept：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Acceptor :: OnAccept(<span class="keyword">const</span> PaxosMsg &amp; oPaxosMsg)</span><br><span class="line">&#123;</span><br><span class="line">    PLGHead(<span class="string">"START Msg.InstanceID %lu Msg.from_nodeid %lu Msg.ProposalID %lu Msg.ValueLen %zu"</span>,</span><br><span class="line">            oPaxosMsg.instanceid(), oPaxosMsg.nodeid(), oPaxosMsg.proposalid(), oPaxosMsg.value().size());</span><br><span class="line"></span><br><span class="line">    BP-&gt;GetAcceptorBP()-&gt;OnAccept();</span><br><span class="line"></span><br><span class="line">    PaxosMsg oReplyPaxosMsg;</span><br><span class="line">    oReplyPaxosMsg.set_instanceid(GetInstanceID());</span><br><span class="line">    oReplyPaxosMsg.set_nodeid(m_poConfig-&gt;GetMyNodeID());</span><br><span class="line">    oReplyPaxosMsg.set_proposalid(oPaxosMsg.proposalid());</span><br><span class="line">    oReplyPaxosMsg.set_msgtype(MsgType_PaxosAcceptReply);</span><br><span class="line"></span><br><span class="line">    BallotNumber oBallot(oPaxosMsg.proposalid(), oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提案编号不小于承诺过的提案编号（注意：这里是“&gt;=”，而再OnPrepare中是“&gt;”，可以先思考下为什么），需要接受该提案</span></span><br><span class="line">    <span class="keyword">if</span> (oBallot &gt;= m_oAcceptorState.GetPromiseBallot())</span><br><span class="line">    &#123;</span><br><span class="line">        PLGDebug(<span class="string">"[Promise] State.PromiseID %lu State.PromiseNodeID %lu "</span></span><br><span class="line">                <span class="string">"State.PreAcceptedID %lu State.PreAcceptedNodeID %lu"</span>,</span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llProposalID, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llNodeID,</span><br><span class="line">                m_oAcceptorState.GetAcceptedBallot().m_llProposalID,</span><br><span class="line">                m_oAcceptorState.GetAcceptedBallot().m_llNodeID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新承诺的提案编号；接受的提案编号、提案值</span></span><br><span class="line">        m_oAcceptorState.SetPromiseBallot(oBallot);</span><br><span class="line">        m_oAcceptorState.SetAcceptedBallot(oBallot);</span><br><span class="line">        m_oAcceptorState.SetAcceptedValue(oPaxosMsg.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//信息持久化</span></span><br><span class="line">        <span class="keyword">int</span> ret = m_oAcceptorState.Persist(GetInstanceID(), GetLastChecksum());</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BP-&gt;GetAcceptorBP()-&gt;OnAcceptPersistFail();</span><br><span class="line"></span><br><span class="line">            PLGErr(<span class="string">"Persist fail, Now.InstanceID %lu ret %d"</span>,</span><br><span class="line">                    GetInstanceID(), ret);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BP-&gt;GetAcceptorBP()-&gt;OnAcceptPass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要拒绝该提案</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetAcceptorBP()-&gt;OnAcceptReject();</span><br><span class="line"></span><br><span class="line">        PLGDebug(<span class="string">"[Reject] State.PromiseID %lu State.PromiseNodeID %lu"</span>, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llProposalID, </span><br><span class="line">                m_oAcceptorState.GetPromiseBallot().m_llNodeID);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拒绝的消息中附上承诺过的ProposalID</span></span><br><span class="line">        oReplyPaxosMsg.set_rejectbypromiseid(m_oAcceptorState.GetPromiseBallot().m_llProposalID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">nodeid_t</span> iReplyNodeID = oPaxosMsg.nodeid();</span><br><span class="line"></span><br><span class="line">    PLGHead(<span class="string">"END Now.InstanceID %lu ReplyNodeID %lu"</span>,</span><br><span class="line">            GetInstanceID(), oPaxosMsg.nodeid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将响应发送给Proposer</span></span><br><span class="line">    SendMessage(iReplyNodeID, oReplyPaxosMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过阅读源码可以发现，整个PhxPaxos完全基于Lamport的《Paxos Made Simple》进行工程化，没有进行任何算法变种。这对于学习Paxos算法的人来说真的是一笔宝贵的财富，所以如果对Paxos算法感兴趣，应该深入地去阅读PhxPaxos的源码，相信看完后大家对Paxos会有更深的理解。同时我们也发现，在工程实现上还是有很多细节需要注意，这比单纯理解算法要难得多。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Paxos </tag>
            
            <tag> PhxPaxos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PhxPaxos源码分析——网络]]></title>
      <url>http://linbingdong.com/2017/11/20/PhxPaxos%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<p>了解分布式系统的童鞋肯定听过Paxos算法的大名。Paxos算法以晦涩难懂著称，其工程实现更难。目前，号称在工程上实现了Paxos算法的应该只有Google、阿里和腾讯。然而，只有腾讯的微信团队真正将代码开源出来，他们将Paxos算法的实现封装成了一个Paxos库，大家可以基于该库实现自己想要的功能，比如用于master选举，或者甚至利用它来实现一个分布式KV数据库等。</p>
<a id="more"></a>

<p>之前就对Paxos很感兴趣，但是一直没看过实现的代码，这次微信开源了PhxPaxos后终于有机会深入地了解Paxos的实现细节。在这里感谢微信团队。感谢PhxPaxos的作者。让我们一起来领略Paxos的魅力吧。</p>
<p>本次的源码分析先从网络部分开始。因为在分布式系统中不可避免会涉及到不同节点以及相同节点上不同进程之间的通信。因此网络部分也是至关重要，所以就先把网络单独拿出来看，接下来再去看Paxos算法的实现部分。</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>源码的include/phxpaxos目录下是公共头文件。include/phpaxos/network.h 是网络模块的抽象函数，如果用户想使用自己的网络协议，可以通过重写这些函数实现网络模块的自定义。</p>
<p>我们先来看下network.h的内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> phxpaxos</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//You can use your own network to make paxos communicate. :)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NetWork</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NetWork();</span><br><span class="line">    <span class="keyword">virtual</span> ~NetWork() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Network must not send/recieve any message before paxoslib called this funtion.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RunNetWork</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//If paxoslib call this function, network need to stop receive any message.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">StopNetWork</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">SendMessageTCP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">SendMessageUDP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//When receive a message, call this funtion.</span></span><br><span class="line">    <span class="comment">//This funtion is async, just enqueue an return.</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">OnReceiveMessage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pcMessage, <span class="keyword">const</span> <span class="keyword">int</span> iMessageLen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> Node;</span><br><span class="line">    Node * m_poNode;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几个函数的作用从名字就可以看出来。而且都是虚函数，即需要重写这些函数。在PhxPaxos中，提供了一个默认的网络模块，就是继承了NetWork类。该类的名字叫DFNetWork，DF应该就是default的缩写了。如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> phxpaxos </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DFNetWork : <span class="keyword">public</span> NetWork</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DFNetWork();</span><br><span class="line">    <span class="keyword">virtual</span> ~DFNetWork();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sListenIp, <span class="keyword">const</span> <span class="keyword">int</span> iListenPort, <span class="keyword">const</span> <span class="keyword">int</span> iIOThreadCount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RunNetWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">StopNetWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SendMessageTCP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SendMessageUDP</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    UDPRecv m_oUDPRecv;</span><br><span class="line">    UDPSend m_oUDPSend;</span><br><span class="line">    TcpIOThread m_oTcpIOThread;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类的私有成员里有UDPRecv、UDPSend和TcpIOThread三个类的对象，这三个类分别用于接收UDP消息、发送UDP消息以及收发TCP消息。</p>
<p>Init方法就是将UDPRecv、UDPSend和TcpIOThread分别初始化:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> DFNetWork :: Init(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sListenIp, <span class="keyword">const</span> <span class="keyword">int</span> iListenPort, <span class="keyword">const</span> <span class="keyword">int</span> iIOThreadCount) </span><br><span class="line">&#123;  <span class="comment">//初始化UDPSend</span></span><br><span class="line">    <span class="keyword">int</span> ret = m_oUDPSend.Init();</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化UDPRecv</span></span><br><span class="line">    ret = m_oUDPRecv.Init(iListenPort);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化TCP</span></span><br><span class="line">    ret = m_oTcpIOThread.Init(sListenIp, iListenPort, iIOThreadCount);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"m_oTcpIOThread Init fail, ret %d"</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的初始化过程就是调用socket的api。以UDPRecv为例，就是创建socket、设定端口、设置socket属性（如端口可重用）最后绑定端口。如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> UDPRecv :: Init(<span class="keyword">const</span> <span class="keyword">int</span> iPort)</span><br><span class="line">&#123;  <span class="comment">//创建socket，获得socket fd</span></span><br><span class="line">    <span class="keyword">if</span> ((m_iSockFD = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_in addr;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(iPort);  <span class="comment">//设定端口</span></span><br><span class="line">    addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> enable = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设定socket属性，端口可重用</span></span><br><span class="line">    setsockopt(m_iSockFD, SOL_SOCKET, SO_REUSEADDR, &amp;enable, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//绑定，用于监听</span></span><br><span class="line">    <span class="keyword">if</span> (bind(m_iSockFD, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RunNetWork就是将UDPRecv、UDPSend和TcpIOThread分别运行起来：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> DFNetWork :: RunNetWork()</span><br><span class="line">&#123;  <span class="comment">//UDPSend和UDPRecv都是调用Thread的start方法</span></span><br><span class="line">    m_oUDPSend.start();</span><br><span class="line">    m_oUDPRecv.start();</span><br><span class="line">    <span class="comment">//TCP的Start是封装过的</span></span><br><span class="line">    m_oTcpIOThread.Start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TcpIOThread的Start()实际执行的代码如下，分别启动了TcpAcceptor、TcpWrite和TcpRead：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> TcpIOThread :: Start()</span><br><span class="line">&#123;</span><br><span class="line">    m_oTcpAcceptor.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; poTcpWrite : m_vecTcpWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        poTcpWrite-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; poTcpRead : m_vecTcpRead)</span><br><span class="line">    &#123;</span><br><span class="line">        poTcpRead-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bIsStarted = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StopNetWork就是将UDPRecv、UDPSend和TcpIOThread停止。</p>
<p>SendMessageTCP就是将消息用TCP发送：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> DFNetWork :: SendMessageTCP(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_oTcpIOThread.AddMessage(iGroupIdx, sIp, iPort, sMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SendMessageUDP就是将消息用UDP发送：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> DFNetWork :: SendMessageUDP(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIp, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_oUDPSend.AddMessage(sIp, iPort, sMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="UDPSend"><a href="#UDPSend" class="headerlink" title="UDPSend"></a>UDPSend</h3><p>前面SendMessageUDP调用了m_oUDPSend.AddMessage。这里的UDPSend维护了一个发送队列，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Queue&lt;QueueData *&gt; m_oSendQueue;</span><br></pre></td></tr></table></figure>

<p>m_oUDPSend.AddMessage就是将消息加入到UDP的m_oSendQueue中。</p>
<p>然后UDPSend在run方法中一直循环将m_oSendQueue中的消息发送出去：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> UDPSend :: run()</span><br><span class="line">&#123;</span><br><span class="line">    m_bIsStarted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QueueData * poData = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">//同步，线程安全</span></span><br><span class="line">        m_oSendQueue.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> bSucc = m_oSendQueue.peek(poData, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (bSucc)</span><br><span class="line">        &#123;   <span class="comment">//取出队头消息</span></span><br><span class="line">            m_oSendQueue.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_oSendQueue.unlock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (poData != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;   <span class="comment">//将消息发送出去</span></span><br><span class="line">            SendMessage(poData-&gt;m_sIP, poData-&gt;m_iPort, poData-&gt;m_sMessage);</span><br><span class="line">            <span class="keyword">delete</span> poData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_bIsEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            PLHead(<span class="string">"UDPSend [END]"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此UDPSend就是把消息加入到消息队列，然后循环将消息队列里的消息发送出去。</p>
<h3 id="UDPRecv"><a href="#UDPRecv" class="headerlink" title="UDPRecv"></a>UDPRecv</h3><p>接下来看看UDPRecv。UDPRecv的初始化前面已经看过了，就是简单的获得socket fd，设定sockaddr_in，设置socket属性最后将socket fd和sockaddr_in绑定用于监听。</p>
<p>主要来看看UDPRecv的run方法。这里主要用了I/O多路复用中的poll，注册了一个pollfd，该pollfd的fd即之前创建的绑定了端口的socket fd，events为POLLIN，表示监听数据可读事件，如果有数据可读了，则调用recvfrom读入数据。最后调用OnReceiveMessage将消息添加到当前instance的IoLoop中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> UDPRecv :: run()</span><br><span class="line">&#123;</span><br><span class="line">    m_bIsStarted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> sBuffer[<span class="number">65536</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> sockaddr_in addr;</span><br><span class="line">    <span class="keyword">socklen_t</span> addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_bIsEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            PLHead(<span class="string">"UDPRecv [END]"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> pollfd fd;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">        fd.fd = m_iSockFD;</span><br><span class="line">        <span class="comment">//注册POLLIN事件</span></span><br><span class="line">        fd.events = POLLIN;</span><br><span class="line">        <span class="comment">//调用poll检查是否有数据可读</span></span><br><span class="line">        ret = poll(&amp;fd, <span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span> || ret == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将接收到的数据放入sBuffer中</span></span><br><span class="line">        <span class="keyword">int</span> iRecvLen = recvfrom(m_iSockFD, sBuffer, <span class="keyword">sizeof</span>(sBuffer), <span class="number">0</span>,</span><br><span class="line">                (<span class="keyword">struct</span> sockaddr *)&amp;addr, &amp;addr_len);</span><br><span class="line"></span><br><span class="line">        BP-&gt;GetNetworkBP()-&gt;UDPReceive(iRecvLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iRecvLen &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;   <span class="comment">//这里会依次调用Node和Instance的OnReceiveMessage方法，最后将消息加入到Instance的IoLoop中</span></span><br><span class="line">            m_poDFNetWork-&gt;OnReceiveMessage(sBuffer, iRecvLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TcpIOThread"><a href="#TcpIOThread" class="headerlink" title="TcpIOThread"></a>TcpIOThread</h3><p>接下来看看收发TCP消息的TcpIOThread：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TcpIOThread </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TcpIOThread(NetWork * poNetWork);</span><br><span class="line">    ~TcpIOThread();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于初始化TcpAcceptor以及iIOThreadCount个m_vecTcpRead和m_vecTcpWrite</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sListenIp, <span class="keyword">const</span> <span class="keyword">int</span> iListenPort, <span class="keyword">const</span> <span class="keyword">int</span> iIOThreadCount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动TcpAcceptor用于监听以及所有的m_vecTcpRead和m_vecTcpWrite用于读写消息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止TcpAcceptor和所有的m_vecTcpRead及m_vecTcpWrite</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息加入到特定TcpWrite的消息队列中</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">AddMessage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iGroupIdx, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIP, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    NetWork * m_poNetWork;</span><br><span class="line">    TcpAcceptor m_oTcpAcceptor;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TcpRead *&gt; m_vecTcpRead;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TcpWrite *&gt; m_vecTcpWrite;</span><br><span class="line">    <span class="keyword">bool</span> m_bIsStarted;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>TcpRead类似于前面讲的UDPRecv，TcpWrite类似于于UDPSend。严格来讲，TcpAcceptor + TcpRead才是UDPRecv。这里把TcpAcceptor单独抽出来，专门用于监听连接请求并建立连接。TcpRead只需要负责读消息就行。</p>
<h3 id="TcpAcceptor"><a href="#TcpAcceptor" class="headerlink" title="TcpAcceptor"></a>TcpAcceptor</h3><p>我们来看看TcpAcceptor：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TcpAcceptor : <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TcpAcceptor();</span><br><span class="line">    ~TcpAcceptor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听端口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Listen</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sListenIP, <span class="keyword">const</span> <span class="keyword">int</span> iListenPort)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一直while循环，监听连接事件并建立连接获得fd，然后添加事件到EventLoop中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEventLoop</span><span class="params">(EventLoop * poEventLoop)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEvent</span><span class="params">(<span class="keyword">int</span> iFD, SocketAddress oAddr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//服务端的socket，用于监听</span></span><br><span class="line">    ServerSocket m_oSocket;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;EventLoop *&gt; m_vecEventLoop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> m_bIsEnd;</span><br><span class="line">    <span class="keyword">bool</span> m_bIsStarted;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里主要来看下run方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> TcpAcceptor :: run()</span><br><span class="line">&#123;</span><br><span class="line">    m_bIsStarted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    PLHead(<span class="string">"start accept..."</span>);</span><br><span class="line"></span><br><span class="line">    m_oSocket.setAcceptTimeout(<span class="number">500</span>);</span><br><span class="line">    m_oSocket.setNonBlocking(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> pollfd pfd;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">        pfd.fd =  m_oSocket.getSocketHandle();</span><br><span class="line">        <span class="comment">//注册事件</span></span><br><span class="line">        pfd.events = POLLIN;</span><br><span class="line">        <span class="comment">//等待事件到来</span></span><br><span class="line">        ret = poll(&amp;pfd, <span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span> &amp;&amp; ret != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SocketAddress oAddr;</span><br><span class="line">            <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//建立连接，获得fd。这里的acceptfd对accept进行了简单的封装</span></span><br><span class="line">                fd = m_oSocket.acceptfd(&amp;oAddr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(...)</span><br><span class="line">            &#123;</span><br><span class="line">                fd = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                BP-&gt;GetNetworkBP()-&gt;TcpAcceptFd();</span><br><span class="line"></span><br><span class="line">                PLImp(<span class="string">"accepted!, fd %d ip %s port %d"</span>,</span><br><span class="line">                        fd, oAddr.getHost().c_str(), oAddr.getPort());</span><br><span class="line">                <span class="comment">//添加事件</span></span><br><span class="line">                AddEvent(fd, oAddr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_bIsEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            PLHead(<span class="string">"TCP.Acceptor [END]"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看看AddEvent方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> TcpAcceptor :: AddEvent(<span class="keyword">int</span> iFD, SocketAddress oAddr)</span><br><span class="line">&#123;</span><br><span class="line">    EventLoop * poMinActiveEventLoop = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> iMinActiveEventCount = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; poEventLoop : m_vecEventLoop)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iActiveCount = poEventLoop-&gt;GetActiveEventCount();</span><br><span class="line">        <span class="keyword">if</span> (iActiveCount &lt; iMinActiveEventCount)</span><br><span class="line">        &#123;</span><br><span class="line">            iMinActiveEventCount = iActiveCount;</span><br><span class="line">            poMinActiveEventLoop = poEventLoop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">oAddr.getPort());</span><br><span class="line">    poMinActiveEventLoop-&gt;AddEvent(iFD, oAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即找到活跃数最少的EventLoop，将事件添加到该EventLoop中。这里应该是为了负载均衡，防止有些线程工作量很大，有些则很空闲。</p>
<p>具体EventLoop的AddEvent就是将事件加入到FDQueue中，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> EventLoop :: AddEvent(<span class="keyword">int</span> iFD, SocketAddress oAddr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; oLockGuard(m_oMutex);</span><br><span class="line">    m_oFDQueue.push(make_pair(iFD, oAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里TcpAcceptor的作用及实现基本就很清晰了。</p>
<h3 id="TcpRead"><a href="#TcpRead" class="headerlink" title="TcpRead"></a>TcpRead</h3><p>先来看看TcpRead类的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TcpRead : <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TcpRead(NetWork * poNetWork);</span><br><span class="line">    ~TcpRead();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">EventLoop * <span class="title">GetEventLoop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    EventLoop m_oEventLoop;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里的成员变量是一个EventLoop对象。通过源码发现，Init、run、Stop方法其实都是调用了m_oEventLoop相应的方法，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> TcpRead :: Init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_oEventLoop.Init(<span class="number">20480</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TcpRead :: run()</span><br><span class="line">&#123;</span><br><span class="line">    m_oEventLoop.StartLoop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TcpRead :: Stop()</span><br><span class="line">&#123;</span><br><span class="line">    m_oEventLoop.Stop();</span><br><span class="line">    join();</span><br><span class="line"></span><br><span class="line">    PLHead(<span class="string">"TcpReadThread [END]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此主要来看下EventLoop。</p>
<p>首先说下Event。PhxPaxos在TCP这块主要用了I/O多路复用中的epoll。这里主要将数据和通知等都封装成Event，然后由TcpWrite和TcpRead的EventLoop去执行。PhxPaxos中的Event包含两个子类，分别是MessageEvent和Notify。其中MessageEvent主要用于数据的读写；而Notify主要用于通知事件发生。这里的Notify基于管道pipe和EPOLLIN事件来实现，可以通过Notify的Init方法看出：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> Notify :: Init()</span><br><span class="line">&#123;   <span class="comment">//m_iPipeFD是一个长度为2的int数组，用于存放管道两端的socket fd</span></span><br><span class="line">    <span class="keyword">int</span> ret = pipe(m_iPipeFD);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"create pipe fail, ret %d"</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fcntl(m_iPipeFD[<span class="number">0</span>], F_SETFL, O_NONBLOCK);</span><br><span class="line">    fcntl(m_iPipeFD[<span class="number">1</span>], F_SETFL, O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">    AddEvent(EPOLLIN);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续回到EventLoop。首先看下EventLoop的Init方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> EventLoop :: Init(<span class="keyword">const</span> <span class="keyword">int</span> iEpollLength)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">//创建epoll句柄，iEpollLength为监听的fd数</span></span><br><span class="line">    m_iEpollFd = epoll_create(iEpollLength);</span><br><span class="line">    <span class="keyword">if</span> (m_iEpollFd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"epoll_create fail, ret %d"</span>, m_iEpollFd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_poNotify = <span class="keyword">new</span> Notify(<span class="keyword">this</span>);</span><br><span class="line">    assert(m_poNotify != <span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化Notify：创建pipe，设置m_iPipeFD并添加EPOLLIN事件</span></span><br><span class="line">    <span class="keyword">int</span> ret = m_poNotify-&gt;Init();</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着来看下最重要的StartLoop：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> EventLoop :: StartLoop()</span><br><span class="line">&#123;</span><br><span class="line">    m_bIsEnd = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetNetworkBP()-&gt;TcpEpollLoop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> iNextTimeout = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        DealwithTimeout(iNextTimeout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PLHead("nexttimeout %d", iNextTimeout);</span></span><br><span class="line"></span><br><span class="line">        OneLoop(iNextTimeout);</span><br><span class="line"></span><br><span class="line">        CreateEvent();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_poTcpClient != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_poTcpClient-&gt;DealWithWrite();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_bIsEnd)</span><br><span class="line">        &#123;</span><br><span class="line">            PLHead(<span class="string">"TCP.EventLoop [END]"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主循环是OneLoop：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> EventLoop :: OneLoop(<span class="keyword">const</span> <span class="keyword">int</span> iTimeoutMs)</span><br><span class="line">&#123;  <span class="comment">//调用epoll_wait等待事件发生</span></span><br><span class="line">    <span class="keyword">int</span> n = epoll_wait(m_iEpollFd, m_EpollEvents, MAX_EVENTS, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EINTR)</span><br><span class="line">        &#123;</span><br><span class="line">            PLErr(<span class="string">"epoll_wait fail, errno %d"</span>, errno);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逐一处理发生的epoll事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> iFd = m_EpollEvents[i].data.fd;</span><br><span class="line">        <span class="keyword">auto</span> it = m_mapEvent.find(iFd);</span><br><span class="line">        <span class="keyword">if</span> (it == end(m_mapEvent))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> iEvents = m_EpollEvents[i].events;</span><br><span class="line">        Event * poEvent = it-&gt;second.m_poEvent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (iEvents &amp; EPOLLERR)</span><br><span class="line">        &#123;</span><br><span class="line">            OnError(iEvents, poEvent);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果是EPOLLIN事件，表明由数据可读，则调用poEvent的OnRead方法处理</span></span><br><span class="line">            <span class="keyword">if</span> (iEvents &amp; EPOLLIN)</span><br><span class="line">            &#123;</span><br><span class="line">                ret = poEvent-&gt;OnRead();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果是EPOLLOUT事件，表明由数据可写，则调用poEvent的OnWrite方法处理</span></span><br><span class="line">            <span class="keyword">if</span> (iEvents &amp; EPOLLOUT)</span><br><span class="line">            &#123;</span><br><span class="line">                ret = poEvent-&gt;OnWrite();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (...)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            OnError(iEvents, poEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他具体的细节这里就不再赘述了，有兴趣的可以自己去看看源码。</p>
<h3 id="TcpWrite"><a href="#TcpWrite" class="headerlink" title="TcpWrite"></a>TcpWrite</h3><p>看完了TcpRead，再来看看TcpWrite。首先还是看它的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TcpWrite : <span class="keyword">public</span> Thread</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TcpWrite(NetWork * poNetWork);</span><br><span class="line">    ~TcpWrite();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">AddMessage</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIP, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TcpClient m_oTcpClient;</span><br><span class="line">    EventLoop m_oEventLoop;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Init、run、Stop跟TcpRead中对应方法的作用一致。AddMessage则是调用了m_oTcpClient的AddMessage方法。发现TcpWrite的成员变量比TcpRead多了一个TcpClient对象，因此主要来看看这个TcpClient是干嘛的。</p>
<p>刚刚说TcpWrite的AddMessage调用了m_oTcpClient的AddMessage方法。在m_oTcpClient的AddMessage方法中，则是先创建了一个指向MessageEvent对象的指针poEvent，然后再调用poEvent的AddMessage方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> TcpClient :: AddMessage(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sIP, <span class="keyword">const</span> <span class="keyword">int</span> iPort, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//PLImp("ok");</span></span><br><span class="line">    MessageEvent * poEvent = GetEvent(sIP, iPort);</span><br><span class="line">    <span class="keyword">if</span> (poEvent == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"no event created for this ip %s port %d"</span>, sIP.c_str(), iPort);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> poEvent-&gt;AddMessage(sMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此继续看看MessageEvent的AddMessage方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> MessageEvent :: AddMessage(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; sMessage)</span><br><span class="line">&#123;</span><br><span class="line">    m_llLastActiveTime = Time::GetSteadyClockMS();</span><br><span class="line">    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; oLock(m_oMutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)m_oInQueue.size() &gt; TCP_QUEUE_MAXLEN)</span><br><span class="line">    &#123;</span><br><span class="line">        BP-&gt;GetNetworkBP()-&gt;TcpQueueFull();</span><br><span class="line">        <span class="comment">//PLErr("queue length %d too long, can't enqueue", m_oInQueue.size());</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_iQueueMemSize &gt; MAX_QUEUE_MEM_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PLErr("queue memsize %d too large, can't enqueue", m_iQueueMemSize);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QueueData tData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息封装成QueueData后放入队列</span></span><br><span class="line">    tData.llEnqueueAbsTime = Time::GetSteadyClockMS();</span><br><span class="line">    tData.psValue = <span class="keyword">new</span> <span class="built_in">string</span>(sMessage);</span><br><span class="line">    m_oInQueue.push(tData);</span><br><span class="line"></span><br><span class="line">    m_iQueueMemSize += sMessage.size();</span><br><span class="line"></span><br><span class="line">    oLock.unlock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退出EpollWait，实际是调用SendNotify发送了一个通知</span></span><br><span class="line">    JumpoutEpollWait();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里将消息加上入队时间后封装成一个QueueDate，然后放入m_oInQueue队列中。最后调用EventLoop的SendNotify发送了一个通知（利用之前创建的pipe）退出EpollWait。</p>
<p>说完了消息怎么入队，那消息是怎么发送出去的呢？</p>
<p>这里主要涉及到MessageEvent的OnWrite函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> MessageEvent :: OnWrite()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要发送队列不为空或者还有上次未发送完的数据，就调用DoOnWrite执行真正的发送操作</span></span><br><span class="line">    <span class="keyword">while</span> (!m_oInQueue.empty() || m_iLeftWriteLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = DoOnWrite();</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span> &amp;&amp; ret != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//need break, wait next write</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WriteDone();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DoOnWrite:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> MessageEvent :: DoOnWrite()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//上一次的消息还未发送完毕，将剩下的发送完</span></span><br><span class="line">    <span class="keyword">if</span> (m_iLeftWriteLen &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> WriteLeft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_oMutex.lock();</span><br><span class="line">    <span class="keyword">if</span> (m_oInQueue.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        m_oMutex.unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从队列中取出一条新消息，准备发送</span></span><br><span class="line">    QueueData tData = m_oInQueue.front();</span><br><span class="line">    m_oInQueue.pop();</span><br><span class="line">    m_iQueueMemSize -= tData.psValue-&gt;size();</span><br><span class="line">    m_oMutex.unlock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> * poMessage = tData.psValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果该消息入队太久没有被处理，则抛弃，不发送</span></span><br><span class="line">    <span class="keyword">uint64_t</span> llNowTime = Time::GetSteadyClockMS();</span><br><span class="line">    <span class="keyword">int</span> iDelayMs = llNowTime &gt; tData.llEnqueueAbsTime ? (<span class="keyword">int</span>)(llNowTime - tData.llEnqueueAbsTime) : <span class="number">0</span>;</span><br><span class="line">    BP-&gt;GetNetworkBP()-&gt;TcpOutQueue(iDelayMs);</span><br><span class="line">    <span class="keyword">if</span> (iDelayMs &gt; TCP_OUTQUEUE_DROP_TIMEMS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//PLErr("drop request because enqueue timeout, nowtime %lu unqueuetime %lu",</span></span><br><span class="line">                <span class="comment">//llNowTime, tData.llEnqueueAbsTime);</span></span><br><span class="line">        <span class="keyword">delete</span> poMessage;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算发送缓冲区长度，需要加上4字节用于表示消息长度</span></span><br><span class="line">    <span class="keyword">int</span> iBuffLen = poMessage-&gt;size();</span><br><span class="line">    <span class="keyword">int</span> niBuffLen = htonl(iBuffLen + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iLen = iBuffLen + <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//申请缓冲区</span></span><br><span class="line">    m_oWriteCacheBuffer.Ready(iLen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息长度及消息内容拷贝到缓冲区</span></span><br><span class="line">    <span class="built_in">memcpy</span>(m_oWriteCacheBuffer.GetPtr(), &amp;niBuffLen, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(m_oWriteCacheBuffer.GetPtr() + <span class="number">4</span>, poMessage-&gt;c_str(), iBuffLen);</span><br><span class="line"></span><br><span class="line">    m_iLeftWriteLen = iLen;</span><br><span class="line">    m_iLastWritePos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> poMessage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PLImp("write len %d ip %s port %d", iLen, m_oAddr.getHost().c_str(), m_oAddr.getPort());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始发送消息，有可能消息太大一次发送不完</span></span><br><span class="line">    <span class="keyword">int</span> iWriteLen = m_oSocket.send(m_oWriteCacheBuffer.GetPtr(), iLen);</span><br><span class="line">    <span class="keyword">if</span> (iWriteLen &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"fail, write len %d ip %s port %d"</span>,</span><br><span class="line">                iWriteLen, m_oAddr.getHost().c_str(), m_oAddr.getPort());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要下次再发送</span></span><br><span class="line">    <span class="keyword">if</span> (iWriteLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//need wait next write</span></span><br><span class="line">        AddEvent(EPOLLOUT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PLImp("real write len %d", iWriteLen);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送成功</span></span><br><span class="line">    <span class="keyword">if</span> (iWriteLen == iLen)</span><br><span class="line">    &#123;</span><br><span class="line">        m_iLeftWriteLen = <span class="number">0</span>;</span><br><span class="line">        m_iLastWritePos = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//write done</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有一次性全部发送完，剩下的需要下次发送</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (iWriteLen &lt; iLen)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//m_iLastWritePos和m_iLeftWriteLen分别用来表示上次写的位置以及剩下需要发送的长度</span></span><br><span class="line">        m_iLastWritePos = iWriteLen;</span><br><span class="line">        m_iLeftWriteLen = iLen - iWriteLen;</span><br><span class="line"></span><br><span class="line">        PLImp(<span class="string">"write buflen %d smaller than expectlen %d"</span>, iWriteLen, iLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PLErr(<span class="string">"write buflen %d large than expectlen %d"</span>, iWriteLen, iLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>先介绍这么多吧，接下去会有更多相关的文章，特别是PhxPaxos中实现Paxos算法的那部分，相信看过Paxos相关论文的童鞋会对这块很感兴趣。</p>
<p>最后，附上PhxPaxos源码的地址：<a href="https://github.com/Tencent/phxpaxos" target="_blank" rel="noopener">https://github.com/Tencent/phxpaxos</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Paxos </tag>
            
            <tag> PhxPaxos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java回调机制]]></title>
      <url>http://linbingdong.com/2017/11/13/Java%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>对Java回调机制进行简单的介绍，并给出简单的示例。</p>
<a id="more"></a>

<h2 id="什么是回调"><a href="#什么是回调" class="headerlink" title="什么是回调"></a>什么是回调</h2><p>回调，即callback。简单来讲，回调就是A包含B，A的函数Af1调用B的函数Bf1，Bf1又调用A的另一个函数Af2。这个Af2是回调接口中的方法，即A实现了回调接口。那么，Bf1为什么能调用Af2呢，是因为A将自身作为参数传给了Bf1。回调一般用在异步调用中。</p>
<p>举个通俗点的例子：A是Boss，B是worker。Boss让Worker去干活，并且让worker干完活后向Boss报告。Boss分发任务（dispatchWork），让woker去执行（startWork）。worker执行完后调用回调接口的report()函数报告任务完成。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>CallbackReport.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallbackReport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Boss.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">CallbackReport</span></span>&#123;</span><br><span class="line">    Worker worker;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(Worker worker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.worker = worker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    worker.startWork(Boss.<span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"worker reported: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Worker.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWork</span><span class="params">(CallbackReport callback)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"worker starts working..."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        callback.report(<span class="string">"work is done!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CallbackTest.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss(worker);</span><br><span class="line">        boss.dispatchWork();</span><br><span class="line">        System.out.println(<span class="string">"dispatched work,wait for done!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker starts working...</span><br><span class="line">dispatched work,wait for done!</span><br><span class="line">worker reported: work is done!  //等待3秒后才出现这句</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-适配器模式]]></title>
      <url>http://linbingdong.com/2017/11/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>本文介绍适配器模式。</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>适配器模式</strong>将一个类的接口，转换成客户端期待的另一个接口。</p>
<p>比如我们想用苹果的充电线给安卓充电。但是安卓的充电接口（type-c）跟苹果（lightning）的不一样，所以就需要一个适配器，将安卓的type-c接口转换成苹果的lightning接口，这样就能用苹果的充电线给安卓充电了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-44cc41182016b5e3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Adapter.jpg"></p>
<p>图中玫瑰金色的就是适配器。</p>
<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul>
<li><strong>目标（Target）</strong>：即期望的接口。</li>
<li><strong>适配器（Adapter）</strong>：用于将源接口转换成目标接口。</li>
<li><strong>被适配者（Adaptee）</strong>：即源接口。</li>
</ul>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-ebc5c6a53ad679d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="适配器模式类图.png"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AppleLightning appleLighting = <span class="keyword">new</span> AppleLightning();</span><br><span class="line">        System.out.println(<span class="string">"use lightning to charge"</span>);</span><br><span class="line">        appleLighting.chargeWithLightning();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">'\n'</span> + <span class="string">"use type-c to charge"</span>);</span><br><span class="line">        AndroidTypeC androidTypeC = <span class="keyword">new</span> AndroidTypeC();</span><br><span class="line">        androidTypeC.chargeWithTypeC();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">'\n'</span> + <span class="string">"use lightning to charge"</span>);</span><br><span class="line">        Lightning adapter = <span class="keyword">new</span> Adapter(androidTypeC);</span><br><span class="line">        adapter.chargeWithLightning();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lightning</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chargeWithLightning</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleLightning</span> <span class="keyword">implements</span> <span class="title">Lightning</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithLightning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"charging iPhone..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidTypeC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithTypeC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"charging android..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Lightning</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> AndroidTypeC androidTypeC;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(AndroidTypeC androidTypeC)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.androidTypeC = androidTypeC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargeWithLightning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        androidTypeC.chargeWithTypeC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use lightning to charge</span><br><span class="line">charging iPhone...</span><br><span class="line"></span><br><span class="line">use type-c to charge</span><br><span class="line">charging android...</span><br><span class="line"></span><br><span class="line">use lightning to charge</span><br><span class="line">charging android...</span><br></pre></td></tr></table></figure>

<p>注：以上的例子是对象适配器模式，还有另一种适配器模式叫类适配器模式，这里不再赘述。</p>
<h2 id="适配器模式在Hadoop源码中的应用"><a href="#适配器模式在Hadoop源码中的应用" class="headerlink" title="适配器模式在Hadoop源码中的应用"></a>适配器模式在Hadoop源码中的应用</h2><p>Hadoop作为广泛应用的大数据组件，其本质是一个分布式系统，在分布式系统中，各个节点之间的通信和交互是必不可少的，为此，Hadoop实现了一套自己的RPC框架，该RPC框架默认使用Protocol Buffer作为序列化工具。</p>
<p>ClientProtocol协议定义了HDFS Client和NameNode交互的所有方法，但是ClientProtocol协议中方法的参数是无法在网络中传输的，需要对参数进行序列化操作，所以HDFS又定义了ClientNamenodeProtocolPB协议，该协议包含了ClientProtocol定义的所有方法，但是参数却是使用protobuf序列化后的格式。</p>
<p>ClientNamenodeProtocolTranslatorPB类作为Client侧的<strong>适配器</strong>类，<strong>实现</strong>了ClientProtocol接口，它<strong>内部拥有</strong>一个实现了ClientNamenodeProtocolPB接口的对象，可以将ClientProtocol调用适配成ClientNamenodeProtocolPB调用。以rename()调用为例，ClientNamenodeProtocolPB将rename(String, String)调用中的两个String参数序列化成一个RenameRequestProto对象，然后调用ClientNamenodeProtocolPB对象的rename(RenameRequestProto)方法，这样就完成了ClientProtocol接口到ClientNamenodeProtocolPB接口的适配。</p>
<p>在该例子中，ClientNamenodeProtocolTranslatorPB类为<strong>适配器</strong>，ClientProtocol为<strong>目标接口</strong>（这里的目标是对客户端来说的），ClientNamenodeProtocolPB为<strong>源接口</strong>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——Paxos算法原理与推导]]></title>
      <url>http://linbingdong.com/2017/04/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<p>Paxos算法在分布式领域具有非常重要的地位。但是Paxos算法有两个比较明显的缺点：1.难以理解 2.工程实现更难。</p>
<p>网上有很多讲解Paxos算法的文章，但是质量参差不齐。看了很多关于Paxos的资料后发现，学习Paxos最好的资料是论文《Paxos Made Simple》，其次是中、英文版维基百科对Paxos的介绍。本文试图带大家一步步揭开Paxos神秘的面纱。</p>
<a id="more"></a>

<h2 id="Paxos是什么"><a href="#Paxos是什么" class="headerlink" title="Paxos是什么"></a>Paxos是什么</h2><blockquote>
<p>Paxos算法是基于<strong>消息传递</strong>且具有<strong>高度容错特性</strong>的<strong>一致性算法</strong>，是目前公认的解决<strong>分布式一致性</strong>问题<strong>最有效</strong>的算法之一。</p>
</blockquote>
<p>Google Chubby的作者Mike Burrows说过这个世界上<strong>只有一种</strong>一致性算法，那就是Paxos，其它的算法都是<strong>残次品</strong>。</p>
<p>虽然Mike Burrows说得有点夸张，但是至少说明了Paxos算法的地位。然而，Paxos算法也因为晦涩难懂而臭名昭著。本文的目的就是带领大家深入浅出理解Paxos算法，不仅理解它的执行流程，还要理解算法的推导过程，作者是怎么一步步想到最终的方案的。只有理解了推导过程，才能深刻掌握该算法的精髓。而且理解推导过程对于我们的思维也是非常有帮助的，可能会给我们带来一些解决问题的思路，对我们有所启发。</p>
<h2 id="问题产生的背景"><a href="#问题产生的背景" class="headerlink" title="问题产生的背景"></a>问题产生的背景</h2><p>在常见的分布式系统中，总会发生诸如<strong>机器宕机</strong>或<strong>网络异常</strong>（包括消息的延迟、丢失、重复、乱序，还有网络分区）等情况。Paxos算法需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对<strong>某个数据的值</strong>达成<strong>一致</strong>，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p>
<p>注：这里<strong>某个数据的值</strong>并不只是狭义上的某个数，它可以是一条日志，也可以是一条命令（command）。。。根据应用场景不同，<strong>某个数据的值</strong>有不同的含义。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-d2136179b456e13e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题产生的背景"></p>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>在Paxos算法中，有三种角色：</p>
<ul>
<li><strong>Proposer</strong></li>
<li><strong>Acceptor</strong></li>
<li><strong>Learners</strong></li>
</ul>
<p>在具体的实现中，一个进程可能<strong>同时充当多种角色</strong>。比如一个进程可能<strong>既是Proposer又是Acceptor又是Learner</strong>。</p>
<p>还有一个很重要的概念叫<strong>提案（Proposal）</strong>。最终要达成一致的value就在提案里。</p>
<p><strong>注：</strong></p>
<ul>
<li><strong>暂且</strong>认为『<strong>提案=value</strong>』，即提案只包含value。在我们接下来的推导过程中会发现如果提案只包含value，会有问题，于是我们再对提案<strong>重新设计</strong>。</li>
<li><strong>暂且</strong>认为『<strong>Proposer可以直接提出提案</strong>』。在我们接下来的推导过程中会发现如果Proposer直接提出提案会有问题，需要增加一个学习提案的过程。</li>
</ul>
<p>Proposer可以提出（propose）提案；Acceptor可以接受（accept）提案；如果某个提案被选定（chosen），那么该提案里的value就被选定了。</p>
<p>回到刚刚说的『对某个数据的值达成一致』，指的是Proposer、Acceptor、Learner都认为同一个value被选定（chosen）。那么，Proposer、Acceptor、Learner分别在什么情况下才能认为某个value被选定呢？</p>
<ul>
<li>Proposer：只要Proposer发的提案被Acceptor接受（刚开始先认为只需要一个Acceptor接受即可，在推导过程中会发现需要半数以上的Acceptor同意才行），Proposer就认为该提案里的value被选定了。</li>
<li>Acceptor：只要Acceptor接受了某个提案，Acceptor就认为该提案里的value被选定了。</li>
<li>Learner：Acceptor告诉Learner哪个value被选定，Learner就认为那个value被选定。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6980ffa6b43c16d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相关概念"></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设有一组可以<strong>提出（propose）value</strong>（value在提案Proposal里）的<strong>进程集合</strong>。一个一致性算法需要保证提出的这么多value中，<strong>只有一个</strong>value被选定（chosen）。如果没有value被提出，就不应该有value被选定。如果一个value被选定，那么所有进程都应该能<strong>学习（learn）</strong>到这个被选定的value。对于一致性算法，<strong>安全性（safaty）</strong>要求如下：</p>
<ul>
<li>只有被提出的value才能被选定。</li>
<li>只有一个value被选定，并且</li>
<li>如果某个进程认为某个value被选定了，那么这个value必须是真的被选定的那个。</li>
</ul>
<p>我们不去精确地定义其<strong>活性（liveness）</strong>要求。我们的目标是保证<strong>最终有一个提出的value被选定</strong>。当一个value被选定后，进程最终也能学习到这个value。</p>
<blockquote>
<p>Paxos的目标：保证最终有一个value会被选定，当value被选定后，进程最终也能获取到被选定的value。</p>
</blockquote>
<p>假设不同角色之间可以通过发送消息来进行通信，那么：</p>
<ul>
<li>每个角色以任意的速度执行，可能因出错而停止，也可能会重启。一个value被选定后，所有的角色可能失败然后重启，除非那些失败后重启的角色能记录某些信息，否则等他们重启后无法确定被选定的值。</li>
<li>消息在传递过程中可能出现任意时长的延迟，可能会重复，也可能丢失。但是消息不会被损坏，即消息内容不会被篡改（拜占庭将军问题）。</li>
</ul>
<h2 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h2><h3 id="最简单的方案——只有一个Acceptor"><a href="#最简单的方案——只有一个Acceptor" class="headerlink" title="最简单的方案——只有一个Acceptor"></a>最简单的方案——只有一个Acceptor</h3><p>假设只有一个Acceptor（可以有多个Proposer），只要Acceptor接受它收到的第一个提案，则该提案被选定，该提案里的value就是被选定的value。这样就保证只有一个value会被选定。</p>
<p>但是，如果这个唯一的Acceptor宕机了，那么整个系统就<strong>无法工作</strong>了！</p>
<p>因此，必须要有<strong>多个Acceptor</strong>！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a902b09159405eab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="只有一个Acceptor"></p>
<h3 id="多个Acceptor"><a href="#多个Acceptor" class="headerlink" title="多个Acceptor"></a>多个Acceptor</h3><p>多个Acceptor的情况如下图。那么，如何保证在多个Proposer和多个Acceptor的情况下选定一个value呢？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a85c9965be9d1671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多个Acceptor"></p>
<p>下面开始寻找解决方案。</p>
<p>如果我们希望即使只有一个Proposer提出了一个value，该value也最终被选定。</p>
<p>那么，就得到下面的约束：</p>
<blockquote>
<p>P1：一个Acceptor必须接受它收到的第一个提案。</p>
</blockquote>
<p>但是，这又会引出另一个问题：如果每个Proposer分别提出不同的value，发给不同的Acceptor。根据P1，Acceptor分别接受自己收到的value，就导致不同的value被选定。出现了不一致。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a2449c74a784bd87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片08.png"></p>
<p>刚刚是因为『一个提案只要被一个Acceptor接受，则该提案的value就被选定了』才导致了出现上面不一致的问题。因此，我们需要加一个规定：</p>
<blockquote>
<p>规定：一个提案被选定需要被<strong>半数以上</strong>的Acceptor接受</p>
</blockquote>
<p>这个规定又暗示了：『一个Acceptor必须能够接受不止一个提案！』不然可能导致最终没有value被选定。比如上图的情况。v1、v2、v3都没有被选定，因为它们都只被一个Acceptor的接受。</p>
<p>最开始讲的『<strong>提案=value</strong>』已经不能满足需求了，于是重新设计提案，给每个提案加上一个提案编号，表示提案被提出的顺序。令『<strong>提案=提案编号+value</strong>』。</p>
<p>虽然允许多个提案被选定，但必须保证所有被选定的提案都具有相同的value值。否则又会出现不一致。</p>
<p>于是有了下面的约束：</p>
<blockquote>
<p>P2：如果某个value为v的提案被选定了，那么每个编号更高的被选定提案的value必须也是v。</p>
</blockquote>
<p>一个提案只有被Acceptor接受才可能被选定，因此我们可以把P2约束改写成对Acceptor接受的提案的约束P2a。</p>
<blockquote>
<p>P2a：如果某个value为v的提案被选定了，那么每个编号更高的被Acceptor接受的提案的value必须也是v。</p>
</blockquote>
<p>只要满足了P2a，就能满足P2。</p>
<p>但是，考虑如下的情况：假设总的有5个Acceptor。Proposer2提出[M1,V1]的提案，Acceptor2<del>5（半数以上）均接受了该提案，于是对于Acceptor2</del>5和Proposer2来讲，它们都认为V1被选定。Acceptor1刚刚从宕机状态恢复过来（之前Acceptor1没有收到过任何提案），此时Proposer1向Acceptor1发送了[M2,V2]的提案（V2≠V1且M2&gt;M1），对于Acceptor1来讲，这是它收到的第一个提案。根据P1（一个Acceptor必须接受它收到的第一个提案。）,Acceptor1必须接受该提案！同时Acceptor1认为V2被选定。这就出现了两个问题：</p>
<ol>
<li>Acceptor1认为V2被选定，Acceptor2~5和Proposer2认为V1被选定。出现了不一致。 </li>
<li>V1被选定了，但是编号更高的被Acceptor1接受的提案[M2,V2]的value为V2，且V2≠V1。这就跟P2a（如果某个value为v的提案被选定了，那么每个编号更高的被Acceptor接受的提案的value必须也是v）矛盾了。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e517a6fd3d55e2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片10.png"></p>
<p>所以我们要对P2a约束进行强化！</p>
<p>P2a是对Acceptor接受的提案约束，但其实提案是Proposer提出来的，所有我们可以对Proposer提出的提案进行约束。得到P2b：</p>
<blockquote>
<p>P2b：如果某个value为v的提案被选定了，那么之后任何Proposer提出的编号更高的提案的value必须也是v。</p>
</blockquote>
<p>由P2b可以推出P2a进而推出P2。</p>
<p>那么，如何确保在某个value为v的提案被选定后，Proposer提出的编号更高的提案的value都是v呢？</p>
<p>只要满足P2c即可：</p>
<blockquote>
<p>P2c：对于任意的N和V，如果提案[N, V]被提出，那么存在一个半数以上的Acceptor组成的集合S，满足以下两个条件中的任意一个：</p>
<ul>
<li>S中每个Acceptor都没有接受过编号小于N的提案。</li>
<li>S中Acceptor接受过的最大编号的提案的value为V。</li>
</ul>
</blockquote>
<h3 id="Proposer生成提案"><a href="#Proposer生成提案" class="headerlink" title="Proposer生成提案"></a>Proposer生成提案</h3><p>为了满足P2b，这里有个比较重要的思想：Proposer生成提案之前，应该先去<strong>『学习』</strong>已经被选定或者可能被选定的value，然后以该value作为自己提出的提案的value。如果没有value被选定，Proposer才可以自己决定value的值。这样才能达成一致。这个学习的阶段是通过一个<strong>『Prepare请求』</strong>实现的。</p>
<p>于是我们得到了如下的<strong>提案生成算法</strong>：</p>
<ol>
<li><p>Proposer选择一个<strong>新的提案编号N</strong>，然后向<strong>某个Acceptor集合</strong>（半数以上）发送请求，要求该集合中的每个Acceptor做出如下响应（response）。<br>(a) 向Proposer承诺保证<strong>不再接受</strong>任何编号<strong>小于N的提案</strong>。
(b) 如果Acceptor已经接受过提案，那么就向Proposer响应<strong>已经接受过</strong>的编号小于N的<strong>最大编号的提案</strong>。</p>
<p>我们将该请求称为<strong>编号为N</strong>的<strong>Prepare请求</strong>。</p>
</li>
<li><p>如果Proposer收到了<strong>半数以上</strong>的Acceptor的<strong>响应</strong>，那么它就可以生成编号为N，Value为V的<strong>提案[N,V]</strong>。这里的V是所有的响应中<strong>编号最大的提案的Value</strong>。如果所有的响应中<strong>都没有提案</strong>，那 么此时V就可以由Proposer<strong>自己选择</strong>。
生成提案后，Proposer将该<strong>提案</strong>发送给<strong>半数以上</strong>的Acceptor集合，并期望这些Acceptor能接受该提案。我们称该请求为<strong>Accept请求</strong>。（注意：此时接受Accept请求的Acceptor集合<strong>不一定</strong>是之前响应Prepare请求的Acceptor集合）</p>
</li>
</ol>
<h3 id="Acceptor接受提案"><a href="#Acceptor接受提案" class="headerlink" title="Acceptor接受提案"></a>Acceptor接受提案</h3><p>Acceptor<strong>可以忽略任何请求</strong>（包括Prepare请求和Accept请求）而不用担心破坏算法的<strong>安全性</strong>。因此，我们这里要讨论的是什么时候Acceptor可以响应一个请求。</p>
<p>我们对Acceptor接受提案给出如下约束：</p>
<blockquote>
<p>P1a：一个Acceptor只要尚<strong>未响应过</strong>任何<strong>编号大于N</strong>的<strong>Prepare请求</strong>，那么他就可以<strong>接受</strong>这个<strong>编号为N的提案</strong>。</p>
</blockquote>
<p>如果Acceptor收到一个编号为N的Prepare请求，在此之前它已经响应过编号大于N的Prepare请求。根据P1a，该Acceptor不可能接受编号为N的提案。因此，该Acceptor可以忽略编号为N的Prepare请求。当然，也可以回复一个error，让Proposer尽早知道自己的提案不会被接受。</p>
<p>因此，一个Acceptor<strong>只需记住</strong>：1. 已接受的编号最大的提案 2. 已响应的请求的最大编号。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-09a81e90de7f722b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小优化"></p>
<h3 id="Paxos算法描述"><a href="#Paxos算法描述" class="headerlink" title="Paxos算法描述"></a>Paxos算法描述</h3><p>经过上面的推导，我们总结下Paxos算法的流程。</p>
<p>Paxos算法分为<strong>两个阶段</strong>。具体如下：</p>
<ul>
<li><p><strong>阶段一：</strong></p>
<p>(a) Proposer选择一个<strong>提案编号N</strong>，然后向<strong>半数以上</strong>的Acceptor发送编号为N的<strong>Prepare请求</strong>。</p>
<p>(b) 如果一个Acceptor收到一个编号为N的Prepare请求，且N<strong>大于</strong>该Acceptor已经<strong>响应过的</strong>所有<strong>Prepare请求</strong>的编号，那么它就会将它已经<strong>接受过的编号最大的提案（如果有的话）</strong>作为响应反馈给Proposer，同时该Acceptor承诺<strong>不再接受</strong>任何<strong>编号小于N的提案</strong>。</p>
</li>
<li><p><strong>阶段二：</strong></p>
<p>(a) 如果Proposer收到<strong>半数以上</strong>Acceptor对其发出的编号为N的Prepare请求的<strong>响应</strong>，那么它就会发送一个针对<strong>[N,V]提案</strong>的<strong>Accept请求</strong>给<strong>半数以上</strong>的Acceptor。注意：V就是收到的<strong>响应</strong>中<strong>编号最大的提案的value</strong>，如果响应中<strong>不包含任何提案</strong>，那么V就由Proposer<strong>自己决定</strong>。</p>
<p>(b) 如果Acceptor收到一个针对编号为N的提案的Accept请求，只要该Acceptor<strong>没有</strong>对编号<strong>大于N</strong>的<strong>Prepare请求</strong>做出过<strong>响应</strong>，它就<strong>接受该提案</strong>。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-44c5a422f917bfc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paxos算法流程"></p>
<h2 id="Learner学习被选定的value"><a href="#Learner学习被选定的value" class="headerlink" title="Learner学习被选定的value"></a>Learner学习被选定的value</h2><p>Learner学习（获取）被选定的value有如下三种方案：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-0fab48ed2bdf358a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片17.png"></p>
<h2 id="如何保证Paxos算法的活性"><a href="#如何保证Paxos算法的活性" class="headerlink" title="如何保证Paxos算法的活性"></a>如何保证Paxos算法的活性</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-28b18dd606777074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片18.png"></p>
<p>通过选取<strong>主Proposer</strong>，就可以保证Paxos算法的活性。至此，我们得到一个<strong>既能保证安全性，又能保证活性</strong>的<strong>分布式一致性算法</strong>——<strong>Paxos算法</strong>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>论文《Paxos Made Simple》</li>
<li>论文《The Part-Time Parliament》</li>
<li>英文版维基百科的Paxos</li>
<li>中文版维基百科的Paxos</li>
<li>书籍《从Paxos到ZooKeeper》</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式一致性算法 </category>
            
            <category> Paxos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> Paxos </tag>
            
            <tag> 分布式一致性算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解HashMap]]></title>
      <url>http://linbingdong.com/2017/04/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap/</url>
      <content type="html"><![CDATA[<p>JDK1.7和JDK1.8中HashMap的实现不尽相同，JDK1.8中做了一些优化，比如当链表多长时转化成红黑树，提高插入和查找的效率；扩容时不再重新哈希。</p>
<a id="more"></a>

<p>HashMap的源码比较长，加上注释有2000行左右，会在文末贴出。这里主要以提问题的形式来加深对HashMap的理解，读者可以先独立思考这些问题，再参照我的回答和文末的源码进行学习。</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>数组+链表+红黑树  </p>
<p>数组是一个Node数组，Node是一个Key-Value对，Node实现了Map.Entry&lt;K,V&gt;。链表/红黑树是用来解决hash冲突的。当链表的长度大于8时会转化成红黑树（Node-&gt;TreeNode），提高插入和查询的效率。</p>
<h3 id="HashMap继承了哪些类，实现了哪些接口"><a href="#HashMap继承了哪些类，实现了哪些接口" class="headerlink" title="HashMap继承了哪些类，实现了哪些接口"></a>HashMap继承了哪些类，实现了哪些接口</h3><p>继承了AbstractMap类，实现了Serializable/Cloneable/Map接口</p>
<h3 id="如何put和get"><a href="#如何put和get" class="headerlink" title="如何put和get"></a>如何put和get</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><ol>
<li>确定key对应的Node的索引： h = key.hashCode(); hash = h ^ (h &gt;&gt;&gt; 16); index = hash &amp; (length - 1)</li>
<li>如果第一个Node的key跟该key相等（hash值相同且equals），则返回第一个Node的value。</li>
<li>如果第一个是TreeNode，则用红黑树的方法进行搜索，找到key相同的返回该Node的value；如果第一个是Node，则按链表逐个搜索，找到key相同的返回该Node的value。</li>
<li>返回null</li>
</ol>
<h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><ol>
<li>如果数组长度为0，先扩容。如果已经是最大容量，则不再扩。</li>
<li>计算放置的位置（数组下标）。h = key.hashCode(); hash = h ^ h &gt;&gt;&gt; 16; index = hash &amp; (length - 1)</li>
<li>若该位置为null，则直接将新节点放入该位置</li>
<li>若该位置不为null，如果第一个节点的key跟要put的key相同（hashCode和equals），直接覆盖value</li>
<li>否则，判断是否为TreeNode，若是，则直接在红黑树中插入键值对。</li>
<li>若是链表，判断链表的长度是否大于8，如果大于8则转为红黑树，并在红黑树中插入。否则执行链表中的插入操作。遍历链表时若发现key已经存在则直接覆盖value。</li>
<li>如果超过阈值，就扩容。</li>
</ol>
<h3 id="初始容量和最大容量分别是多少"><a href="#初始容量和最大容量分别是多少" class="headerlink" title="初始容量和最大容量分别是多少"></a>初始容量和最大容量分别是多少</h3><p>默认初始容量为16（1&lt;&lt;4），可以在初始化时自己指定。最大容量为2的30次方（1&lt;&lt;30）,容量一定是2的整数幂</p>
<h3 id="加载因子（loadFactor）是多少，为什么"><a href="#加载因子（loadFactor）是多少，为什么" class="headerlink" title="加载因子（loadFactor）是多少，为什么"></a>加载因子（loadFactor）是多少，为什么</h3><p>0.75 </p>
<p>加载因子默认为0.75是对时间和空间的折中。加载因子越大，空间利用率越高，但是产生冲突的概率就越大，会导致put和get效率降低。</p>
<h3 id="如何确定Node在数组中的位置（如何构造哈希函数）"><a href="#如何确定Node在数组中的位置（如何构造哈希函数）" class="headerlink" title="如何确定Node在数组中的位置（如何构造哈希函数）"></a>如何确定Node在数组中的位置（如何构造哈希函数）</h3><ol>
<li>通过key.hashCode()获得 h = key.hashCode()，</li>
<li>将h的高16位和低16位异或。 hash = h ^ (h &gt;&gt;&gt; 16)</li>
<li>index = hash &amp; (length - 1)  等价于hash % length。前提是length必须为2的整数幂</li>
</ol>
<h3 id="如何减少冲突"><a href="#如何减少冲突" class="headerlink" title="如何减少冲突"></a>如何减少冲突</h3><ol>
<li>合理的加载因子，如果加载因子设置得过大会增加冲突的概率</li>
<li>合理的hash函数。比如将hashCode的高16位和低16位异或。</li>
</ol>
<h3 id="如何解决冲突"><a href="#如何解决冲突" class="headerlink" title="如何解决冲突"></a>如何解决冲突</h3><p>采用拉链法解决冲突（链表的插入采用头插法）。</p>
<h3 id="什么时候扩容，如何扩容"><a href="#什么时候扩容，如何扩容" class="headerlink" title="什么时候扩容，如何扩容"></a>什么时候扩容，如何扩容</h3><p>当Node数（size）超过阈值（threshold = 容量*加载因子）时会扩容。扩容为原来的两倍。</p>
<ol>
<li>新建一个两倍大的数组</li>
<li>把旧数组中的Node全部放入新数组。JDK1.7中所有的Node都会重新hash来确定在新数组中的位置，效率很低；但其实扩容为两倍后，新的Node下标要么跟原来相等，要么比原来大length。JDK1.8中就采取后面的方法，效率更高.</li>
</ol>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><p>包含 初始容量和加载因子 两个参数的构造函数<br>如果指定的初始容量大于最大容量，会以最大容量作为初始容量；<br>如果指定的初始容量不是2的整数幂，会找到大于该值的最小的2的整数幂作为初始容量。</p>
</li>
<li><p>默认构造函数<br>初始容量为16；加载因子为0.75</p>
</li>
<li><p>包含子map的构造函数</p>
</li>
</ul>
<h3 id="为什么数组容量要是2的整数幂"><a href="#为什么数组容量要是2的整数幂" class="headerlink" title="为什么数组容量要是2的整数幂"></a>为什么数组容量要是2的整数幂</h3><ol>
<li>这样hash % length 可以转化为 hash &amp; (length -1) 位运算效率更高</li>
<li>保证length - 1二进制表示的最低位为1。 如果最低位为 0 ，则按位与之后一定得到偶数（下标都是偶数），这样浪费了一大半的空间。</li>
</ol>
<h3 id="什么情况下HashMap会线程不安全"><a href="#什么情况下HashMap会线程不安全" class="headerlink" title="什么情况下HashMap会线程不安全"></a>什么情况下HashMap会线程不安全</h3><ol>
<li><p>如线程A和线程B同时put并写入相同的位置。两个线程都会得到该位置当前的头节点。如果A先写入新的头节点，然后B也写入新的头节点，那么B的操作就会覆盖A的操作造成A的写入操作丢失。</p>
</li>
<li><p>如多个线程同时put并刚好都达到门限值，然后都进行了resize（扩容）。此时每个线程都会生成一个新的数组并将table指针指向新的数组，结果最终只有最后一个线程的生成的新数组被赋给table变量，其他线程的均会丢失。</p>
</li>
</ol>
<p>HashMap源码（JDK1.8）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidObjectException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">     * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment">     * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Static utilities -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment">     * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment">     * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment">     * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment">     * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment">     * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment">     * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment">     * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment">     * are already reasonably distributed (so don't benefit from</span></span><br><span class="line"><span class="comment">     * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment">     * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment">     * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment">     * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment">     * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns x's Class if it is of the form "class C implements</span></span><br><span class="line"><span class="comment">     * Comparable&lt;C&gt;", else null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">            Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">            <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                        ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                         Comparable.class) &amp;&amp;</span><br><span class="line">                        (as = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                        <span class="keyword">return</span> c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns k.compareTo(x) if x matches kc (k's screened comparable</span></span><br><span class="line"><span class="comment">     * class), else 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;) <span class="comment">// for cast to Comparable</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">                ((Comparable)k).compareTo(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">     * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">     * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">     * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">     * for keySet() and values().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment">     * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment">     * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment">     * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line">    <span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line">    <span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line">    <span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor for the hash table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">     * capacity and load factor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity the initial capacity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  loadFactor      the load factor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative</span></span><br><span class="line"><span class="comment">     *         or the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span></span><br><span class="line"><span class="comment">     * capacity and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity the initial capacity.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the initial capacity is negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">     * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the</span></span><br><span class="line"><span class="comment">     * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with</span></span><br><span class="line"><span class="comment">     * default load factor (0.75) and an initial capacity sufficient to</span></span><br><span class="line"><span class="comment">     * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   m the map whose mappings are to be placed in this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  NullPointerException if the specified map is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.putAll and Map constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m the map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict false when initially constructing this map, else</span></span><br><span class="line"><span class="comment">     * true (relayed to method afterNodeInsertion).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                resize();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of key-value mappings in this map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of key-value mappings in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains no key-value mappings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;More formally, if this map contains a mapping from a key</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> k&#125; to a value &#123;<span class="doctag">@code</span> v&#125; such that &#123;<span class="doctag">@code</span> (key==null ? k==null :</span></span><br><span class="line"><span class="comment">     * key.equals(k))&#125;, then this method returns &#123;<span class="doctag">@code</span> v&#125;; otherwise</span></span><br><span class="line"><span class="comment">     * it returns &#123;<span class="doctag">@code</span> null&#125;.  (There can be at most one such mapping.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A return value of &#123;<span class="doctag">@code</span> null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span></span><br><span class="line"><span class="comment">     * indicate that the map contains no mapping for the key; it's also</span></span><br><span class="line"><span class="comment">     * possible that the map explicitly maps the key to &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment">     * The &#123;<span class="doctag">@link</span> #containsKey containsKey&#125; operation may be used to</span></span><br><span class="line"><span class="comment">     * distinguish these two cases.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #put(Object, Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.get and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the</span></span><br><span class="line"><span class="comment">     * specified key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   key   The key whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified</span></span><br><span class="line"><span class="comment">     * key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">     * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment">     * value is replaced.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">     *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">     *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes or doubles table size.  If null, allocates in</span></span><br><span class="line"><span class="comment">     * accord with initial capacity target held in field threshold.</span></span><br><span class="line"><span class="comment">     * Otherwise, because we are using power-of-two expansion, the</span></span><br><span class="line"><span class="comment">     * elements from each bin must either stay at same index, or move</span></span><br><span class="line"><span class="comment">     * with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment">     * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copies all of the mappings from the specified map to this map.</span></span><br><span class="line"><span class="comment">     * These mappings will replace any mappings that this map had for</span></span><br><span class="line"><span class="comment">     * any of the keys currently in the specified map.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m mappings to be stored in this map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified map is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        putMapEntries(m, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the mapping for the specified key from this map if present.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key key whose mapping is to be removed from the map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment">     *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment">     *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.remove and related methods</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to match if matchValue, else ignored</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matchValue if true only remove if value is equal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> movable if false do not move other nodes while removing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes all of the mappings from this map.</span></span><br><span class="line"><span class="comment">     * The map will be empty after this call returns.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     * specified value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value whose presence in this map is to be tested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span></span><br><span class="line"><span class="comment">     *         specified value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                        (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the keys contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  If the map is modified</span></span><br><span class="line"><span class="comment">     * while an iteration over the set is in progress (except through</span></span><br><span class="line"><span class="comment">     * the iterator's own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of</span></span><br><span class="line"><span class="comment">     * the iteration are undefined.  The set supports element removal,</span></span><br><span class="line"><span class="comment">     * which removes the corresponding mapping from the map, via the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * operations.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a set view of the keys contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;K&gt; ks;</span><br><span class="line">        <span class="keyword">return</span> (ks = keySet) == <span class="keyword">null</span> ? (keySet = <span class="keyword">new</span> KeySet()) : ks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KeySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Collection&#125; view of the values contained in this map.</span></span><br><span class="line"><span class="comment">     * The collection is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the collection, and vice-versa.  If the map is</span></span><br><span class="line"><span class="comment">     * modified while an iteration over the collection is in progress</span></span><br><span class="line"><span class="comment">     * (except through the iterator's own &lt;tt&gt;remove&lt;/tt&gt; operation),</span></span><br><span class="line"><span class="comment">     * the results of the iteration are undefined.  The collection</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not</span></span><br><span class="line"><span class="comment">     * support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a view of the values contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;V&gt; vs;</span><br><span class="line">        <span class="keyword">return</span> (vs = values) == <span class="keyword">null</span> ? (values = <span class="keyword">new</span> Values()) : vs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123; <span class="keyword">return</span> containsValue(o); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ValueSpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e.value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> Set&#125; view of the mappings contained in this map.</span></span><br><span class="line"><span class="comment">     * The set is backed by the map, so changes to the map are</span></span><br><span class="line"><span class="comment">     * reflected in the set, and vice-versa.  If the map is modified</span></span><br><span class="line"><span class="comment">     * while an iteration over the set is in progress (except through</span></span><br><span class="line"><span class="comment">     * the iterator's own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the</span></span><br><span class="line"><span class="comment">     * iterator) the results of the iteration are undefined.  The set</span></span><br><span class="line"><span class="comment">     * supports element removal, which removes the corresponding</span></span><br><span class="line"><span class="comment">     * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not support the</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a set view of the mappings contained in this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">        <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> EntrySet()) : es;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">            Object key = e.getKey();</span><br><span class="line">            Node&lt;K,V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">                Object key = e.getKey();</span><br><span class="line">                Object value = e.getValue();</span><br><span class="line">                <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> mc = modCount;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overrides of JDK8 Map extension methods</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? defaultValue : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e; V v;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            ((v = e.value) == oldValue || (v != <span class="keyword">null</span> &amp;&amp; v.equals(oldValue)))) &#123;</span><br><span class="line">            e.value = newValue;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfAbsent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K,V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K,V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">            (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K,V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; (oldValue = old.value) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        V v = mappingFunction.apply(key);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            old.value = v;</span><br><span class="line">            afterNodeAccess(old);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">            t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[i] = newNode(hash, key, v, first);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        ++size;</span><br><span class="line">        afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">computeIfPresent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        Node&lt;K,V&gt; e; V oldValue;</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash, key)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            (oldValue = e.value) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                e.value = v;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">compute</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                     BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K,V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K,V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">            (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K,V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        V oldValue = (old == <span class="keyword">null</span>) ? <span class="keyword">null</span> : old.value;</span><br><span class="line">        V v = remappingFunction.apply(key, oldValue);</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, v);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[i] = newNode(hash, key, v, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            ++modCount;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">merge</span><span class="params">(K key, V value,</span></span></span><br><span class="line"><span class="function"><span class="params">                   BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (remappingFunction == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">        TreeNode&lt;K,V&gt; t = <span class="keyword">null</span>;</span><br><span class="line">        Node&lt;K,V&gt; old = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold || (tab = table) == <span class="keyword">null</span> ||</span><br><span class="line">            (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((first = tab[i = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K,V&gt; e = first; K k;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        old = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++binCount;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">if</span> (old.value != <span class="keyword">null</span>)</span><br><span class="line">                v = remappingFunction.apply(old.value, value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v = value;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">                old.value = v;</span><br><span class="line">                afterNodeAccess(old);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                removeNode(hash, key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                t.putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tab[i] = newNode(hash, key, value, first);</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                    treeifyBin(tab, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            ++modCount;</span><br><span class="line">            ++size;</span><br><span class="line">            afterNodeInsertion(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key, e.value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (function == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mc = modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    e.value = function.apply(e.key, e.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// Cloning and serialization</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a shallow copy of this &lt;tt&gt;HashMap&lt;/tt&gt; instance: the keys and</span></span><br><span class="line"><span class="comment">     * values themselves are not cloned.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a shallow copy of this map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;K,V&gt; result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (HashMap&lt;K,V&gt;)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">        result.reinitialize();</span><br><span class="line">        result.putMapEntries(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These methods are also used when serializing HashSets</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> loadFactor; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (table != <span class="keyword">null</span>) ? table.length :</span><br><span class="line">            (threshold &gt; <span class="number">0</span>) ? threshold :</span><br><span class="line">            DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;HashMap&lt;/tt&gt; instance to a stream (i.e.,</span></span><br><span class="line"><span class="comment">     * serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The &lt;i&gt;capacity&lt;/i&gt; of the HashMap (the length of the</span></span><br><span class="line"><span class="comment">     *             bucket array) is emitted (int), followed by the</span></span><br><span class="line"><span class="comment">     *             &lt;i&gt;size&lt;/i&gt; (an int, the number of key-value</span></span><br><span class="line"><span class="comment">     *             mappings), followed by the key (Object) and value (Object)</span></span><br><span class="line"><span class="comment">     *             for each key-value mapping.  The key-value mappings are</span></span><br><span class="line"><span class="comment">     *             emitted in no particular order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> buckets = capacity();</span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeInt(buckets);</span><br><span class="line">        s.writeInt(size);</span><br><span class="line">        internalWriteEntries(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &#123;<span class="doctag">@code</span> HashMap&#125; instance from a stream (i.e.,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        reinitialize();</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                             loadFactor);</span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal mappings count: "</span> +</span><br><span class="line">                                             mappings);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">            <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">            <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">            <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">            <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">            <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                       DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                       (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                       MAXIMUM_CAPACITY :</span><br><span class="line">                       tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">                Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    K key = (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    V value = (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// iterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">        Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></span><br><span class="line">        <span class="keyword">int</span> index;             <span class="comment">// current slot</span></span><br><span class="line"></span><br><span class="line">        HashIterator() &#123;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            Node&lt;K,V&gt;[] t = table;</span><br><span class="line">            current = next = <span class="keyword">null</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">                <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt;[] t;</span><br><span class="line">            Node&lt;K,V&gt; e = next;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; p = current;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">            K key = p.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().key; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// spliterators</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;K,V&gt; map;</span><br><span class="line">        Node&lt;K,V&gt; current;          <span class="comment">// current node</span></span><br><span class="line">        <span class="keyword">int</span> index;                  <span class="comment">// current index, modified on advance/split</span></span><br><span class="line">        <span class="keyword">int</span> fence;                  <span class="comment">// one past last index</span></span><br><span class="line">        <span class="keyword">int</span> est;                    <span class="comment">// size estimate</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;       <span class="comment">// for comodification checks</span></span><br><span class="line"></span><br><span class="line">        HashMapSpliterator(HashMap&lt;K,V&gt; m, <span class="keyword">int</span> origin,</span><br><span class="line">                           <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                           <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.map = m;</span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.est = est;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence and size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                HashMap&lt;K,V&gt; m = map;</span><br><span class="line">                est = m.size;</span><br><span class="line">                expectedModCount = m.modCount;</span><br><span class="line">                Node&lt;K,V&gt;[] tab = m.table;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            getFence(); <span class="comment">// force init</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>) est;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">        KeySpliterator(HashMap&lt;K,V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                       <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> KeySpliterator&lt;K,V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> KeySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                                        expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p.key);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> K&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        K k = current.key;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(k);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                Spliterator.DISTINCT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ValueSpliterator(HashMap&lt;K,V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ValueSpliterator&lt;K,V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> ValueSpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                                          expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p.value);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        V v = current.value;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(v);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">HashMapSpliterator</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">        EntrySpliterator(HashMap&lt;K,V&gt; m, <span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> est,</span><br><span class="line">                         <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">super</span>(m, origin, fence, est, expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> EntrySpliterator&lt;K,V&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid || current != <span class="keyword">null</span>) ? <span class="keyword">null</span> :</span><br><span class="line">                <span class="keyword">new</span> EntrySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= <span class="number">1</span>,</span><br><span class="line">                                          expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i, hi, mc;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            HashMap&lt;K,V&gt; m = map;</span><br><span class="line">            Node&lt;K,V&gt;[] tab = m.table;</span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mc = expectedModCount = m.modCount;</span><br><span class="line">                hi = fence = (tab == <span class="keyword">null</span>) ? <span class="number">0</span> : tab.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mc = expectedModCount;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= hi &amp;&amp;</span><br><span class="line">                (i = index) &gt;= <span class="number">0</span> &amp;&amp; (i &lt; (index = hi) || current != <span class="keyword">null</span>)) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = current;</span><br><span class="line">                current = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                        p = tab[i++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        action.accept(p);</span><br><span class="line">                        p = p.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span> || i &lt; hi);</span><br><span class="line">                <span class="keyword">if</span> (m.modCount != mc)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Node&lt;K,V&gt;[] tab = map.table;</span><br><span class="line">            <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="keyword">null</span> || index &lt; hi) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">                        current = tab[index++];</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Node&lt;K,V&gt; e = current;</span><br><span class="line">                        current = current.next;</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                        <span class="keyword">if</span> (map.modCount != expectedModCount)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (fence &lt; <span class="number">0</span> || est == map.size ? Spliterator.SIZED : <span class="number">0</span>) |</span><br><span class="line">                Spliterator.DISTINCT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// LinkedHashMap support</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The following package-protected methods are designed to be</span></span><br><span class="line"><span class="comment">     * overridden by LinkedHashMap, but not by any other subclass.</span></span><br><span class="line"><span class="comment">     * Nearly all other internal methods are also package-protected</span></span><br><span class="line"><span class="comment">     * but are declared final, so can be used by LinkedHashMap, view</span></span><br><span class="line"><span class="comment">     * classes, and HashSet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a regular (non-tree) node</span></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For conversion from TreeNodes to plain nodes</span></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a tree bin node</span></span><br><span class="line">    <span class="function">TreeNode&lt;K,V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For treeifyBin</span></span><br><span class="line">    <span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reset to initial default state.  Called by clone and readObject.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reinitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        table = <span class="keyword">null</span>;</span><br><span class="line">        entrySet = <span class="keyword">null</span>;</span><br><span class="line">        keySet = <span class="keyword">null</span>;</span><br><span class="line">        values = <span class="keyword">null</span>;</span><br><span class="line">        modCount = <span class="number">0</span>;</span><br><span class="line">        threshold = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called only from writeObject, to ensure compatible ordering.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    s.writeObject(e.key);</span><br><span class="line">                    s.writeObject(e.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">    <span class="comment">// Tree bins</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn</span></span><br><span class="line"><span class="comment">     * extends Node) so can be used as extension of either regular or</span></span><br><span class="line"><span class="comment">     * linked node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Ensures that the given root is the first node of its bin.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">                TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">                <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; rn;</span><br><span class="line">                    tab[index] = root;</span><br><span class="line">                    TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">                    <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">                    <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                        rp.next = rn;</span><br><span class="line">                    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                        first.prev = root;</span><br><span class="line">                    root.next = first;</span><br><span class="line">                    root.prev = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Finds the node starting at root p with the given hash and key.</span></span><br><span class="line"><span class="comment">         * The kc argument caches comparableClassFor(key) upon first use</span></span><br><span class="line"><span class="comment">         * comparing keys.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                          (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Calls find for root node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tie-breaking utility for ordering insertions when equal</span></span><br><span class="line"><span class="comment">         * hashCodes and non-comparable. We don't require a total</span></span><br><span class="line"><span class="comment">         * order, just a consistent insertion rule to maintain</span></span><br><span class="line"><span class="comment">         * equivalence across rebalancings. Tie-breaking further than</span></span><br><span class="line"><span class="comment">         * necessary simplifies testing a bit.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> d;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">                (d = a.getClass().getName().</span><br><span class="line">                 compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">                d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                     -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Forms tree of the nodes linked from this node.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> root of tree</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    root = x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            root = balanceInsertion(root, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            moveRootToFront(tab, root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns a list of non-TreeNodes replacing those linked from</span></span><br><span class="line"><span class="comment">         * this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tl.next = p;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Tree version of putVal.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                            ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    xp.next = x;</span><br><span class="line">                    x.parent = x.prev = xp;</span><br><span class="line">                    <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Removes the given node, that must be present before this call.</span></span><br><span class="line"><span class="comment">         * This is messier than typical red-black deletion code because we</span></span><br><span class="line"><span class="comment">         * cannot swap the contents of an interior node with a leaf</span></span><br><span class="line"><span class="comment">         * successor that is pinned by "next" pointers that are accessible</span></span><br><span class="line"><span class="comment">         * independently during traversal. So instead we swap the tree</span></span><br><span class="line"><span class="comment">         * linkages. If the current tree appears to have too few nodes,</span></span><br><span class="line"><span class="comment">         * the bin is converted back to a plain bin. (The test triggers</span></span><br><span class="line"><span class="comment">         * somewhere between 2 and 6 nodes, depending on tree structure).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeTreeNode</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">            TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class="line">            TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                tab[index] = first = succ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = succ;</span><br><span class="line">            <span class="keyword">if</span> (succ != <span class="keyword">null</span>)</span><br><span class="line">                succ.prev = pred;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (root.parent != <span class="keyword">null</span>)</span><br><span class="line">                root = root.root();</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.right == <span class="keyword">null</span> ||</span><br><span class="line">                (rl = root.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">            <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">                <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">                    s = sl;</span><br><span class="line">                <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">                TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">                TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s's direct parent</span></span><br><span class="line">                    p.parent = s;</span><br><span class="line">                    s.right = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">                    <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                            sp.left = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            sp.right = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                        pr.parent = s;</span><br><span class="line">                &#125;</span><br><span class="line">                p.left = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">                    sr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">                    pl.parent = s;</span><br><span class="line">                <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">                    root = s;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = s;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = s;</span><br><span class="line">                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                    replacement = sr;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    replacement = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">                replacement = pr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                replacement = p;</span><br><span class="line">            <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">                <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">                    root = replacement;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                    pp.left = replacement;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = replacement;</span><br><span class="line">                p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">                TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">                p.parent = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (pp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                        pp.left = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                        pp.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (movable)</span><br><span class="line">                moveRootToFront(tab, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Splits nodes in a tree bin into lower and upper tree bins,</span></span><br><span class="line"><span class="comment">         * or untreeifies if now too small. Called only from resize;</span></span><br><span class="line"><span class="comment">         * see above discussion about split bits and indices.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> map the map</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tab the table for recording bin heads</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> index the index of the table being split</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> bit the bit of hash to split on</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">            TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">                e.next = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                        loHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        loTail.next = e;</span><br><span class="line">                    loTail = e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                        hiHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hiTail.next = e;</span><br><span class="line">                    hiTail = e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] = loHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = loHead;</span><br><span class="line">                    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ------------------------------------------------------------ */</span></span><br><span class="line">        <span class="comment">// Red-black tree methods, all adapted from CLR</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">                    rl.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = r).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">                    pp.left = r;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.right = r;</span><br><span class="line">                r.left = p;</span><br><span class="line">                p.parent = r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">                    lr.parent = p;</span><br><span class="line">                <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">                    pp.right = l;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pp.left = l;</span><br><span class="line">                l.right = p;</span><br><span class="line">                p.parent = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">            x.red = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                        xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                            root = rotateLeft(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                        xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        x = xpp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                            root = rotateRight(root, x = xp);</span><br><span class="line">                            xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            xp.red = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> root;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                        xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                            (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                            xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateRight(root, xpr);</span><br><span class="line">                                xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                    <span class="keyword">null</span> : xp.right;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateLeft(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                        xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                        x = xp;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                        <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                            (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                            xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                            x = xp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                                    sr.red = <span class="keyword">false</span>;</span><br><span class="line">                                xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                                root = rotateLeft(root, xpl);</span><br><span class="line">                                xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                                    <span class="keyword">null</span> : xp.left;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                                <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                                    sl.red = <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                                root = rotateRight(root, xp);</span><br><span class="line">                            &#125;</span><br><span class="line">                            x = root;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Recursive invariant check</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">checkInvariants</span><span class="params">(TreeNode&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right,</span><br><span class="line">                tb = t.prev, tn = (TreeNode&lt;K,V&gt;)t.next;</span><br><span class="line">            <span class="keyword">if</span> (tb != <span class="keyword">null</span> &amp;&amp; tb.next != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tn != <span class="keyword">null</span> &amp;&amp; tn.prev != t)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tp != <span class="keyword">null</span> &amp;&amp; t != tp.left &amp;&amp; t != tp.right)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (t.red &amp;&amp; tl != <span class="keyword">null</span> &amp;&amp; tl.red &amp;&amp; tr != <span class="keyword">null</span> &amp;&amp; tr.red)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tl != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tl))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr != <span class="keyword">null</span> &amp;&amp; !checkInvariants(tr))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[生产者消费者模式]]></title>
      <url>http://linbingdong.com/2017/04/14/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</p>
<a id="more"></a>

<h2 id="什么是生产者消费者模式"><a href="#什么是生产者消费者模式" class="headerlink" title="什么是生产者消费者模式"></a>什么是生产者消费者模式</h2><p>生产者消费者模式通过一个容器（比如阻塞队列 BlockingQueue ）来解决生产者和消费者的紧耦合问题。生产者和消费者之间不直接通信，而是通过阻塞队列来通信。生产者生产完数据后不用等待消费者处理，而是直接将生产的数据放入阻塞队列；消费者不从生产者那里要数据，而是直接从阻塞队列里取。阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>阻塞队列提供了可阻塞的 put 和 take 方法，以及支持定时的 offer 和 poll 方法。如果队列已经满了，那么 put 方法将阻塞直到有空间可用；如果队列为空，那么 take 方法将会阻塞直到阻塞队列里有元素可用。</p>
<h2 id="为什么要用生产者消费者模式"><a href="#为什么要用生产者消费者模式" class="headerlink" title="为什么要用生产者消费者模式"></a>为什么要用生产者消费者模式</h2><ol>
<li>生产者消费者模式可以使生产者类和消费者类解耦，这样能大大简化开发过程，因为它消除了生产者类和消费者类之间的代码依赖性。</li>
<li>生产者消费者模式可以解决生产消费能力不均衡的问题，从而提高整体处理数据的速度。假设不使用生产者消费者模式，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据；有了生产者消费者模式，生产者就可以不用等待消费者了，这样提高了生产者生产数据的效率。</li>
</ol>
<h2 id="使用阻塞队列实现生产者消费者模式"><a href="#使用阻塞队列实现生产者消费者模式" class="headerlink" title="使用阻塞队列实现生产者消费者模式"></a>使用阻塞队列实现生产者消费者模式</h2><p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(blockingQueue), <span class="string">"Producer"</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(blockingQueue), <span class="string">"Consumer"</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String product = <span class="string">"Produced by "</span> + Thread.currentThread().getName();</span><br><span class="line">            blockingQueue.put(product);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" produced a product"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String product = blockingQueue.take();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" cunsumed product "</span>+ product);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Producer0 produced a product</span><br><span class="line">Producer2 produced a product</span><br><span class="line">Producer3 produced a product</span><br><span class="line">Producer1 produced a product</span><br><span class="line">Producer4 produced a product</span><br><span class="line">Producer5 produced a product</span><br><span class="line">Producer6 produced a product</span><br><span class="line">Producer7 produced a product</span><br><span class="line">Producer8 produced a product</span><br><span class="line">Producer9 produced a product</span><br><span class="line">Consumer0 cunsumed product Produced by Producer0</span><br><span class="line">Producer11 produced a product</span><br><span class="line">Producer12 produced a product</span><br><span class="line">Producer10 produced a product</span><br><span class="line">Consumer1 cunsumed product Produced by Producer1</span><br><span class="line">Consumer0 cunsumed product Produced by Producer2</span><br><span class="line">Producer13 produced a product</span><br><span class="line">Consumer1 cunsumed product Produced by Producer3</span><br><span class="line">Consumer1 cunsumed product Produced by Producer5</span><br><span class="line">Producer15 produced a product</span><br><span class="line">Consumer0 cunsumed product Produced by Producer4</span><br><span class="line">Producer16 produced a product</span><br><span class="line">Consumer1 cunsumed product Produced by Producer6</span><br><span class="line">Producer14 produced a product</span><br><span class="line">Producer18 produced a product</span><br><span class="line">Consumer1 cunsumed product Produced by Producer8</span><br><span class="line">Producer17 produced a product</span><br><span class="line">Consumer0 cunsumed product Produced by Producer7</span><br><span class="line">Producer19 produced a product</span><br><span class="line">Consumer1 cunsumed product Produced by Producer9</span><br><span class="line">Consumer0 cunsumed product Produced by Producer10</span><br><span class="line">Consumer1 cunsumed product Produced by Producer11</span><br><span class="line">Consumer0 cunsumed product Produced by Producer12</span><br><span class="line">Consumer1 cunsumed product Produced by Producer13</span><br><span class="line">Consumer0 cunsumed product Produced by Producer14</span><br><span class="line">Consumer1 cunsumed product Produced by Producer15</span><br><span class="line">Consumer0 cunsumed product Produced by Producer16</span><br><span class="line">Consumer1 cunsumed product Produced by Producer17</span><br><span class="line">Consumer0 cunsumed product Produced by Producer18</span><br><span class="line">Consumer1 cunsumed product Produced by Producer19</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员必读书单]]></title>
      <url>http://linbingdong.com/2017/04/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<p><a href="http://zh.lucida.me/" target="_blank" rel="noopener">Lucida</a>大神这篇文章写得非常详细，<a href="http://zh.lucida.me/blog/developer-reading-list/#cracking_the_coding_interview" target="_blank" rel="noopener">点此查看</a>。</p>
<a id="more"></a>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 好文转载 </tag>
            
            <tag> 必读书单 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tmpfs]]></title>
      <url>http://linbingdong.com/2017/04/11/tmpfs/</url>
      <content type="html"><![CDATA[<p>tmpfs是一种基于内存的文件系统，它和虚拟磁盘ramdisk比较类似像，但不完全相同。和ramdisk一样，tmpfs可以使用内存，但它也可以使用swap分区来存储。而且传统的ramdisk是个块设备，要用mkfs格式化才能使用；而tmpfs是一个文件系统，并不是块设备，不需要格式化。tmpfs是最好的基于内存的文件系统。</p>
<a id="more"></a>

<p>用一个简单的mount命令就可以创建tmpfs文件系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount tmpfs -t tmpfs /data/test -o size=10g</span><br></pre></td></tr></table></figure>

<p>将tmpfs挂载到/data/mfs目录后，往/data/mfs写入的内容都会写到内存里。如果需要重新设置分配的内存大小，可以先umount，再重新挂载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umount /data/mfs</span><br><span class="line">mount tmpfs -t tmpfs /data/test -o size=20g</span><br></pre></td></tr></table></figure>

<p>也可以在/etc/fstab里设置。</p>
<p>MooseFS是分布式文件系统，正常情况下文件是写到chunkserver节点的磁盘里。如果想让文件写入内存，可以将tmpfs挂到MooseFS的chunkserver节点的数据目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount tmpfs -t tmpfs /data/mfs -o size=50g</span><br></pre></td></tr></table></figure>

<p>这样以后往MooseFS里写数据就都写到内存里了。</p>
<p>注意：</p>
<ol>
<li>挂载前应该先关闭MooseFS，挂载后再启动MooseFS。没有启动MooseFS的话执行<code>df -h</code>命令会无响应。</li>
<li>该方法只是用来尝鲜，如果想使用基于内存的分布式文件系统，应该使用类似Alluxio这样的组件。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tmpfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统(Distributed System)资料大全]]></title>
      <url>http://linbingdong.com/2017/04/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F(Distributed%20System)%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>分布式系统资料大全，enjoy！</p>
<a id="more"></a>

<ul>
<li><a href="http://sydney.edu.au/engineering/it/~gramoli/doc/pubs/OPODIS05.pdf" target="_blank" rel="noopener">《Reconfigurable Distributed Storage for Dynamic Networks》</a></li>
</ul>
<p>介绍:这是一篇介绍在动态网络里面实现分布式系统重构的paper.论文的作者(导师)是MIT读博的时候是做分布式系统的研究的,现在在NUS带学生,不仅仅是<a href="http://www.comp.nus.edu.sg/~gilbert/biblio-projects.html#rambo" target="_blank" rel="noopener">分布式系统</a>,还有无线网络.如果感兴趣可以去他的主页了解.</p>
<ul>
<li><a href="http://lpd.epfl.ch/site" target="_blank" rel="noopener">《Distributed porgramming liboratory》</a></li>
</ul>
<p>介绍:分布式编程实验室,他们发表的很多的<a href="http://lpd.epfl.ch/site/Publications" target="_blank" rel="noopener">paper</a>,其中不仅仅是学术研究,还有一些工业界应用的论文.</p>
<ul>
<li><a href="http://groups.csail.mit.edu/tds/" target="_blank" rel="noopener">《MIT Theory of Distributed Systems》</a></li>
</ul>
<p>介绍:麻省理工的分布式系统理论主页,作者南希·林奇在2002年证明了<a href="http://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">CAP理论</a>,并且著《分布式算法》一书.</p>
<ul>
<li><a href="http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/" target="_blank" rel="noopener">《Notes on Distributed Systems for Young Bloods》</a></li>
</ul>
<p>介绍:分布式系统搭建初期的一些建议</p>
<ul>
<li><a href="http://dcg.ethz.ch/lectures/podc_allstars/" target="_blank" rel="noopener">《Principles of Distributed Computing》</a></li>
</ul>
<p>介绍:分布式计算原理课程</p>
<ul>
<li><a href="http://research.google.com/archive/spanner.html" target="_blank" rel="noopener">《Google’s Globally-Distributed Database》</a></li>
</ul>
<p>介绍:Google全球分布式数据介绍,<a href="http://dblab.xmu.edu.cn/wp-content/uploads/2012/09/20120925_094508_876.pdf" target="_blank" rel="noopener">中文版</a></p>
<ul>
<li><a href="http://highscalability.com/blog/2015/3/9/the-architecture-of-algolias-distributed-search-network.html" target="_blank" rel="noopener">《The Architecture Of Algolia’s Distributed Search Network》</a></li>
</ul>
<p>介绍:Algolia的分布式搜索网络的体系架构介绍</p>
<ul>
<li><a href="https://medium.com/@siddontang/build-up-a-high-availability-distributed-key-value-store-b4e02bc46e9e" target="_blank" rel="noopener">《Build up a High Availability Distributed Key-Value Store》</a></li>
</ul>
<p>介绍:构建高可用分布式Key-Value存储系统</p>
<ul>
<li><a href="https://daniel-j-h.github.io/post/distributed-search-nanomsg-bond/" target="_blank" rel="noopener">《Distributed Search Engine with Nanomsg and Bond》</a></li>
</ul>
<p>介绍:Nanomsg和Bond的分布式搜索引擎</p>
<ul>
<li><a href="http://tech.gc.com/distributed-processing-with-mongodb-and-mongothon/" target="_blank" rel="noopener">《Distributed Processing With MongoDB And Mongothon》</a></li>
</ul>
<p>介绍:使用MongoDB和Mongothon进行分布式处理</p>
<ul>
<li><a href="http://muratbuffalo.blogspot.jp/2015/02/salt-combining-acid-and-base-in.html" target="_blank" rel="noopener">《Salt: Combining ACID and BASE in a Distributed Database》</a></li>
</ul>
<p>介绍:分布式数据库中把<a href="http://www.sigma.me/2011/06/17/database-ACID-and-BASE.html" target="_blank" rel="noopener">ACID与BASE</a>结合使用.</p>
<ul>
<li><a href="http://paxos.systems/" target="_blank" rel="noopener">《Makes it easy to understand Paxos for Distributed Systems》</a></li>
</ul>
<p>介绍:理解的Paxos的分布式系统,<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a></p>
<ul>
<li><a href="http://queue.acm.org/detail.cfm?id=2745385" target="_blank" rel="noopener">《There is No Now Problems with simultaneity in distributed systems》</a></li>
</ul>
<p>介绍:There is No Now Problems with simultaneity in distributed systems</p>
<ul>
<li><a href="http://www0.cs.ucl.ac.uk/staff/ucacwxe/lectures/ds98-99/" target="_blank" rel="noopener">《Distributed Systems》</a></li>
</ul>
<p>介绍:伦敦大学学院分布式系统课程课件.</p>
<ul>
<li><a href="http://book.mixu.net/distsys/index.html" target="_blank" rel="noopener">《Distributed systems for fun and profit》</a></li>
</ul>
<p>介绍:分布式系统电子书籍.</p>
<ul>
<li><a href="http://www.andrew.cmu.edu/course/95-702/" target="_blank" rel="noopener">《Distributed Systems Spring 2015》</a></li>
</ul>
<p>介绍:卡内基梅隆大学春季分布式课程主页</p>
<ul>
<li><a href="https://azmuri.files.wordpress.com/2013/09/george-coulouris-distributed-systems-concepts-and-design-5th-edition.pdf" target="_blank" rel="noopener">《Distributed Systems: Concepts and Design (5th Edition)》</a></li>
</ul>
<p>介绍: 电子书,分布式系统概念与设计(第五版)</p>
<ul>
<li><a href="http://ithelp.ithome.com.tw/profile/share?id=20060041" target="_blank" rel="noopener">《走向分布式》</a></li>
</ul>
<p>介绍:这是一位台湾网友 ccshih 的文字，短短的篇幅介绍了分布式系统的若干要点。<a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="noopener">pdf</a></p>
<ul>
<li><a href="http://thu-cmu.cs.tsinghua.edu.cn/curriculum/dscourse/index.htm" target="_blank" rel="noopener">《Introduction to Distributed Systems Spring 2013》</a></li>
</ul>
<p>介绍:清华大学分布式系统课程主页,里面的schedule栏目有很多宝贵的资源</p>
<ul>
<li><a href="http://book.mixu.net/distsys/index.html" target="_blank" rel="noopener">《Distributed systems》</a></li>
</ul>
<p>介绍:免费的在线分布式系统书籍</p>
<ul>
<li><a href="http://www.quora.com/What-are-some-good-resources-for-learning-about-distributed-computing-Why" target="_blank" rel="noopener">《Some good resources for learning about distributed computing》</a></li>
</ul>
<p>介绍:Quora上面的一篇关于学习分布式计算的资源.</p>
<ul>
<li><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/es//archive/spanner-osdi2012.pdf" target="_blank" rel="noopener">《Spanner: Google’s Globally-Distributed Database》</a></li>
</ul>
<p>介绍:这个是第一个全球意义上的分布式数据库，也是Google的作品。其中介绍了很多一致性方面的设计考虑，为了简单的逻辑设计，还采用了原子钟，同样在分布式系统方面具有很强的借鉴意义.</p>
<ul>
<li><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/zh-CN//archive/chubby-osdi06.pdf" target="_blank" rel="noopener">《The Chubby lock service for loosely-coupled distributed systems》</a></li>
</ul>
<p>介绍:Google的统面向松散耦合的分布式系统的锁服务,这篇论文详细介绍了Google的分布式锁实现机制Chubby。Chubby是一个基于文件实现的分布式锁，Google的Bigtable、Mapreduce和Spanner服务都是在这个基础上构建的，所以Chubby实际上是Google分布式事务的基础，具有非常高的参考价值。另外，著名的zookeeper就是基于Chubby的开源实现.推荐<a href="http://malteschwarzkopf.de/research/assets/google-stack.pdf" target="_blank" rel="noopener">The google stack</a>,<a href="https://www.youtube.com/watch?v=PqItueBaiRg" target="_blank" rel="noopener">Youtube:The Chubby lock service for loosely-coupled distributed systems</a></p>
<ul>
<li><a href="http://www.sosp2007.org/papers/sosp064-aguilera.pdf" target="_blank" rel="noopener">《Sinfonia: a new paradigm for building scalable distributed systems》</a></li>
</ul>
<p>介绍:这篇论文是SOSP2007的Best Paper，阐述了一种构建分布式文件系统的范式方法，个人感觉非常有用。淘宝在构建TFS、OceanBase和Tair这些系统时都充分参考了这篇论文.</p>
<ul>
<li><a href="http://lintool.github.io/MapReduceAlgorithms/MapReduce-book-final.pdf" target="_blank" rel="noopener">《Data-Intensive Text Processing with MapReduce》</a></li>
</ul>
<p>介绍:Ebook:Data-Intensive Text Processing with MapReduce.</p>
<ul>
<li><a href="http://www.utdallas.edu/~bxt043000/Publications/Journal-Papers/DAS/J16_Design_and_Implementation_of_a_Distributed_Query_Processor.pdf" target="_blank" rel="noopener">《Design and Implementation of a Query Processor for a Trusted Distributed Data Base Management System》</a></li>
</ul>
<p>介绍:Design and Implementation of a Query Processor for a Trusted Distributed Data Base Management System.</p>
<ul>
<li><a href="http://ogsa-dai.sourceforge.net/documentation/ogsadai4.0/ogsadai4.0-gt/DQPPart.html" target="_blank" rel="noopener">《Distributed Query Processing》</a></li>
</ul>
<p>介绍:分布式查询入门.</p>
<ul>
<li><a href="http://writings.quilt.org/2014/05/12/distributed-systems-and-the-end-of-the-api/" target="_blank" rel="noopener">《Distributed Systems and the End of the API》</a></li>
</ul>
<p>介绍:分布式系统和api总结.</p>
<ul>
<li><a href="http://www.andrew.cmu.edu/course/15-749/READINGS/required/" target="_blank" rel="noopener">《Distributed Query Reading》</a></li>
</ul>
<p>介绍:分布式系统阅读论文，此外还推荐github上面的一个论文列表<a href="http://reiddraper.github.io/distreader/" target="_blank" rel="noopener">The Distributed Reader</a>。</p>
<ul>
<li><a href="http://afeinberg.github.io/2011/06/17/replication-atomicity-and-order-in-distributed-systems.html" target="_blank" rel="noopener">《Replication, atomicity and order in distributed systems》</a></li>
</ul>
<p>介绍:Replication, atomicity and order in distributed systems</p>
<ul>
<li><a href="http://nil.csail.mit.edu/6.824/2015/" target="_blank" rel="noopener">《MIT course:Distributed Systems》</a></li>
</ul>
<p>介绍:2015年MIT分布式系统课程主页，这次用Golang作为授课语言。<a href="https://pdos.csail.mit.edu/6.824/" target="_blank" rel="noopener">6.824 Distributed Systems</a>课程主页</p>
<ul>
<li><a href="http://book.mixu.net/distsys/" target="_blank" rel="noopener">《Distributed systems for fun and profit》</a></li>
</ul>
<p>介绍:免费分布式系统电子书。</p>
<ul>
<li><a href="http://ori.scs.stanford.edu/" target="_blank" rel="noopener">《Ori：A Secure Distributed File System》</a></li>
</ul>
<p>介绍:斯坦福开源的分布式文件系统。</p>
<ul>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/36737.pdf" target="_blank" rel="noopener">《Availability in Globally Distributed Storage Systems》</a></li>
</ul>
<p>介绍:Google论文：设计一个高可用的全球分布式存储系统。</p>
<ul>
<li><a href="http://highscalability.com/blog/2013/5/23/paper-calvin-fast-distributed-transactions-for-partitioned-d.html" target="_blank" rel="noopener">《Calvin: Fast Distributed Transactions For Partitioned Database Systems》</a></li>
</ul>
<p>介绍:对于分区数据库的分布式事务处理。</p>
<ul>
<li><a href="http://yellerapp.com/posts/2015-02-09-flake-ids.html" target="_blank" rel="noopener">《Distributed Systems Building Block: Flake Ids》</a></li>
</ul>
<p>介绍:Distributed Systems Building Block: Flake Ids.</p>
<ul>
<li><a href="http://www.hpcs.cs.tsukuba.ac.jp/~tatebe/lecture/h23/dsys/dsd-tutorial.html" target="_blank" rel="noopener">《Introduction to Distributed System Design》</a></li>
</ul>
<p>介绍:Google Code University课程，如何设计一个分布式系统。</p>
<ul>
<li><a href="http://sheepdog.github.io/sheepdog/" target="_blank" rel="noopener">《Sheepdog: Distributed Storage System for KVM》</a></li>
</ul>
<p>介绍:KVM的分布式存储系统.</p>
<ul>
<li><a href="http://henryr.github.io/distributed-systems-readings/" target="_blank" rel="noopener">《Readings in Distributed Systems Systems》</a></li>
</ul>
<p>介绍:分布式系统课程列表,包括数据库、算法等.</p>
<ul>
<li><a href="https://github.com/BaiduPS/tera" target="_blank" rel="noopener">《Tera》</a></li>
</ul>
<p>介绍:来自百度的分布式表格系统.</p>
<ul>
<li><a href="https://github.com/mixu/distsysbook" target="_blank" rel="noopener">《Distributed systems: for fun and profit》</a></li>
</ul>
<p>介绍:分布式系统的在线电子书.</p>
<ul>
<li><a href="https://github.com/notgary/distributed-systems-reading-list" target="_blank" rel="noopener">《Distributed Systems Reading List》</a></li>
</ul>
<p>介绍:分布式系统资料,此外还推荐<a href="https://github.com/hiremaga/readings" target="_blank" rel="noopener">Various articles about distributed systems</a>.</p>
<ul>
<li><a href="http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf" target="_blank" rel="noopener">《Designs, Lessons and Advice from Building Large Distributed Systems》</a></li>
</ul>
<p>介绍:Designs, Lessons and Advice from Building Large Distributed Systems.</p>
<ul>
<li><a href="http://queue.acm.org/detail.cfm?ref=rss&id=2800697" target="_blank" rel="noopener">《Testing a Distributed System》</a></li>
</ul>
<p>介绍:Testing a distributed system can be trying even under the best of circumstances.</p>
<ul>
<li><a href="https://research.google.com/archive/gfs-sosp2003.pdf" target="_blank" rel="noopener">《The Google File System》</a></li>
</ul>
<p>介绍: 基于普通服务器构建超大规模文件系统的典型案例，主要面向大文件和批处理系统， 设计简单而实用。 GFS是google的重要基础设施， 大数据的基石， 也是Hadoop HDFS的参考对象。 主要技术特点包括： 假设硬件故障是常态（容错能力强）， 64MB大块， 单Master设计，Lease/链式复制， 支持追加写不支持随机写.</p>
<ul>
<li><a href="https://research.google.com/archive/bigtable-osdi06.pdf" target="_blank" rel="noopener">《Bigtable: A Distributed Storage System for Structured Data》</a></li>
</ul>
<p>介绍:支持PB数据量级的多维非关系型大表， 在google内部应用广泛，大数据的奠基作品之一 ， Hbase就是参考BigTable设计。 Bigtable的主要技术特点包括： 基于GFS实现数据高可靠， 使用非原地更新技术（LSM树）实现数据修改， 通过range分区并实现自动伸缩等.<a href="http://dblab.xmu.edu.cn/wp-content/uploads/2012/05/20120508_172346_207.pdf" target="_blank" rel="noopener">中文版</a></p>
<ul>
<li><a href="http://research.microsoft.com:8082/pubs/66814/tr-2008-25.pdf" target="_blank" rel="noopener">《PacificA: Replication in Log-Based Distributed Storage Systems》</a></li>
</ul>
<p>介绍:面向log-based存储的强一致的主从复制协议， 具有较强实用性。 这篇文章系统地讲述了主从复制系统应该考虑的问题， 能加深对主从强一致复制的理解程度。 技术特点： 支持强一致主从复制协议， 允许多种存储实现， 分布式的故障检测/Lease/集群成员管理方法.</p>
<ul>
<li><a href="http://sns.cs.princeton.edu/docs/craq-usenix09.pdf" target="_blank" rel="noopener">《Object Storage on CRAQ, High-throughput chain replication for read-mostly workloads》</a></li>
</ul>
<p>介绍:分布式存储论文:支持强一直的链式复制方法， 支持从多个副本读取数据,实现<a href="https://github.com/jterrace/craq" target="_blank" rel="noopener">code</a>.</p>
<ul>
<li><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf" target="_blank" rel="noopener">《Finding a needle in Haystack: Facebook’s photo storage》</a></li>
</ul>
<p>介绍:Facebook分布式Blob存储,主要用于存储图片. 主要技术特色:小文件合并成大文件,小文件元数据放在内存因此读写只需一次IO.</p>
<ul>
<li><a href="http://www-bcf.usc.edu/~minlanyu/teach/csci599-fall12/papers/11-calder.pdf" target="_blank" rel="noopener">《Windows Azure Storage: A Highly Available Cloud Storage Service with Strong Consistency》</a></li>
</ul>
<p>介绍: 微软的分布式存储平台, 除了支持类S3对象存储，还支持表格、队列等数据模型. 主要技术特点：采用Stream/Partition两层设计（类似BigTable）;写错（写满）就封存Extent,使得副本字节一致, 简化了选主和恢复操作; 将S3对象存储、表格、队列、块设备等融入到统一的底层存储架构中.</p>
<ul>
<li><a href="http://www.eecs.harvard.edu/cs262/Readings/paxosmadelive.pdf" target="_blank" rel="noopener">《Paxos Made Live – An Engineering Perspective》</a></li>
</ul>
<p>介绍:从工程实现角度说明了Paxo在chubby系统的应用， 是理解Paxo协议及其应用场景的必备论文。 主要技术特点： paxo协议， replicated log， multi-paxo.<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a></p>
<ul>
<li><a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf" target="_blank" rel="noopener">《Dynamo: Amazon’s Highly Available Key-Value Store》</a></li>
</ul>
<p>介绍:Amazon设计的高可用的kv系统,主要技术特点：综和运用一致性哈希,vector clock,最终一致性构建一个高可用的kv系统， 可应用于amazon购物车场景.新内容来自<a href="http://50vip.com/423.html" target="_blank" rel="noopener">分布式存储必读论文</a></p>
<ul>
<li><a href="http://oceanstore.cs.berkeley.edu/publications/papers/pdf/carbonite06.pdf" target="_blank" rel="noopener">《Efficient Replica Maintenance for Distributed Storage Systems》</a></li>
</ul>
<p>介绍:分布式存储系统中的副本存储问题.</p>
<ul>
<li><a href="https://www.cs.nyu.edu/rgrimm/papers/nsdi09.pdf" target="_blank" rel="noopener">《PADS: A Policy Architecture for Distributed Storage Systems》</a></li>
</ul>
<p>介绍:分布式存储系统架构.</p>
<ul>
<li><a href="http://ccl.cse.nd.edu/software/chirp/" target="_blank" rel="noopener">《The Chirp Distributed Filesystem》</a></li>
</ul>
<p>介绍:开源分布式文件系统Chirp,对于想深入研究的开发者可以阅读文章的相关Papers.</p>
<ul>
<li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/time-clocks.pdf" target="_blank" rel="noopener">《Time, Clocks, and the Ordering of Events in a Distributed System》</a></li>
</ul>
<p>介绍:经典论文分布式时钟顺序的实现原理.</p>
<ul>
<li><a href="http://www.erlang.org/download/armstrong_thesis_2003.pdf" target="_blank" rel="noopener">《Making reliable distributed systems in the presence of sodware errors》</a></li>
</ul>
<p>介绍:面向软件错误构建可靠的分布式系统,<a href="http://www.cnblogs.com/me-sa/archive/2012/05/20/2510564.html" target="_blank" rel="noopener">中文笔记</a>.</p>
<ul>
<li><a href="https://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">《MapReduce: Simplified Data Processing on Large Clusters》</a></li>
</ul>
<p>介绍:MapReduce:超大集群的简单数据处理.</p>
<ul>
<li><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-824-distributed-computer-systems-engineering-spring-2006/index.htm" target="_blank" rel="noopener">《Distributed Computer Systems Engineering》</a></li>
</ul>
<p>介绍:麻省理工的分布式计算课程主页,里面的ppt和阅读列表很多干货.</p>
<ul>
<li><a href="http://www.vitanuova.com/inferno/papers/styx.html" target="_blank" rel="noopener">《The Styx Architecture for Distributed Systems》</a></li>
</ul>
<p>介绍:分布式系统Styx的架构剖析.</p>
<ul>
<li><a href="https://www.quora.com/What-are-some-good-resources-for-learning-about-distributed-computing-Why" target="_blank" rel="noopener">《What are some good resources for learning about distributed computing? Why?》</a></li>
</ul>
<p>介绍:Quora上面的一个问答:有哪些关于分布式计算学习的好资源.</p>
<ul>
<li><a href="http://highscalability.com/blog/2015/7/8/reborndb-the-next-generation-distributed-key-value-store.html" target="_blank" rel="noopener">《RebornDB: The Next Generation Distributed Key-Value Store》</a></li>
</ul>
<p>介绍:下一代分布式k-v存储数据库.</p>
<ul>
<li><a href="http://codex.cs.yale.edu/avi/os-book/OS9/" target="_blank" rel="noopener">《Operating System Concepts Ninth Edition》</a></li>
</ul>
<p>介绍:分布式系统归根结底还是需要操作系统的知识,这是耶鲁大学的操作系统概念书籍首页,里面有提供了第8版的在线电子版和最新的学习操作系统指南,学习分布式最好先学习操作系统.</p>
<ul>
<li><a href="http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">《The Log: What every software engineer should know about real-time data’s unifying abstraction》</a></li>
</ul>
<p>介绍:分布式系统Log剖析,非常的详细与精彩. <a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="noopener">中文翻译</a> |  <a href="http://www.cnblogs.com/foreach-break/p/notes_about_distributed_system_and_The_log.html" target="_blank" rel="noopener">中文版笔记</a>.</p>
<ul>
<li><a href="http://faculty.salina.k-state.edu/tim/ossg/index.html" target="_blank" rel="noopener">《Operating Systems Study Guide》</a></li>
</ul>
<p>介绍:分布式系统基础之操作系统学习指南.</p>
<ul>
<li><a href="http://duanple.blog.163.com/blog/static/709717672011330101333271/" target="_blank" rel="noopener">《分布式系统领域经典论文翻译集》</a></li>
</ul>
<p>介绍:分布式系统领域经典论文翻译集.</p>
<ul>
<li><a href="https://speakerdeck.com/elasticsearch/maintaining-performance-in-distributed-systems" target="_blank" rel="noopener">《Maintaining performance in distributed systems》</a></li>
</ul>
<p>介绍:分布式系统性能维护.</p>
<ul>
<li><a href="http://www.bottomupcs.com/" target="_blank" rel="noopener">《Computer Science from the Bottom Up》</a></li>
</ul>
<p>介绍:计算机科学，自底向上,小到机器码,大到操作系统内部体系架构,学习操作系统的另一个在线好材料.</p>
<ul>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener">《Operating Systems: Three Easy Pieces》</a></li>
</ul>
<p>介绍:&lt;操作系统:三部曲&gt;在线电子书,虚拟、并发、持续.</p>
<ul>
<li><a href="http://www.cs286.net/home/reading-list" target="_blank" rel="noopener">《Database Systems: reading list》</a></li>
</ul>
<p>介绍:数据库系统经典论文阅读列,此外推送github上面的<a href="https://github.com/rxin/db-readings" target="_blank" rel="noopener">db reading</a>.</p>
<ul>
<li><a href="http://www.washington.edu/R870/" target="_blank" rel="noopener">《Unix System Administration》</a></li>
</ul>
<p>介绍:Unix System Administration ebook.</p>
<ul>
<li><a href="https://www.cs.vu.nl/~ast/publications/compcom-1991.pdf" target="_blank" rel="noopener">《The Amoeba Distributed Operating System》</a></li>
</ul>
<p>介绍:分布式系统经典论文.</p>
<ul>
<li><a href="http://web.mit.edu/6.826/archive/S04/" target="_blank" rel="noopener">《Principles of Computer Systems》</a></li>
</ul>
<p>介绍:计算机系统概念，以分布式为主.此外推荐<a href="http://www2.cs.uregina.ca/~hamilton/courses/330/notes/index.html" target="_blank" rel="noopener">Introduction to Operating Systems</a>笔记</p>
<ul>
<li><a href="http://www.cs.cornell.edu/People/egs/" target="_blank" rel="noopener">《Person page of EMİN GÜN SİRER》</a></li>
</ul>
<p>介绍:推荐康奈尔大学的教授EMİN GÜN SİRER的主页,他的研究项目有分布式,数据存储。例如<a href="http://hyperdex.org/papers/" target="_blank" rel="noopener">HyperDex</a>数据库就是他的其中一个项目之一.</p>
<ul>
<li><a href="http://www.cs.cmu.edu/afs/cs/project/coda-www/ResearchWebPages/docdir/scalable90.pdf" target="_blank" rel="noopener">《Scalable, Secure, and Highly Available Distributed File Access》</a></li>
</ul>
<p>介绍:来自卡内基梅隆如何构建可扩展的、安全、高可用性的分布式文件系统,<a href="http://www.cs.cmu.edu/afs/cs/project/coda-www/ResearchWebPages/docdir/" target="_blank" rel="noopener">其他papers</a>.</p>
<ul>
<li><a href="http://dmlc.github.io/" target="_blank" rel="noopener">《Distributed (Deep) Machine Learning Common》</a></li>
</ul>
<p>介绍:分布式机器学习常用库.</p>
<ul>
<li><a href="http://www.cs.berkeley.edu/~rxin/db-papers/WarehouseScaleComputing.pdf" target="_blank" rel="noopener">《The Datacenter as a Computer》</a></li>
</ul>
<p>介绍:介绍了如何构建仓储式数据中心,尤其是对于现在的云计算,分布式学习来说很有帮助.本书是<a href="http://www.morganclaypool.com/toc/cac/1/1" target="_blank" rel="noopener">Synthesis Lectures on Computer Architecture</a>系列的书籍之一,这套丛书还有 《The Memory System》,《Automatic Parallelization》,《Computer Architecture Techniques for Power Efficiency》,《Performance Analysis and Tuning for General Purpose Graphics Processing Units》,《Introduction to Reconfigurable Supercomputing》,<a href="http://www.e-reading.club/bookreader.php/138837/Jacob,_Ng,_Wang_-_Memory_systems._Cache,_DRAM,_Disk.pdf" target="_blank" rel="noopener">Memory Systems Cache, DRAM, Disk</a> 等</p>
<ul>
<li><a href="http://www.cs.helsinki.fi/u/jakangas/Teaching/" target="_blank" rel="noopener">《helsinki:Distributed Systems Course slider》</a></li>
</ul>
<p>介绍:来自芬兰赫尔辛基的分布式系统课程课件:什么是分布式,复制,一致性,容错,同步,通信.</p>
<ul>
<li><a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">《TiDB is a distributed SQL database》</a></li>
</ul>
<p>介绍:分布式数据库TiDB,Golang开发.</p>
<ul>
<li><a href="http://people.csail.mit.edu/matei/courses/2015/6.S897/" target="_blank" rel="noopener">《S897: Large-Scale Systems》</a></li>
</ul>
<p>介绍:课程资料:大规模系统.</p>
<ul>
<li><a href="http://papers.nips.cc/paper/5333-consistency-of-weighted-majority-votes" target="_blank" rel="noopener">《Large-scale L-BFGS using MapReduce》</a></li>
</ul>
<p>介绍:使用MapReduce进行大规模分布式集群环境下并行L-BFGS.</p>
<ul>
<li><a href="http://www.infoq.com/cn/news/2015/09/BookKeeper-Twitter" target="_blank" rel="noopener">《Twitter是如何构建高性能分布式日志的》</a></li>
</ul>
<p>介绍:Twitter是如何构建高性能分布式日志的.</p>
<ul>
<li><a href="http://danluu.com/limplock/" target="_blank" rel="noopener">《Distributed Systems: When Limping Hardware Is Worse Than Dead Hardware》</a></li>
</ul>
<p>介绍:在分布式系统中某个组件彻底死了影响很小，但半死不活（网络/磁盘），对整个系统却是毁灭性的.</p>
<ul>
<li><a href="https://github.com/baidu/tera" target="_blank" rel="noopener">《Tera - 高性能、可伸缩的结构化数据库》</a></li>
</ul>
<p>介绍:来自百度的分布式数据库.</p>
<ul>
<li><a href="https://github.com/SequoiaDB/SequoiaDB" target="_blank" rel="noopener">《SequoiaDB is a distributed document-oriented NoSQL Database》</a></li>
</ul>
<p>介绍:SequoiaDB分布式文档数据库开源.</p>
<ul>
<li><a href="http://henryr.github.io/distributed-systems-readings/" target="_blank" rel="noopener">《Readings in distributed systems》</a></li>
</ul>
<p>介绍:这个网址里收集了一堆各TOP大学分布式相关的课程.</p>
<ul>
<li><a href="https://ramcloud.stanford.edu/~ongaro/userstudy/" target="_blank" rel="noopener">《Paxos vs Raft》</a></li>
</ul>
<p>介绍:这个网站是<a href="https://raft.github.io/" target="_blank" rel="noopener">Raft算法</a>的作者为教授Paxos和<a href="https://raft.github.io/" target="_blank" rel="noopener">Raft算法</a>做的，其中有两个视频链接，分别讲上述两个算法.<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a></p>
<ul>
<li><a href="http://www.eecs.harvard.edu/~mema/courses/cs264/papers/p13-ratnasamy.pdf" target="_blank" rel="noopener">《A Scalable Content-Addressable Network》</a></li>
</ul>
<p>介绍:A Scalable Content-Addressable Network.</p>
<ul>
<li><a href="https://github.com/aosabook/500lines" target="_blank" rel="noopener">《500 Lines or Less》</a></li>
</ul>
<p>介绍:这个项目其实是一本书（ <a href="http://aosabook.org/en/index.html" target="_blank" rel="noopener">The Architecture of Open Source Applications</a>）的源代码附录，是一堆大牛合写的.</p>
<ul>
<li><a href="http://nil.csail.mit.edu/6.824/2015/schedule.html" target="_blank" rel="noopener">《MIT 6.824 Distributed System》</a></li>
</ul>
<p>介绍:这只是一个课程主页，没有上课的视频，但是并不影响你跟着它上课：每一周读两篇课程指定的论文，读完之后看lecture-notes里对该论文内容的讨论，回答里面的问题来加深理解，最后在课程lab里把所看的论文实现。当你把这门课的作业刷完后，你会发现自己实现了一个分布式数据库.</p>
<ul>
<li><a href="https://github.com/michaelmaltese/golang-distributed-filesystem" target="_blank" rel="noopener">《HDFS-alike in Go》</a></li>
</ul>
<p>介绍:使用go开发的分布式文件系统.</p>
<ul>
<li><a href="https://www.quora.com/What-are-some-good-resources-for-learning-about-distributed-computing-Why" target="_blank" rel="noopener">《What are some good resources for learning about distributed computing? Why?》</a></li>
</ul>
<p>介绍:Quora上关于学习分布式的资源问答.</p>
<ul>
<li><a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">《SeaweedFS is a simple and highly scalable distributed file system》</a></li>
</ul>
<p>介绍:SeaweedFS是使用go开发的分布式文件系统项目,代码简单，逻辑清晰.</p>
<ul>
<li><a href="https://github.com/wandoulabs/codis" target="_blank" rel="noopener">《Codis - yet another fast distributed solution for Redis》</a></li>
</ul>
<p>介绍:Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 </p>
<ul>
<li><a href="http://www.bailis.org/papers/bailis-thesis.pdf" target="_blank" rel="noopener">《Paper: Coordination Avoidance In Distributed Databases By Peter Bailis》</a></li>
</ul>
<p>介绍:Coordination Avoidance In Distributed Databases.</p>
<ul>
<li><a href="https://github.com/ngaut/builddatabase" target="_blank" rel="noopener">《从零开始写分布式数据库》</a></li>
</ul>
<p>介绍:本文以<a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">TiDB</a> 源码为例.</p>
<ul>
<li><a href="http://videlalvaro.github.io/2015/12/learning-about-distributed-systems.html" target="_blank" rel="noopener">《what we talk about when we talk about distributed systems》</a></li>
</ul>
<p>介绍:分布式系统概念梳理,为分布式系统涉及的主要概念进行了梳理.</p>
<ul>
<li><a href="http://redis.io/topics/distlock" target="_blank" rel="noopener">《Distributed locks with Redis》</a></li>
</ul>
<p>介绍:使用Redis实现分布式锁.</p>
<ul>
<li><a href="http://www.scs.stanford.edu/14au-cs244b/" target="_blank" rel="noopener">《CS244b: Distributed Systems》</a></li>
</ul>
<p>介绍: 斯坦福2014年秋季分布式课程.</p>
<ul>
<li><a href="http://rustyrazorblade.com/2015/11/ramp-made-easy/" target="_blank" rel="noopener">《RAMP Made Easy》</a></li>
</ul>
<p>介绍: 分布式的“读原子性”.</p>
<ul>
<li><a href="http://arxiv.org/abs/1512.09295" target="_blank" rel="noopener">《Strategies and Principles of Distributed Machine Learning on Big Data》</a></li>
</ul>
<p>介绍: 大数据分布式机器学习的策略与原理.</p>
<ul>
<li><a href="https://www.quora.com/Distributed-Systems/What-is-the-CAP-theorem" target="_blank" rel="noopener">《Distributed Systems: What is the CAP theorem?》</a></li>
</ul>
<p>介绍: 分布式CAP法则.</p>
<ul>
<li><a href="https://www.quora.com/How-should-I-start-to-learn-distributed-storage-system-as-a-beginner" target="_blank" rel="noopener">《How should I start to learn distributed storage system as a beginner?》</a></li>
</ul>
<p>介绍: 新手如何步入分布式存储系统.</p>
<ul>
<li><a href="https://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf" target="_blank" rel="noopener">《Cassandra - A Decentralized Structured Storage System》</a></li>
</ul>
<p>介绍: 分布式存储系统Cassandra剖析,推荐白皮书<a href="http://www.datastax.com/wp-content/uploads/2012/08/WP-IntrotoCassandra.pdf" target="_blank" rel="noopener">Introduction to Apache Cassandra</a>.</p>
<ul>
<li><a href="https://www.quora.com/What-is-the-best-resource-to-learn-about-distributed-systems" target="_blank" rel="noopener">《What is the best resource to learn about distributed systems?》</a></li>
</ul>
<p>介绍: 分布式系统学习资源.</p>
<ul>
<li><a href="https://www.quora.com/What-are-some-high-performance-TCP-hacks" target="_blank" rel="noopener">《What are some high performance TCP hacks?》</a></li>
</ul>
<p>介绍: 一些高性能TCP黑客技巧.</p>
<ul>
<li><a href="https://speakerdeck.com/elasticsearch/maintaining-performance-in-distributed-systems" target="_blank" rel="noopener">《Maintaining performance in distributed systems》</a></li>
</ul>
<p>介绍:分布式系统性能提升.</p>
<ul>
<li><a href="http://diyhpl.us/~bryan/papers2/distributed/distributed-systems/zab.totally-ordered-broadcast-protocol.2008.pdf" target="_blank" rel="noopener">《A simple totally ordered broadcast protocol》</a></li>
</ul>
<p>介绍:Benjamin Reed 和 Flavio P.Junqueira 所著论文,对Zab算法进行了介绍,zab算法是Zookeeper保持数据一致性的核心,在国内有很多公司都使用zookeeper做为分布式的解决方案.推荐与此相关的一篇文章<a href="http://www.tcs.hut.fi/Studies/T-79.5001/reports/2012-deSouzaMedeiros.pdf" target="_blank" rel="noopener">ZooKeeper’s atomic broadcast protocol: Theory and practice</a>.</p>
<ul>
<li><a href="http://storageconference.us/2003/papers/29-Rodeh-zFS.pdf" target="_blank" rel="noopener">《zFS - A Scalable Distributed File System Using Object Disk》</a></li>
</ul>
<p>介绍:可扩展的分布式文件系统ZFS,<a href="https://users.soe.ucsc.edu/~scott/courses/Fall04/221/zfs_overview.pdf" target="_blank" rel="noopener">The Zettabyte File System</a>,<a href="http://research.cs.wisc.edu/adsl/Publications/zfs-corruption-fast10.pdf" target="_blank" rel="noopener">End-to-end Data Integrity for File Systems: A ZFS Case Study</a>.</p>
<ul>
<li><a href="http://videlalvaro.github.io/2015/12/learning-about-distributed-systems.html" target="_blank" rel="noopener">《A Distributed Haskell for the Modern Web》</a></li>
</ul>
<p>介绍:分布式Haskell在当前web中的应用.</p>
<ul>
<li><a href="https://pages.lip6.fr/Marc.Shapiro/papers/CISE-POPL-2016.pdf" target="_blank" rel="noopener">《Reasoning about Consistency Choices in Distributed Systems》</a></li>
</ul>
<p>介绍:POPL2016的论文,关于分布式系统一致性选择的论述,<a href="http://conf.researchr.org/track/POPL-2016/POPL-2016-papers#event-overview" target="_blank" rel="noopener">POPL所接受的论文</a>,github上已经有人<a href="https://github.com/gasche/popl2016-papers" target="_blank" rel="noopener">整理</a>.</p>
<ul>
<li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf" target="_blank" rel="noopener">《Paxos Made Simple》</a></li>
</ul>
<p>介绍:Paxos让分布式更简单.<a href="http://dsdoc.net/paxosmadesimple/index.html" target="_blank" rel="noopener">译文</a>.<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a>,<a href="https://distributedthoughts.wordpress.com/2013/09/22/understanding-paxos-part-1/" target="_blank" rel="noopener">understanding Paxos part1</a>,<a href="https://distributedthoughts.wordpress.com/2013/09/30/understanding-paxos-part-2/" target="_blank" rel="noopener">Understanding Paxos – Part 2</a>.<a href="https://www.quora.com/Distributed-Systems-What-is-a-simple-explanation-of-the-Paxos-algorithm" target="_blank" rel="noopener">Quora: What is a simple explanation of the Paxos algorithm?</a>,<a href="http://www.ux.uis.no/~meling/papers/2013-paxostutorial-opodis.pdf" target="_blank" rel="noopener">Tutorial Summary: Paxos Explained from Scratch</a>,<a href="http://bogdan.pistol.gg/2014/04/30/paxos-algorithm-explained-part-1-the-essentials/" target="_blank" rel="noopener">Paxos algorithm explained, part 1: The essentials</a>,<a href="http://bogdan.pistol.gg/2014/10/20/paxos-algorithm-explained-part-2-insights/" target="_blank" rel="noopener">Paxos algorithm explained, part 2: Insights</a></p>
<ul>
<li><a href="http://the-paper-trail.org/blog/consensus-protocols-paxos/" target="_blank" rel="noopener">《Consensus Protocols: Paxos》</a></li>
</ul>
<p>介绍:分布式系统一致性协议:Paxos.<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a></p>
<ul>
<li><a href="http://research.microsoft.com/pubs/64636/tr-2003-96.pdf" target="_blank" rel="noopener">《Consensus on Transaction Commit》</a></li>
</ul>
<p>介绍：事务提交的一致性探讨.</p>
<ul>
<li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf" target="_blank" rel="noopener">《The Part-Time Parliaments》</a></li>
</ul>
<p>介绍:在《The Part-Time Parliament》中描述了基本协议的交互过程。在基本协议的基础上完善各种问题得到了最终的议会协议。 为了让人更容易理解《The Part-Time Parliament》中描述的Paxos算法，Lamport在2001发表了<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf" target="_blank" rel="noopener">《Paxos Made Simple》</a>，以更平直的口头语言描述了Paxos，而没有包含正式的证明和数学术语。<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf" target="_blank" rel="noopener">《Paxos Made Simple》</a>中，将算法的参与者更细致的划分成了几个角色：Proposer、Acceptor、Learner。另外还有Leader和Client.<a href="http://duanple.blog.163.com/blog/static/709717672012112203543166/" target="_blank" rel="noopener">参考阅读:关于Paxos的历史</a></p>
<ul>
<li><a href="https://pdos.csail.mit.edu/archive/6.824-2007/papers/mazieres-paxos.pdf" target="_blank" rel="noopener">《Paxos Made Practical》</a></li>
</ul>
<p>介绍:看这篇论文时可以先看看<a href="http://blog.csdn.net/bluecloudmatrix/article/details/41138363" target="_blank" rel="noopener">理解Paxos Made Practical</a>.</p>
<ul>
<li><a href="http://arxiv.org/pdf/1209.4187.pdf" target="_blank" rel="noopener">《PaxosLease: Diskless Paxos for Leases》</a></li>
</ul>
<p>介绍：PaxosLease：实现租约的无盘Paxos算法,<a href="http://dsdoc.net/paxoslease/index.html" target="_blank" rel="noopener">译文</a>.</p>
<ul>
<li><a href="https://people.csail.mit.edu/matei/courses/2015/6.S897/readings/paxos-moderately-complex.pdf" target="_blank" rel="noopener">《Paxos Made Moderately Complex》</a></li>
</ul>
<p>介绍：<a href="http://paxos.systems/" target="_blank" rel="noopener">Paxos算法</a>实现,<a href="http://dsdoc.net/paxosmademoderatelycomplex/index.html" target="_blank" rel="noopener">译文</a>,同时推荐<a href="http://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf" target="_blank" rel="noopener">42 Paxos Made Moderately Complex</a>.</p>
<ul>
<li><a href="http://duanple.blog.163.com/blog/static/7097176720119791920962/" target="_blank" rel="noopener">《Hadoop Reading List》</a></li>
</ul>
<p>介绍：Hadoop学习清单.</p>
<ul>
<li><a href="http://duanple.blog.163.com/blog/static/7097176720119791920962/" target="_blank" rel="noopener">《Hadoop Reading List》</a></li>
</ul>
<p>介绍：Hadoop学习清单.</p>
<ul>
<li><a href="http://www.empiricalreality.com/2010/09/22/2010-nosql-summer-reading-list/" target="_blank" rel="noopener">《2010 NoSQL Summer Reading List》</a></li>
</ul>
<p>介绍：NoSQL知识清单,里面不仅仅包含了数据库阅读清单还包含了分布式系统资料.</p>
<ul>
<li><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">《Raft: Understandable Distributed Consensus》</a></li>
</ul>
<p>介绍：Raft可视化图帮助理解分布式一致性</p>
<ul>
<li><a href="https://github.com/coreos/etcd" target="_blank" rel="noopener">《Etcd:Distributed reliable key-value store for the most critical data of a distributed system》</a></li>
</ul>
<p>介绍：Etcd分布式Key-Value存储引擎</p>
<ul>
<li><a href="http://sysnet.ucsd.edu/recall/papers/iptps.pdf" target="_blank" rel="noopener">《Understanding Availability》</a></li>
</ul>
<p>介绍：理解peer-to-peer系统中的可用性究竟是指什么.同时推荐<a href="http://www.jos.org.cn/1000-9825/15/268.pdf" target="_blank" rel="noopener">基于 Peer-to-Peer 的分布式存储系统的设计</a></p>
<ul>
<li><a href="http://courses.cs.vt.edu/~cs5204/fall07-kafura/Papers/TransactionalMemory/Lomet.pdf" target="_blank" rel="noopener">《Process structuring, synchronization, and recovery using atomic actions》</a></li>
</ul>
<p>介绍：经典论文</p>
<ul>
<li><a href="http://www.eng.auburn.edu/files/file1358.pdf" target="_blank" rel="noopener">《Programming Languages for Parallel Processing》</a></li>
</ul>
<p>介绍：并行处理的编程语音</p>
<ul>
<li><a href="https://hal.inria.fr/hal-00789086/file/a_survey_of_dfs.pdf" target="_blank" rel="noopener">《Analysis of Six Distributed File Systems》</a></li>
</ul>
<p>介绍：此篇论文对HDFS,MooseFS,iRODS,Ceph,GlusterFS,Lustre六个存储系统做了详细分析.如果是自己研发对应的存储系统推荐先阅读此篇论文</p>
<ul>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=A106388C6F04609BCA27DE6DF9C917A6?doi=10.1.1.35.4793&rep=rep1&type=pdf" target="_blank" rel="noopener">《A Survey of Distributed File Systems》</a></li>
</ul>
<p>介绍：分布式文件系统综述</p>
<ul>
<li><a href="ftp://ftp.sei.cmu.edu/pub/education/cm24.pdf" target="_blank" rel="noopener">《Concepts of Concurrent Programming》</a></li>
</ul>
<p>介绍：并行编程的概念,同时推荐<a href="ftp://ftp.sei.cmu.edu/pub/education/" target="_blank" rel="noopener">卡内基梅隆FTP</a></p>
<ul>
<li><a href="https://www.cs.berkeley.edu/~brewer/cs262/ConcControl.pdf" target="_blank" rel="noopener">《Concurrency Control Performance Modeling:Alternatives and Implications》</a></li>
</ul>
<p>介绍：并发控制性能建模：选择与意义</p>
<ul>
<li><a href="https://azmuri.files.wordpress.com/2013/09/george-coulouris-distributed-systems-concepts-and-design-5th-edition.pdf" target="_blank" rel="noopener">《Distributed Systems - Concepts and Design 5th Edition》</a></li>
</ul>
<p>介绍：ebook分布式系统概念与设计</p>
<ul>
<li><a href="http://read.pudn.com/downloads51/ebook/174460/03.pdf" target="_blank" rel="noopener">《分布式系统设计的形式方法》</a></li>
</ul>
<p>介绍：分布式系统设计的形式方法</p>
<ul>
<li><a href="http://read.pudn.com/downloads51/ebook/174460/04.pdf" target="_blank" rel="noopener">《互斥和选举算法》</a></li>
</ul>
<p>介绍：互斥和选举算法</p>
<ul>
<li><a href="https://www.cypherpunks.to/erights/history/actors/AITR-844.pdf" target="_blank" rel="noopener">《Actors：A model Of Concurrent Cornputation In Distributed Systems》</a></li>
</ul>
<p>介绍：经典论文</p>
<ul>
<li><a href="https://www.cl.cam.ac.uk/~rja14/Papers/" target="_blank" rel="noopener">《Security Engineering: A Guide to Building Dependable Distributed Systems》</a></li>
</ul>
<p>介绍：如何构建一个安全可靠的分布式系统,<a href="https://www.cl.cam.ac.uk/~rja14/Papers/SEv2-acks.pdf" target="_blank" rel="noopener">About the Author</a>,<a href="https://www.cl.cam.ac.uk/~rja14/Papers/SEv2-biblio.pdf" target="_blank" rel="noopener">Bibliography:文献资料</a>,章节访问把<a href="https://www.cl.cam.ac.uk/~rja14/Papers/SEv2-c01.pdf" target="_blank" rel="noopener">链接</a>最后的01换成01-27即可</p>
<ul>
<li><a href="https://www.cs.cmu.edu/~15712/index.html" target="_blank" rel="noopener">《15-712 Advanced and Distributed Operating Systems》</a></li>
</ul>
<p>介绍：卡内基梅隆大学的分布式系统博士生课程主页,有很丰富的<a href="https://www.cs.cmu.edu/~15712/syllabus.html" target="_blank" rel="noopener">资料</a></p>
<ul>
<li><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-2010-1.pdf" target="_blank" rel="noopener">《Dapper, Google’s Large-Scale Distributed Systems Tracing Infrastructure》</a></li>
</ul>
<p>介绍：Dapper，大规模分布式系统的跟踪系统,<a href="http://bigbully.github.io/Dapper-translation/" target="_blank" rel="noopener">译文</a>,<a href="http://dirlt.com/dapper.html" target="_blank" rel="noopener">译文对照</a></p>
<ul>
<li><a href="http://www.cs.berkeley.edu/~brewer/cs262/" target="_blank" rel="noopener">《CS262a: Advanced Topics in Computer Systems》</a></li>
</ul>
<p>介绍：伯克利大学计算机系统进阶课程,内容有深度,涵盖分布式,数据库等内容</p>
<ul>
<li><a href="http://highscalability.com/blog/2016/2/15/egnyte-architecture-lessons-learned-in-building-and-scaling.html" target="_blank" rel="noopener">《Egnyte Architecture: Lessons Learned In Building And Scaling A Multi Petabyte Distributed System》</a></li>
</ul>
<p>介绍：PB级分布式系统构建/扩展经验</p>
<ul>
<li><a href="https://cs162.eecs.berkeley.edu/" target="_blank" rel="noopener">《CS162: Operating Systems and Systems Programming》</a></li>
</ul>
<p>介绍：伯克利大学计算机系统课程:操作系统与系统编程</p>
<ul>
<li><a href="http://mdcc.cs.berkeley.edu/" target="_blank" rel="noopener">《MDCC: Multi-Data Center Consistency》</a></li>
</ul>
<p>介绍：MDCC主要解决跨数据中心的一致性问题中间件,一种新的协议</p>
<ul>
<li><a href="http://research.google.com/pubs/DistributedSystemsandParallelComputing.html" target="_blank" rel="noopener">《Research at Google:Distributed Systems and Parallel Computing》</a></li>
</ul>
<p>介绍：google公开对外发表的分布式系统与并行计算论文</p>
<ul>
<li><a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html" target="_blank" rel="noopener">《HDFS Architecture Guide》</a></li>
</ul>
<p>介绍：分布式文件系统HDFS架构</p>
<ul>
<li><a href="http://www.actordb.com/index.html" target="_blank" rel="noopener">《ActorDB distributed SQL database》</a></li>
</ul>
<p>介绍：分布式 Key/Value数据库</p>
<ul>
<li><a href="http://csc.lsu.edu/~gb/csc7700/Reading/SC03_tang.pdf" target="_blank" rel="noopener">《An efficient data location protocol for self-organizing storage clusters》</a></li>
</ul>
<p>介绍：是著名的<a href="https://github.com/ceph/ceph" target="_blank" rel="noopener">Ceph</a>的负载平衡策略，文中提出的几种策略都值得尝试，比较赞的一点是可以对照代码体会和实践,如果你还需要了解可以看看<a href="https://www.ibm.com/developerworks/cn/linux/l-ceph/" target="_blank" rel="noopener">Ceph:一个 Linux PB 级分布式文件系统</a>,除此以外,论文的引用部分也挺值得阅读的,同时推荐<a href="http://ceph.com/papers/weil-ceph-osdi06.pdf" target="_blank" rel="noopener">Ceph: A Scalable, High-Performance Distributed File System</a></p>
<ul>
<li><a href="http://www.supercomputing.org/sc2004/schedule/pdfs/pap283.pdf" target="_blank" rel="noopener">《A Self-Organizing Storage Cluster for Parallel Data-Intensive Applications》</a></li>
</ul>
<p>介绍：Surrento的冷热平衡策略就采用了延迟写技术</p>
<ul>
<li><a href="http://www.sersc.org/journals/IJAST/vol36/4.pdf" target="_blank" rel="noopener">《HBA: Distributed Metadata Management for Large Cluster-Based Storage Systems》</a></li>
</ul>
<p>介绍：对于分布式存储系统的元数据管理.</p>
<ul>
<li><a href="http://www.mcs.anl.gov/~thakur/papers/sc11-io.pdf" target="_blank" rel="noopener">《Server-Side I/O Coordination for Parallel File Systems》</a></li>
</ul>
<p>介绍：服务器端的I/O协调并行文件系统处理,网络,文件存储等都会涉及到IO操作.不过里面涉及到很多技巧性的思路在实践时需要斟酌</p>
<ul>
<li><a href="http://www.cs.virginia.edu/~zaher/classes/CS656/levy.pdf" target="_blank" rel="noopener">《Distributed File Systems: Concepts and Examples》</a></li>
</ul>
<p>介绍：分布式文件系统概念与应用</p>
<ul>
<li><a href="http://cseweb.ucsd.edu/classes/wi08/cse221/" target="_blank" rel="noopener">《CSE 221: Graduate Operating Systems》</a></li>
</ul>
<p>介绍：加利福尼亚大学的研究生操作系统课程主页，论文很值得阅读</p>
<ul>
<li><a href="http://cs.brown.edu/~debrabant/cis570-website/papers/s4.pdf" target="_blank" rel="noopener">《S4: Distributed Stream Computing Platform》</a></li>
</ul>
<p>介绍：Yahoo出品的流式计算系统，目前最流行的两大流式计算系统之一（另一个是storm），Yahoo的主要广告计算平台</p>
<ul>
<li><a href="https://kowshik.github.io/JPregel/pregel_paper.pdf" target="_blank" rel="noopener">《Pregel: a system for large-scale graph processing》</a></li>
</ul>
<p>介绍：Google的大规模图计算系统，相当长一段时间是Google PageRank的主要计算系统，对开源的影响也很大（包括GraphLab和GraphChi）</p>
<ul>
<li><a href="http://www.select.cs.cmu.edu/publications/paperdir/uai2010-low-gonzalez-kyrola-bickson-guestrin-hellerstein.pdf" target="_blank" rel="noopener">《GraphLab: A New Framework for Parallel Machine Learning》</a></li>
</ul>
<p>介绍：CMU基于图计算的分布式机器学习框架，目前已经成立了专门的商业公司，在分布式机器学习上很有两把刷子，其单机版的GraphChi在百万维度的矩阵分解都只需要2~3分钟；</p>
<ul>
<li><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/41344.pdf" target="_blank" rel="noopener">《F1: A Distributed SQL Database That Scales》</a></li>
</ul>
<p>介绍：这篇论文是Google 2013年发表的，介绍了F1的架构思路，13年时就开始支撑Google的AdWords业务，另外两篇介绍文章<a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/38125.pdf" target="_blank" rel="noopener">F1 - The Fault-Tolerant Distributed RDBMS Supporting Google’s Ad Business </a>.<a href="http://www.leafonsword.org/google-f1/" target="_blank" rel="noopener">Google NewSQL之F1</a></p>
<ul>
<li><a href="https://github.com/cockroachdb/cockroach" target="_blank" rel="noopener">《Cockroach DB:A Scalable, Survivable, Strongly-Consistent SQL Database》</a></li>
</ul>
<p>介绍：CockroachDB ：一个可伸缩的、跨地域复制的，且支持事务的数据存储,<a href="http://www.infoq.com/cn/news/2014/08/CockroachDB" target="_blank" rel="noopener">InfoQ介绍</a>,<a href="https://www.gitbook.com/book/smazumder05/design-and-architecture-of-cockroachdb/details" target="_blank" rel="noopener">Design and Architecture of CockroachDb</a></p>
<ul>
<li><a href="ftp://ftp.cs.washington.edu/tr/2009/09/UW-CSE-09-09-02.PDF" target="_blank" rel="noopener">《Multi-Paxos: An Implementation and Evaluation》</a></li>
</ul>
<p>介绍：Multi-Paxos实现与总结，此外推荐<a href="https://github.com/cocagne/multi-paxos-example" target="_blank" rel="noopener">Paxos/Multi-paxos Algorithm</a>,<a href="https://github.com/cocagne/multi-paxos-example" target="_blank" rel="noopener">Multi-Paxos Example</a>，地址:<a href="ftp://ftp.cs.washington.edu/tr/2009/09/UW-CSE-09-09-02.PDF" target="_blank" rel="noopener">ftp://ftp.cs.washington.edu/tr/2009/09/UW-CSE-09-09-02.PDF</a></p>
<ul>
<li><a href="http://web.stanford.edu/class/cs347/reading/zab.pdf" target="_blank" rel="noopener">《Zab: High-performance broadcast for primary-backup systems》</a></li>
</ul>
<p>介绍：一致性协议zab分析</p>
<ul>
<li><a href="https://pdos.csail.mit.edu/papers/fdabek-phd-thesis.pdf" target="_blank" rel="noopener">《A Distributed Hash Table》</a></li>
</ul>
<p>介绍：分布式哈希算法论文,扩展阅读<a href="https://www.ietf.org/proceedings/65/slides/plenaryt-2.pdf" target="_blank" rel="noopener">Introduction to Distributed Hash Tables</a>,<a href="https://www.cs.cmu.edu/~dga/15-744/S07/lectures/16-dht.pdf" target="_blank" rel="noopener">Distributed Hash Tables</a></p>
<ul>
<li><a href="http://www.news.cs.nyu.edu/~jinyang/pub/iptps04.pdf" target="_blank" rel="noopener">《Comparing the performance of distributed hash tables under churn》</a></li>
</ul>
<p>介绍：分布式hash表性能的Churn问题</p>
<ul>
<li><a href="https://www.comp.nus.edu.sg/~gilbert/pubs/BrewersConjecture-SigAct.pdf" target="_blank" rel="noopener">《Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web》</a></li>
</ul>
<p>介绍：分布式系统的CAP问题,推荐<a href="https://groups.csail.mit.edu/tds/papers/Gilbert/Brewer2.pdf" target="_blank" rel="noopener">Perspectives on the CAP Theorem</a>.对CAP理论的解析文章,<a href="http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf" target="_blank" rel="noopener">PODC ppt</a>,<a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/" target="_blank" rel="noopener">A plain english introduction to CAP Theorem</a>,<a href="http://dbmsmusings.blogspot.kr/2012/10/ieee-computer-issue-on-cap-theorem.html" target="_blank" rel="noopener">IEEE Computer issue on the CAP Theorem</a></p>
<ul>
<li><a href="https://www.usenix.org/system/files/conference/fast15/fast15-paper-lee.pdf" target="_blank" rel="noopener">《F2FS: A New File System for Flash Storage》</a></li>
</ul>
<p>介绍：闪存存储文件系统F2FS</p>
<ul>
<li><a href="http://research.microsoft.com/pubs/81175/BPFS.pdf" target="_blank" rel="noopener">《Better I/O Through Byte-Addressable, Persistent Memory》</a></li>
</ul>
<p>介绍：微软发表的关于i/o访问优化论文</p>
<ul>
<li><a href="http://www.solarisinternals.com/si/reading/tmpfs.pdf" target="_blank" rel="noopener">《tmpfs: A Virtual Memory File System》</a></li>
</ul>
<p>介绍：虚拟内存文件系统tmpfs</p>
<ul>
<li><a href="http://domino.research.ibm.com/library/cyberdig.nsf/papers/6E1C5B6A1B6EDD9885257A38006B6130/$File/rj10501.pdf" target="_blank" rel="noopener">《BTRFS: The Linux B-tree Filesystem》</a></li>
</ul>
<p>介绍：Linux B-tree文件系统.</p>
<ul>
<li><a href="https://www.akamai.com/us/en/our-thinking/technical-publications.jsp" target="_blank" rel="noopener">《Akamai technical publication》</a></li>
</ul>
<p>介绍：Akamai是全球最大的云计算机平台之一，承载了全球15-30%网络流量,如果你是做CDN或者是云服务,这个里面的论文会给你很有帮助.例如这几天看facebook开源的<a href="https://osquery.io/" target="_blank" rel="noopener">osquery</a>。找到通过db的方式运维,找到<a href="https://www.akamai.com/es/es/multimedia/documents/technical-publication/keeping-track-of-70000-servers-the-akamai-query-system-technical-publication.pdf" target="_blank" rel="noopener">Keeping Track of 70,000+ Servers: The Akamai Query System</a>这篇论文，先看论文领会思想，然后再使用工具osquery实践</p>
<ul>
<li><a href="http://dl.acm.org/citation.cfm?id=1394128" target="_blank" rel="noopener">《BASE: An Acid Alternative》</a></li>
</ul>
<p>介绍：来自eBay 的解决方案,译文<a href="http://article.yeeyan.org/view/167444/125572" target="_blank" rel="noopener">Base: 一种Acid的替代方案</a>,应用案例参考<a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=2653546976&idx=1&sn=c3fb2338389a41e7ab998c0c21bd3e5d" target="_blank" rel="noopener">保证分布式系统数据一致性的6种方案</a></p>
<ul>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CF3CA7E7B62091EB266A1543A6F2D26A?doi=10.1.1.41.7628&rep=rep1&type=pdf" target="_blank" rel="noopener">《A Note on Distributed Computing》</a></li>
</ul>
<p>介绍：Jim Waldo和Sam Kendall等人共同撰写了一篇非常有名的论文“分布式计算备忘录”，这篇论文在Reddit上被人推荐为“每个程序员都应当至少读上两篇”的论文。在这篇论文中，作者表示“忽略本地计算与分布式计算之间的区别是一种危险的思想”，特别指出了Emerald、Argus、DCOM以及CORBA的设计问题。作者将这些设计问题归纳为“三个错误的原则”： “对于某个应用来说，无论它的部署环境如何，总有一种单一的、自然的面向对象设计可以符合其需求。” “故障与性能问题与某个应用的组件实现直接相关，在最初的设计中无需考虑这些问题。” “对象的接口与使用对象的上下文无关”.</p>
<ul>
<li><a href="https://github.com/papers-we-love/papers-we-love/tree/master/distributed_systems" target="_blank" rel="noopener">《Distributed Systems Papers》</a></li>
</ul>
<p>介绍：分布式系统领域经典论文列表.</p>
<ul>
<li><a href="https://www.akamai.com/es/es/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf" target="_blank" rel="noopener">《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》</a></li>
</ul>
<p>介绍：Consistent Hashing算法描述.</p>
<ul>
<li><a href="http://sigmod2016.org/pods_list.shtml" target="_blank" rel="noopener">《SIGMOD 2016: Accepted Research Papers》</a></li>
</ul>
<p>介绍：SIGMOD是世界上最有名的数据库会议之一,最具有权威性,收录论文审核非常严格.2016年的SIGMOD 会议照常进行,上面收录了今年SIGMOD收录的论文,把题目输入google中加上pdf就能找到,很多论文值得阅读,<a href="http://sigmod2015.org/pods_list.shtml" target="_blank" rel="noopener">SIGMOD 2015</a></p>
<ul>
<li><a href="http://www.cs.yale.edu/homes/aspnes/classes/465/notes.pdf" target="_blank" rel="noopener">《Notes on CPSC 465/565: Theory of Distributed Systems》</a></li>
</ul>
<p>介绍:耶鲁大学的分布式系统理论课程笔记</p>
<ul>
<li><a href="http://listpdf.com/di/distributed-operating-system-doc-pdf.html" target="_blank" rel="noopener">《Distributed Operating System Doc PDF》</a></li>
</ul>
<p>介绍:分布式系统文档资源（可下载）</p>
<ul>
<li><a href="https://mitpress.mit.edu/sites/default/files/titles/content/9780262693141_sch_0002.pdf" target="_blank" rel="noopener">《Anatomy of a database system》</a></li>
</ul>
<p>介绍:数据库系统剖析，这本书是由伯克利大学的<a href="http://db.cs.berkeley.edu/jmh/" target="_blank" rel="noopener">Joseph M. Hellerstein</a>和M. Stonebraker合著的一篇论文.对数据库剖析很有深度.除此以外还有一篇文章<a href="http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf" target="_blank" rel="noopener">Architecture of a Database System</a>。数据库系统架构,厦门大学的数据库实验室教授林子雨组织过<a href="http://dblab.xmu.edu.cn/sites/default/files/files/linziyu-Architecture%20of%20a%20Database%20System(Chinese%20Version)-ALL.pdf" target="_blank" rel="noopener">翻译</a></p>
<ul>
<li><a href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf" target="_blank" rel="noopener">《A Relational Model of Data for Large Shared Data Banks》</a></li>
</ul>
<p>介绍:数据库关系模型论文</p>
<ul>
<li><a href="http://idke.ruc.edu.cn/reading/index.htm" target="_blank" rel="noopener">《RUC Innovative data systems reaserch lab recommand papers》</a></li>
</ul>
<p>介绍:中国人民大学数据研究实验室推荐的数据库领域论文</p>
<ul>
<li><a href="http://www.cs.utexas.edu/~dahlin/projects/sdims/papers/sdims-sigcomm.pdf" target="_blank" rel="noopener">《A Scalable Distributed Information Management System》</a></li>
</ul>
<p>介绍:构建可扩展的分布式信息管理系统</p>
<ul>
<li><a href="http://yager.io/Distributed/Distributed.html" target="_blank" rel="noopener">《Distributed Systems in Haskell》</a></li>
</ul>
<p>介绍:Haskell中的分布式系统开发</p>
<ul>
<li><a href="research.google.com/pubs/archive/43438.pdf">《Large-scale cluster management at Google with Borg》</a></li>
</ul>
<p>介绍:Google使用Borg进行大规模集群的管理,<a href="http://people.eecs.berkeley.edu/~istoica/classes/cs294/15/notes/09-borg.pdf" target="_blank" rel="noopener">伯克利大学ppt介绍</a>,<a href="http://my.oschina.net/HardySimpson/blog?search=Borg" target="_blank" rel="noopener">中文版</a></p>
<ul>
<li><a href="http://www.yebangyu.org/LockFreeProgrammingPractice.pdf" target="_blank" rel="noopener">《Lock Free Programming Practice》</a></li>
</ul>
<p>介绍:并发编程（Concurrency Programming）资料,主要涵盖lock free数据结构实现、内存回收方法、memory model等<a href="http://pan.baidu.com/s/1sleTpgT" target="_blank" rel="noopener">备份链接</a> 密码: xc5j</p>
<ul>
<li><a href="http://read.pudn.com/downloads95/ebook/386159/Distributed.Algorithms.pdf" target="_blank" rel="noopener">《Distributed Algorithms Lecture Notes for 6.852》</a></li>
</ul>
<p>介绍:Nancy Lynch’s的分布式算法研究生课程讲义</p>
<ul>
<li><a href="http://www.jmlr.org/papers/volume10/newman09a/newman09a.pdf" target="_blank" rel="noopener">《Distributed Algorithms for Topic Models》</a></li>
</ul>
<p>介绍:分布式算法主题模型.</p>
<ul>
<li><a href="https://recsys.acm.org/" target="_blank" rel="noopener">《RecSys - ACM Recommender Systems》</a></li>
</ul>
<p>介绍:世界上非常有名的推荐系统会议，我比较推荐接收的<a href="https://recsys.acm.org/recsys16/accepted-contributions" target="_blank" rel="noopener">PAPER</a></p>
<ul>
<li><a href="http://www.allthingsdistributed.com/" target="_blank" rel="noopener">《All Things Distributed》</a></li>
</ul>
<p>介绍:推荐一个博客,博主是Amazon CTO Werner Vogels,这是一个关注分布式领域的博客.大部分博文是关于在工业界应用.</p>
<ul>
<li><a href="https://github.com/hedengcheng/tech" target="_blank" rel="noopener">《programming, database, distributed system resource list》</a></li>
</ul>
<p>介绍:这个Git是由阿里(alibaba)的技术专家何登成维护,主要是分布式数据库.</p>
<ul>
<li><a href="http://erlang.org/download/armstrong_thesis_2003.pdf" target="_blank" rel="noopener">《Making reliable distributed systems in the presence of sodware errors》</a></li>
</ul>
<p>介绍:Erlang的作者<a href="http://joearms.github.io/" target="_blank" rel="noopener">Joe Armstrong</a>撰写的论文，面对软件错误构建可靠的分布式系统.<a href="http://open.qiniudn.com/[Joe-Armstrong][CN]Making-reliable-distributed-systems-in-the-presence-of-software-errors.pdf" target="_blank" rel="noopener">中文译版</a></p>
<ul>
<li><a href="https://courses.engr.illinois.edu/cs525/sched.htm" target="_blank" rel="noopener">《CS 525: Advanced Distributed Systems[Spring 2016]》</a></li>
</ul>
<p>介绍:伊利诺伊大学的Advanced Distributed Systems 里把各个方向重要papers（updated Spring 2015）列举出来，可以参考一下</p>
<ul>
<li><a href="https://users.ics.aalto.fi/suomela/da/da-screen.pdf" target="_blank" rel="noopener">《Distributed Algorithms》</a></li>
</ul>
<p>介绍:这是一本分布式算法电子书,作者是<a href="https://users.ics.aalto.fi/suomela/da/" target="_blank" rel="noopener">Jukka Suomela</a>.讲述了多个计算模型,一致性,唯一标示,并发等.</p>
<ul>
<li><a href="https://arxiv.org/pdf/1512.00727v2.pdf" target="_blank" rel="noopener">《TinyLFU: A Highly Efficient Cache Admission Policy》</a></li>
</ul>
<p>介绍:当时是在阅读<a href="http://blog.gainlo.co/index.php/2016/05/17/design-a-cache-system/" target="_blank" rel="noopener">如何设计一个缓存系统</a>时看到的，然后通过Google找到了这一篇关于缓存策略的论文，它是LFU的改良版,中文<a href="http://chuansong.me/n/2254051" target="_blank" rel="noopener">介绍</a>.如果有兴趣可以看看<a href="https://github.com/dgryski/go-tinylfu" target="_blank" rel="noopener">Golang实现版</a>。结合起来可能会帮助你理解</p>
<ul>
<li><a href="https://cs.stanford.edu/~matei/courses/2015/6.S897/" target="_blank" rel="noopener">《6.S897: Large-Scale Systems》</a></li>
</ul>
<p>介绍:斯坦福大学给研究生开的分布式系统课程。教师是 spark 作者 matei. 能把这些内容真正理解透，分布式系统的功力就很强了。</p>
<ul>
<li><a href="https://www.zhihu.com/question/23645117/answer/124708083" target="_blank" rel="noopener">《学习分布式系统需要怎样的知识？》</a></li>
</ul>
<p>介绍:[怎么学系列]学习分布式系统需要怎样的知识？</p>
<ul>
<li><a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="noopener">《Distributed systems theory for the distributed systems engineer》</a></li>
</ul>
<p>介绍:分布式系统工程师的分布式系统理论</p>
<ul>
<li><a href="https://dancres.github.io/Pages/" target="_blank" rel="noopener">《A Distributed Systems Reading List》</a></li>
</ul>
<p>介绍:分布式系统论文阅读列表,此外推荐威斯康星大学麦迪逊分校计算机系分布式系统学习推荐<a href="http://pages.cs.wisc.edu/~swift/classes/cs739-fa14/wiki/pmwiki.php/Main/ReadingList" target="_blank" rel="noopener">阅读列表</a></p>
<ul>
<li><a href="http://dsrg.pdos.csail.mit.edu/papers/" target="_blank" rel="noopener">《Distributed Systems Reading Group》</a></li>
</ul>
<p>介绍:麻省理工大学分布式系统小组，他们会把平时阅读到的优秀论文分享出来。虽然有些论文本页已经收录，但是里面的安排表<a href="http://dsrg.pdos.csail.mit.edu/schedule/" target="_blank" rel="noopener">schedule</a>还是挺赞的</p>
<ul>
<li><a href="https://github.com/Developer-Y/Scalable-Software-Architecture" target="_blank" rel="noopener">《Scalable Software Architecture》</a></li>
</ul>
<p>介绍:分布式系统、可扩展性与系统设计相关报告、论文与网络资源汇总.</p>
<ul>
<li><a href="http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/" target="_blank" rel="noopener">《MapReduce&amp;Hadoop resource》</a></li>
</ul>
<p>介绍:MapReduce&amp;Hadoop相关论文，涉及分布式系统设计，性能分析，实践，优化等多个方面</p>
<ul>
<li><a href="https://vowi.fsinf.at/images/b/bc/TU_Wien-Verteilte_Systeme_VO_(G%C3%B6schka)_-_Tannenbaum-distributed_systems_principles_and_paradigms_2nd_edition.pdf" target="_blank" rel="noopener">《Distributed Systems: Principles and Paradigms(second edtion)》</a></li>
</ul>
<p>介绍:分布式系统原理与范型第二版,<a href="http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/distributed%20systems%20principles%20and%20paradigms%20solution.pdf" target="_blank" rel="noopener">课后解答</a></p>
<ul>
<li><a href="http://muratbuffalo.blogspot.jp/2016/11/my-distributed-systems-seminars-reading.html" target="_blank" rel="noopener">《Distributed Systems Seminar’s reading list for Spring 2017》</a></li>
</ul>
<p>介绍:分布式系统研讨会论文阅读列表</p>
<ul>
<li><a href="https://arxiv.org/abs/1509.05393" target="_blank" rel="noopener">《A Critique of the CAP Theorem》</a></li>
</ul>
<p>介绍:这是一篇评论CAP定理的论文，学习CAP很有帮助,推荐阅读评论文章<a href="https://jvns.ca/blog/2016/11/19/a-critique-of-the-cap-theorem/" target="_blank" rel="noopener">“A Critique of the CAP Theorem”</a></p>
<ul>
<li><a href="http://olivergierke.de/2016/10/evolving-distributed-systems/" target="_blank" rel="noopener">《Evolving Distributed Systems》</a></li>
</ul>
<p>介绍:推荐文章《不断演进的分布式系统》.</p>
<ul>
<li><a href="https://news.ycombinator.com/item?id=13311124" target="_blank" rel="noopener">《Ask HN: Recommendations for a book on Distributed Systems?》</a></li>
</ul>
<p>介绍:HN上面关于分布式系统相关领域学习的书籍推荐.</p>
<ul>
<li><a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">《SeaweedFS:A simple and highly scalable distributed file system》</a></li>
</ul>
<p>介绍:Golang开源项目,分布式文件存储系统SeaweedFS</p>
<ul>
<li><a href="https://web.stanford.edu/~ouster/cgi-bin/papers/lfs.pdf" target="_blank" rel="noopener">《The Design and Implementation of a Log-Structured File System》</a></li>
</ul>
<p>介绍:论文推荐:设计并实现一个日志结构的文件系统.</p>
<p><strong>原文链接：<a href="https://raw.githubusercontent.com/ty4z2008/Qix/master/ds.md" target="_blank" rel="noopener">https://raw.githubusercontent.com/ty4z2008/Qix/master/ds.md</a></strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 资料大全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM之Java内存区域与内存溢出异常]]></title>
      <url>http://linbingdong.com/2017/04/08/JVM%E4%B9%8BJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>Java的JVM可以自动管理内存，包括内存动态分配和垃圾收集等。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JVM在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着JVM进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p>
<p>先看看JVM运行时数据区包括哪几个部分：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3796e589e8c67d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JVM运行时数据区"></p>
<p>可以看出JVM运行时数据区包括：堆、虚拟机栈、本地方法栈、方法区、程序计数器和运行时常量池。其中，运行时常量池在方法区里。</p>
<p>接下来对这几个区域一一介绍。</p>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>Java堆（Java Heap）是JVM所管理的内存中<strong>最大</strong>的一块。</p>
<p>堆的作用是用来存放对象实例，所有的对象实例和数组都在堆上分配内存。</p>
<p>堆也是垃圾收集器管理的主要区域，因此也被称为“GC堆”。因为垃圾收集器主要用来收集对象，对象在堆上分配，所以自然堆是垃圾收集器管理的主要区域。</p>
<p>堆被所有的线程共享，在虚拟机启动时创建，物理上可在不连续的内存空间中，跟磁盘空间一样。</p>
<h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><h4 id="什么情况下会堆溢出"><a href="#什么情况下会堆溢出" class="headerlink" title="什么情况下会堆溢出"></a>什么情况下会堆溢出</h4><p>当创建新对象，堆上内存不够时就会产生堆溢出。</p>
<p>只要不断创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么当堆上的内存不够创建新对象时就会产生内存溢出异常。</p>
<h4 id="制造堆溢出"><a href="#制造堆溢出" class="headerlink" title="制造堆溢出"></a>制造堆溢出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">                length += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">                System.out.println(<span class="string">"number of obj: "</span>+length);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid39193.hprof ...</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Heap dump file created [27917334 bytes in 0.227 secs]</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:3210)</span><br><span class="line">number of obj: 810325</span><br><span class="line">	at java.util.Arrays.copyOf(Arrays.java:3181)</span><br><span class="line">	at java.util.ArrayList.grow(ArrayList.java:261)</span><br><span class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)</span><br><span class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)</span><br><span class="line">	at java.util.ArrayList.add(ArrayList.java:458)</span><br><span class="line">	at com.lbd.jvm.HeapOOM.main(HeapOOM.java:20)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:497)</span><br><span class="line">	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>

<h4 id="解决堆溢出"><a href="#解决堆溢出" class="headerlink" title="解决堆溢出"></a>解决堆溢出</h4><p>重点确认内存中的对象是否是必要的，也就是确认到底是出现了内存泄露（Memory Leak）还是内存溢出（Memory Overflow）。</p>
<p>方法：通过内存映像分析工具（如Eclipse Memory Analyzer）对Dump出来的堆转储快照进行分析。</p>
<p>如果是内存泄露：</p>
<p>进一步通过工具查看泄露对象到GC Roots的引用链，这样就能找到泄露对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们的，这样就可以比较准确地定位出泄露代码的位置</p>
<p>如果不是内存泄露：</p>
<p>也就是内存中的对象确实还必须存活这，那就应该检查虚拟机的堆参数（-Xms和-Xmx），看看是否可以调大一些。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息（类的版本、字段、方法、接口等描述信息）、常量、静态变量、即使编译器编译后的代码等数据。</p>
<p>方法区的内存回收主要针对常量池的回收和堆类型的卸载。垃圾收集行为在该区域比较少出现。</p>
<p>在HotSpot虚拟机中，方法区又被称为“永久代”（Permanent Generation），这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存，就不用专门为方法区编写内存管理代码了。</p>
<h3 id="方法区溢出"><a href="#方法区溢出" class="headerlink" title="方法区溢出"></a>方法区溢出</h3><p>如果产生大量的类或者大量的字符串常量（运行时常量池溢出）可能导致方法区溢出。</p>
<p>Java SE API可以动态产生类，如反射时的GeneratedConstructorAccessor和动态代理等。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<h3 id="运行时常量池溢出"><a href="#运行时常量池溢出" class="headerlink" title="运行时常量池溢出"></a>运行时常量池溢出</h3><h4 id="什么时候会运行时常量池溢出"><a href="#什么时候会运行时常量池溢出" class="headerlink" title="什么时候会运行时常量池溢出"></a>什么时候会运行时常量池溢出</h4><p>产生大量的字符串常量。</p>
<h4 id="制造运行时常量池溢出"><a href="#制造运行时常量池溢出" class="headerlink" title="制造运行时常量池溢出"></a>制造运行时常量池溢出</h4><p>注：以下代码只在JDK1.6及之前的版本才会产生运行时常量池溢出异常，因为在这些版本中常量池分配在永久代内，可以通过-XX:PermSize=1M -XX:MaxPermSize=1M来限制方法区的大小，从而间接限制其中常量池的容量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -XX:PermSize=1M -XX:MaxPermSize=1M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            list.add(String.valueOf(i++).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应者一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p>虚拟机栈是线程私有的。为Java方法服务。</p>
<p>虚拟机栈中最重要的是局部变量表。局部变量表存放了编译期可知的各种基本数据类型和对象引用类型。是在编译期确定的。</p>
<h3 id="虚拟机栈溢出"><a href="#虚拟机栈溢出" class="headerlink" title="虚拟机栈溢出"></a>虚拟机栈溢出</h3><h4 id="什么情况下会Java虚拟机栈溢出"><a href="#什么情况下会Java虚拟机栈溢出" class="headerlink" title="什么情况下会Java虚拟机栈溢出"></a>什么情况下会Java虚拟机栈溢出</h4><ul>
<li>如果线程请求的栈深度大于虚拟机所允许的最大深度（一般是递归），将抛出StackOverflowError异常。</li>
<li>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>
</ul>
<h4 id="制造虚拟机栈溢出（StackOverflowError）"><a href="#制造虚拟机栈溢出（StackOverflowError）" class="headerlink" title="制造虚拟机栈溢出（StackOverflowError）"></a>制造虚拟机栈溢出（StackOverflowError）</h4><p>递归。因为递归需要用到栈。设置栈容量为256k（-Xss256k）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xss256k</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class="line">stack length:2789</span><br><span class="line">	at com.lbd.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">	at com.lbd.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">	at com.lbd.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">	at com.lbd.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">	at com.lbd.jvm.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br></pre></td></tr></table></figure>

<p>当调用了2789次后出现了栈溢出StackOverflowError。</p>
<h4 id="制造虚拟机栈溢出（OutOfMemoryError）"><a href="#制造虚拟机栈溢出（OutOfMemoryError）" class="headerlink" title="制造虚拟机栈溢出（OutOfMemoryError）"></a>制造虚拟机栈溢出（OutOfMemoryError）</h4><p>创建足够多的线程，当扩展栈时无法申请到足够的内存空间，就会抛出OutOfMemoryError异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xss2M</span></span><br><span class="line"><span class="comment"> * dangerous,don't run this program!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackOOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dontStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeakByThread</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    dontStop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JavaVMStackOOM oom = <span class="keyword">new</span> JavaVMStackOOM();</span><br><span class="line">        oom.stackLeakByThread();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈与虚拟机栈所发挥的作用很相似。区别在于：虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。</p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器用来记录正在执行的虚拟机字节码指令的地址。程序计数器是线程私有的。是唯一一个没有规定任何OutOfMemoryError情况的区域。</p>
<p>因为Java虚拟机的多线程是通过线程轮流切换并分配CPU执行时间的方式来实现的。为了线程切换后能恢复到正确的执行位置，每个线程需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>
<p>JDK1.4中新加入了NIO(New Input/Ouput)类，引入了一种基于通道（Channel）和缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBufer对象作为这块内存的引用进行操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CountDownLatch && CyclicBarrier example]]></title>
      <url>http://linbingdong.com/2017/04/05/CountDownLatch%20&amp;&%20CyclicBarrier%20example/</url>
      <content type="html"><![CDATA[<p>CountDownLatch &amp;&amp; CyclicBarrier example</p>
<a id="more"></a>

<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lbd.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line">        Worker w1 = <span class="keyword">new</span> Worker(<span class="string">"worker1"</span>, latch);</span><br><span class="line">        Worker w2 = <span class="keyword">new</span> Worker(<span class="string">"worker2"</span>, latch);</span><br><span class="line">        Worker w3 = <span class="keyword">new</span> Worker(<span class="string">"worker3"</span>, latch);</span><br><span class="line"></span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss(latch);</span><br><span class="line"></span><br><span class="line">        executor.execute(w1);</span><br><span class="line">        executor.execute(w2);</span><br><span class="line">        executor.execute(w3);</span><br><span class="line">        executor.execute(boss);</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch downLatch;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name, CountDownLatch downLatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.downLatch = downLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" is working..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" is done!"</span>);</span><br><span class="line">        downLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch downLatch;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(CountDownLatch downLatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downLatch = downLatch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"boss is waiting for all workers..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            downLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"all work is done! Boss gonna check"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">worker1 is working...</span><br><span class="line">worker2 is working...</span><br><span class="line">worker3 is working...</span><br><span class="line">boss is waiting <span class="keyword">for</span> all workers...</span><br><span class="line">worker2 is done!</span><br><span class="line">worker3 is done!</span><br><span class="line">worker1 is done!</span><br><span class="line">all work is done! Boss gonna check</span><br></pre></td></tr></table></figure>

<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lbd.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line">        Worker1 w1 = <span class="keyword">new</span> Worker1(<span class="string">"worker1"</span>, barrier);</span><br><span class="line">        Worker1 w2 = <span class="keyword">new</span> Worker1(<span class="string">"worker2"</span>, barrier);</span><br><span class="line">        Worker1 w3 = <span class="keyword">new</span> Worker1(<span class="string">"worker3"</span>, barrier);</span><br><span class="line">        executor.execute(w1);</span><br><span class="line">        executor.execute(w2);</span><br><span class="line">        executor.execute(w3);</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier barrier;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker1</span><span class="params">(String name, CyclicBarrier barrier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(barrier.getNumberWaiting() + <span class="string">" worker arrived"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">" arrived"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            barrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"all arrived,star working!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> worker arrived</span><br><span class="line">worker2 arrived</span><br><span class="line"><span class="number">1</span> worker arrived</span><br><span class="line">worker1 arrived</span><br><span class="line"><span class="number">2</span> worker arrived</span><br><span class="line">worker3 arrived</span><br><span class="line">all arrived,star working!</span><br><span class="line">all arrived,star working!</span><br><span class="line">all arrived,star working!</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MooseFS安装配置]]></title>
      <url>http://linbingdong.com/2017/03/30/MooseFS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>记录 MooseFS 的部署过程。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MooseFS 是一个分布式文件系统，支持挂载的形式。</p>
<p><strong>主要角色</strong></p>
<ul>
<li>master 节点：元数据节点，复制调度和管理元数据。</li>
<li>metalogger 节点：用于备份 master 的元数据和日志。</li>
<li>chunkserver 节点：数据节点，数据实际存放的节点。</li>
<li>client ：客户端。通过 FUSE 将 mfs 文件系统挂载到客户端后，客户端可以像使用一个普通的磁盘分区一样来使用 mfs 。</li>
</ul>
<h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><table>
<thead>
<tr>
<th align="center">mfsmaster</th>
<th align="center">mfsmetalogger</th>
<th align="center">mfschunkserver</th>
<th align="center">mfsclient</th>
</tr>
</thead>
<tbody><tr>
<td align="center">192.168.20.96</td>
<td align="center">192.168.20.97</td>
<td align="center">192.168.20.98 192.168.20.99</td>
<td align="center">192.168.20.96 192.168.20.97 192.168.20.98 192.168.20.99</td>
</tr>
</tbody></table>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装fuse模块"><a href="#安装fuse模块" class="headerlink" title="安装fuse模块"></a>安装fuse模块</h3><p>确保需要安装 mfsclient 的节点上已经安装了 Linux 内核模块 FUSE 。</p>
<p>若未安装，可通过 yum 或者编译安装的方式进行安装。</p>
<h3 id="创建用户和用户组"><a href="#创建用户和用户组" class="headerlink" title="创建用户和用户组"></a>创建用户和用户组</h3><p>每个节点都要创建 mfs 用户和用户组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd  mfs</span><br><span class="line">useradd -g mfs mfs</span><br></pre></td></tr></table></figure>

<h3 id="修改-etc-hosts"><a href="#修改-etc-hosts" class="headerlink" title="修改/etc/hosts"></a>修改/etc/hosts</h3><p>在每个节点上为 mfsmaster 所在节点（192.168.20.96）增加一个别名 mfsmaster 。</p>
<p>修改 /etc/hosts ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.20.96 mfsmaster</span><br></pre></td></tr></table></figure>

<h3 id="解压rpm包"><a href="#解压rpm包" class="headerlink" title="解压rpm包"></a>解压rpm包</h3><p>将 mfs.tar.gz 解压到每个节点的 /opt 目录下，解压后会生成 /opt/mfs 目录。</p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="mfsmaster-cgi"><a href="#mfsmaster-cgi" class="headerlink" title="mfsmaster+cgi"></a>mfsmaster+cgi</h3><p>节点 192.168.20.96</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/mfs</span><br><span class="line">rpm -ivh moosefs-2.0.77-1.x86_64.rpm moosefs-master-2.0.77-1.x86_64.rpm moosefs-cgi-2.0.77-1.x86_64.rpm moosefs-cgiserv-2.0.77-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="mfsmetalogger"><a href="#mfsmetalogger" class="headerlink" title="mfsmetalogger"></a>mfsmetalogger</h3><p>节点 192.168.20.97 </p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/mfs</span><br><span class="line">rpm -ivh moosefs-2.0.77-1.x86_64.rpm moosefs-metalogger-2.0.77-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="mfschunkserver"><a href="#mfschunkserver" class="headerlink" title="mfschunkserver"></a>mfschunkserver</h3><p>节点 192.168.20.98 、 192.168.20.99 </p>
<p>创建 /mnt/mfs 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/mfs</span><br><span class="line">chown -R mfs:mfs /mnt/mfs</span><br></pre></td></tr></table></figure>

<p>修改 /etc/mfs/mfshdd.cfg ，在任意位置增加一行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/mnt/mfs</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/mfs</span><br><span class="line">rpm -ivh moosefs-2.0.77-1.x86_64.rpm moosefs-chunkserver-2.0.77-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="mfsclient"><a href="#mfsclient" class="headerlink" title="mfsclient"></a>mfsclient</h3><p>节点 192.168.20.96 、192.168.20.97 、192.168.20.98 、192.168.20.99</p>
<p>创建 /mnt/mfs-cli 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/mfs-cli</span><br><span class="line">chown -R mfs:mfs /mnt/mfs-cli/</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh moosefs-client-2.0.77-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>挂载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mfsmount /mnt/mfs-cli/ -H mfsmaster</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li>mfsmaster</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start moosefs-master</span><br></pre></td></tr></table></figure>

<ul>
<li>mfscgiserv</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start moosefs-cgiserv</span><br></pre></td></tr></table></figure>

<p>启动 mfsmaster 和 mfscgiserv 后，在浏览器中输入 <code>http://192.168.20.96:9425</code> 查看Web 页面 ：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-84150574f17280c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MooseFS WebUI"></p>
<ul>
<li>mfsmetalogger</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start moosefs-metalogger</span><br></pre></td></tr></table></figure>

<ul>
<li>mfschunkserver</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start moosefs-chunkserver</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>所有客户端节点 /mnt/mfs-cli 目录下的内容都是相同的。<br>只需把文件放入任意客户端节点的 /mnt/mfs-cli 目录下即可，该目录对所有客户端节点可见。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> MooseFS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 分布式文件系统 </tag>
            
            <tag> MooseFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL安装PostGIS插件并使用]]></title>
      <url>http://linbingdong.com/2017/03/25/PostgreSQL%E5%AE%89%E8%A3%85PostGISC%E6%8F%92%E4%BB%B6%E5%B9%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<a id="more"></a>

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<p>PostGIS支持所有的空间数据类型，这些类型包括：点（POINT）、线（LINESTRING）、多边形（POLYGON）、多点 （MULTIPOINT）、多线（MULTILINESTRING）、多多边形（MULTIPOLYGON）和集合对象集 （GEOMETRYCOLLECTION）等。PostGIS支持所有的对象表达方法，比如WKT和WKB。</p>
<p>PostGIS支持所有的数据存取和构造方法，如GeomFromText()、AsBinary()，以及GeometryN()等。</p>
<p>PostGIS提供简单的空间分析函数（如Area和Length）同时也提供其他一些具有复杂分析功能的函数，比如Distance。</p>
<p>PostGIS提供了对于元数据的支持，如GEOMETRY_COLUMNS和SPATIAL_REF_SYS，同时，PostGIS也提供了相应的支持函数，如AddGeometryColumn和DropGeometryColumn。</p>
<p>PostGIS提供了一系列的二元谓词（如Contains、Within、Overlaps和Touches）用于检测空间对象之间的空间关系，同时返回布尔值来表征对象之间符合这个关系。</p>
<p>PostGIS提供了空间操作符（如Union和Difference）用于空间数据操作。比如，Union操作符融合多边形之间的边界。两个交迭的多边形通过Union运算就会形成一个新的多边形，这个新的多边形的边界为两个多边形中最大边界。</p>
<p>PostGIS还提供以下功能：</p>
<p><strong>数据库坐标变换</strong></p>
<p>数据库中的几何类型可以通过Transform函数从一种投影系变换到另一种投影系中。在OpenGIS中的几何类型都将SRID作为自身结构的一部分，但不知什么原因，在OpenGIS的SFSQL规范中，并没有引入Transform。</p>
<p><strong>球体长度运算</strong></p>
<p>存储在普通地理坐标系中的集合类型如果不进行坐标变换是无法进行程度运算的，OpenGIS所提供的坐标变换使得积累类型的程度计算变成可能。</p>
<p><strong>三维的几何类型</strong></p>
<p>SFSQL规范只是针对二维集合类型。OpenGIS提供了对三维集合类型的支持，具体是利用输入的集合类型维数来决定输出的表现方式。例如，即便 所有几何对象内部都以三维形式存储，纯粹的二维交叉点通常还是以二维的形式返回。此外，还提供几何对象在不同维度间转换的功能。</p>
<p><strong>空间聚集函数</strong></p>
<p>在数据库中，聚集函数是一个执行某一属性列所有数据操作的函数。比如Sum和Average，Sum是求某一关系属性列的数据总和，Average 则是求取某一关系属性列的数据平均值。与此对应，空间聚集函数也是执行相同的操作，不过操作的对象是空间数据。例如聚集函数Extent返回一系列要素中 的最大的包裹矩形框，如“SELECT EXTENT(GEOM) FROM ROADS”这条SQL语句的执行结果是返回ROADS这个数据表中所有的包裹矩形框。</p>
<p><strong>栅格数据类型</strong></p>
<p>PostGIS通过一种新的数据类型片，提供对于大的栅格数据对象的存储。片由以下几个部分组成：包裹矩形框、SRID、类型和一个字节序列。通过 将片的大小控制在数据库页值（32×32）以下，使得快速的随即访问变成可能。一般大的图片也是通过将其切成32×32像素的片然后再存储在数据库中的。</p>
<h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h2><h3 id="2-1-安装PostGIS"><a href="#2-1-安装PostGIS" class="headerlink" title="2.1 安装PostGIS"></a>2.1 安装PostGIS</h3>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install postgis2_94   # 因为安装的PostgreSQL版本为9.4，所以是postgis2_94</span><br></pre></td></tr></table></figure>

<p>  <strong>注：</strong><br>  需要PostgreSQL9.1以上版本才支持PostGIS.</p>
<h3 id="2-2-使PostGIS可用"><a href="#2-2-使PostGIS可用" class="headerlink" title="2.2 使PostGIS可用"></a>2.2 使PostGIS可用</h3><p>想要在PostgreSQL中使用PostGIS插件，安装只是第一步。每个数据库想要使用PostGIS必须先在该数据库中使PostGIS可用。假设我们想在gisdb这个数据库中使用PostGIS,先进入gisdb数据库，执行以下步骤：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# CREATE EXTENSION postgis;</span><br><span class="line">gisdb=# CREATE EXTENSION postgis_topology;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-查看是否安装成功"><a href="#2-3-查看是否安装成功" class="headerlink" title="2.3 查看是否安装成功"></a>2.3 查看是否安装成功</h3><p>  在gisdb数据库中输入\du，查看已安装的插件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# \dx</span><br><span class="line">                                               已安装扩展列表</span><br><span class="line">       名称       | 版本  |  架构模式  |                                描述</span><br><span class="line">------------------+-------+------------+---------------------------------------------------------------------</span><br><span class="line"> plpgsql          | 1.0   | pg_catalog | PL/pgSQL procedural language</span><br><span class="line"> postgis          | 2.1.8 | public     | PostGIS geometry, geography, and raster spatial types and functions</span><br><span class="line"> postgis_topology | 2.1.8 | topology   | PostGIS topology spatial types and functions</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>可以看到已经安装了postgis和postgis_topology。</p>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="3-1-创建空间数据表"><a href="#3-1-创建空间数据表" class="headerlink" title="3.1 创建空间数据表"></a>3.1 创建空间数据表</h3><p>首先建立一个常规的表格存储有关城市（cities）的信息。这个表格有两栏，一个是 ID 编号，一个是城市名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# CREATE TABLE cities (id int4, name varchar(50));</span><br></pre></td></tr></table></figure>

<p>现在添加一个空间列用于存储城市的位置。习惯上这个列叫做 the_geom。它记录了数据为什么类型（点、线、面）、有几维（这里是二维）以及空间坐标系统。此处使用 EPSG:4326 坐标系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT AddGeometryColumn (&apos;cities&apos;, &apos;the_geom&apos;, 4326, &apos;POINT&apos;, 2);</span><br></pre></td></tr></table></figure>

<p>完成后，查询 cities 表单应当显示这个新栏目。同时页面将显示当前表达没有记录（0 rows）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# select * from cities;</span><br><span class="line"> id |      name       |                      the_geom</span><br><span class="line">----+-----------------+----------------------------------------------------</span><br><span class="line">（0行记录）</span><br></pre></td></tr></table></figure>

<p>为添加记录，需要使用 SQL 命令。对于空间列，使用 PostGIS 的 ST_GeomFromText可以将文本转化为坐标与参考系号的记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (1,ST_GeomFromText(&apos;POINT(-0.1257 51.508)&apos;,4326),&apos;London, England&apos;);</span><br><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (2,ST_GeomFromText(&apos;POINT(-81.233 42.983)&apos;,4326),&apos;London, Ontario&apos;);</span><br><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (3,ST_GeomFromText(&apos;POINT(27.91162491 -33.01529)&apos;,4326),&apos;East London,SA&apos;);</span><br></pre></td></tr></table></figure>

<p>当然，这样的输入方式难以操作。其它方式可以更快的输入数据。就目前来说，表格内已经有了一些城市数据，可以先进行查询等操作。</p>
<h3 id="3-2-简单查询"><a href="#3-2-简单查询" class="headerlink" title="3.2 简单查询"></a>3.2 简单查询</h3><p>标准的 SQL 操作都可以用于 PostGIS 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT * FROM cities;</span><br><span class="line"> id |      name       |                      the_geom</span><br><span class="line">----+-----------------+----------------------------------------------------</span><br><span class="line">  1 | London, England | 0101000020E6100000BBB88D06F016C0BF1B2FDD2406C14940</span><br><span class="line">  2 | London, Ontario | 0101000020E6100000F4FDD478E94E54C0E7FBA9F1D27D4540</span><br><span class="line">  3 | East London,SA  | 0101000020E610000040AB064060E93B4059FAD005F58140C0</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>这里的坐标是无法阅读的 16 进制格式。要以 WKT 文本显示，使用 ST_AsText(the_geom) 或ST_AsEwkt(the_geom) 函数。也可以使用 ST_X(the_geom) 和 ST_Y(the_geom) 显示一个维度的坐标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=#  SELECT id, ST_AsText(the_geom), ST_AsEwkt(the_geom), ST_X(the_geom), ST_Y(the_geom) FROM cities;</span><br><span class="line"> id |          st_astext           |               st_asewkt                |    st_x     |   st_y</span><br><span class="line">----+------------------------------+----------------------------------------+-------------+-----------</span><br><span class="line">  1 | POINT(-0.1257 51.508)        | SRID=4326;POINT(-0.1257 51.508)        |     -0.1257 |    51.508</span><br><span class="line">  2 | POINT(-81.233 42.983)        | SRID=4326;POINT(-81.233 42.983)        |     -81.233 |    42.983</span><br><span class="line">  3 | POINT(27.91162491 -33.01529) | SRID=4326;POINT(27.91162491 -33.01529) | 27.91162491 | -33.01529</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-空间查询"><a href="#3-3-空间查询" class="headerlink" title="3.3 空间查询"></a>3.3 空间查询</h3><p>PostGIS 为 PostgreSQL 扩展了许多空间操作功能。以上已经涉及了转换空间坐标格式的 ST_GeomFromText 。多数空间操作以 ST（spatial type）开头，在 PostGIS 文档相应章节有罗列。这里回答一个具体的问题：上面三个城市相互的距离是多少？查询语句怎么写？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT p1.name,p2.name,ST_Distance_Sphere(p1.the_geom,p2.the_geom) FROM cities AS p1, cities AS p2 WHERE p1.id &gt; p2.id;</span><br><span class="line">      name       |      name       | st_distance_sphere</span><br><span class="line">-----------------+-----------------+--------------------</span><br><span class="line"> London, Ontario | London, England |   5875787.03777356</span><br><span class="line"> East London,SA  | London, England |   9789680.59961472</span><br><span class="line"> East London,SA  | London, Ontario |   13892208.6782928</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>输出显示了距离数据。注意 ‘WHERE’ 部分防止了输出城市到自身的距离（0）或者两个城市不同排列的距离数据（London, England 到 London, Ontario 和 London, Ontario 到 London, England 的距离是一样的）。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper原理及其在Hadoop和HBase中的应用]]></title>
      <url>http://linbingdong.com/2017/03/23/ZooKeeper%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%9C%A8Hadoop%E5%92%8CHBase%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，由雅虎创建，是Google <strong>Chubby的开源实现</strong>。分布式应用程序可以基于ZooKeeper实现诸如<strong>数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列</strong>等功能。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，由雅虎创建，是Google <strong>Chubby的开源实现</strong>。分布式应用程序可以基于ZooKeeper实现诸如<strong>数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列</strong>等功能。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>本节将介绍ZooKeeper的几个核心概念。这些概念贯穿于之后对ZooKeeper更深入的讲解，因此有必要预先了解这些概念。</p>
<h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><p>在ZooKeeper中，有三种角色：</p>
<ul>
<li>Leader</li>
<li>Follower</li>
<li>Observer</li>
</ul>
<p>一个ZooKeeper集群同一时刻只会有一个Leader，其他都是Follower或Observer。</p>
<p>ZooKeeper配置很简单，每个节点的配置文件(zoo.cfg)都是一样的，只有myid文件不一样。myid的值必须是zoo.cfg中server.{数值}的{数值}部分。</p>
<p>zoo.cfg文件内容示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maxClientCnxns=0</span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line">dataDir=/var/lib/zookeeper/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the directory where the transaction logs are stored.</span><br><span class="line">dataLogDir=/var/lib/zookeeper/logs</span><br><span class="line">server.1=192.168.20.101:2888:3888</span><br><span class="line">server.2=192.168.20.102:2888:3888</span><br><span class="line">server.3=192.168.20.103:2888:3888</span><br><span class="line">server.4=192.168.20.104:2888:3888</span><br><span class="line">server.5=192.168.20.105:2888:3888</span><br><span class="line">minSessionTimeout=4000</span><br><span class="line">maxSessionTimeout=100000</span><br></pre></td></tr></table></figure>

<p>在装有ZooKeeper的机器的终端执行 <code>zookeeper-server status</code> 可以看当前节点的ZooKeeper是什么角色（Leader or Follower）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node-20-103 ~]# zookeeper-server status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /etc/zookeeper/conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node-20-104 ~]# zookeeper-server status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /etc/zookeeper/conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure>

<p>如上，node-20-104是Leader，node-20-103是follower。</p>
<p>ZooKeeper默认只有Leader和Follower两种角色，没有Observer角色。</p>
<p>为了使用Observer模式，在任何想变成Observer的节点的配置文件中加入：<code>peerType=observer</code><br>并在所有server的配置文件中，配置成observer模式的server的那行配置追加:observer，例如：<br><code>server.1:localhost:2888:3888:observer</code></p>
<p>ZooKeeper集群的所有机器通过一个<strong>Leader选举过程</strong>来选定一台被称为<strong>『Leader』</strong>的机器，<strong>Leader服务器</strong>为客户端提供<strong>读</strong>和<strong>写</strong>服务。</p>
<p>Follower和Observer都<strong>能</strong>提供<strong>读</strong>服务，<strong>不能</strong>提供<strong>写</strong>服务。两者唯一的区别在于，<strong>Observer</strong>机器<strong>不参与Leader选举</strong>过程，也<strong>不参与写操作</strong>的『过半写成功』策略，因此Observer可以在<strong>不影响写性能</strong>的情况下<strong>提升</strong>集群的<strong>读性能</strong>。</p>
<h3 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h3><p>Session是指<strong>客户端会话</strong>，在讲解客户端会话之前，我们先来了解下<strong>客户端连接</strong>。在ZooKeeper中，一个客户端连接是指客户端和ZooKeeper服务器之间的<strong>TCP长连接</strong>。ZooKeeper对外的服务端口默认是<strong>2181</strong>，客户端启动时，首先会与服务器建立一个TCP连接，从第一次连接建立开始，客户端会话的生命周期也开始了，通过这个连接，客户端能够通过<strong>心跳检测</strong>和服务器保持有效的会话，也能够向ZooKeeper服务器<strong>发送请求</strong>并<strong>接受响应</strong>，同时还能通过该连接接收来自服务器的<strong>Watch事件通知</strong>。Session的<strong>SessionTimeout</strong>值用来设置一个客户端会话的<strong>超时时间</strong>。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在SessionTimeout规定的时间内能够<strong>重新连接上</strong>集群中<strong>任意一台</strong>服务器，那么之前创建的会话<strong>仍然有效</strong>。</p>
<h3 id="数据节点（ZNode）"><a href="#数据节点（ZNode）" class="headerlink" title="数据节点（ZNode）"></a>数据节点（ZNode）</h3><p>在谈到分布式的时候，<strong>一般</strong>『节点』指的是组成集群的每一台<strong>机器</strong>。而ZooKeeper中的数据节点是指<strong>数据模型</strong>中的<strong>数据单元</strong>，称为<strong>ZNode</strong>。ZooKeeper将所有数据存储在<strong>内存中</strong>，数据模型是一棵<strong>树（ZNode Tree）</strong>，由斜杠（/）进行分割的路径，就是一个ZNode，如/hbase/master,其中hbase和master<strong>都是</strong>ZNode。每个ZNode上都会保存<strong>自己的数据内容</strong>，同时会保存一系列<strong>属性信息</strong>。</p>
<p>注：<br>这里的ZNode可以理解成<strong>既是</strong>Unix里的<strong>文件</strong>，<strong>又是</strong>Unix里的<strong>目录</strong>。因为每个ZNode不仅本身可以<strong>写数据</strong>（相当于Unix里的文件），还可以有<strong>下一级文件或目录</strong>（相当于Unix里的目录）。</p>
<p>在ZooKeeper中，ZNode可以分为<strong>持久节点</strong>和<strong>临时节点</strong>两类。</p>
<p><strong>持久节点</strong></p>
<p> 所谓持久节点是指一旦这个ZNode被创建了，除非主动进行ZNode的移除操作，否则这个ZNode将一直保存在ZooKeeper上。</p>
<p><strong>临时节点</strong></p>
<p>临时节点的生命周期跟客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。</p>
<p>另外，ZooKeeper还允许用户为每个节点添加一个特殊的属性：SEQUENTIAL。一旦节点被标记上这个属性，那么在这个节点被创建的时候，ZooKeeper就会自动在其节点后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ZooKeeper的每个ZNode上都会存储数据，对应于每个ZNode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个ZNode的三个数据版本，分别是version（当前ZNode的版本）、cversion（当前ZNode子节点的版本）和aversion（当前ZNode的ACL版本）。</p>
<h3 id="状态信息"><a href="#状态信息" class="headerlink" title="状态信息"></a>状态信息</h3><p>每个ZNode除了存储数据内容之外，还存储了ZNode本身的一些状态信息。用 get 命令可以同时获得某个ZNode的内容和状态信息。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 23] get /yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</span><br><span class="line"></span><br><span class="line">appcluster-yarnrm1</span><br><span class="line">cZxid = 0x1b00133dc0    //Created ZXID,表示该ZNode被创建时的事务ID</span><br><span class="line">ctime = Tue Jan 03 15:44:42 CST 2017    //Created Time,表示该ZNode被创建的时间</span><br><span class="line">mZxid = 0x1d00000063    //Modified ZXID，表示该ZNode最后一次被更新时的事务ID</span><br><span class="line">mtime = Fri Jan 06 08:44:25 CST 2017    //Modified Time，表示该节点最后一次被更新的时间</span><br><span class="line">pZxid = 0x1b00133dc0    //表示该节点的子节点列表最后一次被修改时的事务ID。注意，只有子节点列表变更了才会变更pZxid，子节点内容变更不会影响pZxid。</span><br><span class="line">cversion = 0    //子节点的版本号</span><br><span class="line">dataVersion = 11    //数据节点的版本号</span><br><span class="line">aclVersion = 0    //ACL版本号</span><br><span class="line">ephemeralOwner = 0x0    //创建该节点的会话的seddionID。如果该节点是持久节点，那么这个属性值为0。</span><br><span class="line">dataLength = 22    //数据内容的长度</span><br><span class="line">numChildren = 0    //子节点的个数</span><br></pre></td></tr></table></figure>

<p>在ZooKeeper中，version属性是用来实现乐观锁机制中的『写入校验』的（保证分布式数据原子性操作）。</p>
<h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>在ZooKeeper中，能改变ZooKeeper服务器状态的操作称为事务操作。一般包括数据节点创建与删除、数据内容更新和客户端会话创建与失效等操作。对应每一个事务请求，ZooKeeper都会为其分配一个全局唯一的事务ID，用ZXID表示，通常是一个64位的数字。每一个ZXID对应一次更新操作，从这些ZXID中可以间接地识别出ZooKeeper处理这些事务操作请求的全局顺序。</p>
<h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>Watcher（事件监听器），是ZooKeeper中一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知到感兴趣的客户端上去。该机制是ZooKeeper实现分布式协调服务的重要特性。</p>
<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>ZooKeeper采用ACL（Access Control Lists）策略来进行权限控制。ZooKeeper定义了如下5种权限。</p>
<ul>
<li>CREATE: 创建子节点的权限。</li>
<li>READ: 获取节点数据和子节点列表的权限。</li>
<li>WRITE：更新节点数据的权限。</li>
<li>DELETE: 删除子节点的权限。</li>
<li>ADMIN: 设置节点ACL的权限。</li>
</ul>
<p>注意：CREATE 和 DELETE 都是针对子节点的权限控制。</p>
<h2 id="ZooKeeper典型应用场景"><a href="#ZooKeeper典型应用场景" class="headerlink" title="ZooKeeper典型应用场景"></a>ZooKeeper典型应用场景</h2><p>ZooKeeper是一个<strong>高可用</strong>的分布式<strong>数据管理与协调框架</strong>。基于对ZAB算法的实现，该框架能够很好地保证分布式环境中数据的<strong>一致性</strong>。也是基于这样的特性，使得ZooKeeper成为了解决分布式一致性问题的利器。</p>
<h3 id="数据发布与订阅（配置中心）"><a href="#数据发布与订阅（配置中心）" class="headerlink" title="数据发布与订阅（配置中心）"></a>数据发布与订阅（配置中心）</h3><p>数据发布与订阅，即所谓的<strong>配置中心</strong>，顾名思义就是发布者将数据发布到ZooKeeper节点上，供订阅者进行数据订阅，进而达到<strong>动态获取数据</strong>的目的，实现配置信息的<strong>集中式管理</strong>和<strong>动态更新</strong>。</p>
<p>在我们平常的应用系统开发中，经常会碰到这样的需求：系统中需要使用一些通用的配置信息，例如<strong>机器列表信息</strong>、<strong>数据库配置信息</strong>等。这些全局配置信息通常具备以下3个特性。</p>
<ul>
<li>数据量通常比较<strong>小。</strong></li>
<li>数据内容在运行时<strong>动态变化</strong>。</li>
<li>集群中各机器共享，<strong>配置一致</strong>。</li>
</ul>
<p>对于这样的全局配置信息就可以发布到ZooKeeper上，让客户端（集群的机器）去订阅该消息。</p>
<p>发布/订阅系统一般有两种设计模式，分别是<strong>推（Push）</strong>和<strong>拉（Pull）</strong>模式。</p>
<ul>
<li>推：<strong>服务端主动</strong>将数据更新发送给所有订阅的客户端。</li>
<li>拉：<strong>客户端主动</strong>发起请求来获取最新数据，通常客户端都采用<strong>定时轮询</strong>拉取的方式。</li>
</ul>
<p>ZooKeeper采用的是<strong>推拉相结合</strong>的方式。如下：</p>
<p>客户端想服务端<strong>注册</strong>自己需要关注的节点，一旦该节点的数据发生<strong>变更</strong>，那么服务端就会向相应的客户端发送Watcher事件<strong>通知</strong>，客户端接收到这个消息通知后，需要<strong>主动</strong>到服务端<strong>获取</strong>最新的数据（<strong>推拉结合</strong>）。</p>
<h3 id="命名服务-Naming-Service"><a href="#命名服务-Naming-Service" class="headerlink" title="命名服务(Naming Service)"></a>命名服务(Naming Service)</h3><p>命名服务也是分布式系统中比较常见的一类场景。在分布式系统中，通过使用命名服务，客户端应用能够根据指定<strong>名字</strong>来获取<strong>资源或服务的地址，提供者等信息</strong>。被命名的实体通常可以是<strong>集群中的机器，提供的服务，远程对象等等</strong>——这些我们都可以统称他们为<strong>名字（Name）</strong>。其中较为常见的就是一些分布式服务框架（如RPC、RMI）中的服务地址列表。通过在ZooKeepr里创建顺序节点，能够很容易创建一个<strong>全局唯一的路径</strong>，这个路径就可以作为一个<strong>名字</strong>。</p>
<p>ZooKeeper的命名服务即生成<strong>全局唯一的ID</strong>。</p>
<h3 id="分布式协调-通知"><a href="#分布式协调-通知" class="headerlink" title="分布式协调/通知"></a>分布式协调/通知</h3><p>ZooKeeper中特有<strong>Watcher注册</strong>与<strong>异步通知机制</strong>，能够很好的实现分布式环境下不同机器，甚至不同系统之间的<strong>通知与协调</strong>，从而实现<strong>对数据变更的实时处理</strong>。使用方法通常是不同的客户端都对ZK上同一个ZNode进行注册，监听ZNode的变化（包括ZNode本身内容及子节点的），如果ZNode发生了变化，那么所有订阅的客户端都能够接收到相应的Watcher通知，并做出相应的处理。</p>
<p><strong>ZK的分布式协调/通知，是一种通用的分布式系统机器间的通信方式</strong>。</p>
<h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h4><p>机器间的心跳检测机制是指在分布式环境中，不同机器（或进程）之间需要检测到彼此是否在正常运行，例如A机器需要知道B机器是否正常运行。在传统的开发中，我们通常是通过主机直接是否可以<strong>相互PING通</strong>来判断，更复杂一点的话，则会通过在机器之间建立长连接，通过<strong>TCP连接</strong>固有的心跳检测机制来实现上层机器的心跳检测，这些都是非常常见的心跳检测方法。</p>
<p>下面来看看如何使用ZK来实现分布式机器（进程）间的心跳检测。</p>
<p>基于ZK的<strong>临时节点</strong>的特性，可以让不同的进程都在ZK的一个<strong>指定节点</strong>下创建<strong>临时子节点</strong>，不同的进程直接可以根据这个临时子节点来判断对应的进程<strong>是否存活</strong>。通过这种方式，检测和被检测系统直接并不需要直接相关联，而是通过ZK上的某个节点进行关联，大大<strong>减少了系统耦合</strong>。</p>
<h4 id="工作进度汇报"><a href="#工作进度汇报" class="headerlink" title="工作进度汇报"></a>工作进度汇报</h4><p>在一个常见的<strong>任务分发系统</strong>中，通常任务被分发到不同的机器上执行后，需要实时地将自己的任务执行进度<strong>汇报</strong>给分发系统。这个时候就可以通过ZK来实现。在ZK上选择一个节点，每个任务客户端都在这个节点下面创建<strong>临时子节点</strong>，这样便可以实现两个功能：</p>
<ul>
<li>通过判断临时节点是否存在来确定任务机器<strong>是否存活</strong>。</li>
<li>各个任务机器会实时地将自己的<strong>任务执行进度写到这个临时节点上去</strong>，以便中心系统能够实时地获取到任务的<strong>执行进度</strong>。</li>
</ul>
<h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><p><strong>Master选举</strong>可以说是ZooKeeper<strong>最典型的应用场景</strong>了。比如HDFS中Active NameNode的选举、YARN中Active ResourceManager的选举和HBase中Active HMaster的选举等。</p>
<p>针对Master选举的需求，通常情况下，我们可以选择常见的<strong>关系型数据库</strong>中的<strong>主键特性</strong>来实现：希望成为Master的机器都向数据库中插入一条<strong>相同主键ID</strong>的记录，数据库会帮我们进行<strong>主键冲突检查</strong>，也就是说，<strong>只有一台</strong>机器能插入成功——那么，我们就认为向数据库中<strong>成功插入</strong>数据的客户端机器<strong>成为Master</strong>。</p>
<p>依靠关系型数据库的主键特性确实能够很好地保证在集群中选举出唯一的一个Master。但是，如果当前选举出的Master挂了，那么该如何处理？谁来告诉我Master挂了呢？显然，关系型数据库无法通知我们这个事件。但是，ZooKeeper可以做到！</p>
<p>利用ZooKeepr的强一致性，能够很好地保证在分布式高并发情况下节点的创建一定能够保证全局唯一性，即ZooKeeper将会保证客户端<strong>无法创建一个已经存在的ZNode</strong>。也就是说，如果同时有多个客户端请求创建<strong>同一个</strong>临时节点，那么最终一定<strong>只有一个</strong>客户端请求能够创建成功。利用这个特性，就能很容易地在分布式环境中进行Master选举了。</p>
<p>成功创建该节点的客户端所在的机器就成为了Master。同时，其他没有成功创建该节点的客户端，都会在该节点上<strong>注册</strong>一个子节点变更的<strong>Watcher</strong>，用于监控当前Master机器是否存活，一旦发现当前的Master挂了，那么其他客户端将会<strong>重新进行Master选举</strong>。</p>
<p>这样就实现了Master的<strong>动态选举</strong>。</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>分布式锁是控制<strong>分布式系统</strong>之间<strong>同步访问共享资源</strong>的一种方式。</p>
<p>分布式锁又分为<strong>排他锁</strong>和<strong>共享锁</strong>两种。</p>
<h4 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h4><p>排他锁（Exclusive Locks，简称X锁），又称为<strong>写锁</strong>或<strong>独占锁</strong>。</p>
<blockquote>
<p>如果事务T1对数据对象O1加上了排他锁，那么在整个加锁期间，只允许事务T1对O1进行<strong>读取和更新</strong>操作，其他任何事务都不能在对这个数据对象进行任何类型的操作（不能再对该对象加锁），直到T1释放了排他锁。</p>
</blockquote>
<p>可以看出，排他锁的核心是如何保证当前<strong>只有一个事务获得锁</strong>，并且锁<strong>被释放</strong>后，所有正在等待获取锁的事务都能够<strong>被通知到</strong>。</p>
<p>如何利用ZooKeeper实现排他锁？</p>
<p><strong>定义锁</strong></p>
<p>ZooKeeper上的<strong>一个ZNode可以表示一个锁</strong>。例如/exclusive_lock/lock节点就可以被定义为一个锁。</p>
<p><strong>获得锁</strong></p>
<p>如上所说，把ZooKeeper上的一个ZNode看作是一个锁，<strong>获得锁</strong>就通过<strong>创建ZNode</strong>的方式来实现。所有客户端都去/exclusive_lock节点下创建临时子节点/exclusive_lock/lock。ZooKeeper会保证在所有客户端中，最终只有一个客户端能够创建成功，那么就可以认为该客户端获得了锁。同时，所有没有获取到锁的客户端就需要到/exclusive_lock节点上注册一个子节点变更的Watcher监听，以便实时监听到lock节点的变更情况。</p>
<p><strong>释放锁</strong></p>
<p>因为/exclusive_lock/lock是一个<strong>临时节点</strong>，因此在以下两种情况下，都有可能释放锁。</p>
<ul>
<li>当前获得锁的客户端机器发生<strong>宕机</strong>或<strong>重启</strong>，那么该临时节点就会<strong>被删除，释放锁</strong>。</li>
<li>正常执行完业务逻辑后，客户端就会<strong>主动</strong>将自己创建的临时节点<strong>删除，释放锁</strong>。</li>
</ul>
<p>无论在什么情况下移除了lock节点，ZooKeeper都会<strong>通知</strong>所有在/exclusive_lock节点上注册了节点变更Watcher监听的客户端。这些客户端在接收到通知后，再次<strong>重新发起</strong>分布式锁获取，即重复『获取锁』过程。</p>
<h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><blockquote>
<p>共享锁（Shared Locks，简称S锁），又称为读锁。如果事务T1对数据对象O1加上了共享锁，那么T1只能对O1进行<strong>读操作</strong>，其他事务也能<strong>同时对O1加共享锁</strong>（不能是排他锁），直到O1上的所有共享锁都释放后O1才能被加排他锁。</p>
</blockquote>
<p>总结：可以<strong>多个事务同时获得</strong>一个对象的<strong>共享锁</strong>（同时读），有共享锁就不能再加排他锁（因为排他锁是写锁）</p>
<h2 id="ZooKeeper在大型分布式系统中的应用"><a href="#ZooKeeper在大型分布式系统中的应用" class="headerlink" title="ZooKeeper在大型分布式系统中的应用"></a>ZooKeeper在大型分布式系统中的应用</h2><p>前面已经介绍了ZooKeeper的典型应用场景。本节将以常见的大数据产品Hadoop和HBase为例来介绍ZooKeeper在其中的应用，帮助大家更好地理解ZooKeeper的分布式应用场景。</p>
<h3 id="ZooKeeper在Hadoop中的应用"><a href="#ZooKeeper在Hadoop中的应用" class="headerlink" title="ZooKeeper在Hadoop中的应用"></a>ZooKeeper在Hadoop中的应用</h3><p>在Hadoop中，ZooKeeper主要用于<strong>实现HA(High Availability）</strong>，包括<strong>HDFS的NamaNode和YARN的ResourceManager的HA</strong>。同时，在YARN中，ZooKeepr还用来<strong>存储应用的运行状态</strong>。HDFS的NamaNode和YARN的ResourceManager利用ZooKeepr实现HA的原理是一样的，所以本节以YARN为例来介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6326ec291ba11b95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN架构体系"></p>
<p>从上图可以看出，YARN主要由ResourceManager（RM）、NodeManager（NM）、ApplicationMaster（AM）和Container四部分组成。其中<strong>最核心</strong>的就是<strong>ResourceManager</strong>。</p>
<p>ResourceManager负责集群中<strong>所有资源的统一管理和分配</strong>，同时<strong>接收</strong>来自各个节点（NodeManager）的<strong>资源汇报信息</strong>，并把这些信息按照一定的策略分配给各个应用程序（Application Manager），其内部维护了各个应用程序的ApplicationMaster信息、NodeManager信息以及资源使用信息等。</p>
<p>为了实现HA，必须有<strong>多个ResourceManager并存</strong>（一般就两个），并且<strong>只有一个ResourceManager处于Active状态</strong>，其他的则处于Standby状态，当Active节点无法正常工作（如机器宕机或重启）时，处于Standby的就会通过<strong>竞争选举</strong>产生<strong>新的Active节点</strong>。</p>
<h4 id="主备切换"><a href="#主备切换" class="headerlink" title="主备切换"></a>主备切换</h4><p>下面我们就来看看YARN是如何实现多个ResourceManager之间的主备切换的。</p>
<ol>
<li><p>创建锁节点<br>在ZooKeeper上会有一个<code>/yarn-leader-election/appcluster-yarn</code>的锁节点，所有的ResourceManager在启动的时候，都会去竞争写一个Lock子节点：<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>，该节点是临时节点。ZooKeepr能够为我们保证最终<strong>只有一个</strong>ResourceManager能够<strong>创建成功</strong>。<strong>创建成功</strong>的那个ResourceManager就切换为<strong>Active状态</strong>，<strong>没有成功</strong>的那些ResourceManager则切换为<strong>Standby状态</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 16] get /yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</span><br><span class="line"></span><br><span class="line">appcluster-yarnrm2</span><br><span class="line">cZxid = 0x1b00133dc0</span><br><span class="line">ctime = Tue Jan 03 15:44:42 CST 2017</span><br><span class="line">mZxid = 0x1f00000540</span><br><span class="line">mtime = Sat Jan 07 00:50:20 CST 2017</span><br><span class="line">pZxid = 0x1b00133dc0</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 28</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 22</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可以看到此时集群中ResourceManager2为Active。</p>
<ol start="2">
<li><p>注册Watcher监听<br>所有Standby状态的ResourceManager都会向<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>节点注册一个节点变更的<strong>Watcher监听</strong>，利用<strong>临时节点的特性</strong>，能够快速感知到Active状态的ResourceManager的运行情况。</p>
</li>
<li><p>主备切换<br>当Active状态的ResourceManager出现诸如<strong>宕机或重启</strong>的异常情况时，其在ZooKeeper上连接的客户端<strong>会话就会失效</strong>，因此<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>节点就会<strong>被删除</strong>。此时其余各个Standby状态的ResourceManager就都会<strong>接收到</strong>来自ZooKeeper服务端的<strong>Watcher事件通知</strong>，然后会<strong>重复进行步骤1的操作</strong>。</p>
</li>
</ol>
<p>以上就是利用ZooKeeper来实现ResourceManager的主备切换的过程，实现了ResourceManager的HA。</p>
<p>HDFS中NameNode的HA的实现原理跟YARN中ResourceManager的HA的实现原理相同。其锁节点为<code>/hadoop-ha/mycluster/ActiveBreadCrumb</code>。</p>
<h4 id="ResourceManager状态存储"><a href="#ResourceManager状态存储" class="headerlink" title="ResourceManager状态存储"></a>ResourceManager状态存储</h4><p>在 ResourceManager 中，<strong>RMStateStore</strong> 能够存储一些 RM 的<strong>内部状态信息</strong>，包括 Application 以及它们的 Attempts 信息、Delegation Token 及 Version Information 等。需要注意的是，RMStateStore 中的绝大多数状态信息都是<strong>不需要持久化存储</strong>的，因为<strong>很容易从上下文信息中将其重构出来</strong>，如资源的使用情况。在存储的设计方案中，提供了三种可能的实现，分别如下。</p>
<ul>
<li>基于内存实现，一般是用于日常开发测试。</li>
<li>基于文件系统的实现，如HDFS。</li>
<li>基于ZooKeeper实现。</li>
</ul>
<p>由于这些状态信息的<strong>数据量都不是很大</strong>，因此Hadoop<strong>官方建议基于ZooKeeper来实现状态信息的存储</strong>。在ZooKeepr上，ResourceManager 的状态信息都被存储在<code>/rmstore</code>这个根节点下面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">28</span>] ls /rmstore/ZKRMStateRoot</span><br><span class="line">[RMAppRoot, AMRMTokenSecretManagerRoot, EpochNode, RMDTSecretManagerRoot, RMVersionNode]</span><br></pre></td></tr></table></figure>

<p>RMAppRoot 节点下存储的是与各个 Application 相关的信息，RMDTSecretManagerRoot 存储的是与安全相关的 Token 等信息。每个 Active 状态的 ResourceManager 在<strong>初始化阶段</strong>都会从 ZooKeeper 上<strong>读取到这些状态信息</strong>，并根据这些状态信息继续进行相应的处理。</p>
<p>小结：</p>
<p>ZooKeepr在Hadoop中的应用主要有：</p>
<ol>
<li>HDFS中NameNode的HA和YARN中ResourceManager的HA。</li>
<li>存储RMStateStore状态信息</li>
</ol>
<h3 id="ZooKeeper在HBase中的应用"><a href="#ZooKeeper在HBase中的应用" class="headerlink" title="ZooKeeper在HBase中的应用"></a>ZooKeeper在HBase中的应用</h3><p>HBase主要用ZooKeeper来实现<strong>HMaster选举与主备切换、系统容错、RootRegion管理、Region状态管理和分布式SplitWAL任务管理</strong>等。</p>
<h4 id="HMaster选举与主备切换"><a href="#HMaster选举与主备切换" class="headerlink" title="HMaster选举与主备切换"></a>HMaster选举与主备切换</h4><p>HMaster选举与主备切换的原理和HDFS中NameNode及YARN中ResourceManager的HA原理相同。</p>
<h4 id="系统容错"><a href="#系统容错" class="headerlink" title="系统容错"></a>系统容错</h4><p>当HBase启动时，每个<strong>RegionServer</strong>都会到ZooKeeper的<code>/hbase/rs</code>节点下创建一个信息节点（下文中，我们称该节点为”rs状态节点”），例如<code>/hbase/rs/[Hostname]</code>，同时，<strong>HMaster</strong>会对这个节点<strong>注册监听</strong>。当某个 RegionServer 挂掉的时候，ZooKeeper会因为在一段时间内无法接受其心跳（即 Session 失效），而删除掉该 RegionServer 服务器对应的 rs 状态节点。与此同时，HMaster 则会接收到 ZooKeeper 的 NodeDelete 通知，从而感知到某个节点断开，并立即开始容错工作。</p>
<p>HBase为什么不直接让HMaster来负责RegionServer的监控呢？如果HMaster直接通过<strong>心跳机制</strong>等来管理RegionServer的状态，随着<strong>集群越来越大</strong>，HMaster的<strong>管理负担会越来越重</strong>，另外它自身也有挂掉的可能，因此数据还<strong>需要持久化</strong>。在这种情况下，ZooKeeper就成了理想的选择。</p>
<h4 id="RootRegion管理"><a href="#RootRegion管理" class="headerlink" title="RootRegion管理"></a>RootRegion管理</h4><p>对应HBase集群来说，数据存储的<strong>位置信息</strong>是记录在<strong>元数据region</strong>，也就是<strong>RootRegion</strong>上的。每次客户端发起新的请求，需要知道数据的位置，就会去查询RootRegion，而<strong>RootRegion自身位置则是记录在ZooKeeper上</strong>的（默认情况下，是记录在ZooKeeper的<code>/hbase/meta-region-server</code>节点中）。当RootRegion发生变化，比如Region的手工移动、重新负载均衡或RootRegion所在服务器发生了故障等是，就能够通过ZooKeeper来感知到这一变化并做出一系列相应的容灾措施，从而保证客户端总是能够拿到正确的RootRegion信息。</p>
<h4 id="Region管理"><a href="#Region管理" class="headerlink" title="Region管理"></a>Region管理</h4><p>HBase里的Region会经常发生变更，这些变更的原因来自于系统故障、负载均衡、配置修改、Region分裂与合并等。一旦Region发生移动，它就会经历<strong>下线（offline）和重新上线（online）</strong>的过程。</p>
<p>在<strong>下线期间</strong>数据是<strong>不能被访问</strong>的，并且Region的这个状态变化必须<strong>让全局知晓</strong>，否则可能会出现<strong>事务性的异常</strong>。对于大的HBase集群来说，Region的数量可能会多达十万级别，甚至更多，这样规模的Region状态管理交给ZooKeeper来做也是一个很好的选择。</p>
<h4 id="分布式SplitWAL任务管理"><a href="#分布式SplitWAL任务管理" class="headerlink" title="分布式SplitWAL任务管理"></a>分布式SplitWAL任务管理</h4><p>当某台<strong>RegionServer服务器挂掉</strong>时，由于总有一部分<strong>新写入的数据还没有持久化到HFile中</strong>，因此在迁移该RegionServer的服务时，一个重要的工作就是<strong>从WAL中恢复</strong>这部分还在内存中的数据，而这部分工作<strong>最关键的一步</strong>就是<strong>SplitWAL</strong>，即HMaster需要遍历该RegionServer服务器的WAL，并按Region切分成小块移动到新的地址下，并进行<strong>日志的回放（replay）</strong>。</p>
<p>由于单个RegionServer的日志量相对庞大（可能有上千个Region，上GB的日志），而用户又往往希望系统能够快速完成日志的恢复工作。因此一个可行的方案是将这个处理WAL的任务<strong>分给多台RegionServer服务器</strong>来共同处理，而这就又需要一个<strong>持久化组件来辅助HMaster完成任务的分配</strong>。当前的做法是，HMaster会在ZooKeeper上创建一个<strong>SplitWAL节点</strong>（默认情况下，是<code>/hbase/SplitWAL</code>节点），将<strong>“哪个RegionServer处理哪个Region”</strong>这样的信息以<strong>列表的形式</strong>存放到该节点上，然后由各个RegionServer服务器自行到该节点上去<strong>领取任务</strong>并在任务执行成功或失败后再<strong>更新该节点的信息</strong>，以通知HMaster继续进行后面的步骤。ZooKeeper在这里担负起了分布式集群中<strong>相互通知和信息持久化</strong>的角色。</p>
<p>小结：</p>
<p>以上就是一些HBase中依赖ZooKeeper完成分布式协调功能的典型场景。但事实上，HBase对ZooKeepr的依赖还不止这些，比如HMaster还依赖ZooKeeper来完成Table的enable/disable状态记录，以及HBase中<strong>几乎所有的元数据存储</strong>都是放在ZooKeeper上的。</p>
<p>由于ZooKeeper出色的分布式协调能力及良好的通知机制，HBase在各版本的演进过程中越来越多地增加了ZooKeeper的应用场景，从趋势上来看两者的交集越来越多。HBase中所有对ZooKeeper的操作都封装在了org.apache.hadoop.hbase.zookeeper这个包中，感兴趣的同学可以自行研究。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《从Paxos到Zookeeper》</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> ZooKeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python函数式编程]]></title>
      <url>http://linbingdong.com/2017/03/15/Python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>虽然 Python 不是函数式编程语言（是命令式编程语言），但是支持许多有价值的函数式编程工具。Python 提供 3 种内建函数和 lambda 表达式等来支持函数式编程。</p>
<a id="more"></a>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Python 允许用 lambda 关键字创造匿名函数。匿名顾名思义就是没有名字，即不需要以标准的方式来声明，比如说，使用 def 加函数名来声明。一个完整的 lambda “语句”代表了一个表达式，这个表达式的定义体必须和声明放在同一行。语法如下：</p>
<p><code>lambda [arg1[, arg2, ... argN]]: expression</code></p>
<p>参数是可选的，如果使用参数的话，参数通常也会出现在表达式中。</p>
<p>注意：lambda 表达式返回可调用的函数对象。其实 lambda 表达式本身就是一个函数，这个函数定义了输入（冒号左边）和输出（冒号右边），只不过这个函数没有名字，但是我们可以把它赋给一个变量。</p>
<p>比如简单的加法函数。一般我们是这么写的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure>

<p>lambda 表达式这么写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x, y : x + y</span><br></pre></td></tr></table></figure>

<p>我们可以把 <code>lambda x, y : x + y</code> 赋值给 f ，然后给 f 传参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x, y : x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x10377f320</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-10</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">-2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">12</span>, <span class="number">100</span>)</span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-33</span>, <span class="number">-22</span>)</span><br><span class="line"><span class="number">-55</span></span><br></pre></td></tr></table></figure>

<p>可以看到，f 确实是个函数，可以接收两个参数，并返回这两个参数的和，等价于上面的 add 函数。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数英文叫 Higher-order function 。一般函数的输入参数和返回值都只能是变量或常量，如果某个函数可以接收函数作为其输入参数，或者其返回值中包含函数，那么该函数就是高阶函数。</p>
<p>Python 中有三个内建的用来支持函数式编程的高阶函数，分别是  <a href="https://docs.python.org/2.7/library/functions.html#filter" target="_blank" rel="noopener">filter()</a>，<a href="https://docs.python.org/2.7/library/functions.html#map" target="_blank" rel="noopener">map()</a> 和 <a href="https://docs.python.org/2.7/library/functions.html#reduce" target="_blank" rel="noopener">reduce()</a>。</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>filter(function, sequence) 返回一个 sequence (序列)，返回的序列中包括了输入序列中所有调用 function(item) 后返回值为 true 的元素。</p>
<p>filter() 工作流程如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-274646d0478cb876.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="how the filter() built-in function works"></p>
<p>举个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> x % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(f, range(<span class="number">2</span>, <span class="number">25</span>))</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>]</span><br></pre></td></tr></table></figure>

<p>因为 filter() 的输入参数中包含函数 f() ，所以 filter() 是高阶函数。上面的例子中返回 2~24 中能被 3 或 5 整除的数组成的列表。</p>
<p>当然，也可以使用匿名函数 lambda 表达式实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x : x % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> x % <span class="number">5</span> == <span class="number">0</span>, range(<span class="number">2</span>, <span class="number">25</span>))</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>]</span><br></pre></td></tr></table></figure>

<p>或者使用列表生成式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">25</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> x % <span class="number">5</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">24</span>]</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>map() 与 filter() 相似，因为它也能通过函数来处理序列。map()<br>将函数调用“映射”到序列的每个元素上，并返回一个含有所有返回值的列表。</p>
<p>map() 工作流程如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-117f98c795acfd5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="How the map() built-in function works"></p>
<p>举个栗子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x**<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(cube, range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>, <span class="number">1000</span>]</span><br></pre></td></tr></table></figure>

<p>上面的例子中，将 1~10 里的每个数分别调用 cube() ，并将返回值（x 的 3 次方）放入列表中。</p>
<p>lambda 表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x : x**<span class="number">3</span>, range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>, <span class="number">1000</span>]</span><br></pre></td></tr></table></figure>

<p>列表生成式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x**<span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>, <span class="number">1000</span>]</span><br></pre></td></tr></table></figure>

<p><strong>注意：map() 也可以处理多个序列。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x, y: (x+y, x-y), [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">[(<span class="number">3</span>, <span class="number">-1</span>), (<span class="number">7</span>, <span class="number">-1</span>), (<span class="number">11</span>, <span class="number">-1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">None</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure>

<p>工作流程如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-881a52aa250e3bd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="How the map() built-in function works with &gt; 1 sequence"></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce(function, sequence) 返回一个单值，它是这样构造的：首先以序列的前两个元素调用函数 function，再以返回值和第三个参数调用，依次执行下去。</p>
<p>reduce() 工作流程如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b6f3bb3a8024a63c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="How the reduce() built-in function works"></p>
<p>例如，以下程序计算 0 到 5 的整数之和:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="keyword">return</span> x+y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, range(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>实际上 reduce() 执行了如下的运算：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">((((0+1)+2)+3)+4)   ==&gt;  10</span><br></pre></td></tr></table></figure>

<p>lambda 表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce(<span class="keyword">lambda</span> x, y : x + y, range(<span class="number">0</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>偏函数解决这样的问题：如果我们有函数是多个参数的，我们希望能固定其中某几个参数的值（类似于默认值）。</p>
<p>举个栗子：</p>
<p>int() 函数可以把字符串转换为整数，当仅传入字符串时，int() 函数默认按十进制转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'11111'</span>)</span><br><span class="line"><span class="number">11111</span></span><br></pre></td></tr></table></figure>

<p>但 int() 函数还提供额外的 base 参数（默认值为10） 。如果传入 base 参数，就可以做 N 进制的转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'11111'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="number">4681</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'11111'</span>,base=<span class="number">16</span>)</span><br><span class="line"><span class="number">69905</span></span><br></pre></td></tr></table></figure>

<p>假设要转换大量的二进制字符串，每次都传入 int(x, base=2) 非常麻烦，于是，我们想到，可以定义一个 int2() 的函数，默认把 base=2 传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br></pre></td></tr></table></figure>

<p>这样，我们就可以方便地转换二进制了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure>

<p><code>functools.partial</code> 就是帮助我们创建一个偏函数的，不需要我们自己定义 int2() ，可以直接使用下面的代码创建一个新的函数 int2 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'11111'</span>)</span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'10000'</span>)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>

<p>总结一下，<code>functools.partial</code> 的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p>
<p>需要注意的是，上面的新的 int2 函数，仅仅是把 base 参数重新设定默认值为 2 ，但也可以在函数调用时传入其他值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'11111'</span>,base=<span class="number">10</span>)</span><br><span class="line"><span class="number">11111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'11111'</span>,base=<span class="number">8</span>)</span><br><span class="line"><span class="number">4681</span></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《Python核心编程》</li>
<li>Python官方文档</li>
<li>廖雪峰的Python教程</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL主从流复制部署]]></title>
      <url>http://linbingdong.com/2017/03/11/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%B5%81%E5%A4%8D%E5%88%B6%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>PostgreSQL在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<a id="more"></a>

<p>192.168.20.93上部署主服务器，192.168.20.94上部署从服务器。</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostgreSQL在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<p>与基于文件日志传送相比，流复制允许保持从服务器更新。 从服务器连接主服务器，其产生的流WAL记录到从服务器， 而不需要等待主服务器写完WAL文件。</p>
<p>PostgreSQL流复制默认是异步的。在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。</p>
<p>同步复制必须等主服务器和从服务器都写完WAL后才能提交事务。这样在一定程度上会增加事务的响应时间。</p>
<p>配置同步复制仅需要一个额外的配置步骤： <a href="http://www.postgres.cn/docs/9.4/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES" target="_blank" rel="noopener">synchronous_standby_names</a>必须设置为一个非空值。synchronous_commit也必须设置为on。</p>
<p>这里部署的是异步的流复制。</p>
<p><strong>注:</strong><br>主从服务器所在节点的系统、环境等最好一致。PostgreSQL版本也最好一致，否则可能会有问题。</p>
<h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2. 安装部署"></a>2. 安装部署</h2><p>先在192.168.20.93和192.168.20.94均安装PostgreSQL。</p>
<p>具体安装部署步骤见：<a href="http://linbingdong.com/2016/12/08/PostgreSQL%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%EF%BC%88CentOS7%EF%BC%89/">PostgreSQL单机部署（CentOS7）</a></p>
<h3 id="2-1-主服务器"><a href="#2-1-主服务器" class="headerlink" title="2.1 主服务器"></a>2.1 主服务器</h3><p>主服务器为192.168.20.93</p>
<p>先创建一个新目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /opt/pgsql/pg_archive</span><br></pre></td></tr></table></figure>

<p>1.首先需要创建一个数据库用户进行主从同步。创建用户replica，并赋予登录和复制的权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres# CREATE ROLE replica login replication encrypted password &apos;replica&apos;</span><br></pre></td></tr></table></figure>

<p>2.修改pg_hba.conf，允许replica用户来同步。</p>
<p>在pg_hba.conf里增加两行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host     all             all          192.168.20.94/32          trust   #允许94连接到主服务器</span><br><span class="line">host   replication      replica       192.168.20.94/32          md5   #允许94使用replica用户来复制</span><br></pre></td></tr></table></figure>

<p>这样，就设置了replica这个用户可以从192.168.20.93进行流复制请求。</p>
<p><strong>注：</strong><br>第二个字段必须要填replication</p>
<p>4.修改postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen_addresses = &apos;*&apos;   # 监听所有IP</span><br><span class="line">archive_mode = on  # 允许归档</span><br><span class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  # 用该命令来归档logfile segment</span><br><span class="line">wal_level = hot_standby </span><br><span class="line">max_wal_senders = 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个wal_keep_segments = 256 ＃ 设置流复制保留的最多的xlog数目</span><br><span class="line">wal_sender_timeout = 60s ＃ 设置流复制主机发送数据的超时时间</span><br><span class="line">max_connections = 100 # 这个设置要注意下，从库的max_connections必须要大于主库的</span><br></pre></td></tr></table></figure>

<p>配置完两个文件后重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl stop -D /opt/pgsql/data</span><br><span class="line">pg_ctl start -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>3.测试94能否连接93数据库。在94上运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -h 192.168.20.93 -U postgres</span><br></pre></td></tr></table></figure>

<p>看看是否能进入数据库。若可以，则正常。</p>
<h3 id="2-2-从服务器"><a href="#2-2-从服务器" class="headerlink" title="2.2 从服务器"></a>2.2 从服务器</h3><p>1.从主节点拷贝数据到从节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">rm -rf /opt/pgsql/data/*   #先将data目录下的数据都清空</span><br><span class="line">pg_basebackup -h 192.168.20.93 -U replica -D /opt/pgsql/data -X stream -P  # 从93拷贝数据到94（基础备份）</span><br><span class="line">mkdir /opt/pgsql/pg_archive</span><br></pre></td></tr></table></figure>

<p>2.配置recovery.conf</p>
<p>复制/usr/pgsql-9.4/share/recovery.conf.sample 到 /opt/pgsql/data/recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/pgsql-9.4/share/recovery.conf.sample /opt/pgsql/data/recovery.conf</span><br></pre></td></tr></table></figure>

<p>修改recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">standby_mode = on    # 说明该节点是从服务器</span><br><span class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  # 主服务器的信息以及连接的用户</span><br><span class="line">recovery_target_timeline = &apos;latest&apos;</span><br></pre></td></tr></table></figure>

<p>3.配置postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wal_level = hot_standby</span><br><span class="line">max_connections = 1000 ＃ 一般查多于写的应用从库的最大连接数要比较大</span><br><span class="line">hot_standby = on ＃ 说明这台机器不仅仅是用于数据归档，也用于数据查询</span><br><span class="line">max_standby_streaming_delay = 30s # 数据流备份的最大延迟时间</span><br><span class="line">wal_receiver_status_interval = 10s # 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</span><br><span class="line">hot_standby_feedback = on # 如果有错误的数据复制，是否向主进行反馈</span><br></pre></td></tr></table></figure>

<p>配置完后重启从服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl stop -D /opt/pgsql/data</span><br><span class="line">pg_ctl start -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<h2 id="3-验证是否部署成功"><a href="#3-验证是否部署成功" class="headerlink" title="3. 验证是否部署成功"></a>3. 验证是否部署成功</h2><p>在主节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select client_addr,sync_state from pg_stat_replication;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</span><br><span class="line">  client_addr  | sync_state</span><br><span class="line">---------------+------------</span><br><span class="line"> 192.168.20.94 | async</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure>

<p>说明94是从服务器，在接收流，而且是异步流复制。</p>
<p>此外，还可以分别在主、从节点上运行 ps aux | grep postgres 来查看进程：</p>
<p>主服务器（93）上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres 262270  0.0  0.0 337844  2832 ?        Ss   10:14   0:00 postgres: wal sender process replica 192.168.20.94(13059) streaming 0/A002A88</span><br></pre></td></tr></table></figure>

<p>可以看到有一个 wal sender 进程。</p>
<p>从服务器（94）上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres 569868  0.0  0.0 384604  2960 ?        Ss   10:14   0:02 postgres: wal receiver process   streaming 0/A002B60</span><br></pre></td></tr></table></figure>

<p>可以看到有一个 wal receiver 进程。</p>
<p>至此，PostgreSQL主从流复制安装部署完成。</p>
<p>在主服务器上插入数据或删除数据，在从服务器上能看到相应的变化。从服务器上只能查询，不能插入或删除。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL单机部署（CentOS7）]]></title>
      <url>http://linbingdong.com/2017/03/11/PostgreSQL%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%EF%BC%88CentOS7%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文介绍Contos7上用yum部署PostgreSQL9.4的过程。</p>
<a id="more"></a>

<h2 id="1-安装PostgreSQL源"><a href="#1-安装PostgreSQL源" class="headerlink" title="1. 安装PostgreSQL源"></a>1. 安装PostgreSQL源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="2-执行安装命令"><a href="#2-执行安装命令" class="headerlink" title="2. 执行安装命令"></a>2. 执行安装命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install postgresql94-server postgresql94-contrib</span><br></pre></td></tr></table></figure>

<h2 id="3-验证是否安装成功"><a href="#3-验证是否安装成功" class="headerlink" title="3. 验证是否安装成功"></a>3. 验证是否安装成功</h2><p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep postgres</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgresql94-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-server-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-libs-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-contrib-9.4.10-1PGDG.rhel7.x86_64</span><br></pre></td></tr></table></figure>

<p>说明安装成功</p>
<h2 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h2><p>先创建数据存放目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>赋予postgres用户该目录的权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown postgres /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>切换到postgres用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<p>执行初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initdb -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>-D 后面是数据库文件存放的目录，如果不指定则默认在/var/lib/pgsql/9.4/data下</p>
<p>初始化的日志如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属于此数据库系统的文件宿主为用户 &quot;postgres&quot;.</span><br><span class="line">此用户也必须为服务器进程的宿主.</span><br><span class="line">数据库簇将使用本地化语言 &quot;zh_CN.UTF-8&quot;进行初始化.</span><br><span class="line">默认的数据库编码已经相应的设置为 &quot;UTF8&quot;.</span><br><span class="line">initdb: 无法为本地化语言环境&quot;zh_CN.UTF-8&quot;找到合适的文本搜索配置</span><br><span class="line">缺省的文本搜索配置将会被设置到&quot;simple&quot;</span><br><span class="line"></span><br><span class="line">禁止为数据页生成校验和.</span><br><span class="line"></span><br><span class="line">修复已存在目录 /opt/pgsql/data 的权限 ... 成功</span><br><span class="line">正在创建子目录 ... 成功</span><br><span class="line">选择默认最大联接数 (max_connections) ... 100</span><br><span class="line">选择默认共享缓冲区大小 (shared_buffers) ... 128MB</span><br><span class="line">选择动态共享内存实现 ......posix</span><br><span class="line">创建配置文件 ... 成功</span><br><span class="line">在 /opt/pgsql/data/base/1 中创建 template1 数据库 ... 成功</span><br><span class="line">初始化 pg_authid ...  成功</span><br><span class="line">初始化dependencies ... 成功</span><br><span class="line">创建系统视图 ... 成功</span><br><span class="line">正在加载系统对象描述 ...成功</span><br><span class="line">创建(字符集)校对规则 ... 成功</span><br><span class="line">创建字符集转换 ... 成功</span><br><span class="line">正在创建字典 ... 成功</span><br><span class="line">对内建对象设置权限 ... 成功</span><br><span class="line">创建信息模式 ... 成功</span><br><span class="line">正在装载PL/pgSQL服务器端编程语言...成功</span><br><span class="line">清理数据库 template1 ... 成功</span><br><span class="line">拷贝 template1 到 template0 ... 成功</span><br><span class="line">拷贝 template1 到 template0 ... 成功</span><br><span class="line">同步数据到磁盘...成功</span><br><span class="line"></span><br><span class="line">成功. 您现在可以用下面的命令运行数据库服务器:</span><br><span class="line"></span><br><span class="line">    /usr/pgsql-9.4/bin/postmaster -D /opt/pgsql/data/</span><br><span class="line">或者</span><br><span class="line">    /usr/pgsql-9.4/bin/pg_ctl -D /opt/pgsql/data/ -l logfile start</span><br></pre></td></tr></table></figure>

<h2 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h2><p>1.切换到postgres用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<p>这个步骤同样必须以PostgreSQL用户帐户登录来做。 </p>
<p>2.启动服务</p>
<p>没有-D选项，服务器将使用环境变量PGDATA命名的目录； 如果这个环境变量也没有，将导致失败。通常，最好在后台启动postgres，使用下面的 Unix shell 语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl -D /opt/pgsql/data/ -l logfile start</span><br></pre></td></tr></table></figure>

<p>3.设置开机自动启动</p>
<p>在Linux系统里，要么往/etc/rc.d/rc.local或 /etc/rc.local文件里加上下面几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data</span><br></pre></td></tr></table></figure>

<h2 id="6-创建用户"><a href="#6-创建用户" class="headerlink" title="6. 创建用户"></a>6. 创建用户</h2><p>PostgreSQL使用<em>角色</em>的概念管理数据库访问权限。 根据角色自身的设置不同，一个角色可以看做是一个数据库用户，或者一组数据库用户。 角色可以拥有数据库对象(比如表)以及可以把这些对象上的权限赋予其它角色， 以控制谁拥有访问哪些对象的权限。另外，我们也可以把一个角色的<em>成员</em> 权限赋予其它角色，这样就允许成员角色使用分配给另一个角色的权限。<br>角色的概念替换了”用户”和”组”。在PostgreSQL 版本 8.1 之前，用户和组是独立类型的记录，但现在它们只是角色。 任何角色都可以是一个用户、一个组、或者两者。</p>
<p>数据库角色从概念上与操作系统用户是完全无关的。在实际使用中把它们对应起来可能比较方便， 但这不是必须的。数据库角色在整个数据库集群中是全局的(而不是每个库不同)。 要创建一个角色，使用 SQL 命令<a href="http://www.postgres.cn/docs/9.4/sql-createrole.html" target="_blank" rel="noopener">CREATE ROLE</a>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE ROLE name;</span><br></pre></td></tr></table></figure>

<p><em>name</em>遵循 SQL 标识的规则：要么完全没有特殊字符， 要么用双引号包围(实际上你通常会给命令增加额外的选项，比如LOGIN。 下面显示更多细节)。要删除一个现有角色，使用类似的<a href="http://www.postgres.cn/docs/9.4/sql-droprole.html" target="_blank" rel="noopener">DROP ROLE</a>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP ROLE name;</span><br></pre></td></tr></table></figure>

<p>为了方便，程序<a href="http://www.postgres.cn/docs/9.4/app-createuser.html" target="_blank" rel="noopener">createuser</a>和<a href="http://www.postgres.cn/docs/9.4/app-dropuser.html" target="_blank" rel="noopener">dropuser</a> 提供了对了这些 SQL 命令的封装。我们可以在 shell 命令上直接调用它们：</p>
<p>直接在shell里输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createuser lbd;</span><br></pre></td></tr></table></figure>

<p>这样就创建了lbd这个角色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dropuser lbd;</span><br></pre></td></tr></table></figure>

<p>这样就创建了lbd这个角色。</p>
<p>要检查现有角色的集合，可以检查pg_roles系统表，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT rolname FROM pg_roles;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# SELECT rolname FROM pg_roles;</span><br><span class="line"> rolname</span><br><span class="line">----------</span><br><span class="line"> postgres</span><br><span class="line"> lbd</span><br><span class="line">(2 行记录)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.postgres.cn/docs/9.4/app-psql.html" target="_blank" rel="noopener">psql</a>的元命令\du<br>也可以用于列出现有角色。</p>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                        角色列表</span><br><span class="line"> 角色名称 |               属性                | 成员属于</span><br><span class="line">---------+----------------------------------+----------</span><br><span class="line"> lbd     |                                   | &#123;&#125;</span><br><span class="line"> postgres| 超级用户, 建立角色, 建立 DB, 复制     | &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO之内存映射文件——MappedByteBuffer]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%20NIO%E4%B9%8B%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94MappedByteBuffer/</url>
      <content type="html"><![CDATA[<p>大多数操作系统都可以利用虚拟内存实现将一个文件或者文件的一部分”映射”到内存中。然后，这个文件就可以当作是内存数组来访问，这比传统的文件要快得多。</p>
<a id="more"></a>

<p>内存映射文件的一个关键优势是操作系统负责真正的读写，即使你的程序在刚刚写入内存后就挂了，操作系统仍然会将内存中的数据写入文件系统。另外一个更突出的优势是共享内存，内存映射文件可以被多个进程同时访问，起到一种低时延共享内存的作用。</p>
<p>那么，如何将一个文件映射到内存呢？</p>
<ol>
<li><p>从文件中获得一个通道（channel）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileChannel channel = FileChannel.open(path,options);</span><br></pre></td></tr></table></figure>

<p>这里options指定映射模式，支持的模式有三种：</p>
<ul>
<li>FileChannel.MapMode.READ_ONLY：所产生的缓冲区是只读的。</li>
<li>FileChannel.MapMode.READ_WRITE：所产生的缓冲区是可写的,任何修改都会在某个时刻写回到文件中。<br>注意，其他映射同一个文件的程序可能不能立即看到这些修改，多个程序同时进行文件映射的确切行为是依赖<br>于操作系统的。</li>
<li>FileChannel.MapMode.PRIVATE：所产生的缓冲区是可写的，但是任何修改对该缓冲区来说都是私有的，不<br>会传播到文件中。</li>
</ul>
</li>
<li><p>调用FileChannel的map方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,length);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>接下来通过计算一个40MB文件的CRC32校验和来比较传统的文件输入和内存映射文件的速度。</p>
<p>传统的文件输入包括：</p>
<ul>
<li>普通输入流（InputStream）</li>
<li>带缓冲的输入流（BufferedInputStream）</li>
<li>随机访问文件（RandomAccessFile）</li>
</ul>
<p>程序如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.MappedByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.CRC32;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd on 2017/1/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumInputStream</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//普通输入流</span></span><br><span class="line">        <span class="keyword">try</span> (InputStream in = Files.newInputStream(filename)) &#123;</span><br><span class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = in.read()) != -<span class="number">1</span>)</span><br><span class="line">                crc.update(c);</span><br><span class="line">            <span class="keyword">return</span> crc.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumBufferedInputStream</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//带缓冲的输入流</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(Files.newInputStream(filename)))&#123;</span><br><span class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = in.read()) != -<span class="number">1</span>)</span><br><span class="line">                crc.update(c);</span><br><span class="line">            <span class="keyword">return</span> crc.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumRandomAccessFile</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//随机访问文件</span></span><br><span class="line">        <span class="keyword">try</span> (RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(filename.toFile(),<span class="string">"r"</span>))&#123;</span><br><span class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</span><br><span class="line">            <span class="keyword">long</span> length = file.length();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> p = <span class="number">0</span>; p &lt; length; p++)&#123;</span><br><span class="line">                file.seek(p);</span><br><span class="line">                <span class="keyword">int</span> c = file.readByte();</span><br><span class="line">                crc.update(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> crc.getValue();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumMappedFile</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//内存映射文件</span></span><br><span class="line">        <span class="keyword">try</span> (FileChannel channel = FileChannel.open(filename))&#123;</span><br><span class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</span><br><span class="line">            <span class="keyword">int</span> length = (<span class="keyword">int</span>)channel.size();</span><br><span class="line">            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,length);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; length; p++)&#123;</span><br><span class="line">                <span class="keyword">int</span> c = buffer.get(p);</span><br><span class="line">                crc.update(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> crc.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Input Stream:"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        Path filename = Paths.get(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">long</span> crcValue = checksumInputStream(filename);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(Long.toHexString(crcValue));</span><br><span class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Buffered Input Stream:"</span>);</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        crcValue = checksumBufferedInputStream(filename);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(Long.toHexString(crcValue));</span><br><span class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Random Access File:"</span>);</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        crcValue = checksumRandomAccessFile(filename);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(Long.toHexString(crcValue));</span><br><span class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Mapped File:"</span>);</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        crcValue = checksumMappedFile(filename);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(Long.toHexString(crcValue));</span><br><span class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input Stream:</span><br><span class="line">c644b1f1</span><br><span class="line">42317 milliseconds</span><br><span class="line"></span><br><span class="line">Buffered Input Stream:</span><br><span class="line">c644b1f1</span><br><span class="line">329 milliseconds</span><br><span class="line"></span><br><span class="line">Random Access File:</span><br><span class="line">c644b1f1</span><br><span class="line">57781 milliseconds</span><br><span class="line"></span><br><span class="line">Mapped File:</span><br><span class="line">c644b1f1</span><br><span class="line">207 milliseconds</span><br></pre></td></tr></table></figure>

<p>可以明显看出，内存映射文件速度比普通输入流和随机访问文件快得多，比带缓冲的输入流稍微快一些。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python日志模块示例]]></title>
      <url>http://linbingdong.com/2017/03/11/Python%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>给出Python日志模块显示配置和文件配置两种方式的示例</p>
<a id="more"></a>

<h2 id="显示配置"><a href="#显示配置" class="headerlink" title="显示配置"></a>显示配置</h2><p>在程序中直接调用函数来设置参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'example'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个输出到控制台的handler</span></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line">sh.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个输出到文件的handler</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">'loggingtest.log'</span>)</span><br><span class="line">fh.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输出格式</span></span><br><span class="line">fmt = logging.Formatter(<span class="string">'%(asctime)s - %(threadName)s - [%(levelname)s] : %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># handler设置formatter</span></span><br><span class="line">sh.setFormatter(fmt)</span><br><span class="line">fh.setFormatter(fmt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logger添加handler</span></span><br><span class="line">logger.addHandler(sh)</span><br><span class="line">logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写日志</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><p>通过配置文件进行配置，使用fileConfig()函数读取配置文件</p>
<ul>
<li>配置文件 logging.conf :</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,example01</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=hand01,hand02</span><br><span class="line"></span><br><span class="line">[logger_example01]</span><br><span class="line">handlers=hand01,hand02</span><br><span class="line">qualname=example01</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=hand01,hand02</span><br><span class="line"></span><br><span class="line">[handler_hand01]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=INFO</span><br><span class="line">formatter=form02</span><br><span class="line">args=(sys.stderr,)</span><br><span class="line"></span><br><span class="line">[handler_hand02]</span><br><span class="line">class=FileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=form01</span><br><span class="line">args=(&apos;log.log&apos;,&apos;a&apos;)</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=form01,form02</span><br><span class="line"></span><br><span class="line">[formatter_form01]</span><br><span class="line">format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s</span><br><span class="line"></span><br><span class="line">[formatter_form02]</span><br><span class="line">format=%(asctime)s - %(threadName)s - [%(levelname)s] : %(message)s</span><br></pre></td></tr></table></figure>

<ul>
<li>程序 LogByFile.py :</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'example01'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写日志</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java I/O 操作示例]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%20I:O%20%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>给出几个Java I/O 操作的示例代码。</p>
<a id="more"></a>

<h3 id="创建文件或目录"><a href="#创建文件或目录" class="headerlink" title="创建文件或目录"></a>创建文件或目录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"dir1"</span>);</span><br><span class="line">        dir.mkdir();  <span class="comment">//创建目录</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dir,<span class="string">"file1"</span>);  <span class="comment">//目录加文件名</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"dir1/file2"</span>);  <span class="comment">//完整路径</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();  <span class="comment">//创建文件,若存在同名文件,不会覆盖</span></span><br><span class="line">            file2.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"dir1/file2"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.delete())&#123;</span><br><span class="line">            System.out.println(file.getName() + <span class="string">" is deleted!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"File is not deleted!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="向文件逐行写入内容-覆盖写）"><a href="#向文件逐行写入内容-覆盖写）" class="headerlink" title="向文件逐行写入内容(覆盖写）"></a>向文件逐行写入内容(覆盖写）</h3><ol>
<li><p>FileOutputStream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(fos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            bw.write(<span class="string">"something"</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>FileWriter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            fw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>PrintWriter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(fout));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            pw.println(<span class="string">"something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>OutputStreamWriter</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            osw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注：<br>往文本文件里写内容用FileWriter即可，比较方便。但是如果要自己定义字符编号和byte-buffer大小的话就要用FileOutputStream。</p>
<p>PrintWriter跟FileWriter的主要区别是PrintWriter可以格式化输出。该类实现了PrintStream的所有print方法。</p>
<h3 id="追加写"><a href="#追加写" class="headerlink" title="追加写"></a>追加写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout,<span class="keyword">true</span>);  <span class="comment">//跟覆盖写唯一的区别是这里加了个true参数。</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            osw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path sour = Paths.get(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        Path des = Paths.get(<span class="string">"dir1/file2"</span>);</span><br><span class="line">        Files.copy(sour,des);   <span class="comment">//Files.copy(a,b)。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并多个文件"><a href="#合并多个文件" class="headerlink" title="合并多个文件"></a>合并多个文件</h3><p>读取多个文件的内容，写入一个文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd on 2017/1/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeFiles</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String sourceFile1Path = <span class="string">"dir1/file1"</span>;</span><br><span class="line">        String sourceFile2Path = <span class="string">"dir1/file2"</span>;</span><br><span class="line">        String mergedFilePath = <span class="string">"dir1/mergedFile.txt"</span>;</span><br><span class="line">        File[] files = <span class="keyword">new</span> File[<span class="number">2</span>];</span><br><span class="line">        files[<span class="number">0</span>] = <span class="keyword">new</span> File(sourceFile1Path);</span><br><span class="line">        files[<span class="number">1</span>] = <span class="keyword">new</span> File(sourceFile2Path);</span><br><span class="line">        File mergedFile = <span class="keyword">new</span> File(mergedFilePath);</span><br><span class="line">        mergeFiles(files,mergedFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeFiles</span><span class="params">(File[] files,File mergedFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(mergedFile,<span class="keyword">true</span>);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">        <span class="keyword">for</span> (File f : files)&#123;</span><br><span class="line">            System.out.println(<span class="string">"merging: "</span> + f.getName());</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(f);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">            String aLine;</span><br><span class="line">            <span class="keyword">while</span> ((aLine = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                bw.write(aLine);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>调用的是File.renameTo()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"dir1/dir2/file3"</span>);  <span class="comment">//dir2目录必须存在,否则无法移动成功</span></span><br><span class="line">        f1.renameTo(f2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对文件内容排序"><a href="#对文件内容排序" class="headerlink" title="对文件内容排序"></a>对文件内容排序</h3><p>file1内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dog </span><br><span class="line">cat</span><br><span class="line">--windows</span><br><span class="line">--kankan</span><br><span class="line">pps</span><br><span class="line">game</span><br><span class="line">--annot be guaranteed </span><br><span class="line">as it is, generally speaking, </span><br><span class="line">--impossible to make any hard gu</span><br><span class="line">arantees in the p</span><br><span class="line">--resence of unsynchr</span><br></pre></td></tr></table></figure>

<p>对行进行排序，以上面的文本为例，排序后<code>arantees in the p</code>应该在第一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd on 2017/1/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaIO</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File fin = <span class="keyword">new</span> File(<span class="string">"file1"</span>);</span><br><span class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"file2"</span>);</span><br><span class="line">        String s;</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(fin);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">        ArrayList&lt;String&gt; al = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">if</span> (!s.trim().startsWith(<span class="string">"-"</span>) &amp;&amp; s.trim().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                al.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(al);</span><br><span class="line">        <span class="keyword">for</span> (String line : al)&#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">"------------------------------"</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>file2内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arantees in the p</span><br><span class="line">------------------------------</span><br><span class="line">as it is, generally speaking, </span><br><span class="line">------------------------------</span><br><span class="line">cat</span><br><span class="line">------------------------------</span><br><span class="line">dog </span><br><span class="line">------------------------------</span><br><span class="line">game</span><br><span class="line">------------------------------</span><br><span class="line">pps</span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java Collections的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/03/11/Stack%20Overflow%E4%B8%8A%E5%85%B3%E4%BA%8EJava%20Collections%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java Collections的常见问题并给出答案。</p>
<a id="more"></a>

<h3 id="1-什么时候用LinkedList，什么时候用ArrayList？"><a href="#1-什么时候用LinkedList，什么时候用ArrayList？" class="headerlink" title="1. 什么时候用LinkedList，什么时候用ArrayList？"></a>1. 什么时候用LinkedList，什么时候用ArrayList？</h3><p><code>ArrayList</code>是使用数组实现的list，本质上就是数组。ArrayList中的元素可以通过索引随机获取一个元素。但是如果该数组已满，当添加新元素时需要分配一个新的数组然后将原来数组的元素移动过去，需要O(n)的时间复杂度。添加或删除一个元素需要移动数组中的其他元素。这是ArrayList最大的缺点。</p>
<p><code>LinkedList</code>是一个双向链表。因此，当需要获取list中某个元素，需要从头到尾遍历list。另一方面，在链表中添加或删除元素很快，只需要O(1)的时间复杂度。从空间上来说，在链表中一个节点需要两个额外的指针来指向它的previous和next节点。</p>
<p>总结：</p>
<p>从<strong>时间复杂度</strong>来说，如果对list增加或删除操作较多，优先用LinkedList；如果查询操作较多，优先用ArrayList。</p>
<p>从<strong>空间复杂度</strong>来说，LinkedList会占用较多空间。</p>
<h3 id="2-如何边遍历边移除Collection中的元素"><a href="#2-如何边遍历边移除Collection中的元素" class="headerlink" title="2. 如何边遍历边移除Collection中的元素"></a>2. 如何边遍历边移除Collection中的元素</h3><p>边遍历边修改Collection的唯一正确方式是使用<code>Iterator.remove()</code>方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">	it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一种最常见的<strong>错误</strong>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Integer i : list)&#123;</span><br><span class="line">	list.remove(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行以上错误代码会报<code>ConcurrentModificationException</code>异常。这是因为当使用<code>foreach</code>(for(Integer i : list))语句时，会自动生成一个iterator来遍历该list，但同时该list正在被<code>Iterator.remove()</code>修改。在Java中，一般不允许一个线程在遍历collection时另一个线程在修改它。</p>
<h3 id="3-如何将List转化成int-？"><a href="#3-如何将List转化成int-？" class="headerlink" title="3. 如何将List转化成int[]？"></a>3. 如何将List转化成int[]？</h3><p>很多人可能认为只需用<code>List.toArray()</code>即可，其实不然。List.toArray()方法只可能得到Integer[]，无法得到int[]。</p>
<p>最简单的方法是使用<code>Apache Commons Lang</code>库中的<code>ArrayUtils</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = ArrayUtils.toPrimitive(list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure>

<p>在JDK中，没有捷径。需要注意的是，不能直接使用<code>List.toArray()</code>,因为这样会将List转化成Integer[]而不是int[]。正确的做法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">	array[i] = list.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-如何将int-转化成List？"><a href="#4-如何将int-转化成List？" class="headerlink" title="4. 如何将int[]转化成List？"></a>4. 如何将int[]转化成List？</h3><p>同上，很多人以为只需用<code>Arrays.asList()</code>即可，其实不然。因为不能以int[]作为该方法的参数，要的话也只能是Integer[]。</p>
<p>关于<code>Arrays.asList()</code>方法有如下特性：</p>
<ul>
<li>1.该方法对于基本数据类型的数组支持并不好,当数组是基本数据类型时不建议使用 </li>
<li>2.当使用asList()方法时，数组就和列表链接在一起了。当更新其中之一时，另一个将自动获得更新。因为asList获得的List实际引用的就是数组  注意:仅仅针对对象数组类型,基本数据类型数组不具备该特性。</li>
<li>3.asList得到的数组是的没有add和remove方法的。因为asList返回的List是Arrays中的内部类,而该类并没有定义add和remove方法。</li>
</ul>
<p>那么如何将int[]转化成List呢？</p>
<p>还是得自己实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i: array) &#123;</span><br><span class="line">  list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-过滤一个Collection最好的方法是什么？"><a href="#5-过滤一个Collection最好的方法是什么？" class="headerlink" title="5. 过滤一个Collection最好的方法是什么？"></a>5. 过滤一个Collection最好的方法是什么？</h3><p>如过滤掉list中大于5的整数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">	<span class="keyword">int</span> i = it.next();</span><br><span class="line">	<span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;  <span class="comment">//过滤掉大于5的整数</span></span><br><span class="line">		it.remove(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-将List转化成Set最简单的方法？"><a href="#6-将List转化成Set最简单的方法？" class="headerlink" title="6. 将List转化成Set最简单的方法？"></a>6. 将List转化成Set最简单的方法？</h3><p>有两种方法，取决于你怎么要怎么定义两个元素相等。第一种方法是将list放入<code>HashSet</code>里，该方法元素是否相等是通过它们的hashCode()来比较的。如果需要自己定义比较的方法，需要用<code>TreeSet</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;(list);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt;(aComparator);</span><br><span class="line">set.addAll(list);</span><br></pre></td></tr></table></figure>

<h3 id="7-如何删除ArrayList中重复的元素？"><a href="#7-如何删除ArrayList中重复的元素？" class="headerlink" title="7. 如何删除ArrayList中重复的元素？"></a>7. 如何删除ArrayList中重复的元素？</h3><p>如果不关心元素在ArrayList中的顺序，可以将list放入set中来删除重复元素，然后在放回list。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;(list);</span><br><span class="line">list.clear();</span><br><span class="line">list.addAll(set);</span><br></pre></td></tr></table></figure>

<p>如果关心元素在ArrayList中的顺序，可以用<code>LinkedHashSet</code>。</p>
<h3 id="8-有序的collection"><a href="#8-有序的collection" class="headerlink" title="8. 有序的collection"></a>8. 有序的collection</h3><p>Java里有很多方法来维持一个collection有序。有的需要实现Comparable接口，有的需要自己指定Comparator。</p>
<ol>
<li><code>Collections.sort()</code>可以用来对list排序。该排序是稳定的，并且可以保证nlog(n)的性能。</li>
<li><code>PriorityQueue</code>提供排序的队列。<code>PriorityQueue</code>和<code>Collections.sort()</code>的区别是，<code>PriorityQueue</code>动态维护一个有序的队列（每添加或删除一个元素就会重新排序），但是只能获队列中的头元素。</li>
<li>如果collection中没有重复的元素，<code>TreeSet</code>是另一个选择。跟<code>PriorityQueue</code>一样的是，<code>TreeSet</code>也动态维护一个有序的集合。可以从<code>TreeSet</code>中获取最大和最小的元素。</li>
</ol>
<p>总结：<code>Collections.sort()</code>提供一个一次排序的list。<code>PriorityQueue</code>和<code>TreeSet</code>动态维护排序的collection。</p>
<h3 id="9-拷贝list"><a href="#9-拷贝list" class="headerlink" title="9. 拷贝list"></a>9. 拷贝list</h3><p>有两种方法可以用来拷贝list。一种是使用<code>ArrayList</code>构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; dstList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(srcList);</span><br></pre></td></tr></table></figure>

<p>另一种是使用<code>Collections.copy()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; dstList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(srcList.size());</span><br><span class="line">Collections.copy(dstList, srcList);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，使用该方法的话目标list至少跟源list长度一样长。否则会报<code>IndexOutOfBoundsException</code>异常。</p>
<p>另外有两点需要注意：</p>
<ol>
<li>两种方法都是浅拷贝</li>
<li><code>Collections.copy()</code>方法的两个参数必须都是list，而<code>ArrayList</code>方法参数只要是collection即可，因此<code>ArrayList</code>方法更通用。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中定义常量的几种方法]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%20%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>主要有三种：接口、类和枚举。</p>
<a id="more"></a>

<p><strong>接口：</strong></p>
<ol>
<li>在接口里定义域(接口中会对域自动加上 <code>public static final</code> ，使之成为常量)</li>
<li>类实现该接口即可在类中调用该常量</li>
</ol>
<p><strong>类：</strong></p>
<p>直接用 <code>public static final</code> 定义常量。</p>
<p><strong>枚举：</strong></p>
<p>在枚举类中直接写上常量值。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Signal sg = <span class="keyword">new</span> Signal();</span><br><span class="line">        System.out.println(<span class="string">"interface method: "</span> + sg.RED);</span><br><span class="line">        SignalClassField scf = <span class="keyword">new</span> SignalClassField();</span><br><span class="line">        System.out.println(<span class="string">"class method: "</span> + scf.RED);</span><br><span class="line">        System.out.println(<span class="string">"emun method: "</span> + SignalEnum.RED.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//interface method</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SignalInterface</span> </span>&#123;</span><br><span class="line">    String RED = <span class="string">"InterfaceRED"</span>;</span><br><span class="line">    String GREEN = <span class="string">"GREEN"</span>;</span><br><span class="line">    String YELLOW = <span class="string">"YELLOW"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span> <span class="keyword">implements</span> <span class="title">SignalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class method</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignalClassField</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RED = <span class="string">"ClassRED"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GREEN = <span class="string">"GREEN"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YELLOW = <span class="string">"YELLOW"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//enum method</span></span><br><span class="line"><span class="keyword">enum</span> SignalEnum &#123;</span><br><span class="line">    RED, GREEN, YELLOW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface method: InterfaceRED</span><br><span class="line">class method: ClassRED</span><br><span class="line">emun method: RED</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式一致性算法：Raft 算法（Raft 论文翻译）]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%EF%BC%9ARaft%20%E7%AE%97%E6%B3%95%EF%BC%88Raft%20%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Raft 算法是可以用来替代 Paxos 算法的分布式一致性算法，而且 raft 算法比 Paxos 算法更易懂且更容易实现。本文对 raft 论文进行翻译，希望能有助于读者更方便地理解 raft 的思想。如果对 Paxos 算法感兴趣，可以看我的另一篇文章：<a href="http://linbingdong.com/2016/12/30/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A8%E5%AF%BC/">分布式系列文章——Paxos算法原理与推导</a></p>
<a id="more"></a>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Raft 是用来管理复制日志（replicated log）的一致性协议。它跟 multi-Paxos 作用相同，效率也相当，但是它的组织结构跟 Paxos 不同。这使得 Raft 比 Paxos 更容易理解并且更容易在工程实践中实现。为了使 Raft 协议更易懂，Raft 将一致性的关键元素分开，如 leader 选举、日志复制和安全性，并且它实施更强的一致性以减少必须考虑的状态的数量。用户研究的结果表明，Raft 比 Paxos 更容易学习。 Raft 还包括一个用于变更集群成员的新机制，它使用重叠的大多数（overlapping majorities）来保证安全性。</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>一致性算法允许多台机器作为一个集群协同工作，并且在其中的某几台机器出故障时集群仍然能正常工作。 正因为如此，一致性算法在建立可靠的大规模软件系统方面发挥了关键作用。 在过去十年中，Paxos [15,16] 主导了关于一致性算法的讨论：大多数一致性的实现都是基于 Paxos 或受其影响，Paxos 已成为用于教授学生一致性相关知识的主要工具。</p>
<p>不幸的是，Paxos 实在是太难以理解，尽管许多人一直在努力尝试使其更易懂。 此外，其架构需要复杂的改变来支持实际系统。 结果是，系统开发者和学生都在与 Paxos 斗争。</p>
<p>在我们自己与 Paxos 斗争之后，我们开始着手寻找一个新的一致性算法，可以为系统开发和教学提供更好的基础。 我们的方法是不寻常的，因为我们的主要目标是可理解性：我们可以为实际系统定义一个一致性算法，并以比 Paxos 更容易学习的方式描述它吗？在该算法的设计过程中，重要的不仅是如何让该算法起作用，还有清晰地知道该算法为什么会起作用。</p>
<p>这项工作的结果是一个称为 Raft 的一致性算法。 在设计 Raft 时，我们使用了特定的技术来提高可理解性，包括分解（Raft 分离 leader 选举，日志复制和安全）和状态空间减少（相对于 Paxos ，Raft 减少了不确定性程度和服务器之间彼此不一致的方式 ）。 一项针对两个大学的 43 名学生的用户研究表明，Raft 比 Paxos 更容易理解：在学习两种算法后，其中 33 名学生能够更好地回答关于 Raft 的问题。</p>
<p>Raft 在许多方面类似于现有的一致性算法（尤其是 Oki 和 Liskov 的 Viewstamped Replication [29,22]），但它有几个新特性：</p>
<ul>
<li><strong>Strong leader</strong>：在 Raft 中，日志条目（log entries）只从 leader 流向其他服务器。 这简化了复制日志的管理，使得 raft 更容易理解。</li>
<li><strong>Leader 选举</strong>：Raft 使用随机计时器进行 leader 选举。 这只需在任何一致性算法都需要的心跳（heartbeats）上增加少量机制，同时能够简单快速地解决冲突。</li>
<li><strong>成员变更</strong>：Raft 使用了一种新的联合一致性方法，其中两个不同配置的大多数在过渡期间重叠。 这允许集群在配置更改期间继续正常运行。</li>
</ul>
<p>我们认为，Raft 优于 Paxos 和其他一致性算法，不仅在教学方面，在工程实现方面也是。 它比其他算法更简单且更易于理解; 它被描述得十分详细足以满足实际系统的需要; 它有多个开源实现，并被多家公司使用; 它的安全性已被正式规定和验证; 它的效率与其他算法相当。</p>
<p>本文的剩余部分介绍了复制状态机问题（第 2 节），讨论了 Paxos 的优点和缺点（第3节），描述了我们实现易理解性的方法（第 4 节），提出了 Raft 一致性算法（第 5-8 节），评估 Raft（第 9 节），并讨论了相关工作（第 10 节）。</p>
<h2 id="2-复制状态机"><a href="#2-复制状态机" class="headerlink" title="2 复制状态机"></a>2 复制状态机</h2><p>一致性算法是在复制状态机[37]的背景下产生的。 在这种方法中，一组服务器上的状态机计算相同状态的相同副本，并且即使某些服务器宕机，也可以继续运行。</p>
<p>复制状态机用于解决分布式系统中的各种容错问题。 例如，具有单个 leader 的大规模系统，如 GFS [8]，HDFS [38] 和 RAMCloud [33] ，通常使用单独的复制状态机来进行 leader 选举和存储 leader 崩溃后重新选举需要的配置信息。Chubby [2] 和 ZooKeeper [11] 都是复制状态机。</p>
<p>复制状态机通常使用复制日志实现，如图 1 所示。每个服务器存储一个包含一系列命令的日志，其状态机按顺序执行日志中的命令。 每个日志中命令都相同并且顺序也一样，因此每个状态机处理相同的命令序列。 这样就能得到相同的状态和相同的输出序列。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b2e0dc4401aefd3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<p>一致性算法的工作就是保证复制日志的一致性。 每台服务器上的一致性模块接收来自客户端的命令，并将它们添加到其日志中。 它与其他服务器上的一致性模块通信，以确保每个日志最终以相同的顺序包含相同的命令，即使有一些服务器失败。 一旦命令被正确复制，每个服务器上的状态机按日志顺序处理它们，并将输出返回给客户端。 这样就形成了高可用的复制状态机。</p>
<p>实际系统中的一致性算法通常具有以下属性：</p>
<ul>
<li><p>它们确保在所有非拜占庭条件下（包括网络延迟，分区和数据包丢失，重复和乱序）的安全性（不会返回不正确的结果）。</p>
</li>
<li><p>只要任何大多数（过半）服务器都可以运行，并且可以相互通信和与客户通信，一致性算法就可用。 因此，五台服务器的典型集群可以容忍任何两台服务器的故障。 假设服务器突然宕机，它们可以稍后从状态恢复并重新加入群集。</p>
</li>
<li><p>它们不依赖于时序来确保日志的一致性：错误的时钟和极端消息延迟在最坏的情况下会导致可用性问题（译者注：言外之意是可以保证一致性）。</p>
</li>
<li><p>在通常情况下，只要集群的大部分（过半服务器）已经响应了单轮远程过程调用，命令就可以完成; 少数（一半以下）慢服务器不会影响整个系统性能。</p>
</li>
</ul>
<h2 id="3-Paxos-存在的问题"><a href="#3-Paxos-存在的问题" class="headerlink" title="3 Paxos 存在的问题"></a>3 Paxos 存在的问题</h2><p>在过去十年里，Leslie Lamport 的 Paxos 协议[15]几乎成为一致性的同义词：它是课堂上教授最多的一致性协议，并且大多数一致性的实现也以它为起点。 Paxos 首先定义了能够在单个决策（例如单个复制日志条目）上达成一致的协议。 我们将这个子集称为 single-decree Paxos。 然后 Paxos 组合该协议的多个实例以促进一系列决策，例如日志（multi-Paxos）。 Paxos能够确保安全性和活性，并且支持集群成员的变更。它的正确性已被证明，并且在正常情况下是高效的。</p>
<p>不幸的是，Paxos 有两个显著的缺点。 第一个缺点是 Paxos 非常难以理解。 Paxos 的描述晦涩难懂，臭名昭著（译者注：《The Part-time Parliament》比较晦涩难懂，但是《Paxos Made Simple》就比较容易理解）; 很少有人成功地理解它，即使能理解也必须付出巨大的努力。 因此，已有几个尝试用更简单的方式来描述 Paxos [16,20,21] 。 这些描述集中在 single-degree Paxos ，但它们仍然具有挑战性。 在对 NSDI 2012 参会者的非正式调查中，我们发现很少有人喜欢 Paxos ，即使是经验丰富的研究人员。 我们自己也跟 Paxos 进行了艰苦的斗争; 我们也无法完全理解整个协议，直到阅读了几个更简单的描述和自己设计替代 Paxos 的协议，整个过程花了将近一年。</p>
<p>Paxos 晦涩难懂的原因是作者选择了single-degree Paxos作为基础。Single-decree Paxos 分成两个阶段，这两个阶段没有简单直观的说明，并且不能被单独理解。因此，很难理解为什么该算法能起作用。Multi-Paxos 的合成规则又增加了许多复杂性。我们相信，对多个决定（日志而不是单个日志条目）达成一致的总体问题可以用其他更直接和更明显的方式进行分解。</p>
<p>Paxos的第二个问题是它不能为构建实际的实现提供良好的基础。 一个原因是没有针对 multi-Paxos 的广泛同意的算法。 Lamport的描述主要是关于 single-decree Paxos; 他描述了 multi-Paxos 的可能方法，但缺少许多细节。 已经有几个尝试来具体化和优化 Paxos ，例如[26]，[39]和[13]，但这些彼此各不相同并且跟 Lamport 描述的也不同。 像Chubby [4] 这样的系统已经实现了类 Paxos（Paxos-like）算法，但大多数情况下，它们的细节并没有公布。</p>
<p>此外，Paxos 的架构对于构建实际系统来说是一个糟糕的设计，这是 single-decree 分解的另一个结果。 例如，独立地选择日志条目集合，然后再将它们合并到顺序日志中几乎没有任何好处，这只会增加复杂性。 围绕日志设计系统是更简单和有效的方法，新日志条目按照约束顺序地添加到日志中。 Paxos 的做法适用于只需要做一次决策的情况，如果需要做一系列决策，更简单和快速的方法是先选择一个 leader ，然后让该 leader 协调这些决策。</p>
<p>因此，实际的系统跟 Paxos 相差很大。几乎所有的实现都是从 Paxos 开始，然后发现很多实现上的难题，接着就开发了一种和 Paxos 完全不一样的架构。这样既费时又容易出错，而且 Paxos 本身晦涩难懂使得该问题更加严重。Paxos 的公式可能可以很好地证明它的正确性，但是现实的系统和 Paxos 差别是如此之大，以至于这些证明并没有什么太大的价值。下面来自 Chubby 作者的评论非常典型：</p>
<blockquote>
<p>在Paxos算法描述和实现现实系统之间有着巨大的鸿沟。最终的系统往往建立在一个还未被证明的协议之上。</p>
</blockquote>
<p>由于以上问题，我们得出的结论是 Paxos 算法没有为系统实践和教学提供一个良好的基础。考虑到一致性问题在大规模软件系统中的重要性，我们决定尝试设计一个能够替代 Paxos 并且具有更好特性的一致性算法。Raft算法就是这次实验的结果。</p>
<h2 id="4-为可理解性而设计"><a href="#4-为可理解性而设计" class="headerlink" title="4 为可理解性而设计"></a>4 为可理解性而设计</h2><p>在设计 Raft 算法过程中我们有几个目标：它必须提供一个完整的实际的系统实现基础，这样才能大大减少开发者的工作；它必须在任何情况下都是安全的并且在典型的应用条件下是可用的；并且在正常情况下是高效的。但是我们最重要的目标也是最大的挑战是可理解性。它必须保证能够被大多数人容易地理解。另外，它必须能够让人形成直观的认识，这样系统的构建者才能够在现实中进行扩展。</p>
<p>在设计 Raft 算法的时候，很多情况下我们需要在多个备选方案中进行选择。在这种情况下，我们基于可理解性来评估备选方案：解释各个备选方案的难道有多大（例如，Raft 的状态空间有多复杂，是否有微妙的含义）？对于一个读者而言，完全理解这个方案和含义是否容易？</p>
<p>我们意识到这样的分析具有高度的主观性；但是我们使用了两种通用的技术来解决这个问题。第一个技术就是众所周知的问题分解：只要有可能，我们就将问题分解成几个相对独立的，可被解决的、可解释的和可理解的子问题。例如，Raft 算法被我们分成 leader 选举，日志复制，安全性和成员变更几个部分。</p>
<p>我们使用的第二个方法是通过减少状态的数量来简化状态空间，使得系统更加连贯并且尽可能消除不确定性。特别的，所有的日志是不允许有空洞的，并且 Raft 限制了使日志之间不一致的方式。尽管在大多数情况下我们都试图去消除不确定性，但是在某些情况下不确定性可以提高可理解性。特别是，随机化方法虽然引入了不确定性，但是他们往往能够通过使用相近的方法处理可能的选择来减少状态空间。我们使用随机化来简化 Raft 中的 leader 选举算法。</p>
<h2 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5 Raft 一致性算法"></a>5 Raft 一致性算法</h2><p>Raft 是一种用来管理第 2 节中描述的复制日志的算法。图 2 是该算法的浓缩，可用作参考，图 3 列举了该算法的一些关键特性。图中的这些内容将在剩下的章节中逐一介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-07c1c597333affd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-15c4d42eb6548a93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p>
<p>Raft 通过首先选举一个 distinguished leader，然后让它全权负责管理复制日志来实现一致性。Leader 从客户端接收日志条目，把日志条目复制到其他服务器上，并且在保证安全性的时候通知其他服务器将日志条目应用到他们的状态机中。拥有一个 leader 大大简化了对复制日志的管理。例如，leader 可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都是从 leader 流向其他服务器。leader 可能宕机，也可能和其他服务器断开连接，这时一个新的 leader 会被选举出来。</p>
<p>通过选举一个 leader 的方式，Raft 将一致性问题分解成了三个相对独立的子问题，这些问题将会在接下来的子章节中进行讨论：</p>
<ul>
<li><strong>Leader 选举</strong>：当前的 leader 宕机时，一个新的 leader 必须被选举出来。（5.2 节）</li>
<li><strong>日志复制</strong>：Leader 必须从客户端接收日志条目然后复制到集群中的其他节点，并且强制要求其他节点的日志和自己的保持一致。</li>
<li><strong>安全性</strong>：Raft 中安全性的关键是图 3 中状态机的安全性：如果有任何的服务器节点已经应用了一个特定的日志条目到它的状态机中，那么其他服务器节点不能在同一个日志索引位置应用一条不同的指令。章节 5.4 阐述了 Raft 算法是如何保证这个特性的；该解决方案在选举机制（5.2 节）上增加了额外的限制。</li>
</ul>
<p>在展示一致性算法之后，本章节将讨论可用性的一些问题以及时序在系统中的作用。</p>
<h3 id="5-1-Raft-基础"><a href="#5-1-Raft-基础" class="headerlink" title="5.1 Raft 基础"></a>5.1 Raft 基础</h3><p>一个 Raft 集群包含若干个服务器节点；通常是 5 个，这样的系统可以容忍 2 个节点的失效。在任何时刻，每一个服务器节点都处于这三个状态之一：leader、follower 或者 candidate 。在正常情况下，集群中只有一个 leader 并且其他的节点全部都是 follower 。Follower 都是被动的：他们不会发送任何请求，只是简单的响应来自 leader 和 candidate 的请求。Leader 处理所有的客户端请求（如果一个客户端和 follower 通信，follower 会将请求重定向给 leader）。第三种状态，candidate ，是用来选举一个新的 leader（章节 5.2）。图 4 展示了这些状态和他们之间的转换关系；这些转换关系在接下来会进行讨论。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b308efb041bee9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p>
<p>Raft 把时间分割成任意长度的任期（term），如图 5 所示。任期用连续的整数标记。每一段任期从一次选举开始，一个或者多个 candidate 尝试成为 leader 。如果一个 candidate 赢得选举，然后他就在该任期剩下的时间里充当 leader 。在某些情况下，一次选举无法选出 leader 。在这种情况下，这一任期会以没有 leader 结束；一个新的任期（包含一次新的选举）会很快重新开始。Raft 保证了在任意一个任期内，最多只有一个 leader 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a405ff884cfcac10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p>
<p>不同的服务器节点观察到的任期转换的次数可能不同，在某些情况下，一个服务器节点可能没有看到 leader 选举过程或者甚至整个任期全程。任期在 Raft 算法中充当逻辑时钟的作用，这使得服务器节点可以发现一些过期的信息比如过时的 leader 。每一个服务器节点存储一个当前任期号，该编号随着时间单调递增。服务器之间通信的时候会交换当前任期号；如果一个服务器的当前任期号比其他的小，该服务器会将自己的任期号更新为较大的那个值。如果一个 candidate 或者 leader 发现自己的任期号过期了，它会立即回到 follower 状态。如果一个节点接收到一个包含过期的任期号的请求，它会直接拒绝这个请求。</p>
<p>Raft 算法中服务器节点之间使用 RPC 进行通信，并且基本的一致性算法只需要两种类型的 RPC。请求投票（RequestVote） RPC 由 candidate 在选举期间发起（章节 5.2），追加条目（AppendEntries）RPC 由 leader 发起，用来复制日志和提供一种心跳机制（章节 5.3）。第 7 节为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPC 来获得最佳的性能。</p>
<h3 id="5-2-Leader-选举"><a href="#5-2-Leader-选举" class="headerlink" title="5.2 Leader 选举"></a>5.2 Leader 选举</h3><p>Raft 使用一种心跳机制来触发 leader 选举。当服务器程序启动时，他们都是 follower 。一个服务器节点只要能从 leader 或 candidate 处接收到有效的 RPC 就一直保持 follower 状态。Leader 周期性地向所有 follower 发送心跳（不包含日志条目的 AppendEntries RPC）来维持自己的地位。如果一个 follower 在一段选举超时时间内没有接收到任何消息，它就假设系统中没有可用的 leader ，然后开始进行选举以选出新的 leader 。</p>
<p>要开始一次选举过程，follower 先增加自己的当前任期号并且转换到 candidate 状态。然后投票给自己并且并行地向集群中的其他服务器节点发送 RequestVote RPC（让其他服务器节点投票给它）。Candidate 会一直保持当前状态直到以下三件事情之一发生：(a) 它自己赢得了这次的选举（收到过半的投票），(b) 其他的服务器节点成为 leader ，(c) 一段时间之后没有任何获胜者。这些结果会在下面的章节里分别讨论。</p>
<p>当一个 candidate 获得集群中过半服务器节点针对同一个任期的投票，它就赢得了这次选举并成为 leader 。对于同一个任期，每个服务器节点只会投给一个 candidate ，按照先来先服务（first-come-first-served）的原则（注意：5.4 节在投票上增加了额外的限制）。要求获得过半投票的规则确保了最多只有一个 candidate 赢得此次选举（图 3 中的选举安全性）。一旦 candidate 赢得选举，就立即成为 leader 。然后它会向其他的服务器节点发送心跳消息来确定自己的地位并阻止新的选举。</p>
<p>在等待投票期间，candidate 可能会收到另一个声称自己是 leader 的服务器节点发来的 AppendEntries RPC 。如果这个 leader 的任期号（包含在RPC中）不小于 candidate 当前的任期号，那么 candidate 会承认该 leader 的合法地位并回到 follower 状态。 如果 RPC 中的任期号比自己的小，那么 candidate 就会拒绝这次的 RPC 并且继续保持 candidate 状态。</p>
<p>第三种可能的结果是 candidate 既没有赢得选举也没有输：如果有多个 follower 同时成为 candidate ，那么选票可能会被瓜分以至于没有 candidate 赢得过半的投票。当这种情况发生时，每一个候选人都会超时，然后通过增加当前任期号来开始一轮新的选举。然而，如果没有其他机制的话，该情况可能会无限重复。</p>
<p>Raft 算法使用随机选举超时时间的方法来确保很少发生选票瓜分的情况，就算发生也能很快地解决。为了阻止选票一开始就被瓜分，选举超时时间是从一个固定的区间（例如 150-300 毫秒）随机选择。这样可以把服务器都分散开以至于在大多数情况下只有一个服务器会选举超时；然后该服务器赢得选举并在其他服务器超时之前发送心跳。同样的机制被用来解决选票被瓜分的情况。每个 candidate 在开始一次选举的时候会重置一个随机的选举超时时间，然后一直等待直到选举超时；这样减小了在新的选举中再次发生选票瓜分情况的可能性。9.3 节展示了该方案能够快速地选出一个 leader 。</p>
<p>选举的例子可以很好地展示可理解性是如何指导我们选择设计方案的。起初我们打算使用一种等级系统（ranking system）：每一个 candidate 都被赋予一个唯一的等级（rank），等级用来在竞争的 candidate 之间进行选择。如果一个 candidate 发现另一个 candidate 拥有更高的等级，它就会回到 follower 状态，这样高等级的 candidate 能够更加容易地赢得下一次选举。但是我们发现这种方法在可用性方面会有一下小问题。我们对该算法进行了多次调整，但是每次调整之后都会有新的小问题。最终我们认为随机重试的方法更加显然且易于理解。</p>
<h3 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3 日志复制"></a>5.3 日志复制</h3><p>Leader 一旦被选举出来，就开始为客户端请求提供服务。客户端的每一个请求都包含一条将被复制状态机执行的指令。Leader 把该指令作为一个新的条目追加到日志中去，然后并行的发起 AppendEntries RPC 给其他的服务器，让它们复制该条目。当该条目被安全地复制（下面会介绍），leader 会应用该条目到它的状态机中（状态机执行该指令）然后把执行的结果返回给客户端。如果 follower 崩溃或者运行缓慢，或者网络丢包，leader 会不断地重试 AppendEntries RPC（即使已经回复了客户端）直到所有的 follower 最终都存储了所有的日志条目。</p>
<p>日志以图 6 展示的方式组织。每个<strong>日志条目</strong>存储一条<strong>状态机指令</strong>和 leader 收到该指令时的<strong>任期号</strong>。任期号用来检测多个日志副本之间的不一致情况，同时也用来保证图 3 中的某些性质。每个日志条目都有一个整数索引值来表明它在日志中的位置。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6ceba6710280cbaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p>
<p>Leader 决定什么时候把日志条目应用到状态机中是安全的；这种日志条目被称为<strong>已提交的</strong>。Raft 算法保证所有已提交的日志条目都是持久化的并且最终会被所有可用的状态机执行。一旦创建该日志条目的 leader 将它复制到过半的服务器上，该日志条目就会被提交（例如在图 6 中的条目 7）。同时，leader 日志中该日志条目之前的所有日志条目也都会被提交，包括由其他 leader 创建的条目。5.4 节讨论在 leader 变更之后应用该规则的一些细节，并且证明了这种提交的规则是安全的。Leader 追踪将会被提交的日志条目的最大索引，未来的所有 AppendEntries RPC 都会包含该索引，这样其他的服务器才能最终知道哪些日志条目需要被提交。Follower 一旦知道某个日志条目已经被提交就会将该日志条目应用到自己的本地状态机中（按照日志的顺序）。</p>
<p>我们设计了 Raft 日志机制来维持不同服务器之间日志高层次的一致性。这么做不仅简化了系统的行为也使得系统行为更加可预测，同时该机制也是保证安全性的重要组成部分。Raft 维护着以下特性，这些同时也构成了图 3 中的日志匹配特性：</p>
<ul>
<li>如果不同日志中的两个条目拥有相同的索引和任期号，那么他们存储了相同的指令。</li>
<li>如果不同日志中的两个条目拥有相同的索引和任期号，那么他们之前的所有日志条目也都相同。</li>
</ul>
<p>Leader 在特定的任期号内的一个日志索引处最多创建一个日志条目，同时日志条目在日志中的位置也从来不会改变。该点保证了上面的第一条特性。第二个特性是由 AppendEntries RPC 执行一个简单的一致性检查所保证的。在发送 AppendEntries RPC 的时候，leader 会将前一个日志条目的索引位置和任期号包含在里面。如果 follower 在它的日志中找不到包含相同索引位置和任期号的条目，那么他就会拒绝该新的日志条目。一致性检查就像一个归纳步骤：一开始空的日志状态肯定是满足 Log Matching Property（日志匹配特性） 的，然后一致性检查保证了日志扩展时的日志匹配特性。因此，每当 AppendEntries RPC 返回成功时，leader 就知道 follower 的日志一定和自己相同（从第一个日志条目到最新条目）。</p>
<p>正常操作期间，leader 和 follower 的日志保持一致，所以 AppendEntries RPC 的一致性检查从来不会失败。然而，leader 崩溃的情况会使日志处于不一致的状态（老的 leader 可能还没有完全复制它日志里的所有条目）。这种不一致会在一系列的 leader 和 follower 崩溃的情况下加剧。图 7 展示了在什么情况下 follower 的日志可能和新的 leader 的日志不同。Follower 可能缺少一些在新 leader 中有的日志条目，也可能拥有一些新 leader 没有的日志条目，或者同时发生。缺失或多出日志条目的情况可能会涉及到多个任期。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fc1352afc54b5ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p>
<blockquote>
<p>图 7：当一个 leader 成功当选时（最上面那条日志），follower 可能是（a-f）中的任何情况。每一个盒子表示一个日志条目；里面的数字表示任期号。Follower 可能会缺少一些日志条目（a-b），可能会有一些未被提交的日志条目（c-d），或者两种情况都存在（e-f）。例如，场景 f 可能这样发生，f 对应的服务器在任期 2 的时候是 leader ，追加了一些日志条目到自己的日志中，一条都还没提交（commit）就崩溃了；该服务器很快重启，在任期 3 重新被选为 leader，又追加了一些日志条目到自己的日志中；在这些任期 2 和任期 3 中的日志都还没被提交之前，该服务器又宕机了，并且在接下来的几个任期里一直处于宕机状态。</p>
</blockquote>
<p>在 Raft 算法中，leader 通过强制 follower 复制它的日志来解决不一致的问题。这意味着 follower 中跟 leader 冲突的日志条目会被 leader 的日志条目覆盖。5.4 节会证明通过增加一个限制可以保证安全性。</p>
<p>要使得 follower 的日志跟自己一致，leader 必须找到两者达成一致的最大的日志条目（索引最大），删除 follower 日志中从那个点之后的所有日志条目，并且将自己从那个点之后的所有日志条目发送给 follower 。所有的这些操作都发生在对 AppendEntries RPCs 中一致性检查的回复中。Leader 针对每一个 follower 都维护了一个 nextIndex ，表示 leader 要发送给 follower 的下一个日志条目的索引。当选出一个新 leader 时，该 leader 将所有 nextIndex 的值都初始化为自己最后一个日志条目的 index 加1（图 7 中的 11）。如果 follower 的日志和 leader 的不一致，那么下一次 AppendEntries RPC 中的一致性检查就会失败。在被 follower 拒绝之后，leaer 就会减小 nextIndex 值并重试 AppendEntries RPC 。最终 nextIndex 会在某个位置使得 leader 和 follower 的日志达成一致。此时，AppendEntries RPC 就会成功，将 follower 中跟 leader 冲突的日志条目全部删除然后追加 leader 中的日志条目（如果有需要追加的日志条目的话）。一旦 AppendEntries RPC 成功，follower 的日志就和 leader 一致，并且在该任期接下来的时间里保持一致。</p>
<blockquote>
<p>如果想要的话，该协议可以被优化来减少被拒绝的 AppendEntries RPC 的个数。例如，当拒绝一个 AppendEntries RPC 的请求的时候，follower 可以包含冲突条目的任期号和自己存储的那个任期的第一个 index 。借助这些信息，leader  可以跳过那个任期内所有冲突的日志条目来减小 nextIndex；这样就变成每个有冲突日志条目的任期需要一个 AppendEntries RPC 而不是每个条目一次。在实践中，我们认为这种优化是没有必要的，因为失败不经常发生并且也不可能有很多不一致的日志条目。</p>
</blockquote>
<p>通过这种机制，leader 在当权之后就不需要任何特殊的操作来使日志恢复到一致状态。Leader 只需要进行正常的操作，然后日志就能在回复 AppendEntries 一致性检查失败的时候自动趋于一致。Leader 从来不会覆盖或者删除自己的日志条目（图 3 的 Leader Append-Only 属性）。</p>
<p>这样的日志复制机制展示了第 2 节中描述的一致性特性：只要过半的服务器能正常运行，Raft 就能够接受，复制并应用新的日志条目；在正常情况下，新的日志条目可以在一个 RPC 来回中被复制给集群中的过半机器；并且单个运行慢的 follower 不会影响整体的性能。</p>
<h3 id="5-4-安全性"><a href="#5-4-安全性" class="headerlink" title="5.4 安全性"></a>5.4 安全性</h3><p>前面的章节里描述了 Raft 算法是如何进行 leader 选举和日志复制的。然而，到目前为止描述的机制并不能充分地保证每一个状态机会按照相同的顺序执行相同的指令。例如，一个 follower 可能会进入不可用状态，在此期间，leader 可能提交了若干的日志条目，然后这个 follower 可能会被选举为 leader 并且用新的日志条目覆盖这些日志条目；结果，不同的状态机可能会执行不同的指令序列。</p>
<p>这节通过对 leader 选举增加一个限制来完善 Raft 算法。这一限制保证了对于给定的任意任期号， leader 都包含了之前各个任期所有被提交的日志条目（图 3 中的 Leader Completeness 性质）。有了这一 leader 选举的限制，我们也使得提交规则更加清晰。最后，我们展示了对于 Leader Completeness 性质的简要证明并且说明该性质是如何领导复制状态机执行正确的行为的。</p>
<h4 id="5-4-1-选举限制"><a href="#5-4-1-选举限制" class="headerlink" title="5.4.1 选举限制"></a>5.4.1 选举限制</h4><p>在任何基于 leader 的一致性算法中，leader 最终都必须存储所有已经提交的日志条目。在某些一致性算法中，例如 Viewstamped Replication[22]，一开始并没有包含所有已经提交的日志条目的服务器也可能被选为 leader 。这种算法包含一些额外的机制来识别丢失的日志条目并将它们传送给新的 leader ，要么是在选举阶段要么在之后很快进行。不幸的是，这种方法会导致相当大的额外的机制和复杂性。Raft 使用了一种更加简单的方法，它可以保证新 leader 在当选时就包含了之前所有任期号中已经提交的日志条目，不需要再传送这些日志条目给新 leader 。这意味着日志条目的传送是单向的，只从 leader 到 follower，并且 leader 从不会覆盖本地日志中已经存在的条目。</p>
<p>Raft 使用投票的方式来阻止 candidate 赢得选举除非该 candidate 包含了所有已经提交的日志条目。候选人为了赢得选举必须与集群中的过半节点通信，这意味着至少其中一个服务器节点包含了所有已提交的日志条目。如果 candidate 的日志至少和过半的服务器节点一样新（接下来会精确地定义“新”），那么他一定包含了所有已经提交的日志条目。RequestVote RPC 执行了这样的限制： RPC 中包含了 candidate 的日志信息，如果投票者自己的日志比 candidate 的还新，它会拒绝掉该投票请求。</p>
<p>Raft 通过比较两份日志中最后一条日志条目的索引值和任期号来定义谁的日志比较新。如果两份日志最后条目的任期号不同，那么任期号大的日志更新。如果两份日志最后条目的任期号相同，那么日志较长的那个更新。</p>
<h4 id="5-4-2-提交之前任期内的日志条目"><a href="#5-4-2-提交之前任期内的日志条目" class="headerlink" title="5.4.2 提交之前任期内的日志条目"></a>5.4.2 提交之前任期内的日志条目</h4><p>如同 5.3 节描述的那样，一旦当前任期内的某个日志条目已经存储到过半的服务器节点上，leader 就知道该日志条目已经被提交了。如果某个 leader 在提交某个日志条目之前崩溃了，以后的 leader 会试图完成该日志条目的复制。然而，如果是之前任期内的某个日志条目已经存储到过半的服务器节点上，leader 也无法立即断定该日志条目已经被提交了。图 8 展示了一种情况，一个已经被存储到过半节点上的老日志条目，仍然有可能会被未来的 leader 覆盖掉。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f23fc91c5094c2cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p>
<blockquote>
<p>图 8：如图的时间序列展示了为什么 leader 无法判断老的任期号内的日志是否已经被提交。在 (a) 中，S1 是 leader ，部分地复制了索引位置 2 的日志条目。在 (b) 中，S1 崩溃了，然后 S5 在任期 3 中通过 S3、S4 和自己的选票赢得选举，然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c)，S5 又崩溃了；S1 重新启动，选举成功，继续复制日志。此时，来自任期 2 的那条日志已经被复制到了集群中的大多数机器上，但是还没有被提交。如果 S1 在 (d) 中又崩溃了，S5 可以重新被选举成功（通过来自 S2，S3 和 S4 的选票），然后覆盖了他们在索引 2 处的日志。但是，在崩溃之前，如果 S1 在自己的任期里复制了日志条目到大多数机器上，如 (e) 中，然后这个条目就会被提交（S5 就不可能选举成功）。 在这种情况下，之前的所有日志也被提交了。</p>
</blockquote>
<p>为了消除图 8 中描述的问题，Raft 永远不会通过计算副本数目的方式来提交之前任期内的日志条目。只有 leader 当前任期内的日志条目才通过计算副本数目的方式来提交；一旦当前任期的某个日志条目以这种方式被提交，那么由于日志匹配特性，之前的所有日志条目也都会被间接地提交。在某些情况下，领导人可以安全地断定一个老的日志条目已经被提交（例如，如果该条目已经存储到所有服务器上），但是 Raft 为了简化问题使用了一种更加保守的方法。</p>
<p>Raft 会在提交规则上增加额外的复杂性是因为当 leader 复制之前任期内的日志条目时，这些日志条目都保留原来的任期号。在其他的一致性算法中，如果一个新的 leader 要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft 的做法使得更加容易推导出（reason about）日志条目，因为他们自始至终都使用同一个任期号。另外，和其他的算法相比，Raft 中的新 leader 只需要发送更少的日志条目（其他算法中必须在它们被提交之前发送更多的冗余日志条目来给它们重新编号）。</p>
<h4 id="5-4-3-安全性论证"><a href="#5-4-3-安全性论证" class="headerlink" title="5.4.3 安全性论证"></a>5.4.3 安全性论证</h4><p>在给出了完整的 Raft 算法之后，我们现在可以更加精确的讨论 leader 完整性特性（Leader Completeness Prop-erty）（这一讨论基于 9.2 节的安全性证明）。我们假设 leader 完整性特性是不满足的，然后我们推出矛盾来。假设任期 T 的 leader（leader T）在任期内提交了一个日志条目，但是该日志条目没有被存储到未来某些任期的 leader 中。假设 U 是大于 T 的没有存储该日志条目的最小任期号。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-03fb8b6791409bb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p>
<blockquote>
<p>图 9：如果 S1 （任期 T 的 leader）在它的任期里提交了一个新的日志条目，然后 S5 在之后的任期 U 里被选举为 leader ，那么肯定至少会有一个节点，如 S3，既接收了来自 S1 的日志条目，也给 S5 投票了。</p>
</blockquote>
<ol>
<li><p>U 一定在刚成为 leader 的时候就没有那条被提交的日志条目了（leader 从不会删除或者覆盖任何条目）。</p>
</li>
<li><p>Leader T 复制该日志条目给集群中的过半节点，同时，leader U 从集群中的过半节点赢得了选票。因此，至少有一个节点（投票者）同时接受了来自 leader T 的日志条目和给 leader U 投票了，如图 9。该投票者是产生矛盾的关键。</p>
</li>
<li><p>该投票者必须在给 leader U 投票之前先接受了从 leader T 发来的已经被提交的日志条目；否则它就会拒绝来自 leader T 的 AppendEntries 请求（因为此时它的任期号会比 T 大）。</p>
</li>
<li><p>该投票者在给 leader U 投票时依然保有这该日志条目，因为任何 U 、T 之间的 leader 都包含该日志条目（根据上述的假设），leader 从不会删除条目，并且 follower 只有跟 leader 冲突的时候才会删除条目。</p>
</li>
<li><p>该投票者把自己选票投给 leader U 时，leader U 的日志必须至少和投票者的一样新。这就导致了以下两个矛盾之一。</p>
</li>
<li><p>首先，如果该投票者和 leader U 的最后一个日志条目的任期号相同，那么 leader U 的日志至少和该投票者的一样长，所以 leader U 的日志一定包含该投票者日志中的所有日志条目。这是一个矛盾，因为该投票者包含了该已被提交的日志条目，但是在上述的假设里，leader U 是不包含的。</p>
</li>
<li><p>否则，leader U 的最后一个日志条目的任期号就必须比该投票者的大了。此外，该任期号也比 T 大，因为该投票者的最后一个日志条目的任期号至少和 T 一样大（它包含了来自任期 T 的已提交的日志）。创建了 leader U 最后一个日志条目的之前的 leader 一定已经包含了该已被提交的日志条目（根据上述假设，leader U 是第一个不包含该日志条目的 leader）。所以，根据日志匹配特性，leader U 一定也包含该已被提交的日志条目，这里产生了矛盾。</p>
</li>
<li><p>因此，所有比 T 大的任期的 leader 一定都包含了任期 T 中提交的所有日志条目。</p>
</li>
<li><p>日志匹配特性保证了未来的 leader 也会包含被间接提交的日志条目，例如图 8 (d) 中的索引 2。</p>
</li>
</ol>
<p>通过 Leader 完整性特性，我们就能证明图 3 中的状态机安全特性，即如果某个服务器已经将某个给定的索引处的日志条目应用到自己的状态机里了，那么其他的服务器就不会在相同的索引处应用一个不同的日志条目。在一个服务器应用一个日志条目到自己的状态机中时，它的日志和 leader 的日志从开始到该日志条目都相同，并且该日志条目必须被提交。现在考虑如下最小任期号：某服务器在该任期号中某个特定的索引处应用了一个日志条目；日志完整性特性保证拥有更高任期号的 leader 会存储相同的日志条目，所以之后任期里服务器应用该索引处的日志条目也会是相同的值。因此，状态机安全特性是成立的。</p>
<p>最后，Raft 要求服务器按照日志索引顺序应用日志条目。再加上状态机安全特性，这就意味着所有的服务器都会按照相同的顺序应用相同的日志条目到自己的状态机中。</p>
<h3 id="5-5-Follower-和-candidate-崩溃"><a href="#5-5-Follower-和-candidate-崩溃" class="headerlink" title="5.5 Follower 和 candidate 崩溃"></a>5.5 Follower 和 candidate 崩溃</h3><p>到目前为止，我们只关注了 leader 崩溃的情况。Follower 和 candidate 崩溃后的处理方式比 leader 崩溃要简单的多，并且两者的处理方式是相同的。如果 follower 或者 candidate 崩溃了，那么后续发送给他们的 RequestVote 和 AppendEntries RPCs 都会失败。Raft 通过无限的重试来处理这种失败；如果崩溃的机器重启了，那么这些 RPC 就会成功地完成。如果一个服务器在完成了一个 RPC，但是还没有响应的时候崩溃了，那么在它重启之后就会再次收到同样的请求。Raft 的 RPCs 都是幂等的，所以这样的重试不会造成任何伤害。例如，一个 follower 如果收到 AppendEntries 请求但是它的日志中已经包含了这些日志条目，它就会直接忽略这个新的请求中的这些日志条目。</p>
<h3 id="5-6-定时（timing）和可用性"><a href="#5-6-定时（timing）和可用性" class="headerlink" title="5.6 定时（timing）和可用性"></a>5.6 定时（timing）和可用性</h3><p>Raft 的要求之一就是安全性不能依赖定时：整个系统不能因为某些事件运行得比预期快一点或者慢一点就产生错误的结果。但是，可用性（系统能够及时响应客户端）不可避免的要依赖于定时。例如，当有服务器崩溃时，消息交换的时间就会比正常情况下长，candidate 将不会等待太长的时间来赢得选举；没有一个稳定的 leader ，Raft 将无法工作。</p>
<p>Leader 选举是 Raft 中定时最为关键的方面。 只要整个系统满足下面的时间要求，Raft 就可以选举出并维持一个稳定的 leader：</p>
<blockquote>
<p>广播时间（broadcastTime） &lt;&lt; 选举超时时间（electionTimeout） &lt;&lt; 平均故障间隔时间（MTBF）</p>
</blockquote>
<p>在这个不等式中，广播时间指的是一个服务器并行地发送 RPCs 给集群中所有的其他服务器并接收到响应的平均时间；选举超时时间就是在 5.2 节中介绍的选举超时时间；平均故障间隔时间就是对于一台服务器而言，两次故障间隔时间的平均值。广播时间必须比选举超时时间小一个量级，这样 leader 才能够可靠地发送心跳消息来阻止 follower 开始进入选举状态；再加上随机化选举超时时间的方法，这个不等式也使得选票瓜分的情况变得不可能。选举超时时间需要比平均故障间隔时间小上几个数量级，这样整个系统才能稳定地运行。当 leader 崩溃后，整个系统会有大约选举超时时间不可用；我们希望该情况在整个时间里只占一小部分。</p>
<p>广播时间和平均故障间隔时间是由系统决定的，但是选举超时时间是我们自己选择的。Raft 的 RPCs 需要接收方将信息持久化地保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒之间，取决于存储的技术。因此，选举超时时间可能需要在 10 毫秒到 500 毫秒之间。大多数的服务器的平均故障间隔时间都在几个月甚至更长，很容易满足时间的要求。</p>
<h2 id="6-集群成员变更"><a href="#6-集群成员变更" class="headerlink" title="6 集群成员变更"></a>6 集群成员变更</h2><p>到目前为止，我们都假设集群的配置（参与一致性算法的服务器集合）是固定不变的。但是在实践中，偶尔会改变集群的配置的，例如替换那些宕机的机器或者改变复制程度。尽管可以通过使整个集群下线，更新所有配置，然后重启整个集群的方式来实现，但是在更改期间集群会不可用。另外，如果存在手工操作步骤，那么就会有操作失误的风险。为了避免这样的问题，我们决定将配置变更自动化并将其纳入到 Raft 一致性算法中来。</p>
<p>为了使配置变更机制能够安全，在转换的过程中不能够存在任何时间点使得同一个任期里可能选出两个 leader 。不幸的是，任何服务器直接从旧的配置转换到新的配置的方案都是不安全的。一次性自动地转换所有服务器是不可能的，所以在转换期间整个集群可能划分成两个独立的大多数（见图 10）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-284d88f08ab84f85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p>
<blockquote>
<p>图 10：直接从一种配置转到另一种配置是不安全的，因为各个机器会在不同的时候进行转换。在这个例子中，集群从 3 台机器变成了 5 台。不幸的是，存在这样的一个时间点，同一个任期里两个不同的 leader 会被选出。一个获得旧配置里过半机器的投票，一个获得新配置里过半机器的投票。</p>
</blockquote>
<p>为了保证安全性，配置变更必须采用一种两阶段方法。目前有很多种两阶段的实现。例如，有些系统（比如，[22]）在第一阶段停掉旧的配置所以不能处理客户端请求；然后在第二阶段在启用新的配置。在 Raft 中，集群先切换到一个过渡的配置，我们称之为联合一致（joint consensus）；一旦联合一致已经被提交了，那么系统就切换到新的配置上。联合一致结合了老配置和新配置：</p>
<ul>
<li>日志条目被复制给集群中新、老配置的所有服务器。</li>
<li>新、旧配置的服务器都可以成为 leader 。</li>
<li>达成一致（针对选举和提交）需要分别在两种配置上获得过半的支持。</li>
</ul>
<p>联合一致允许独立的服务器在不妥协安全性的前提下，在不同的时刻进行配置转换过程。此外，联合一致允许集群在配置变更期间依然响应客户端请求。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6a440c013876545a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p>
<p>集群配置在复制日志中以特殊的日志条目来存储和通信；图 11 展示了配置变更过程。当一个 leader 接收到一个改变配置从 C-old 到 C-new 的请求，它就为联合一致将该配置（图中的 C-old,new）存储为一个日志条目，并以前面描述的方式复制该条目。一旦某个服务器将该新配置日志条目增加到自己的日志中，它就会用该配置来做出未来所有的决策（服务器总是使用它日志中最新的配置，无论该配置日志是否已经被提交）。这就意味着 leader 会使用 C-old,new 的规则来决定 C-old,new 的日志条目是什么时候被提交的。如果 leader 崩溃了，新 leader 可能是在 C-old 配置也可能是在 C-old,new 配置下选出来的，这取决于赢得选举的 candidate 是否已经接收到了 C-old,new 配置。在任何情况下， C-new 在这一时期都不能做出单方面决定。</p>
<p>一旦 C-old,new 被提交，那么 C-old 和 C-new 都不能在没有得到对方认可的情况下做出决定，并且 leader 完整性特性保证了只有拥有 C-old,new 日志条目的服务器才能被选举为 leader 。现在 leader 创建一个描述 C-new 配置的日志条目并复制到集群其他节点就是安全的了。此外，新的配置被服务器收到后就会立即生效。当新的配置在 C-new 的规则下被提交，旧的配置就变得无关紧要，同时不使用新配置的服务器就可以被关闭了。如图 11 所示，任何时刻 C-old 和 C-new 都不能单方面做出决定；这保证了安全性。</p>
<p>在关于配置变更还有三个问题需要解决。第一个问题是，新的服务器开始时可能没有存储任何的日志条目。当这些服务器以这种状态加入到集群中，它们需要一段时间来更新来赶上其他服务器，这段它们无法提交新的日志条目。为了避免因此而造成的系统短时间的不可用，Raft 在配置变更前引入了一个额外的阶段，在该阶段，新的服务器以没有投票权身份加入到集群中来（leader 也复制日志给它们，但是考虑过半的时候不用考虑它们）。一旦该新的服务器追赶上了集群中的其他机器，配置变更就可以按上面描述的方式进行。</p>
<p>第二个问题是，集群的 leader 可能不是新配置中的一员。在这种情况下，leader 一旦提交了 C-new 日志条目就会退位（回到 follower 状态）。这意味着有这样的一段时间（leader 提交 C-new 期间），leader 管理着一个不包括自己的集群；它复制着日志但不把自己算在过半里面。Leader 转换发生在 C-new 被提交的时候，因为这是新配置可以独立运转的最早时刻（将总是能够在 C-new 配置下选出新的领导人）。在此之前，可能只能从 C-old 中选出领导人。</p>
<p>第三个问题是，那些被移除的服务器（不在 C-new 中）可能会扰乱集群。这些服务器将不会再接收到心跳，所以当选举超时，它们就会进行新的选举过程。它们会发送带有新任期号的 RequestVote RPCs ，这样会导致当前的 leader 回到 follower 状态。新的 leader 最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致系统可用性很差。</p>
<p>为了防止这种问题，当服务器认为当前 leader 存在时，服务器会忽略RequestVote RPCs 。特别的，当服务器在最小选举超时时间内收到一个 RequestVote RPC，它不会更新任期号或者投票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待最小选举超时时间。相反，这有利于避免被移除的服务器的扰乱：如果 leader 能够发送心跳给集群，那它就不会被更大的任期号废黜。</p>
<h2 id="7-日志压缩"><a href="#7-日志压缩" class="headerlink" title="7 日志压缩"></a>7 日志压缩</h2><p>Raft 的日志在正常操作中随着包含更多的客户端请求不断地增长，但是在实际的系统中，日志不能无限制地增长。随着日志越来越长，它会占用越来越多的空间，并且需要花更多的时间来回放。如果没有一定的机制来清除日志中积累的过期的信息，最终就会带来可用性问题。</p>
<p>快照技术是日志压缩最简单的方法。在快照技术中，整个当前系统的状态都以快照的形式持久化到稳定的存储中，该时间点之前的日志全部丢弃。快照技术被使用在 Chubby 和 ZooKeeper 中，接下来的章节会介绍 Raft 中的快照技术。</p>
<p>增量压缩方法，例如日志清理或者日志结构合并树（log-structured merge trees，LSM 树），都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，它们先选择一个积累了大量已经被删除或者被覆盖的对象的数据区域，然后重写该区域还活着的对象，之后释放该区域。和快照技术相比，它们需要大量额外的机制和复杂性，快照技术通过操作整个数据集来简化该问题。状态机可以用和快照技术相同的接口来实现 LSM 树，但是日志清除方法就需要修改 Raft 了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-708be6a9e8be699d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图12"></p>
<blockquote>
<p>一台服务器用一个新快照替代了它日志中已经提交了的条目（索引 1 到 5），该快照只存储了当前的状态（变量 x 和 y 的值）。快照的 last included index 和 last included term 被保存来定位日志中条目 6 之前的快照</p>
</blockquote>
<p>图 12 展示了 Raft 中快照的基本思想。每个服务器独立地创建快照，快照只包括自己日志中已经被提交的条目。主要的工作是状态机将自己的状态写入快照中。Raft 快照中也包含了少量的元数据：the last included index 指的是最后一个被快照取代的日志条目的索引值（状态机最后应用的日志条目），the last included term 是该条目的任期号。保留这些元数据是为了支持快照后第一个条目的 AppendEntries 一致性检查，因为该条目需要之前的索引值和任期号。为了支持集群成员变更（第 6 节），快照中也包括日志中最新的配置作为 last included index 。一旦服务器完成写快照，他就可以删除 last included index 之前的所有日志条目，包括之前的快照。</p>
<p>尽管通常服务器都是独立地创建快照，但是 leader 必须偶尔发送快照给一些落后的跟随者。这通常发生在 leader 已经丢弃了需要发送给 follower 的下一条日志条目的时候。幸运的是这种情况在常规操作中是不可能的：一个与 leader 保持同步的 follower 通常都会有该日志条目。然而一个例外的运行缓慢的 follower 或者新加入集群的服务器（第 6 节）将不会有这个条目。这时让该 follower 更新到最新的状态的方式就是通过网络把快照发送给它。</p>
<p>Leader 使用 InstallSnapshot RPC 来发送快照给太落后的 follower ；见图 13。当 follower 收到带有这种 RPC 的快照时，它必须决定如何处理已经存在的日志条目。通常该快照会包含接收者日志中没有的信息。在这种情况下，follower 丢弃它所有的日志；这些会被该快照所取代，并且可能一些没有提交的条目会和该快照产生冲突。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照之后的条目仍然有用并保留。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-97e86b90137791b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图13"></p>
<p>这种快照的方式违反了 Raft 的 strong leader 原则，因为 follower 可以在不知道 leader 状态的情况下创建快照。但是我们认为这种违背是合乎情理的。Leader 的存在，是为了防止在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，因此没有决策会冲突。数据依然只能从 leader 流到 follower ，只是 follower 可以重新组织它们的数据了。</p>
<p>我们考虑过一种可替代的基于 leader 的快照方案，在该方案中，只有leader 会创建快照，然后 leader 会发送它的快照给所有的 follower 。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照过程。每个 follower 都已经拥有了创建自己的快照所需要的信息，而且很显然，follower 从本地的状态中创建快照远比通过网络接收别人发来的要来得经济。第二，leader 的实现会更加复杂。例如，leader 发送快照给 follower 的同时也要并行地将新的日志条目发送给它们，这样才不会阻塞新的客户端请求。</p>
<p>还有两个问题会影响快照的性能。首先，服务器必须决定什么时候创建快照。如果快照创建过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，就要承担耗尽存储容量的风险，同时也增加了重启时日志回放的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置得显著大于期望的快照的大小，那么快照的磁盘带宽负载就会很小。</p>
<p>第二个性能问题就是写入快照需要花费一段时间，并且我们不希望它影响到正常的操作。解决方案是通过写时复制的技术，这样新的更新就可以在不影响正在写的快照的情况下被接收。例如，具有泛函数据结构的状态机天然支持这样的功能。另外，操作系统对写时复制技术的支持（如 Linux 上的 fork）可以被用来创建整个状态机的内存快照（我们的实现用的就是这种方法）。</p>
<h2 id="8-客户端交互"><a href="#8-客户端交互" class="headerlink" title="8 客户端交互"></a>8 客户端交互</h2><p>本节介绍客户端如何和 Raft 进行交互，包括客户端如何找到 leader 和 Raft 是如何支持线性化语义的。这些问题对于所有基于一致性的系统都存在，并且 Raft 的解决方案和其他的也差不多。</p>
<p>Raft 的客户端发送所有的请求给 leader 。当客户端第一次启动的时候，它会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是 leader ，那么该服务器会拒绝客户端的请求并且提供关于它最近接收到的领导人的信息（AppendEntries 请求包含了 leader 的网络地址）。如果 leader 已经崩溃了，客户端请求就会超时；客户端之后会再次随机挑选服务器进行重试。</p>
<p>我们 Raft 的目标是要实现线性化语义（每一次操作立即执行，只执行一次，在它的调用和回复之间）。但是，如上述，Raft 可能执行同一条命令多次：例如，如果 leader 在提交了该日志条目之后，响应客户端之前崩溃了，那么客户端会和新的 leader 重试这条指令，导致这条命令被再次执行。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每个客户端已经处理的最新的序列号以及相关联的回复。如果接收到一条指令，该指令的序列号已经被执行过了，就立即返回结果，而不重新执行该请求。</p>
<p>只读的操作可以直接处理而不需要记录日志。但是，如果不采取任何其他措施，这么做可能会有返回过时数据（stale data）的风险，因为 leader 响应客户端请求时可能已经被新的 leader 替代了，但是它还不知道自己已经不是最新的 leader 了。线性化的读操作肯定不会返回过时数据，Raft 需要使用两个额外的预防措施来在不使用日志的情况下保证这一点。首先，leader 必须有关于哪些日志条目被提交了的最新信息。Leader 完整性特性保证了 leader 一定拥有所有已经被提交的日志条目，但是在它任期开始的时候，它可能不知道哪些是已经被提交的。为了知道这些信息，它需要在它的任期里提交一个日志条目。Raft 通过让 leader 在任期开始的时候提交一个空的没有任何操作的日志条目到日志中来处理该问题。第二，leader 在处理只读请求之前必须检查自己是否已经被替代了（如果一个更新的 leader 被选举出来了，它的信息就是过时的了）。Raft 通过让 leader 在响应只读请求之前，先和集群中的过半节点交换一次心跳信息来处理该问题。另一种可选的方案，leader 可以依赖心跳机制来实现一种租约的形式，但是这种方法依赖 timing 来保证安全性（假设时间误差是有界的）。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>[1] BOLOSKY, W. J., BRADSHAW, D., HAAGENS, R. B., KUSTERS, N. P., AND LI, P. Paxos replicated state machines as the basis of a high-performance data store. In Proc. NSDI’11, USENIX Conference on Networked Systems Design and Implementation (2011), USENIX, pp. 141–154.</li>
<li>[2] BURROWS, M. The Chubby lock service for loosely- coupled distributed systems. In Proc. OSDI’06, Sympo- sium on Operating Systems Design and Implementation (2006), USENIX, pp. 335–350.</li>
<li>[3] CAMARGOS, L. J., SCHMIDT, R. M., AND PEDONE, F. Multicoordinated Paxos. In Proc. PODC’07, ACM Sym- posium on Principles of Distributed Computing (2007), ACM, pp. 316–317.</li>
<li>[4] CHANDRA, T. D., GRIESEMER, R., AND REDSTONE, J. Paxos made live: an engineering perspective. In Proc. PODC’07, ACM Symposium on Principles of Distributed Computing (2007), ACM, pp. 398–407.</li>
<li>[5] CHANG, F., DEAN, J., GHEMAWAT, S., HSIEH, W. C., WALLACH, D. A., BURROWS, M., CHANDRA, T., FIKES, A., AND GRUBER, R. E. Bigtable: a distributed storage system for structured data. In Proc. OSDI’06, USENIX Symposium on Operating Systems Design and Implementation (2006), USENIX, pp. 205–218.</li>
<li>[6] CORBETT, J. C., DEAN, J., EPSTEIN, M., FIKES, A., FROST, C., FURMAN, J. J., GHEMAWAT, S., GUBAREV, A., HEISER, C., HOCHSCHILD, P., HSIEH, W., KAN- THAK, S., KOGAN, E., LI, H., LLOYD, A., MELNIK, S., MWAURA, D., NAGLE, D., QUINLAN, S., RAO, R., ROLIG, L., SAITO, Y., SZYMANIAK, M., TAYLOR, C., WANG, R., AND WOODFORD, D. Spanner: Google’s globally-distributed database. In Proc. OSDI’12, USENIX Conference on Operating Systems Design and Implemen- tation (2012), USENIX, pp. 251–264.</li>
<li>[7] COUSINEAU, D., DOLIGEZ, D., LAMPORT, L., MERZ, S., RICKETTS, D., AND VANZETTO, H. TLA+ proofs. In Proc. FM’12, Symposium on Formal Methods (2012), D. Giannakopoulou and D. Me ́ry, Eds., vol. 7436 of Lec- ture Notes in Computer Science, Springer, pp. 147–154.</li>
<li>[8] GHEMAWAT, S., GOBIOFF, H., AND LEUNG, S.-T. The Google file system. In Proc. SOSP’03, ACM Symposium on Operating Systems Principles (2003), ACM, pp. 29–43.</li>
<li>[9] GRAY,C.,ANDCHERITON,D.Leases:Anefficientfault- tolerant mechanism for distributed file cache consistency. In Proceedings of the 12th ACM Ssymposium on Operating Systems Principles (1989), pp. 202–210.</li>
<li>[10] HERLIHY, M. P., AND WING, J. M. Linearizability: a correctness condition for concurrent objects. ACM Trans- actions on Programming Languages and Systems 12 (July 1990), 463–492.</li>
<li>[11] HUNT, P., KONAR, M., JUNQUEIRA, F. P., AND REED, B. ZooKeeper: wait-free coordination for internet-scale systems. In Proc ATC’10, USENIX Annual Technical Con- ference (2010), USENIX, pp. 145–158.</li>
<li>[12] JUNQUEIRA, F. P., REED, B. C., AND SERAFINI, M. Zab: High-performance broadcast for primary-backup sys- tems. In Proc. DSN’11, IEEE/IFIP Int’l Conf. on Depend- able Systems &amp; Networks (2011), IEEE Computer Society, pp. 245–256.</li>
<li>[13] KIRSCH, J., AND AMIR, Y. Paxos for system builders. Tech. Rep. CNDS-2008-2, Johns Hopkins University, 2008.</li>
<li>[14] LAMPORT, L. Time, clocks, and the ordering of events in a distributed system. Commununications of the ACM 21, 7 (July 1978), 558–565.</li>
<li>[15] LAMPORT, L. The part-time parliament. ACM Transac- tions on Computer Systems 16, 2 (May 1998), 133–169.</li>
<li>[16] LAMPORT, L. Paxos made simple. ACM SIGACT News 32, 4 (Dec. 2001), 18–25.</li>
<li>[17] LAMPORT, L. Specifying Systems, The TLA+ Language and Tools for Hardware and Software Engineers. Addison- Wesley, 2002.</li>
<li>[18] LAMPORT, L. Generalized consensus and Paxos. Tech. Rep. MSR-TR-2005-33, Microsoft Research, 2005.</li>
<li>[19] LAMPORT, L. Fast paxos. Distributed Computing 19, 2 (2006), 79–103.</li>
<li>[20] LAMPSON, B. W. How to build a highly available system using consensus. In Distributed Algorithms, O. Baboaglu and K. Marzullo, Eds. Springer-Verlag, 1996, pp. 1–17.</li>
<li>[21] LAMPSON, B. W. The ABCD’s of Paxos. In Proc. PODC’01, ACM Symposium on Principles of Distributed Computing (2001), ACM, pp. 13–13.</li>
<li>[22] LISKOV, B., AND COWLING, J. Viewstamped replica- tion revisited. Tech. Rep. MIT-CSAIL-TR-2012-021, MIT, July 2012.<br>17</li>
<li>[23] LogCabin source code. logcabin/logcabin.<br><a href="http://github.com/" target="_blank" rel="noopener">http://github.com/</a></li>
<li>[24] LORCH, J. R., ADYA, A., BOLOSKY, W. J., CHAIKEN, R., DOUCEUR, J. R., AND HOWELL, J. The SMART way to migrate replicated stateful services. In Proc. Eu- roSys’06, ACM SIGOPS/EuroSys European Conference on Computer Systems (2006), ACM, pp. 103–115.</li>
<li>[25] MAO, Y., JUNQUEIRA, F. P., AND MARZULLO, K. Mencius: building efficient replicated state machines for<br>WANs. In Proc. OSDI’08, USENIX Conference on Operating Systems Design and Implementation (2008), USENIX, pp. 369–384.</li>
<li>[26] MAZIE` RES, D. Paxos made practical.<br>//<a href="http://www.scs.stanford.edu/" target="_blank" rel="noopener">www.scs.stanford.edu/</a> ̃dm/home/ papers/paxos.pdf, Jan. 2007.</li>
<li>[27] MORARU, I., ANDERSEN, D. G., AND KAMINSKY, M. There is more consensus in egalitarian parliaments. In Proc. SOSP’13, ACM Symposium on Operating System Principles (2013), ACM.</li>
<li>[28] Raft user study. <a href="http://ramcloud.stanford" target="_blank" rel="noopener">http://ramcloud.stanford</a>. edu/ ̃ongaro/userstudy/.</li>
<li>[29] OKI, B. M., AND LISKOV, B. H. Viewstamped replication: A new primary copy method to support highly-available distributed systems. In Proc. PODC’88, ACM Symposium on Principles of Distributed Computing (1988), ACM, pp. 8–17.</li>
<li>[30] O’NEIL, P., CHENG, E., GAWLICK, D., AND ONEIL, E. The log-structured merge-tree (LSM-tree). Acta Informat- ica 33, 4 (1996), 351–385.</li>
<li>[31] ONGARO, D. Consensus: Bridging Theory and Practice. PhD thesis, Stanford University, 2014 (work in progress).<a href="http://ramcloud.stanford.edu/" target="_blank" rel="noopener">http://ramcloud.stanford.edu/</a> ̃ongaro/ thesis.pdf.</li>
<li>[32] ONGARO, D., AND OUSTERHOUT, J. In search of an understandable consensus algorithm. In Proc ATC’14, USENIX Annual Technical Conference (2014), USENIX.</li>
<li>[33] OUSTERHOUT, J., AGRAWAL, P., ERICKSON, D., KOZYRAKIS, C., LEVERICH, J., MAZIE`RES, D., MI- TRA, S., NARAYANAN, A., ONGARO, D., PARULKAR, G., ROSENBLUM, M., RUMBLE, S. M., STRATMANN, E., AND STUTSMAN, R. The case for RAMCloud. Com- munications of the ACM 54 (July 2011), 121–130.</li>
<li>[34] Raft consensus algorithm website. <a href="http://raftconsensus.github.io" target="_blank" rel="noopener">http://raftconsensus.github.io</a>.</li>
<li>[35] REED, B. Personal communications, May 17, 2013.</li>
<li>[36] ROSENBLUM, M., AND OUSTERHOUT, J. K. The design and implementation of a log-structured file system. ACM Trans. Comput. Syst. 10 (February 1992), 26–52.</li>
<li>[37] SCHNEIDER, F. B. Implementing fault-tolerant services using the state machine approach: a tutorial. ACM Com- puting Surveys 22, 4 (Dec. 1990), 299–319.</li>
<li>[38] SHVACHKO, K., KUANG, H., RADIA, S., AND CHANSLER, R. The Hadoop distributed file system. In Proc. MSST’10, Symposium on Mass Storage Sys- tems and Technologies (2010), IEEE Computer Society, pp. 1–10.</li>
<li>[39] VAN RENESSE, R. Paxos made moderately complex. Tech. rep., Cornell University, 2012.</li>
</ul>
<p><a href="https://raft.github.io/" target="_blank" rel="noopener">Raft 网站</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式一致性算法 </category>
            
            <category> Raft </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> 分布式一致性算法 </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> Raft </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java Map的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%85%B3%E4%BA%8EJava%20Map%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java Map的常见问题并给出答案。</p>
<a id="more"></a>

<h3 id="1-将Map转化成List"><a href="#1-将Map转化成List" class="headerlink" title="1. 将Map转化成List"></a>1. 将Map转化成List</h3><p>Map接口提供了三种collection：key set,value set 和 key-value set，每一种都可以转成List。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line">HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//key list</span></span><br><span class="line">ArrayList&lt;Integer&gt; keyList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</span><br><span class="line"><span class="comment">//value list</span></span><br><span class="line">ArrayList&lt;Integer&gt; valueList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.values());</span><br><span class="line"><span class="comment">//key-value list</span></span><br><span class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br></pre></td></tr></table></figure>

<h3 id="2-迭代Map"><a href="#2-迭代Map" class="headerlink" title="2. 迭代Map"></a>2. 迭代Map</h3><p>最高效的遍历map的每个entry的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet())&#123;</span><br><span class="line">    <span class="keyword">int</span> key = (<span class="keyword">int</span>) entry.getKey();</span><br><span class="line">    <span class="keyword">int</span> value = (<span class="keyword">int</span>) entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以使用iterator，特别是JDK 1.5之前。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator itr = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(itr.hasNext())&#123;</span><br><span class="line">  Map.Entry entry = itr.next();</span><br><span class="line">  <span class="keyword">int</span> key = (<span class="keyword">int</span>) entry.getKey();</span><br><span class="line">  <span class="keyword">int</span> value = (<span class="keyword">int</span>) entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-根据key对map进行排序"><a href="#3-根据key对map进行排序" class="headerlink" title="3. 根据key对map进行排序"></a>3. 根据key对map进行排序</h3><p>可以将Map.Entry放入一个list，然后自己实现Comparator来对list排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; e1, Map.Entry&lt;Integer, Integer&gt; e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e1.getKey().compareTo(e2.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以使用SortedMap。SortedMap的一个实现类是TreeMap。TreeMap的构造器可以接受一个Comparator参数。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SortedMap&lt;Integer,Integer&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer k1, Integer k2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k1.compareTo(k2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">sortedMap.putAll(map);</span><br></pre></td></tr></table></figure>

<p>注：TreeMap默认对key进行排序。</p>
<h3 id="4-根据value对map进行排序"><a href="#4-根据value对map进行排序" class="headerlink" title="4. 根据value对map进行排序"></a>4. 根据value对map进行排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; e1, Map.Entry&lt;Integer, Integer&gt; e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e1.getValue().compareTo(e2.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果map中的value不重复，可以通过反转key-value对为value-key对来用上面的3中的TreeMap方法对其排序。该方法不推荐。</p>
<h3 id="5-初始化一个不可变Map"><a href="#5-初始化一个不可变Map" class="headerlink" title="5. 初始化一个不可变Map"></a>5. 初始化一个不可变Map</h3><p>正确的做法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    map1.put(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    map1.put(<span class="number">88</span>,<span class="number">99</span>);</span><br><span class="line">    map1 = Collections.unmodifiableMap(map1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误的做法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer,Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    map1.put(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    map1.put(<span class="number">88</span>,<span class="number">99</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加了final只能确保不能 map1 = new，但是可以修改map1中的元素。</p>
<h3 id="6-HashMap、TreeMap和HashTable的区别"><a href="#6-HashMap、TreeMap和HashTable的区别" class="headerlink" title="6. HashMap、TreeMap和HashTable的区别"></a>6. HashMap、TreeMap和HashTable的区别</h3><p>Map接口有三个比较重要的实现类，分别是HashMap、TreeMap和HashTable。</p>
<ol>
<li><p>TreeMap是有序的，HashMap和HashTable是无序的。</p>
</li>
<li><p>Hashtable的方法是同步的，HashMap的方法不是同步的。这是两者最主要的区别。</p>
<p>这就意味着Hashtable是线程安全的，HashMap不是线程安全的。HashMap效率较高，Hashtable效率较低。<br>如果对同步性或与遗留代码的兼容性没有任何要求，建议使用HashMap。<br>查看Hashtable的源代码就可以发现，除构造函数外，Hashtable的所有 public 方法声明中都有 synchronized关键字，而HashMap的源码中则没有。</p>
</li>
<li><p>Hashtable不允许null值，HashMap允许null值（key和value都允许）</p>
</li>
<li><p>父类不同：Hashtable的父类是Dictionary，HashMap的父类是AbstractMap</p>
</li>
<li><p>Hashtable中hash数组默认大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                 | HashMap | Hashtable | TreeMap</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">iteration order  | no      | no        | yes</span><br><span class="line">null key-value   | yes-yes | no-no   | no-yes</span><br><span class="line">synchronized     | no      | yes       | no</span><br><span class="line">time performance | O(1)    | O(1)      | O(log n)</span><br><span class="line">implementation   | buckets | buckets   | red-black tree</span><br></pre></td></tr></table></figure>

<h3 id="7-创建一个空的Map"><a href="#7-创建一个空的Map" class="headerlink" title="7. 创建一个空的Map"></a>7. 创建一个空的Map</h3><p>如果希望该map为不可变的，则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map = Collections.emptyMap();</span><br></pre></td></tr></table></figure>

<p>否则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java字符串的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%85%B3%E4%BA%8EJava%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java字符串的常见问题并给出答案。</p>
<a id="more"></a>

<h3 id="1-如何比较两个字符串？用”-”还是”equals”"><a href="#1-如何比较两个字符串？用”-”还是”equals”" class="headerlink" title="1. 如何比较两个字符串？用”==”还是”equals”?"></a>1. 如何比较两个字符串？用”==”还是”equals”?</h3><ul>
<li>“==”对比的是引用是否相同（是否同一个对象）</li>
<li>“equals”对比的是值是否相同</li>
</ul>
<p>除非想要比较两个字符串是否是同一个对象，否则应该一直使用”equals”。</p>
<h3 id="2-为什么对安全性敏感的信息更喜欢用char-而不是String来存储？"><a href="#2-为什么对安全性敏感的信息更喜欢用char-而不是String来存储？" class="headerlink" title="2. 为什么对安全性敏感的信息更喜欢用char[]而不是String来存储？"></a>2. 为什么对安全性敏感的信息更喜欢用char[]而不是String来存储？</h3><p>因为String是不可变对象，这就意味着只要String被创建，它们就会一直存在直到被垃圾回收器收集。因此，用String保存的信息安全性会降低。</p>
<h3 id="3-在switch语句中可以使用字符串吗？"><a href="#3-在switch语句中可以使用字符串吗？" class="headerlink" title="3. 在switch语句中可以使用字符串吗？"></a>3. 在switch语句中可以使用字符串吗？</h3><p>从Java7开始，可以在switch语句中使用字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (aString) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">           value = <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">           value = <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-如何将字符串转为int？"><a href="#4-如何将字符串转为int？" class="headerlink" title="4. 如何将字符串转为int？"></a>4. 如何将字符串转为int？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = Integer.parseInt(<span class="string">"10"</span>);</span><br></pre></td></tr></table></figure>

<p>虽然很简单，但是使用频率很高。</p>
<h3 id="5-如何用空格切分字符串？"><a href="#5-如何用空格切分字符串？" class="headerlink" title="5. 如何用空格切分字符串？"></a>5. 如何用空格切分字符串？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strArray = aString.split(<span class="string">"\\s+"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6-substring-方法会创建一个新字符串吗？"><a href="#6-substring-方法会创建一个新字符串吗？" class="headerlink" title="6. substring()方法会创建一个新字符串吗？"></a>6. substring()方法会创建一个新字符串吗？</h3><p>从Java7开始，substring()方法会创建一个新的char数组，而不是使用已经存在的。</p>
<p>在Java6中，substring()方法不会创建一个新的char数组，如果想创建新的，可以用以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.substring(m,n) + <span class="string">""</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-String-vs-StringBuilder-vs-StringBuffer"><a href="#7-String-vs-StringBuilder-vs-StringBuffer" class="headerlink" title="7. String vs StringBuilder vs StringBuffer"></a>7. String vs StringBuilder vs StringBuffer</h3><p>String是不可变的，StringBuilder和StringBuffer都是可变的。</p>
<p>StringBuffer是同步的，线程安全的，效率低。</p>
<p>StringBuilder是非同步的，非线程安全，效率比StringBuffer高。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——分布式系统的特点及问题]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E7%82%B9%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>随着数据量越来越大，计算机需要处理的业务越来越复杂，单机已经无法满足需求。一个有效的解决方案是把众多廉价的计算机整合起来，共同提供服务，这就是分布式系统。接下来介绍分布式系统的定义、特点，以及分布式环境中存在的问题和挑战。</p>
<a id="more"></a>

<h2 id="分布式系统定义"><a href="#分布式系统定义" class="headerlink" title="分布式系统定义"></a>分布式系统定义</h2><p>在《分布式系统概念与设计》一书中，对分布式系统做了 如下定义：</p>
<blockquote>
<p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>
</blockquote>
<p>也就是说一个分布式系统中的计算机在空间部署上可以是<strong>随意分布</strong>的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。这些计算机之间<strong>通过网络来通信</strong>。</p>
<h2 id="分布式的特点"><a href="#分布式的特点" class="headerlink" title="分布式的特点"></a>分布式的特点</h2><p>分布式系统有如下体征：</p>
<h3 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h3><p>分布式系统中的多台计算机在空间上随意分步。当然，机器的分布情况也会随时变动。</p>
<h3 id="对等性"><a href="#对等性" class="headerlink" title="对等性"></a>对等性</h3><p>分布式系统中的计算机没有主/从之分，既没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是<strong>对等的</strong>。</p>
<h3 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h3><p>一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，比如数据库或分布式存储等。如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战。</p>
<h3 id="缺乏全局时钟"><a href="#缺乏全局时钟" class="headerlink" title="缺乏全局时钟"></a>缺乏全局时钟</h3><p>在分布式系统中，<strong>很难定义两个事件究竟谁先谁后</strong>，原因就是分布式系统缺乏一个全局的时钟控制序列。</p>
<h3 id="故障总是会发生"><a href="#故障总是会发生" class="headerlink" title="故障总是会发生"></a>故障总是会发生</h3><p>组成分布式系统的所有计算机，都有可能发生任何形式的故障。实践表明，在分布式系统中，计算机发生故障是比较常见的。因此，在分布式系统设计时，必须考虑到该问题。</p>
<h2 id="分布式环境的各种问题"><a href="#分布式环境的各种问题" class="headerlink" title="分布式环境的各种问题"></a>分布式环境的各种问题</h2><p>分布式系统体系结构从其出现之初就伴随着诸多的难题和挑战，本节介绍分布式系统中的一些典型的问题。</p>
<h3 id="通信异常"><a href="#通信异常" class="headerlink" title="通信异常"></a>通信异常</h3><p>分布式系统中个计算机之间是通过网络进行通信的。由于<strong>网络本身的不可靠性</strong>，每次网络通信都会伴随着网络不可用的风险。即使分布式系统各节点之间的网络通信能够正常进行，其延时也会远远大于单机操作。在分布式系统中，<strong>消息延时和消息丢失非常普遍</strong>。</p>
<h3 id="网络分区"><a href="#网络分区" class="headerlink" title="网络分区"></a>网络分区</h3><p>当网络发生异常情况，可能导致分布式系统中某些节点之间能够正常通信，而某些节点之间无法通信——该现象就是网络分区，就是俗称的『脑裂』。当网络分区出现时，分布式系统就会出现局部小集群，小集群内计算机可以相互通信，小集群之间计算机无法通信。这就对分布式一致性提出了非常大的挑战。</p>
<h3 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h3><p>因为在分布式系统中，网络可能会出现各式各样的问题，因此分布式系统的每一次请求和响应，存在特有的『三态』概念，即<strong>成功、失败与超时</strong>。在传统的单机系统中，应用程序在调用一个函数之后，能够得到一个非常明确的相应：成功或失败。而在分布式系统中，由于网络是不可靠的，当网络出现异常的情况下，就可能出现超时现象，发生消息丢失现象。</p>
<h3 id="节点故障"><a href="#节点故障" class="headerlink" title="节点故障"></a>节点故障</h3><p>节点故障是分布式环境下一个比较常见的问题，指的是组成分布式系统的服务器节点出现宕机或『僵死』现象。通常根据经验来说，每个节点都有可能出现故障，并且每天都在发生。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 关键字 static 、final 总结]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%20%E5%85%B3%E9%94%AE%E5%AD%97%20static%20%E3%80%81final%20%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>static 和 final 是 Java 里两个关键字，在此对它们的用法做个总结。</p>
<a id="more"></a>

<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>被 static 修饰的域或方法属于类，独立于具体的对象。通过类名就可以直接调用，不需要实例化。访问时直接用<code>类名.static 域</code>和<code>类名.static 方法</code>即可。</p>
<p><strong>static 域：</strong></p>
<p>如果将域定义为 static ，每个类中只有一个这样的域。该类的所有对象都共享该 static 域。</p>
<p><strong>static 方法：</strong></p>
<p>static 方法可以通过类名直接调用，该类的任何对象也可以调用（但不推荐）。</p>
<ol>
<li>static 方法不能使用 this 和 super 关键字。</li>
<li>static 方法只能访问 static 域，不能访问实例域，因为实例域是与特定的对象相关联的。</li>
<li>static 方法必须被实现，而不能是 abstract 方法。</li>
</ol>
<p>以下两种情况可以考虑使用 static 方法：</p>
<ol>
<li>一个方法不需要访问对象状态，所需参数都是通过显示参数提供（如：Math.pow）</li>
<li>一个方法只需访问类的 static 域。</li>
</ol>
<p><strong>static 代码块：</strong></p>
<p>static 代码块，是在类中独立于类成员的 static 语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM 加载类时会执行这些静态的代码块，如果 static 代码块有多个，JVM 将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。所有 static 代码块都在 main 方法之前执行。</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final 可以修饰域、方法和类。</p>
<p><strong>final 域：</strong></p>
<p>被 final 修饰的域是常量，值一旦给定就无法改变。</p>
<p><strong>final 方法：</strong></p>
<p>如果某个类不允许其子类覆盖某个方法，可以将该方法声明为 final 方法。</p>
<p>使用 final 方法有两个原因：</p>
<ol>
<li>防止子类覆盖该方法，修改它的意义和实现。</li>
<li>提高效率。编译器遇到 final 方法就会使用内联机制。</li>
</ol>
<p><strong>final 类：</strong></p>
<p>final 类不能被继承。final 类中的方法自动成为 final 方法，因为不能被继承，也就不会被覆盖。</p>
<p>使用 final 类和 final 方法的目的都是为了确保它们不会在子类中改变语义。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>http://linbingdong.com/2017/03/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>记录 Git 常用的命令。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>git init</td>
<td>初始化git仓库</td>
</tr>
<tr>
<td>git add filename</td>
<td>将文件添加到暂存区</td>
</tr>
<tr>
<td>git commit -m “blablabla…”</td>
<td>提交到本地仓库</td>
</tr>
<tr>
<td>git push origin master</td>
<td>将本地master分支推到远程</td>
</tr>
<tr>
<td>git status</td>
<td>查看那些文件被修改过</td>
</tr>
<tr>
<td>git diff</td>
<td>查看修改内容</td>
</tr>
<tr>
<td>git reset –hard HEAD^</td>
<td>回到某个版本 （HEAD表示当前版本（已commit的最新版本），HEAD^表示上一个版本，HEAD^^表示上上个版本，依此类推）</td>
</tr>
<tr>
<td>git log –oneline</td>
<td>查看提交历史（–oneline 简洁地打印提交历史）</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看命令历史，包括commit和reset等</td>
</tr>
<tr>
<td>git diff HEAD – readme.txt</td>
<td>查看工作区和版本库里最新版本的区别</td>
</tr>
<tr>
<td>git checkout – filename</td>
<td>撤销工作区中对该文件的修改 让该文件回到最近一次 commit 或 add 时的状态</td>
</tr>
<tr>
<td>git rm  filename</td>
<td>从版本库中删除文件</td>
</tr>
<tr>
<td>git reset HEAD filename</td>
<td>把暂存区对该文件的修改撤销掉（unstage），重新放回工作区</td>
</tr>
<tr>
<td>git branch</td>
<td>查看分支</td>
</tr>
<tr>
<td>git branch branchname</td>
<td>创建分支</td>
</tr>
<tr>
<td>git checkout branchname</td>
<td>切换分支</td>
</tr>
<tr>
<td>git checkout -b branchname</td>
<td>创建并切换分支</td>
</tr>
<tr>
<td>git merge branchname</td>
<td>将<name>分支合并到当前分支</name></td>
</tr>
<tr>
<td>git branch -d branchname</td>
<td>删除分支</td>
</tr>
<tr>
<td>git log –graph –oneline</td>
<td>分支合并图</td>
</tr>
<tr>
<td>git merge –no-ff -m “describe something” dev</td>
<td>跟dev合并，不使用ff，然后提交</td>
</tr>
<tr>
<td>git stash</td>
<td>把工作现场“储存”起来，等以后恢复现场再继续工作</td>
</tr>
<tr>
<td>git stash list</td>
<td>查看“储存”的工作现场</td>
</tr>
<tr>
<td>git stash pop</td>
<td>恢复工作现场并把stash内容删除  相当于 git stash apply stash@{0};git stash drop stash@{0}</td>
</tr>
<tr>
<td>git branch -D branchname</td>
<td>将没有被merge过的<name>分支强制删除</name></td>
</tr>
<tr>
<td>git remote</td>
<td>查看远程仓库信息</td>
</tr>
<tr>
<td>git remote -v</td>
<td>显示更详细的远程仓库信息</td>
</tr>
<tr>
<td>git push origin master</td>
<td>把本地该分支推送到远程库对应的远程分支上。如果推送失败，先用 git pull 拉取最新的再 git push</td>
</tr>
<tr>
<td>git checkout -b brahch-name origin/branch-name</td>
<td>在本地创建和远程分支对应的分支</td>
</tr>
<tr>
<td>git branch –set-upstream branch-name origin/branch-name</td>
<td>建立本地分支和远程分支的关联</td>
</tr>
<tr>
<td>git tag v1.0</td>
<td>打上v1.0标签，默认打在最新提交的commit上</td>
</tr>
<tr>
<td>git tag</td>
<td>查看所有标签</td>
</tr>
<tr>
<td>git tag v0.9 9c4ef20</td>
<td>为 9c4ef20 这次commit打上v0.9标签</td>
</tr>
<tr>
<td>git show v0.9</td>
<td>查看标签（显示具体的commit内容）</td>
</tr>
<tr>
<td>git tag -a <tagname> -m “blablabla…”</tagname></td>
<td>可以指定标签信息</td>
</tr>
<tr>
<td>git tag -d v0.1</td>
<td>删除v0.1标签</td>
</tr>
<tr>
<td>git push origin v1.0</td>
<td>推送v1.0标签到远程 ，对应github上的一个release</td>
</tr>
<tr>
<td>git push origin –tags</td>
<td>推送本地所有标签到远程</td>
</tr>
<tr>
<td>git tag -d v0.9 ; git push origin :refs/tags/v0.9</td>
<td>删除远程v0.9标签</td>
</tr>
<tr>
<td>git config –global color.ui true</td>
<td>设置让git显示颜色</td>
</tr>
<tr>
<td>git add -f xxx.pyc</td>
<td>强制添加被忽略的文件</td>
</tr>
<tr>
<td>git check-ignore -v xxx.pyc</td>
<td>查看该文件是被哪一条规则忽略的</td>
</tr>
<tr>
<td>git config –global alias.st status</td>
<td>设置status的别名为st</td>
</tr>
</tbody></table>
<ul>
<li><p>如果要忽略某些文件（比如.pyc文件），可以通过添加.gitignore文件来实现（写上 *.pyc）。.gitignore文件也需要 add 和 commit。</p>
</li>
<li><p>常用别名：</p>
<ul>
<li>git config –global alias.ci commit</li>
<li>git config –global alias.st status</li>
<li>git config –global alias.br branch</li>
<li>git config –global alias.unstage ‘reset HEAD’</li>
<li>git config –global alias.last ‘log -1’</li>
<li>git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit” </li>
</ul>
</li>
</ul>
<ul>
<li>如果想从版本库里删除某个文件：<ol>
<li>rm filename</li>
<li>git rm filename</li>
<li>git commit </li>
</ol>
</li>
</ul>
<ul>
<li>在本地新建一个仓库<ol>
<li>git init 初始化本地仓库</li>
<li>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:linbingdong/blog.git 关联一个远程库</li>
<li>git push -u origin master 第一次推送master分支的所有内容<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ol>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中System.arraycopy()和Arrays.copyOf()的区别]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E4%B8%ADSystem.arraycopy()%E5%92%8CArrays.copyOf()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>先看看System.arraycopy()的声明：</p>
<pre><code>public static native void arraycopy(Object src,int srcPos, Object dest, int destPos,int length);`</code></pre><a id="more"></a>

<p>src - 源数组。<br>srcPos - 源数组中的起始位置。<br>dest - 目标数组。<br>destPos - 目标数据中的起始位置。<br>length - 要复制的数组元素的数量。</p>
<p>该方法用了native关键字，说明调用的是其他语言写的底层函数。</p>
<p>再看Arrays.copyOf()</p>
<pre><code>public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) {
   @SuppressWarnings(&quot;unchecked&quot;)    
   T[] copy = ((Object)newType == (Object)Object[].class)?(T[]) new Object[newLength]:(T[])    
   Array.newInstance(newType.getComponentType(), newLength);System.arraycopy(original,0, copy,0,                       
   Math.min(original.length, newLength));    
   return copy;
}</code></pre><p>该方法对应不同的数据类型都有各自的重载方法<br>original - 要复制的数组<br>newLength - 要返回的副本的长度<br>newType - 要返回的副本的类型<br>仔细观察发现，copyOf()内部调用了System.arraycopy()方法</p>
<h3 id="区别在于："><a href="#区别在于：" class="headerlink" title="区别在于："></a>区别在于：</h3><ol>
<li>arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置</li>
<li>copyOf()是系统自动在内部新建一个数组，调用arraycopy()将original内容复制到copy中去，并且长度为newLength。返回copy; 即将原数组拷贝到一个长度为newLength的新数组中，并返回该数组。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Array.copyOf()可以看作是受限的System.arraycopy(),它主要是用来将原数组全部拷贝到一个新长度的数组，适用于数组扩容。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纠删码（Erasure Code）浅析]]></title>
      <url>http://linbingdong.com/2017/03/11/%E7%BA%A0%E5%88%A0%E7%A0%81%EF%BC%88Erasure%20Code%EF%BC%89%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>【摘要】：副本策略和纠删码是存储领域常见的两种数据冗余技术。相比于副本策略，纠删码具有更高的磁盘利用率。 Reed-Solomon码是一种常见的纠删码。</p>
<a id="more"></a>

<p>多副本策略即将数据存储多个副本（一般是三副本，比如HDFS），当某个副本丢失时，可以通过其他副本复制回来。三副本的磁盘利用率为1/3。</p>
<p>纠删码技术主要是通过纠删码算法将原始的数据进行编码得到冗余，并将数据和冗余一并存储起来，以达到容错的目的。其基本思想是将n块原始的数据元素通过一定的计算，得到m块冗余元素（校验块）。对于这n+m块的元素，当其中任意的m块元素出错（包括原始数据和冗余数据）时，均可以通过对应的重构算法恢复出原来的n块数据。生成校验的过程被成为编码（encoding），恢复丢失数据块的过程被称为解码（decoding）。磁盘利用率为n/(n+m)。基于纠删码的方法与多副本方法相比具有冗余度低、磁盘利用率高等优点。</p>
<p>两种冗余技术对比如下表：</p>
<table>
<thead>
<tr>
<th align="center">两种技术</th>
<th align="center">磁盘利用率</th>
<th align="center">计算开销</th>
<th align="center">网络消耗</th>
<th align="center">恢复效率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">多副本(3副本)</td>
<td align="center">1/3</td>
<td align="center">几乎没有</td>
<td align="center">较低</td>
<td align="center">较高</td>
</tr>
<tr>
<td align="center">纠删码(n+m)</td>
<td align="center">n/(n+m)</td>
<td align="center">高</td>
<td align="center">较高</td>
<td align="center">较低</td>
</tr>
</tbody></table>
<h2 id="Reed-Solomon-RS-码"><a href="#Reed-Solomon-RS-码" class="headerlink" title="Reed-Solomon(RS)码"></a>Reed-Solomon(RS)码</h2><p>Reed-Solomon（RS）码是存储系统较为常用的一种纠删码，它有两个参数n和m，记为RS(n,m)。n代表原始数据块个数。m代表校验块个数。接下来介绍RS码的原理。</p>
<h2 id="RS码原理"><a href="#RS码原理" class="headerlink" title="RS码原理"></a>RS码原理</h2><p>以n=5，m=3为例。即5个原始数据块，乘上一个(n+m)*n的矩阵，然后得出一个(n+m)*1的矩阵。根据矩阵特点可以得知结果矩阵中前面5个值与原来的5个数据块的值相等，而最后3个则是计算出来的校验块。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-cc930e9d848ee224.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>以上过程为编码过程。D是原始数据块，得到的C为校验块。</p>
<p>假设丢失了m块数据。如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-feb8c76af3c7bab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="丢失m块"></p>
<p>那我们如何从剩余的n个数据块（注意，这里剩余的n块可能包含几个原始数据块+几个校验块）恢复出来原始的n个数据块呢，就需要通过下面的decoding（解码）过程来实现。</p>
<p>第一步：从编码矩阵中删去丢失数据块和丢失编码块对应行。 将删掉m个块的(n+m)*1个矩阵变形为n*1矩阵，同时B矩阵也需要删掉对应的m个行得出一个B’的变形矩阵，这个B’就是n*n矩阵。如下：假设D1、D4、C2丢失，我们得到如下B’矩阵及等式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7ddc3f3071489be9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vandermode矩阵"></p>
<p>第二步：求出B’的逆矩阵。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b5d966cd6cb3866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B’逆矩阵"></p>
<p>第三步：等式两边分别乘上B’的逆矩阵。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-03509dcf17c0a358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两边乘上B’逆矩阵"></p>
<p>B’和它的逆矩阵相乘得到单位矩阵I，如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-565e7d41f929107c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单位矩阵"></p>
<p>左边只剩下原始数据矩阵D：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-225afb1b2353ae9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>至此完成解码过程。</p>
<p>注：图中黄色部分为范德蒙矩阵。至于如何生成B矩阵，以及如何求B’的逆矩阵，请查看其他相关文献，这里不再赘述。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>RS的特点：</p>
<ul>
<li>低冗余度，高磁盘利用率。</li>
<li>数据恢复代价高。 丢失数据块或者编码块时， RS需要读取n个数据块和校验块才能恢复数据， 数据恢复效率也在一定程度上制约了RS的可靠性。</li>
<li>数据更新代价高。 数据更新相当于重新编码， 代价很高， 因此常常针对只读数据，或者冷数据。</li>
</ul>
<p>工程实践中，一般对于热数据还是会使用多副本策略来冗余，冷数据使用纠删码。</p>
<p>值得期待的是，纠删码技术也即将在Hadoop 3.0中发布。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>论文《Erasure Codes for Storage Applications》</li>
<li>论文《存储系统中纠删码研究综述》<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 纠删码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> 数据冗余 </tag>
            
            <tag> 纠删码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-观察者模式]]></title>
      <url>http://linbingdong.com/2017/03/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>观察者模式又叫发布/订阅模式。</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>观察者模式</strong>定义了对象之间的一对多依赖，使得当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。观察者模式又叫<strong>发布/订阅模式</strong>。</p>
<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul>
<li><p><strong>抽象主题（Subject）</strong>：它把所有观察者对象的引用保存到一个列表里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p>
</li>
<li><p><strong>具体主题（ConcreteSubject）</strong>：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p>
</li>
<li><p><strong>抽象观察者（Observer）</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p>
</li>
<li><p><strong>具体观察者（ConcreteObserver）</strong>：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p>
</li>
</ul>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-8946e89856251d45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="观察者模式"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以<strong>猎头-求职者</strong>为例。猎头是主题，求职者是观察者。</p>
<p>Subject 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Observer 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HeadHunter 类实现 Subject 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadHunter</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Observer&gt; userList;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;String&gt; jobs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeadHunter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userList = <span class="keyword">new</span> LinkedList&lt;Observer&gt;();</span><br><span class="line">        jobs = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        userList.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        userList.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o: userList) &#123;</span><br><span class="line">            o.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        jobs.add(job);</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;String&gt; <span class="title">getJobs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobs.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JobSeeker 类实现 Observer 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobSeeker</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JobSeeker</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject s)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">" got notified!"</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HeadHunter hh = <span class="keyword">new</span> HeadHunter();</span><br><span class="line"></span><br><span class="line">        JobSeeker lbd = <span class="keyword">new</span> JobSeeker(<span class="string">"lbd"</span>);</span><br><span class="line">        JobSeeker lbx = <span class="keyword">new</span> JobSeeker(<span class="string">"lbx"</span>);</span><br><span class="line">        JobSeeker lbn = <span class="keyword">new</span> JobSeeker(<span class="string">"lbn"</span>);</span><br><span class="line">        JobSeeker lbb = <span class="keyword">new</span> JobSeeker(<span class="string">"lbb"</span>);</span><br><span class="line"></span><br><span class="line">        hh.registerObserver(lbd);</span><br><span class="line">        hh.registerObserver(lbx);</span><br><span class="line">        hh.registerObserver(lbn);</span><br><span class="line">        hh.registerObserver(lbb);</span><br><span class="line">        hh.removeObserver(lbb);</span><br><span class="line"></span><br><span class="line">        hh.addJob(<span class="string">"looking for Java engineers"</span>);</span><br><span class="line">        hh.addJob(<span class="string">"looking for Python engineers"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lbd got notified!</span><br><span class="line">[looking for Java engineers]</span><br><span class="line">lbx got notified!</span><br><span class="line">[looking for Java engineers]</span><br><span class="line">lbn got notified!</span><br><span class="line">[looking for Java engineers]</span><br><span class="line">lbd got notified!</span><br><span class="line">[looking for Java engineers, looking for Python engineers]</span><br><span class="line">lbx got notified!</span><br><span class="line">[looking for Java engineers, looking for Python engineers]</span><br><span class="line">lbn got notified!</span><br><span class="line">[looking for Java engineers, looking for Python engineers]</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式使主题和观察者之间松耦合，松耦合的设计能够让我们建立有弹性的OO系统，能够应对变化，因为对象之间的相互依赖降到了最低。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>上面的例子是观察者模式的“推”模式，还有一种“拉”模式。</li>
<li>Java 的 java.util 库里面，提供了一个 Observable 类以及一个 Observer 接口，构成 Java 语言对观察者模式的支持。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Comparable与Comparator的区别]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E4%B8%ADComparable%E4%B8%8EComparator%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h2><ul>
<li>Comparable和Comparator都是用来实现对象的比较、排序</li>
<li>要想对象比较、排序，都需要实现Comparable或Comparator接口</li>
<li>Comparable和Comparator都是Java的接口</li>
</ul>
<a id="more"></a> 

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>Comparator位于java.util包下，而Comparable位于java.lang包下</li>
<li>Comparable接口的实现是在类的内部（如 String、Integer已经实现了Comparable接口，自己就可以完成比较大小操作），Comparator接口的实现是在类的外部（可以理解为一个是自已完成比较，一个是外部程序实现比较）</li>
<li>实现Comparable接口要重写compareTo方法, 在compareTo方法里面实现比较</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student implements Comparable &#123;</span><br><span class="line">     String name;</span><br><span class="line">     int age</span><br><span class="line">     public int compareTo(Student another) &#123;</span><br><span class="line">          int i = 0;</span><br><span class="line">          i = name.compareTo(another.name); </span><br><span class="line">          if(i == 0) &#123; </span><br><span class="line">               return age - another.age;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">               return i; </span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">   这时我们可以直接用 Collections.sort( StudentList ) 对其排序了.(</span><br><span class="line">   **只需传入要排序的列表**）</span><br></pre></td></tr></table></figure>

<ul>
<li>实现Comparator需要重写 compare 方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student&#123;</span><br><span class="line">     String name;</span><br><span class="line">     int age</span><br><span class="line">&#125;</span><br><span class="line">class StudentComparator implements Comparator &#123; </span><br><span class="line">     public int compare(Student one, Student another) &#123;</span><br><span class="line">          int i = 0;</span><br><span class="line">          i = one.name.compareTo(another.name); </span><br><span class="line">          if(i == 0) &#123; </span><br><span class="line">               return one.age - another.age;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">               return i;          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">   Collections.sort( StudentList , new StudentComparator()) 可以对其排序（</span><br><span class="line">   **不仅要传入待排序的列表，还要传入实现了Comparator的类的对象**）</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>如果比较的方法只要用在一个类中，用该类实现Comparable接口就可以。</p>
</li>
<li><p>如果比较的方法在很多类中需要用到，就自己写个类实现Comparator接口，这样当要比较的时候把实现了Comparator接口的类传过去就可以，省得重复造轮子。这也是为什么Comparator会在java.util包下的原因。<br>使用Comparator的优点是：1.与实体类分离 2.方便应对多变的排序规则</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop YARN介绍]]></title>
      <url>http://linbingdong.com/2017/03/11/Hadoop%20YARN%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>YARN是Hadoop集群的资源管理系统。Hadoop2.0对MapReduce框架做了彻底的设计重构。YARN的基本设计思想是将MRv1中的JobTracker拆分成了两个独立的服务：一个<strong>全局的资源管理器ResourceManager</strong>和<strong>每个应用程序特有的ApplicationMaster</strong>。其中ResourceManager负责整个系统的<strong>资源管理和分配</strong>，而ApplicationMaster负责<strong>单个应用程序的管理</strong>。</p>
<a id="more"></a>

<h2 id="YARN产生背景"><a href="#YARN产生背景" class="headerlink" title="YARN产生背景"></a>YARN产生背景</h2><h3 id="MRv1的局限"><a href="#MRv1的局限" class="headerlink" title="MRv1的局限"></a>MRv1的局限</h3><p>YARN是在MRv1基础上演化而来的，它克服了MRv1中的各种局限性。在正式介绍YARN之前，先了解下MRv1的一些局限性，主要有以下几个方面：</p>
<ul>
<li><strong>扩展性差</strong>。在MRv1中，<strong>JobTracker</strong>同时兼备了<strong>资源管理</strong>和<strong>作业控制</strong>两个功能，这成为系统的一个最大瓶颈，严重制约了Hadoop集群扩展性。</li>
<li><strong>可靠性差</strong>。MRv1采用了<strong>master/slave</strong>结构，其中，master存在<strong>单点故障</strong>问题，一旦它出现故障将导致整个集群不可用。</li>
<li><strong>资源利用率低</strong>。MRv1采用了<strong>基于槽位</strong>的资源分配模型，槽位是一种<strong>粗粒度</strong>的资源划分单位，通常一个任务不会用完槽位对应的资源，且其他任务也无法使用这些空闲资源。此外，Hadoop将槽位分为Map Slot和Reduce Slot两种，且不允许它们之间共享，常常会导致一种槽位资源紧张而另外一种闲置（比如一个作业刚刚提交时，只会运行Map Task，此时Reduce Slot闲置）。</li>
<li><strong>无法支持多种计算框架</strong>。随着互联网高速发展，MapReduce这种基于磁盘的离线计算框架已经不能满足应用要求，从而出现了一些新的计算框架，包括<strong>内存计算框架、流式计算框架和迭代式计算框架等</strong>，而MRv1不能支持多种计算框架并存。</li>
</ul>
<p>为了克服以上几个缺点，Apache开始尝试对Hadoop进行升级改造，进而诞生了更加先进的下一代MapReduce计算框架MRv2。正是由于MRv2将<strong>资源管理功能</strong>抽象成了一个独立的通用系统YARN，直接导致下一代MapReduce的核心从单一的计算框架MapReduce转移为通用的资源管理系统YARN。</p>
<h3 id="集群资源统一管理"><a href="#集群资源统一管理" class="headerlink" title="集群资源统一管理"></a>集群资源统一管理</h3><p>随着互联网的高速发展，新的计算框架不断出现，从支持离线处理的MapReduce，到支持在线处理的Storm，从迭代式计算框架Spark到流式处理框架S4，各种框架各有所长，各自解决了某一类应用问题。这时候就需要一个组件对同一个集群上的不同计算框架进行资源的统一管理。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a895d67381e80a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN"></p>
<p>相比于“一种计算框架一个集群”的模式，共享集群的模式存在多种好处：</p>
<ul>
<li><strong>资源利用率高</strong>。如果每个框架一个集群，可能在某段时间内，有些计算框架的集群资源紧张，而另外一些集群资源空闲。共享集群模式则通过多种框架共享资源，使得集群中的资源得到更加充分的利用。</li>
<li><strong>运维成本低</strong>。如果采用“一个框架一个集群”的模式，则可能需要多个管理员管理这些集群，进而增加运维成本，而共享模式通常需要少数管理员即可完成多个框架的统一管理。</li>
<li><strong>数据共享</strong>。随着数据量的暴增，跨集群间的数据移动不仅需花费更长的时间，且硬件成本也会大大增加，而共享集群模式可让多种框架共享数据和硬件资源，将大大减小数据移动带来的成本。</li>
</ul>
<h2 id="YARN基本设计思想"><a href="#YARN基本设计思想" class="headerlink" title="YARN基本设计思想"></a>YARN基本设计思想</h2><p>MRv1主要由<strong>编程模型、数据处理引擎（由Map Task和Reduce Task组成）和运行时环境</strong>三部分组成。为了保证编程模型的向后兼容性，MRv2重用了MRv1中的编程模型和数据处理引擎，但运行时环境被完全重写。</p>
<p>MRv1的运行时环境主要由两类服务组成，分别是JobTracker和TaskTracker。其中，JobTracker负责<strong>资源管理</strong>和<strong>作业控制</strong>。TaskTracker负责<strong>单个节点</strong>的<strong>资源管理和任务执行</strong>。</p>
<p>MRv1将资源管理和应用程序管理两部分混杂在一起，使得它在扩展性、容错性和多框架支持等方面存在明显缺陷。</p>
<p>而MRv2则通过将资源管理和应用程序管理两部分剥离开，分别由ResourceManager和ApplicationMaster负责，其中ResourceManager专管资源管理和调度，而ApplicationMaster则负责与具体应用程序相关的任务切分、任务调度和容错等，具体如下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3bb6aa683a1c3f29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="YARN基本架构"><a href="#YARN基本架构" class="headerlink" title="YARN基本架构"></a>YARN基本架构</h2><p>YARN是Hadoop 2.0中的资源管理系统，它的基本设计思想是将MRv1中的JobTracker拆分成了两个独立的服务：一个<strong>全局的资源管理器ResourceManager</strong>和<strong>每个应用程序特有的ApplicationMaster</strong>。其中ResourceManager负责整个系统的<strong>资源管理和分配</strong>，而ApplicationMaster负责<strong>单个应用程序的管理</strong>。</p>
<p>YARN总体上仍然是Master/Slave结构，在整个资源管理框架中，ResourceManager为Master，NodeManager为Slave，ResourceManager负责对各个NodeManager上的资源进行统一管理和调度。当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的ApplicationMaster，它负责向ResourceManager申请资源，并要求NodeManger启动可以占用一定资源的任务。由于不同的ApplicationMaster被分布到不同的节点上，因此它们之间不会相互影响。</p>
<p>下图描述了YARN的基本组成结构，YARN主要由ResourceManager、NodeManager、ApplicationMaster（图中给出了MapReduce和MPI两种计算框架的ApplicationMaster，分别为MR AppMstr和MPI AppMstr）和Container等几个组件构成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e8cca9823e3db77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN基本架构"></p>
<p>接下来对YARN里几个重要的组件一一介绍。</p>
<h3 id="1-ResourceManager-RM"><a href="#1-ResourceManager-RM" class="headerlink" title="1. ResourceManager(RM)"></a>1. ResourceManager(RM)</h3><p>RM是一个全局的资源管理器,负责整个系统的资源管理和分配。它主要由两个组件构成：<strong>调度器</strong>（Scheduler）和<strong>应用程序管理器</strong>（Applications Manager，ASM）。</p>
<p>（1）调度器（分配Container）</p>
<p>调度器根据容量、队列等限制条件（如每个队列分配一定的资源，最多执行一定数量的作业等），将系统中的资源分配给各个正在运行的应用程序。需要注意的是，该调度器是一个“纯调度器”，它不再从事任何与具体应用程序相关的工作，比如不负责监控或者跟踪应用的执行状态等，也不负责重新启动因应用执行失败或者硬件故障而产生的失败任务，这些均交由应用程序相关的ApplicationMaster完成。调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位用一个抽象概念“资源容器”（Resource Container，简称Container）表示，Container是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。此外，该调度器是一个可插拔的组件，用户可根据自己的需要设计新的调度器，YARN提供了多种直接可用的调度器，比如Fair Scheduler和Capacity Scheduler等。</p>
<p>（2）应用程序管理器</p>
<p>应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重新启动它等。</p>
<h3 id="2-ApplicationMaster（AM）"><a href="#2-ApplicationMaster（AM）" class="headerlink" title="2. ApplicationMaster（AM）"></a>2. ApplicationMaster（AM）</h3><p>用户提交的每个应用程序均包含一个AM，主要功能包括：</p>
<ul>
<li>与RM调度器协商以获取资源（以Container表示）</li>
<li>将得到的任务进一步分配给内部的任务</li>
<li>与NM通信以启动/停止任务</li>
<li>监控所有任务运行状态，并在任务失败时重新为任务申请资源以重启任务</li>
</ul>
<h3 id="3-NodeManager（NM）"><a href="#3-NodeManager（NM）" class="headerlink" title="3. NodeManager（NM）"></a>3. NodeManager（NM）</h3><p>NM是每个节点上的资源和任务管理器。一方面，它定时地向RM汇报本节点的资源使用情况和Container运行状态；另一方面，它接受并处理来自AM的Container启动/停止等各种请求。</p>
<h3 id="4-Container"><a href="#4-Container" class="headerlink" title="4. Container"></a>4. Container</h3><p>Container是YARN中的资源抽象，它封装了某个节点上的多维资源，如CPU、内存、磁盘、网络等。当AM向RM申请资源时，RM向AM返回的资源便是用Container表示的。YARN会为每个任务分配一个Container，且该任务只能使用该Container中描述的资源。Container是一个动态资源划分单位，是根据应用程序的需求自动生成的。目前，YARN仅支持CPU和内存两种资源。</p>
<h2 id="YARN工作流程"><a href="#YARN工作流程" class="headerlink" title="YARN工作流程"></a>YARN工作流程</h2><p>运行在YARN上的应用程序主要分为两类：短应用程序和长应用程序。其中，短应用程序是指一定时间内可运行完成并正常退出的应用程序，如MapReduce作业、Spark DAG作业等。长应用程序是指不出意外，永不终止运行的应用程序，通常是一些服务，比如Storm Service（包括Nimbus和Supervisor两类服务），HBase Service（包括HMaster和RegionServer两类服务）等，而它们本身作为一种框架提供编程接口供用户使用。尽管这两类应用程序作业不同，一类直接运行数据处理程序，一类用于部署服务（服务之上再运行数据处理程序），但运行在YARN上的流程是相同的。</p>
<p>当用户向YARN中提交一个应用程序后，YARN将分两个阶段运行该应用程序：第一阶段是启动ApplicationMaster。第二阶段是由ApplicationMaster创建应用程序，为它申请资源，并监控它的整个运行过程，直到运行完成。具体如下：</p>
<ol>
<li>用户向YARN中提交应用程序，其中包括ApplicationMaster程序、启动ApplicationMaster的命令、用户程序等。</li>
<li>ResourceManager为该应用程序分配第一个Container，并与对应的NodeManager通信，要求它在这个Container中启动应用程序的ApplicationMaster。</li>
<li>ApplicationMaster首先向ResourceManager注册，这样用户就可以直接通过ResourceManager查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运行状态，直到运行结束，即重复步骤4~7。</li>
<li>ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。</li>
<li>一旦ApplicationMaster申请到资源后，便与对应的NodeManager通信，要求它启动任务。</li>
<li>NodeManager为任务设置好运行环境（包括环境变量、JAR包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li>
<li>各个任务通过某个RPC协议向ApplicationMaster汇报自己的状态和进度，以让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。</li>
<li>应用程序运行完成后，ApplicationMaster向ResourceManager注销并关闭自己。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fdc8b62896158e92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN工作流程"><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> YARN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> YARN </tag>
            
            <tag> Hadoop </tag>
            
            <tag> 资源管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全球分布式数据库：Google Spanner（论文翻译）]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%85%A8%E7%90%83%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9AGoogle%20Spanner%EF%BC%88%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文由厦门大学计算机系教师林子雨翻译，翻译质量很高，本人只对极少数翻译得不太恰当的地方进行了修改。</p>
<p>【摘要】Spanner 是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。它是第一个把数据分布在全球范围内的系统，并且支持外部一致性的分布式事务。本文描述了 Spanner 的架构、特性、不同设计决策的背后机理和一个新的时间 API，这个 API 可以暴露时钟的不确定性。这个 API 及其实现，对于支持外部一致性和许多强大特性而言，是非常重要的，这些强大特性包括:非阻塞的读、不采用锁机制的只读事务、原子模式变更。</p>
<a id="more"></a>

<p>【关键词】Google Spanner, Bigtable, distributed database</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>Spanner 是一个可扩展的、全球分布式的数据库，是在谷歌公司设计、开发和部署的。</p>
<p>在最高抽象层面，Spanner 就是一个数据库，把数据分片存储在许多 Paxos[21]状态机上，这些机器位于遍布全球的数据中心内。复制技术可以用来服务于全球可用性和地理局部性。客户端会自动在副本之间进行失败恢复。随着数据的变化和服务器的变化，Spanner 会自动把数据进行重新分片，从而有效应对负载变化和处理失败。Spanner 被设计成可以扩展到几百万个机器节点，跨越成百上千个数据中心，具备几万亿数据库行的规模。</p>
<p>应用可以借助于 Spanner 来实现高可用性，通过在一个洲的内部和跨越不同的洲之间复制数据，保证即使面对大范围的自然灾害时数据依然可用。我们最初的客户是 F1[35]，一个谷歌广告后台的重新编程实现。F1 使用了跨越美国的 5 个副本。绝大多数其他应用很可能会在属于同一个地理范围内的 3-5 个数据中心内放置数据副本，采用相对独立的失败模式。也就是说，许多应用都会首先选择低延迟，而不是高可用性，只要系统能够从 1-2 个数据中心失败中恢复过来。</p>
<p>Spanner 的主要工作，就是管理跨越多个数据中心的数据副本，但是，在我们的分布式系统体系架构之上设计和实现重要的数据库特性方面，我们也花费了大量的时间。尽管有许多项目可以很好地使用 BigTable[9]，我们也不断收到来自客户的抱怨，客户反映 BigTable 无法应用到一些特定类型的应用上面，比如具备复杂可变的模式，或者对于在大范围内分布的多个副本数据具有较高的一致性要求。其他研究人员也提出了类似的抱怨[37]。谷歌的许多应用已经选择使用 Megastore[5]，主要是因为它的半关系数据模型和对同步复制的支持，尽管 Megastore 具备较差的写操作吞吐量。由于上述多个方面的因素，Spanner 已经从一个类似 BigTable 的单一版本的键值存储，演化成为一个具有时间属性的多版本的数据库。数据被存储到模式化的、半关系的表中，数据被版本化，每个版本都会自动以提交时间作为时间戳，旧版本的数据会更容易被垃圾回收。应用可以读取旧版本的数据。Spanner 支持通用的事务，提供了基于 SQL 的查询语言。</p>
<p>作为一个全球分布式数据库，Spanner 提供了几个有趣的特性:第一，在数据的副本配置方面，应用可以在一个很细的粒度上进行动态控制。应用可以详细规定，哪些数据中心包含哪些数据，数据距离用户有多远(控制用户读取数据的延迟)，不同数据副本之间距离有多远(控制写操作的延迟)，以及需要维护多少个副本(控制可用性和读操作性能)。数据也可以被动态和透明地在数据中心之间进行移动，从而平衡不同数据中心内资源的使用。第二， Spanner 有两个重要的特性，很难在一个分布式数据库上实现，即 Spanner 提供了读和写操作的外部一致性，以及在一个时间戳下面的跨越数据库的全球一致性的读操作。这些特性使得 Spanner 可以支持一致的备份、一致的 MapReduce 执行[12]和原子模式变更，所有都是在全球范围内实现，即使存在正在处理中的事务也可以。</p>
<p>之所以可以支持这些特性，是因为 Spanner 可以为事务分配全球范围内有意义的提交时间戳，即使事务可能是分布式的。这些时间戳反映了事务序列化的顺序。除此以外，这些序列化的顺序满足了外部一致性的要求:如果一个事务 T1 在另一个事务 T2 开始之前就已经提交了，那么，T1 的时间戳就要比 T2 的时间戳小。Spanner 是第一个可以在全球范围内提供这种保证的系统。</p>
<p>实现这种特性的关键技术就是一个新的 TrueTime API 及其实现。这个 API 可以直接暴露时钟不确定性，Spanner 时间戳的保证就是取决于这个 API 实现的界限。如果这个不确定性很大，Spanner 就降低速度来等待这个大的不确定性结束。谷歌的簇管理器软件提供了一个 TrueTime API 的实现。这种实现可以保持较小的不确定性(通常小于 10ms)，主要是借助于现代时钟参考值(比如 GPS 和原子钟)。</p>
<p>第 2 部分描述了 Spanner 实现的结构、特性集和工程方面的决策;第 3 部分介绍我们的新的 TrueTime API，并且描述了它的实现;第 4 部分描述了 Spanner 如何使用 TrueTime 来实现外部一致性的分布式事务、不用锁机制的只读事务和原子模式更新。第 5 部分提供了测试 Spanner 性能和 TrueTime 行为的测试基准，并讨论了 F1 的经验。第 6、7 和 8 部分讨论了相关工作，并给出总结。</p>
<h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h2><p>本部分内容描述了 Spanner 的结构和背后的实现机理，然后描述了目录抽象，它被用来管理副本和局部性，并介绍了数据的转移单位。最后，将讨论我们的数据模型，从而说明为什么 Spanner 看起来更加像一个关系数据库，而不是一个键值数据库;还会讨论应用如何可以控制数据的局部性。</p>
<p>一个 Spanner 部署称为一个 universe。假设 Spanner 在全球范围内管理数据，那么，将会只有可数的、运行中的 universe。我们当前正在运行一个测试用的 universe，一个部署/线上用的 universe 和一个只用于线上应用的 universe。</p>
<p>Spanner 被组织成许多个 zone 的集合，每个 zone 都大概像一个 BigTable 服务器的部署。 zone 是管理部署的基本单元。zone 的集合也是数据可以被复制到的位置的集合。当新的数据中心加入服务，或者老的数据中心被关闭时，zone 可以被加入到一个运行的系统中，或者从中移除。zone 也是物理隔离的单元，在一个数据中心中，可能有一个或者多个 zone， 例如，当属于不同应用的数据必须被分区存储到同一个数据中心的不同服务器集合中时，一个数据中心就会有多个 zone 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8d4d85a54036697f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<p>图 1 显示了在一个 Spanner 的 universe 中的服务器。一个 zone 包括一个 zonemaster， 和一百至几千个 spanserver。Zonemaster 把数据分配给 spanserver，spanserver 把数据提供给客户端。客户端使用每个 zone 上面的 location proxy 来定位可以为自己提供数据的 spanserver。Universe master 和 placement driver，当前都只有一个。Universe master 主要是一个控制台，它显示了关于 zone 的各种状态信息，可以用于相互之间的调试。Placement driver 会周期性地与 spanserver 进行交互，来发现那些需要被转移的数据，或者是为了满足新的副本约束条件，或者是为了进行负载均衡。</p>
<h3 id="2-1-Spanserver-软件栈"><a href="#2-1-Spanserver-软件栈" class="headerlink" title="2.1 Spanserver 软件栈"></a>2.1 Spanserver 软件栈</h3><p>本部分内容主要关注 spanserver 实现，来解释复制和分布式事务是如何被架构到我们的基于 BigTable 的实现之上的。图 2 显示了软件栈。在底部，每个 spanserver 负载管理 100-1000 个称为 tablet 的数据结构的实例。一个 tablet 就类似于 BigTable 中的 tablet，也实现了下面的映射: (key:string, timestamp:int64)-&gt;string</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b99c0dffe8361eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p>与 BigTable 不同的是，Spanner 会把时间戳分配给数据，这种非常重要的方式，使得 Spanner 更像一个多版本数据库，而不是一个键值存储。一个 tablet 的状态是存储在类似于 B-树的文件集合和写前(write-ahead)的日志中，所有这些都会被保存到一个分布式的文件系统中，这个分布式文件系统被称为 Colossus，它继承自 Google File System。</p>
<p>为了支持复制，每个 spanserver 会在每个 tablet 上面实现一个单个的 Paxos 状态机。一个之前实现的Spanner 可以支持在每个 tablet 上面实现多个 Paxos 状态机器，它可以允许更加灵活的复制配置，但是，这种设计过于复杂，被我们舍弃了。每个状态机器都会在相应的 tablet 中保存自己的元数据和日志。我们的 Paxos 实现支持长寿命的领导者（采用基于时间的领导者租约），时间通常在 0 到 10 秒之间。当前的 Spanner 实现中，会对每个 Paxos 写操作进行两次记录:一次是写入到 tablet 日志中，一次是写入到 Paxos 日志中。这种做法只是权宜之计，我们以后会进行完善。我们在 Paxos 实现上采用了管道化的方式，从而可以在存在广域网延迟时改进 Spanner 的吞吐量，但是，Paxos 会把写操作按照顺序的方式执行。</p>
<p>Paxos 状态机是用来实现一系列被一致性复制的映射。每个副本的键值映射状态，都会被保存到相应的 tablet 中。写操作必须在领导者上初始化 Paxos 协议，读操作可以直接从底层的任何副本的 tablet 中访问状态信息，只要这个副本足够新。副本的集合被称为一个 Paxos group。</p>
<p>对于每个是领导者的副本而言，每个 spanserver 会实现一个锁表来实现并发控制。这个锁表包含了两阶段锁机制的状态:它把键的值域映射到锁状态上面。注意，采用一个长寿命的 Paxos 领导者，对于有效管理锁表而言是非常关键的。在 BigTable 和 Spanner 中，我们都专门为长事务做了设计，比如，对于报表操作，可能要持续几分钟，当存在冲突时，采用乐观并发控制机制会表现出很差的性能。对于那些需要同步的操作，比如事务型的读操作，需要获得锁表中的锁，而其他类型的操作则可以不理会锁表。</p>
<p>对于每个扮演领导者角色的副本，每个 spanserver 也会实施一个事务管理器来支持分布式事务。这个事务管理器被用来实现一个 participant leader，该组内的其他副本则是作为 participant slaves。如果一个事务只包含一个 Paxos 组(对于许多事务而言都是如此)，它就可以绕过事务管理器，因为锁表和 Paxos 二者一起可以保证事务性。如果一个事务包含了多 于一个 Paxos 组，那些组的领导者之间会彼此协调合作完成两阶段提交。其中一个参与者组，会被选为协调者，该组的 participant leader 被称为 coordinator leader，该组的 participant slaves 被称为 coordinator slaves。每个事务管理器的状态，会被保存到底层的 Paxos 组。</p>
<h3 id="2-2-目录和放置"><a href="#2-2-目录和放置" class="headerlink" title="2.2 目录和放置"></a>2.2 目录和放置</h3><p>在一系列键值映射的上层，Spanner 实现支持一个被称为“目录”的桶抽象，也就是包含公共前缀的连续键的集合。(选择“目录”作为名称，主要是由于历史沿袭的考虑，实际 上更好的名称应该是“桶”)。我们会在第 2.3 节解释前缀的源头。对目录的支持，可以让应用通过选择合适的键来控制数据的局部性。</p>
<p>一个目录是数据放置的基本单元。属于一个目录的所有数据，都具有相同的副本配置。 当数据在不同的 Paxos 组之间进行移动时，会一个目录一个目录地转移，如图 3 所示。Spanner 可能会移动一个目录从而减轻一个 Paxos 组的负担，也可能会把那些被频繁地一起访问的目录都放置到同一个组中，或者会把一个目录转移到距离访问者更近的地方。当客户端操作正在进行时，也可以进行目录的转移。我们可以预期在几秒内转移 50MB 的目录。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-192ba58099b34f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p>
<p>一个 Paxos 组可以包含多个目录，这意味着一个 Spanner tablet 是不同于一个 BigTable tablet 的。一个 Spanner tablet 没有必要是一个行空间内按照词典顺序连续的分区，相反，它可以是行空间内的多个分区。我们做出这个决定，是因为这样做可以让多个被频繁一起访问的目录被整合到一起。</p>
<p>Movedir 是一个后台任务，用来在不同的 Paxos 组之间转移目录[14]。Movedir 也用来为 Paxos 组增加和删除副本[25]，因为 Spanner 目前还不支持在一个 Paxos 内部进行配置的变更。 Movedir 并不是作为一个事务来实现，这样可以避免在一个块数据转移过程中阻塞正在进行的读操作和写操作。相反，Movedir 会注册一个事实(fact)，表明它要转移数据，然后在后台运行转移数据。当它几乎快要转移完指定数量的数据时，就会启动一个事务来自动转移那部分数据，并且为两个 Paxos 组更新元数据。</p>
<p>一个目录也是一个应用可以指定的地理复制属性(即放置策略)的最小单元。我们的放置规范语言的设计，把管理复制的配置这个任务单独分离出来。管理员需要控制两个维度: 副本的数量和类型，以及这些副本的地理放置属性。他们在这两个维度里面创建了一个命名 选项的菜单。通过为每个数据库或单独的目录增加这些命名选项的组合，一个应用就可以控制数据的复制。例如，一个应用可能会在自己的目录里存储每个终端用户的数据，这就有可能使得用户 A 的数据在欧洲有三个副本，用户 B 的数据在北美有 5 个副本。</p>
<p>为了表达的清晰性，我们已经做了尽量简化。事实上，当一个目录变得太大时，Spanner 会把它分片存储。每个分片可能会被保存到不同的 Paxos 组上(因此就意味着来自不同的服 务器)。Movedir 在不同组之间转移的是分片，而不是转移整个目录。</p>
<h3 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h3><p>Spanner 会把下面的数据特性集合暴露给应用:基于模式化的半关系表的数据模型，查询语言和通用事务。支持这些特性的动机，是受到许多因素驱动的。需要支持模式化的半关系表是由 Megastore[5]的普及来支持的。在谷歌内部至少有 300 个应用使用 Megastore(尽 管它具有相对低的性能)，因为它的数据模型要比 BigTable 简单，更易于管理，并且支持在跨数据中心层面进行同步复制。BigTable 只可以支持跨数据中心的最终事务一致性。使用 Megastore 的著名的谷歌应用是 Gmail,Picasa,Calendar,Android Market, AppEngine。在 Spanner 中需要支持 SQL 类型的查询语言，也很显然是非常必要的，因为 Dremel[28]作为交互式分析工具已经非常普及。最后，在 BigTable 中跨行事务的缺乏来导致了用户频繁的抱怨; Percolator[32]的开发就是用来部分解决这个问题的。一些作者都在抱怨，通用的两阶段提交的代价过于昂贵，因为它会带来可用性问题和性能问题[9][10][19]。我们认为，最好让应用 程序开发人员来处理由于过度使用事务引起的性能问题，而不是总是围绕着“缺少事务”进 行编程。在 Paxos 上运行两阶段提交弱化了可用性问题。</p>
<p>应用的数据模型是架构在被目录桶装的键值映射层之上。一个应用会在一个 universe 中创建一个或者多个数据库。每个数据库可以包含无限数量的模式化的表。每个表都和关系数据库表类似，具备行、列和版本值。我们不会详细介绍 Spanner 的查询语言，它看起来很像 SQL，只是做了一些扩展。</p>
<p>Spanner 的数据模型不是纯粹关系型的，它的行必须有名称。更准确地说，每个表都需 要有包含一个或多个主键列的排序集合。这种需求，让 Spanner 看起来仍然有点像键值存储: 主键形成了一个行的名称，每个表都定义了从主键列到非主键列的映射。当一个行存在时，必须要求已经给行的一些键定义了一些值(即使是 NULL)。采用这种结构是很有用的，因为这可以让应用通过选择键来控制数据的局部性。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c784a00321761682.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p>
<p>图 4 包含了一个 Spanner 模式的实例，它是以每个用户和每个相册为基础存储图片元数据。这个模式语言和 Megastore 的类似，同时增加了额外的要求，即每个 Spanner 数据库必 须被客户端分割成一个或多个表的层次结构(hierarchy)。客户端应用会使用 INTERLEAVE IN 语句在数据库模式中声明这个层次结构。这个层次结构上面的表，是一个目录表。目录表中的每行都具有键 K，和子孙表中的所有以 K 开始(以字典顺序排序)的行一起，构成了一个目录。ON DELETE CASCADE 意味着，如果删除目录中的一个行，也会级联删除所有相关的子孙行。这个图也解释了这个实例数据库的交织层次(interleaved layout)，例如 Albums(2,1) 代表了来自 Albums 表的、对应于 user_id=2 和 album_id=1 的行。这种表的交织层次形成目录，是非常重要的，因为它允许客户端来描述存在于多个表之间的位置关系，这对于一个分片的分布式数据库的性能而言是很重要的。没有它的话，Spanner 就无法知道最重要的位置关系。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-d1557f77c3323255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表1"></p>
<p>本部分内容描述 TrueTime API，并大概给出它的实现方法。我们把大量细节内容放在另一篇论文中，我们的目标是展示这种 API 的力量。表 1 列出了 API 的方法。TrueTime 会显式地把时间表达成 TTinterval，这是一个时间区间，具有有界限的时间不确定性(不像其他 的标准时间接口，没有为客户端提供―不确定性‖这种概念)。TTinterval 区间的端点是 TTstamp 类型。TT.now()方法会返回一个 TTinterval，它可以保证包含 TT.now()方法在调用时的绝对 时间。这个时间和具备闰秒涂抹(leap-second smearing)的 UNIX 时间一样。把即时误差边 界定义为 ε,平均误差边界为ε。TT.after()和 TT.before()方法是针对 TT.now()的便捷的包装器。</p>
<p>表示一个事件 e 的绝对时间，可以利用函数 tabs(e)。如果用更加形式化的术语，TrueTime 可以保证，对于一个调用 tt=TT.now()，有 tt.earliest≤tabs(enow)≤tt.latest，其中， enow 是调用的事件。</p>
<p>在底层，TrueTime 使用的时间是 GPS 和原子钟。TrueTime 使用两种类型的时间，是因为它们有不同的失败模式。GPS 参考时间的弱点是天线和接收器失效、局部电磁干扰和相关失败(比如设计上的缺陷导致无法正确处理闰秒和电子欺骗)，以及 GPS 系统运行中断。原子钟也会失效，不过失效的方式和 GPS 无关，不同原子钟之间的失效也没有彼此关联。 由于存在频率误差，在经过很长的时间以后，原子钟都会产生明显误差。</p>
<p>TrueTime 是由每个数据中心上面的许多 time master 机器和每台机器上的一个 timeslave daemon 来共同实现的。大多数 master 都有具备专用天线的 GPS 接收器，这些 master 在物理上是相互隔离的，这样可以减少天线失效、电磁干扰和电子欺骗的影响。剩余的 master (我们称为 Armageddon master)则配备了原子钟。一个原子钟并不是很昂贵:一个 Armageddon master 的花费和一个 GPS master 的花费是同一个数量级的。所有 master 的时间 参考值都会进行彼此校对。每个 master 也会交叉检查时间参考值和本地时间的比值，如果二者差别太大，就会把自己驱逐出去。在同步期间，Armageddon master 会表现出一个逐渐增加的时间不确定性，这是由保守应用的最差时钟漂移引起的。GPS master 表现出的时间不确定性几乎接近于 0。</p>
<p>每个 daemon 会从许多 master[29]中收集投票，获得时间参考值，从而减少误差。被选中的 master 中，有些 master 是 GPS master，是从附近的数据中心获得的，剩余的 GPS master 是从远处的数据中心获得的;还有一些是 Armageddon master。Daemon 会使用一个 Marzullo 算法[27]的变种，来探测和拒绝欺骗，并且把本地时钟同步到非撒谎 master 的时间参考值。 为了免受较差的本地时钟的影响，我们会根据组件规范和运行环境确定一个界限，如果机器的本地时钟误差频繁超出这个界限，这个机器就会被驱逐出去。</p>
<p>在同步期间，一个 daemon 会表现出逐渐增加的时间不确定性。ε 是从保守应用的最差 时钟漂移中得到的。ε 也取决于 time master 的不确定性，以及与 time master 之间的通讯延迟。在我们的线上应用环境中，ε 通常是一个关于时间的锯齿形函数。在每个投票间隔中， ε 会在 1 到 7ms 之间变化。因此，在大多数情况下，ε的值是 4ms。Daemon 的投票间隔，在当前是 30 秒，当前使用的时钟漂移比率是 200 微秒/秒，二者一起意味着 0 到 6ms 的锯齿形边界。剩余的 1ms 主要来自到 time master 的通讯延迟。在失败的时候，超过这个锯齿形边界也是有可能的。例如，偶尔的 time master 不确定性，可能会引起整个数据中心范围内的 ε 值的增加。类似的，过载的机器或者网络连接，都会导致 ε 值偶尔地局部增大。</p>
<h2 id="4-并发控制"><a href="#4-并发控制" class="headerlink" title="4 并发控制"></a>4 并发控制</h2><p>本部分内容描述 TrueTime 如何可以用来保证并发控制的正确性，以及这些属性如何用来实现一些关键特性，比如外部一致性的事务、无锁机制的只读事务、针对历史数据的非阻塞读。这些特性可以保证，在时间戳为 t 的时刻的数据库读操作，一定只能看到在 t 时刻之 前已经提交的事务。</p>
<p>进一步说，把 Spanner 客户端的写操作和 Paxos 看到的写操作这二者进行区分，是非常重要的，我们把 Paxos 看到的写操作称为 Paxos 写操作。例如，两阶段提交会为准备提交阶段生成一个 Paxos 写操作，这时不会有相应的客户端写操作。</p>
<h3 id="4-1-时间戳管理"><a href="#4-1-时间戳管理" class="headerlink" title="4.1 时间戳管理"></a>4.1 时间戳管理</h3><p>表 2 列出了 Spanner 支持的操作的类型。Spanner 可以支持读写事务、只读事务(预先声明的快照隔离事务)和快照读。独立写操作，会被当成读写事务来执行。非快照独立读操作，会被当成只读事务来执行。二者都是在内部进行 retry，客户端不用进行这种 retry loop。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-91fa02b85deaedff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表2"></p>
<p>一个只读事务具备快照隔离的性能优势[6]。一个只读事务必须事先被声明不会包含任何写操作，它并不是一个简单的不包含写操作的读写事务。在一个只读事务中的读操作，在执行时会采用一个系统选择的时间戳，不包含锁机制，因此，后面到达的写操作不会被阻塞。 在一个只读事务中的读操作，可以到任何足够新的副本上去执行(见第 4.1.3 节)。</p>
<p>一个快照读操作，是针对历史数据的读取，执行过程中，不需要锁机制。一个客户端可以为快照读确定一个时间戳，或者提供一个时间范围让 Spanner 来自动选择时间戳。不管是 哪种情况，快照读操作都可以在任何具有足够新的副本上执行。</p>
<p>对于只读事务和快照读而言，一旦已经选定一个时间戳，那么，提交就是不可避免的，除非在那个时间点的数据已经被垃圾回收了。因此，客户端不必在 retry loop 中缓存结果。 当一个服务器失效的时候，客户端就可以使用同样的时间戳和当前的读位置，在另外一个服务器上继续执行读操作。</p>
<h4 id="4-1-1-Paxos-领导者租约"><a href="#4-1-1-Paxos-领导者租约" class="headerlink" title="4.1.1 Paxos 领导者租约"></a>4.1.1 Paxos 领导者租约</h4><p>Spanner 的 Paxos 实现中使用了时间化的租约，来实现长时间的领导者地位(默认是 10秒)。一个潜在的领导者会发起请求，请求时间化的租约投票，在收到指定数量的投票后，这个领导者就可以确定自己拥有了一个租约。一个副本在成功完成一个写操作后，会隐式地延期自己的租约。对于一个领导者而言，如果它的租约快要到期了，就要显示地请求租约延期。另一个领导者的租约有个时间区间，这个时间区间的起点就是这个领导者获得指定数量的投票那一刻，时间区间的终点就是这个领导者失去指定数量的投票的那一刻(因为有些投 票已经过期了)。Spanner 依赖于下面这些“不连贯性”:对于每个 Paxos 组，每个 Paxos 领 导者的租约时间区间，是和其他领导者的时间区间完全隔离的。附录 A 显示了如何强制实现这些不连贯性。</p>
<p>Spanner 实现允许一个 Paxos 领导者通过把 slave 从租约投票中释放出来这种方式，实现领导者的退位。为了保持这种彼此隔离的不连贯性，Spanner 会对什么时候退位做出限制。把 smax 定义为一个领导者可以使用的最大的时间戳。在退位之前，一个领导者必须等到 TT.after(smax)是真。</p>
<h4 id="4-1-2-为读写事务分配时间戳"><a href="#4-1-2-为读写事务分配时间戳" class="headerlink" title="4.1.2 为读写事务分配时间戳"></a>4.1.2 为读写事务分配时间戳</h4><p>事务读和写采用两段锁协议。当所有的锁都已经获得以后，在任何锁被释放之前，就可以给事务分配时间戳。对于一个给定的事务，Spanner 会为事务分配时间戳，这个时间戳是 Paxos 分配给 Paxos 写操作的，它代表了事务提交的时间。</p>
<p>Spanner 依赖下面这些单调性:在每个 Paxos 组内，Spanner 会以单调增加的顺序给每个 Paxos 写操作分配时间戳，即使在跨越多个领导者时也是如此。一个单个的领导者副本，可以很容易地以单调增加的方式分配时间戳。在多个领导者之间就会强制实现彼此隔离的不连 贯:一个领导者必须只能分配属于它自己租约时间区间内的时间戳。要注意到，一旦一个时间戳 s 被分配，smax 就会被增加到 s，从而保证彼此隔离性(不连贯性)。</p>
<p>Spanner 也会实现下面的外部一致性:如果一个事务 T2 在事务 T1 提交以后开始执行， 那么，事务 T2 的时间戳一定比事务 T1 的时间戳大。对于一个事务 Ti 而言，定义开始和提交事件eistart和eicommit，事务提交时间为si。对外部一致性的要求就变成了:<br>tabs(e1commit )&lt;tabs(e2start ) s1&lt;s2。执行事务的协议和分配时间戳的协议，遵守两条规则，二者一起保证外部一致性。对于一个写操作 Ti 而言，担任协调者的领导者发出的提交请求的事件为eiserver 。</p>
<p><strong>Start.</strong> 为一个事务 Ti 担任协调者的领导者分配一个提交时间戳 si，不会小于 TT.now().latest 的值，TT.now().latest的值是在esierver事件之后计算得到的。要注意，担任参与者的领导者， 在这里不起作用。第 4.2.1 节描述了这些担任参与者的领导者是如何参与下一条规则的实现的。</p>
<p><strong>Commit Wait.</strong> 担任协调者的领导者，必须确保客户端不能看到任何被 Ti 提交的数据，直到 TT.after(si)为真。提交等待，就是要确保 si 会比 Ti 的绝对提交时间小。提交等待的实现在 4.2.1 节中描述。证明如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fff83c4dbdc512f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="证明"></p>
<h4 id="4-1-3-在某个时间戳下的读操作"><a href="#4-1-3-在某个时间戳下的读操作" class="headerlink" title="4.1.3 在某个时间戳下的读操作"></a>4.1.3 在某个时间戳下的读操作</h4><p>第 4.1.2 节中描述的单调性，使得 Spanner 可以正确地确定一个副本是否足够新，从而能够满足一个读操作的要求。每个副本都会跟踪记录一个值，这个值被称为安全时间 tsafe，它是一个副本最近更新后的最大时间戳。如果一个读操作的时间戳是 t，当满足 t&lt;=tsafe 时， 这个副本就可以被这个读操作读取。</p>
<p>。。。</p>
<h4 id="4-1-4-为只读事务分配时间戳"><a href="#4-1-4-为只读事务分配时间戳" class="headerlink" title="4.1.4 为只读事务分配时间戳"></a>4.1.4 为只读事务分配时间戳</h4><p>一个只读事务分成两个阶段执行:分配一个时间戳 sread[8]，然后当成 sread 时刻的快照读来执行事务读操作。快照读可以在任何足够新的副本上面执行。 </p>
<p>在一个事务开始后的任意时刻，可以简单地分配 sread=TT.now().latest，通过第 4.1.2 节中描述过的类似的方式来维护外部一致性。但是，对于时间戳 sread 而言，如果 tsafe 没有增加到足够大，可能需要对 sread 时刻的读操作进行阻塞。除此以外还要注意，选择一个 sread 的值可 能也会增加 smax 的值，从而保证不连贯性。为了减少阻塞的概率，Spanner 应该分配可以保持外部一致性的最老的时间戳。第 4.2.2 节描述了如何选择这种时间戳。</p>
<h3 id="4-2-细节"><a href="#4-2-细节" class="headerlink" title="4.2 细节"></a>4.2 细节</h3><p>这部分内容介绍一些读写操作和只读操作的实践细节，以及用来实现原子模式变更的特定事务的实现方法。然后，描述一些基本模式的细化。</p>
<h4 id="4-2-1-读写事务"><a href="#4-2-1-读写事务" class="headerlink" title="4.2.1 读写事务"></a>4.2.1 读写事务</h4><p>就像 Bigtable 一样，发生在一个事务中的写操作会在客户端进行缓存，直到提交。由此导致的结果是，在一个事务中的读操作，不会看到这个事务的写操作的结果。这种设计在 Spanner 中可以很好地工作，因为一个读操作可以返回任何数据读的时间戳，未提交的写操作还没有被分配时间戳。</p>
<p>在读写事务内部的读操作，使用伤停等待(wound-wait)[33]来避免死锁。客户端对位于合适组内的领导者副本发起读操作，需要首先获得读锁，然后读取最新的数据。当一个客户端事务保持活跃的时候，它会发送“保持活跃”信息，防止那些参与的领导者让该事务过时。当一个客户端已经完成了所有的读操作，并且缓冲了所有的写操作，它就开始两阶段提交。客户端选择一个协调者组，并且发送一个提交信息给每个参与的、具有协调者标识的领导者，并发送提交信息给任何缓冲的写操作。让客户端发起两阶段提交操作，可以避免在大范围连接内发送两次数据。</p>
<p>一个参与其中的、扮演非协调者角色的领导者，首先需要获得写锁。然后，它会选择一 个预备时间戳，这个时间戳应该比之前分配给其他事务的任何时间戳都要大(这样可以保持 单调性)，并且通过 Paxos 把准备提交记录写入日志。然后，每个参与者就把自己的准备时 间戳通知给协调者。</p>
<p>扮演协调者的领导者，也会首先获得写锁，但是，会跳过准备阶段。在从所有其他的、扮演参与者的领导者那里获得信息后，它就会为整个事务选择一个时间戳。这个提交时间戳 s 必须大于或等于所有的准备时间戳(这是为了满足第 4.1.3 节讨论的限制条件)，在协调者收到它的提交信息时，s 应该大于 TT.now().latest，并且 s 应该大于这个领导者为之前的其他 所有事务分配的时间戳(再次指出，这样做是为了满足单调性)。这个扮演协调者的领导者，就会通过 Paxos 在日志中写入一个提交记录(或者当等待其他参与者发生超时就在日志中写 入终止记录)。</p>
<p>在允许任何协调者副本去提交记录之前，扮演协调者的领导者会一直等待到 TT.after(s)， 从而可以保证遵循第 4.1.2 节中描述的提交等待规则。因为，扮演协调者的领导者会根据 TT.now().latest 来选择 s，而且必须等待直到那个时间戳可以确保成为过去，预期的等待时间 至少是 2*ε。这种等待时间通常会和 Paxos 通信时间发生重叠。在提交等待之后，协调者就会发送一个提交时间戳给客户端和所有其他参与的领导者。每个参与的领导者会通过 Paxos 把事务结果写入日志。所有的参与者会在同一个时间戳进行提交，然后释放锁。</p>
<h4 id="4-2-2-只读事务"><a href="#4-2-2-只读事务" class="headerlink" title="4.2.2 只读事务"></a>4.2.2 只读事务</h4><p>分配一个时间戳需要一个协商阶段，这个协商发生在所有参与到该读操作中的 Paxos 组之间。由此导致的结果是，Spanner 需要为每个只读事务提供一个 scope 表达式，它可以指出整个事务需要读取哪些键。对于单独的查询，Spanner 可以自动计算出 scope。</p>
<p>如果 scope 的值是由单个 Paxos 组来提供的，那么，客户端就会给那个组的领导者发起一个只读事务(当前的 Spanner 实现中，只会为 Paxos leader 中的只读事务选择一个时间戳)， 为那个领导者分配 sread 并且执行读操作。对于一个单个位置的读操作，Spanner 通常会比 TT.now().latest 做得更好。我们把 LastTS()定义为在 Paxos 组中最后提交的写操作的时间戳。如果没有准备提交的事务，这个分配到的时间戳 sread=LastTS()就很容易满足外部一致性要求: 这个事务将可以看见最后一个写操作的结果，然后排队排在它之后。</p>
<p>如果 scope 的值是由多个 Paxos 组来提供的，就会有几种选择。最复杂的选择就是，和所有组的领导者进行一轮沟通，大家根据 LastTS()进行协商得到 sread。Spanner 当前实现了一个更加简单的选择。这个选择可以避免一轮协商，让读操作在 sread=TT.now().latest 时刻去 执行(这可能会等待安全时间的增加)。这个事务中的所有读操作，可以被发送到任何足够 新的副本上执行。</p>
<h4 id="4-2-3-模式变更事务"><a href="#4-2-3-模式变更事务" class="headerlink" title="4.2.3 模式变更事务"></a>4.2.3 模式变更事务</h4><p>TrueTime 允许 Spanner 支持原子模式变更。使用一个标准的事务是不可行的，因为参与者的数量(即数据库中组的数量)可能达到几百万个。Bigtable 可以支持在一个数据中心内进行原子模式变更，但是，这个操作会阻塞所有其他操作。</p>
<p>一个 Spanner 模式变更事务通常是一个标准事务的、非阻塞的变种。首先，它会显式地分配一个未来的时间戳，这个时间戳会在准备阶段进行注册。由此，跨越几千个服务器的模式变更，可以在不打扰其他并发活动的前提下完成。其次，读操作和写操作，它们都是隐式地依赖于模式，它们都会和任何注册的模式变更时间戳t保持同步:当它们的时间戳小于 t 时， 读写操作就执行到时刻 t;当它们的时间戳大于时刻 t 时，读写操作就必须阻塞，在模式变更事务后面进行等待。如果没有 TrueTime，那么定义模式变更发生在 t 时刻，就变得毫无意义。</p>
<h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>我们对 Spanner 性能进行了测试，包括复制、事务和可用性。然后，我们提供了一些关于 TrueTime 的实验数据，并且提供了我们的第一个用例——F1。</p>
<h3 id="5-1-微测试基准"><a href="#5-1-微测试基准" class="headerlink" title="5.1 微测试基准"></a>5.1 微测试基准</h3><p>表 3 给出了一用于 Spanner 的微测试基准(microbenchmark)。这些测试是在分时机器上实现的:每个 spanserver 采用 4GB 内存和四核 CPU(AMD Barcelona 2200MHz)。客户端运行在单独的机器上。每个 zone 都包含一个 spanserver。客户端和 zone 都放在一个数据中心集合内，它们之间的网络距离不会超过 1ms。这种布局是很普通的，许多数据并不需要把数 据分散存储到全球各地)。测试数据库具有 50 个 Paxos 组和 2500 个目录。操作都是独立的 4KB 大小的读和写。All reads were served out of memory after a compaction，从而使得我们只需要衡量 Spanner 调用栈的开销。此外，还会进行一轮读操作，来预热任何位置的缓存。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-33a9fed361528086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表3"></p>
<p>对于延迟实验而言，客户端会发起足够少量的操作，从而避免在服务器中发生排队。从 1 个副本的实验中，提交等待大约是 5ms，Paxos 延迟大约是 9ms。随着副本数量的增加， 延迟大约保持不变，只具有很少的标准差，因为在一个组的副本内，Paxos 会并行执行。随着副本数量的增加，获得指定投票数量的延迟对一个 slave 副本的慢速度不会很敏感。</p>
<p>对于吞吐量的实验而言，客户端发起足够数量的操作，从而使得 CPU 处理能力达到饱和。快照读操作可以在任何足够新的副本上进行，因此，快照读的吞吐量会随着副本的数量增加而线性增加。单个读的只读事务，只会在领导者上执行，因为，时间戳分配必须发生在领导者上。只读事务吞吐量会随着副本数量的增加而增加，因为有效的 spanserver 的数量会增加:在这个实验的设置中，spanserver 的数量和副本的数量相同，领导者会被随机分配到不同的 zone。写操作的吞吐量也会从这种实验设置中获得收益(副本从 3 变到 5 时写操作吞吐量增加了，就能够说明这点)，但是，随着副本数量的增加，每个写操作执行时需要完 成的工作量也会线性增加，这就会抵消前面的收益。</p>
<p>表 4 显示了两阶段提交可以扩展到合理数量的参与者:它是对一系列实验的总结，这些实验运行在 3 个 zone 上，每个 zone 具有 25 个 spanserver。扩展到 50 个参与者，无论在平均值还是第 99 个百分位方面，都是合理的。在 100 个参与者的情形下，延迟开发明显增加。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-af28b8aae8f19b90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表4"></p>
<h3 id="5-2-可用性"><a href="#5-2-可用性" class="headerlink" title="5.2 可用性"></a>5.2 可用性</h3><p>图 5 显示了在多个数据中心运行 Spanner 时的可用性方面的收益。它显示了三个吞吐量实验的结果，并且存在数据中心失败的情形，所有三个实验结果都被重叠放置到一个时间轴 上。测试用的 universe 包含 5 个 zone Zi，每个 zone 都拥有 25 个 spanserver。测试数据库被 分片成 1250 个 Paxos 组，100 个客户端不断地发送非快照读操作，累积速率是每秒 50K 个读操作。所有领导者都会被显式地放置到 Z1。每个测试进行 5 秒钟以后，一个 zone 中的所有服务器都会被“杀死”:non-leader 杀掉 Z2，leader-hard 杀掉 Z1，leader-soft 杀掉 Z1，但是，它会首先通知所有服务器它们将要交出领导权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-dd9e29a622ba99b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p>
<p>杀掉 Z2 对于读操作吞吐量没有影响。杀掉 Z1，给领导者一些时间来把领导权交给另一个 zone 时，会产生一个小的影响:吞吐量会下降，不是很明显，大概下降 3-4%。另一方面，没有预警就杀掉 Z1 有一个明显的影响:完成率几乎下降到 0。随着领导者被重新选择，系统的吞吐量会增加到大约每秒 100K 个读操作，主要是由于我们的实验设置:系统中有额外的能力，当找不到领导者时操作会排队。由此导致的结果是，系统的吞吐量会增加直到到达 系统恒定的速率。</p>
<p>我们可以看看把 Paxos 领导者租约设置为 10ms 的效果。当我们杀掉这个 zone，对于这 个组的领导者租约的过期时间，会均匀地分布到接下来的 10 秒钟内。来自一个死亡的领导者的每个租约一旦过期，就会选择一个新的领导者。大约在杀死时间过去 10 秒钟以后，所有的组都会有领导者，吞吐量就恢复了。短的租约时间会降低服务器死亡对于可用性的影响， 但是，需要更多的更新租约的网络通讯开销。我们正在设计和实现一种机制，它可以在领导者失效的时候，让 slave 释放 Paxos 领导者租约。</p>
<h3 id="5-3-TrueTime"><a href="#5-3-TrueTime" class="headerlink" title="5.3 TrueTime"></a>5.3 TrueTime</h3><p>关于 TrueTime，必须回答两个问题: ε 是否就是时钟不确定性的边界? ε 会变得多糟糕? 对于第一个问题，最严峻的问题就是，如果一个局部的时钟漂移大于 200us/sec，那就会破坏 TrueTime 的假设。我们的机器统计数据显示，坏的 CPU 的出现概率要比坏的时钟出现概率大 6 倍。也就是说，与更加严峻的硬件问题相比，时钟问题是很少见的。由此，我们也相信，TrueTime 的实现和 Spanner 其他软件组件一样，具有很好的可靠性，值得信任。</p>
<p>图 6 显示了 TrueTime 数据，是从几千个 spanserver 中收集的，这些 spanserver 跨越了多 个数据中心，距离 2200 公里以上。图中描述了 ε 的第 90 个、99 个和 99.9 个百分位的情况， 是在对 timemaster 进行投票后立即对 timeslave daemon 进行样本抽样的。这些抽样数据没有考虑由于时钟不确定性带来的 ε 值的锯齿，因此测量的是 timemaster 不确定性(通常是 0) 再加上通讯延迟。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-49c27db6c77575a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p>
<p>图 6 中的数据显示了，在决定 ε 的基本值方面的上述两个问题，通常都不会是个问题。 但是，可能会存在明显的拖尾延迟问题，那会引起更高的 ε 值。图中，3 月 30 日拖尾延迟的降低，是因为网络的改进，减少了瞬间网络连接的拥堵。在 4 月 13 日 ε 的值增加了，持续了大约 1 个小时，主要是因为例行维护时关闭了两个 time master。我们会继续调研并且消除引起 TrueTime 突变的因素。</p>
<h3 id="5-4-F1"><a href="#5-4-F1" class="headerlink" title="5.4 F1"></a>5.4 F1</h3><p>Spanner 在 2011 年早期开始进行在线负载测试，它是作为谷歌广告后台 F1[35]的重新实现的一部分。这个后台最开始是基于 MySQL 数据库，在许多方面都采用手工数据分区。未 经压缩的数据可以达到几十 TB，虽然这对于许多 NoSQL 实例而言数据量是很小的，但是， 对于采用数据分区的 MySQL 而言，数据量是非常大的。MySQL 的数据分片机制，会把每个客户和所有相关的数据分配给一个固定的分区。这种布局方式，可以支持针对单个客户的 索引构建和复杂查询处理，但是，需要了解一些商业知识来设计分区。随着客户数量的增长， 对数据进行重新分区，代价是很大的。最近一次的重新分区，花费了两年的时间，为了降低风险，在多个团队之间进行了大量的合作和测试。这种操作太复杂了，无法常常执行，由此导致的结果是，团队必须限制 MySQL 数据库的增长，方法是，把一些数据存储在外部的 Bigtable 中，这就会牺牲事务和查询所有数据的能力。</p>
<p>F1 团队选择使用 Spanner 有几个方面的原因。首先，Spanner 不需要手工分区。其次， Spanner 提供了同步复制和自动失败恢复。在采用 MySQL 的 master-slave 复制方法时，很难进行失败恢复，会有数据丢失和当机的风险。再次，F1 需要强壮的事务语义，这使得使用 其他 NoSQL 系统是不实际的。应用语义需要跨越任意数据的事务和一致性读。F1 团队也需要在他们的数据上构建二级索引(因为 Spanner 没有提供对二级索引的自动支持)，也有能力使用 Spanner 事务来实现他们自己的一致性全球索引。</p>
<p>所有应用写操作，现在都是默认从 F1 发送到 Spanner。而不是发送到基于 MySQL 的应 用栈。F1 在美国的西岸有两个副本，在东岸有三个副本。这种副本位置的选择，是为了避免发生自然灾害时出现服务停止问题，也是出于前端应用的位置的考虑。实际上，Spanner 的失败自动恢复，几乎是不可见的。在过去的几个月中，尽管有不在计划内的机群失效，但是，F1 团队最需要做的工作仍然是更新他们的数据库模式，来告诉 Spanner 在哪里放置 Paxos 领导者，从而使得它们尽量靠近应用前端。</p>
<p>Spanner 时间戳语义，使得它对于 F1 而言，可以高效地维护从数据库状态计算得到的、放在内存中的数据结构。F1 会为所有变更都维护一个逻辑历史日志，它会作为每个事务的 一部分写入到 Spanner。F1 会得到某个时间戳下的数据的完整快照，来初始化它的数据结构， 然后根据数据的增量变化来更新这个数据结构。</p>
<p>表 5 显示了 F1 中每个目录的分片数量的分布情况。每个目录通常对应于 F1 上的应用栈中的一个用户。绝大多数目录(同时意味着绝大多数用户)都只会包含一个分片，这就意味着，对于这些用户数据的读和写操作只会发生在一个服务器上。多于 100 个分片的目录，是那些包含 F1 二级索引的表:对这些表的多个分片进行写操作，是极其不寻常的。F1 团队也只是在以事务的方式进行未经优化的批量数据加载时，才会碰到这种情形。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-62166c5ae9be1b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5"></p>
<p>表 6 显示了从 F1 服务器来测量的 Spanner 操作的延迟。在东海岸数据中心的副本，在 选择 Paxos 领导者方面会获得更高的优先级。表 6 中的数据是从这些数据中心的 F1 服务器 上测量得到的。写操作延迟分布上存在较大的标准差，是由于锁冲突引起的肥尾效应(fat tail)。在读操作延迟分布上存在更大的标准差，部分是因为 Paxos 领导者跨越了两个数据中心，只有其中的一个是采用了固态盘的机器。此外，测试内容还包括系统中的每个针对两个 数据中心的读操作:字节读操作的平均值和标准差分别是 1.6KB 和 119KB。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-36bcff0bc7b0fbc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表6"></p>
<h2 id="6-相关工作"><a href="#6-相关工作" class="headerlink" title="6. 相关工作"></a>6. 相关工作</h2><p>Megastore[5]和 DynamoDB[3]已经提供了跨越多个数据中心的一致性复制。DynamoDB 提供了键值存储接口，只能在一个 region 内部进行复制。Spanner 和 Megastore 一样，都提供了半关系数据模型，甚至采用了类似的模式语言。Megastore 无法活动高性能。Megastore 是架构在 Bigtable 之上，这带来了很高的通讯代价。Megastore 也不支持长寿命的领导者， 多个副本可能会发起写操作。来自不同副本的写操作，在 Paxos 协议下一定会发生冲突，即使他们不会发生逻辑冲突:会严重影响吞吐量，在一个 Paxos 组内每秒钟只能执行几个写操作。Spanner 提供了更高的性能，通用的事务和外部一致性。</p>
<p>Pavlo 等人[31]对数据库和 MapReduce[12]的性能进行了比较。他们指出了几个努力的方向，可以在分布式键值存储之上充分利用数据库的功能[1][4][7][41]，二者可以实现充分的融合。我们比较赞同这个结论，并且认为集成多个层是具有优势的:把复制和并发控制集成起来，可以减少 Spanner 中的提交等待代价。</p>
<p>在一个采用了复制的存储上面实现事务，可以至少追述到 Gifford 的论文[16]。Scatter[17] 是一个最近的基于 DHT 的键值存储，可以在一致性复制上面实现事务。Spanner 则要比 Scatter 在更高的层次上提供接口。Gray 和 Lamport[18]描述了一个基于 Paxos 的非阻塞的提交协议，他们的协议会比两阶段提交协议带来更多的代价，而两阶段提交协议在大范围分布 式的组中的代价会进一步恶化。Walter[36]提供了一个快照隔离的变种，但是无法跨越数据中心。相反，我们的只读事务提供了一个更加自然的语义，因为我们对于所有的操作都支持外部语义。</p>
<p>最近，在减少或者消除锁开销方面已经有大量的研究工作。Calvin[40]消除了并发控制: 它会重新分配时间戳，然后以时间戳的顺序执行事务。HStore[39]和 Granola[11]都支持自己的事务类型划分方法，有些事务类型可以避免锁机制。但是，这些系统都无法提供外部一致性。Spanner 通过提供快照隔离，解决了冲突问题。</p>
<p>VoltDB[42]是一个分片的内存数据库，可以支持在大范围区域内进行主从复制，支持灾难恢复，但是没有提供通用的复制配置方法。它是一个被称为 NewSQL 的实例，这是实现 可扩展的 SQL[38]的强大的市场推动力。许多商业化的数据库都可以支持历史数据读取，比如 Marklogic[26]和 Oracle’ Total Recall[30]。Lomet 和 Li[24]对于这种时间数据库描述了一种 实现策略。</p>
<p>Faresite 给出了与一个受信任的时钟参考值相关的时钟不确定性的边界[13](要比 TrueTime 更加宽松):Farsite 中的服务器租约的方式，和 Spanner 中维护 Paxos 租约的方式 相同。在之前的工作中[2][23]，宽松同步时钟已经被用来进行并发控制。我们已经展示了 TrueTime 可以从 Paxos 状态机集合中推导出全球时间。</p>
<h2 id="7-未来的工作"><a href="#7-未来的工作" class="headerlink" title="7. 未来的工作"></a>7. 未来的工作</h2><p>在过去一年的大部分时间里，我们都是 F1 团队一起工作，把谷歌的广告后台从 MySQL 迁移到 Spanner。我们正在积极改进它的监控和支撑工具，同时在优化性能。此外，我们已经开展了大量工作来改进备份恢复系统的功能和性能。我们当前正在实现 Spanner 模式语言，自动维护二级索引和自动基于负载的分区。在未来，我们会调研更多的特性。以最优化的方式并行执行读操作，是我们追求的有价值的策略，但是，初级阶段的实验表明，实现这个目标比较艰难。此外，我们计划最终可以支持直接变更 Paxos 配置[22]34]。</p>
<p>我们希望许多应用都可以跨越数据中心进行复制，并且这些数据中心彼此靠近。 TrueTime ε 可能会明显影响性能。把 ε 值降低到 1ms 以内，并不存在不可克服的障碍。 Time-master-query 间隔可以继续减少，Time-master-query 延迟应该随着网络的改进而减少， 或者通过采用分时技术来避免延迟。</p>
<p>最后，还有许多有待改进的方面。尽管 Spanner 在节点数量上是可扩展的，但是与节点相关的数据结构在复杂的 SQL 查询上的性能相对较差，因为，它们是被设计成服务于简单的键值访问的。来自数据库文献的算法和数据结构，可以极大改进单个节点的性能。另外，根据客户端负载的变化，在数据中心之间自动转移数据，已经成为我们的一个目标，但是，为了有效实现这个目标，我们必须具备在数据中心之间自动、协调地转移客户端应用进程的能力。转移进程会带来更加困难的问题——如何在数据中心之间管理和分配资源。</p>
<h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>总的来说，Spanner 对来自两个研究群体的概念进行了结合和扩充:一个是数据库研究群体，包括熟悉易用的半关系接口，事务和基于 SQL 的查询语言;另一个是系统研究群体，包括可扩展性，自动分区，容错，一致性复制，外部一致性和大范围分布。自从 Spanner 概念成形，我们花费了 5 年以上的时间来完成当前版本的设计和实现。花费这么长的时间，一部分原因在于我们慢慢意识到，Spanner 不应该仅仅解决全球复制的命名空间问题，而且也应该关注 Bigtable 中所丢失的数据库特性。</p>
<p>我们的设计中一个亮点特性就是 TrueTime。我们已经表明，在时间 API 中明确给出时钟不确定性，可以以更加强壮的时间语义来构建分布式系统。此外，因为底层的系统在时钟不确定性上采用更加严格的边界，实现更强壮的时间语义的代价就会减少。作为一个研究群体，我们在设计分布式算法时，不再依赖于弱同步的时钟和较弱的时间 API。</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>许多人帮助改进了这篇论文:Jon Howell，Atul Adya, Fay Chang, Frank Dabek, Sean Dorward, Bob Gruber, David Held, Nick Kline, Alex Thomson, and Joel Wein. 我们的管理层对于我们的工作和论文发表都非常支持:Aristotle Balogh, Bill Coughran, Urs H ̈olzle, Doron Meyer, Cos Nicolaou, Kathy Polizzi, Sridhar Ramaswany, and Shivakumar Venkataraman.</p>
<p>我们的工作是在Bigtable和Megastore团队的工作基础之上开展的。F1团队，尤其是Jeff Shute ，和我们一起工作，开发了数据模型，跟踪性能和纠正漏洞。Platforms团队，尤其是Luiz Barroso 和Bob Felderman，帮助我们一起实现了TrueTime。最后，许多谷歌员工都曾经在我们的团队工作过，包括Ken Ashcraft, Paul Cychosz, Krzysztof Ostrowski, Amir Voskoboynik, Matthew Weaver, Theo Vassilakis, and Eric Veach; or have joined our team recently: Nathan Bales, Adam Beberg, Vadim Borisov, Ken Chen, Brian Cooper, Cian Cullinan, Robert-Jan Huijsman, Milind Joshi, Andrey Khorlin, Dawid Kuroczko, Laramie Leavitt, Eric Li, Mike Mammarella, Sunil Mushran, Simon Nielsen, Ovidiu Platon, Ananth Shrinivas, Vadim Suvorov, and Marcel van der Holst.</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Azza Abouzeid et al. ―HadoopDB: an architectural hybrid of MapReduce and DBMS technologies for analytical workloads‖. Proc. of VLDB. 2009, pp. 922–933.</p>
<p>[2] A. Adya et al. ―Efficient optimistic concurrency control using loosely synchronized clocks‖. Proc. of SIGMOD. 1995, pp. 23–34.</p>
<p>[3] Amazon. Amazon DynamoDB. 2012.</p>
<p>[4] Michael Armbrust et al. ―PIQL: Success-Tolerant Query Processing in the Cloud‖. Proc. of VLDB. 2011, pp. 181–192.</p>
<p>[5] Jason Baker et al. ―Megastore: Providing Scalable, Highly Available Storage for Interactive Services‖. Proc. of CIDR. 2011, pp. 223–234.</p>
<p>[6] Hal Berenson et al. ―A critique of ANSI SQL isolation levels‖. Proc. of SIGMOD. 1995, pp. 1–10. [7] Matthias Brantner et al. ―Building a database on S3‖. Proc. of SIGMOD. 2008, pp. 251–264.</p>
<p>[7] Matthias Brantner et al. ―Building a database on S3‖. Proc. of SIGMOD. 2008, pp. 251–264.</p>
<p>[8] A. Chan and R. Gray. ―Implementing Distributed Read-Only Transactions‖. IEEE TOSE SE-11.2 (Feb. 1985), pp. 205–212.</p>
<p>[9] Fay Chang et al. ―Bigtable: A Distributed Storage System for Structured Data‖. ACM TOCS 26.2 (June 2008), 4:1–4:26.</p>
<p>[10] Brian F. Cooper et al. ―PNUTS: Yahoo!’s hosted data serving platform‖. Proc. of VLDB. 2008, pp. 1277–1288.</p>
<p>[11] James Cowling and Barbara Liskov. ―Granola: Low-Overhead Distributed Transaction Coordination‖. Proc. of USENIX ATC. 2012, pp. 223–236.</p>
<p>[12] Jeffrey Dean and Sanjay Ghemawat. ―MapReduce: a flexible data processing tool‖. CACM 53.1 (Jan. 2010), pp. 72–77.</p>
<p>[13] John Douceur and Jon Howell. Scalable Byzantine-Fault-Quantifying Clock Synchronization. Tech. rep. MSR-TR-2003-67. MS Research, 2003.</p>
<p>[14] John R. Douceur and Jon Howell. ―Distributed directory service in the Farsite file system‖. Proc. of OSDI. 2006, pp. 321–334.</p>
<p>[15] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung. ―The Google file system‖. Proc. of SOSP. Dec. 2003, pp. 29–43.</p>
<p>[16] David K. Gifford. Information Storage in a Decentralized Computer System. Tech. rep. CSL-81-8. PhD dissertation. Xerox PARC, July 1982.</p>
<p>[17] Lisa Glendenning et al. ―Scalable consistency in Scatter‖. Proc. of SOSP. 2011.</p>
<p>[18] Jim Gray and Leslie Lamport. ―Consensus on transaction commit‖. ACM TODS 31.1 (Mar. 2006), pp. 133–160.</p>
<p>[19] Pat Helland. ―Life beyond Distributed Transactions: an Apostate’s Opinion‖. Proc. of CIDR. 2007, pp. 132–141.</p>
<p>[20] Maurice P. Herlihy and Jeannette M. Wing. ―Linearizability: a correctness condition for<br>concurrent objects‖. ACM TOPLAS 12.3 (July 1990), pp. 463–492.</p>
<p>[21] Leslie Lamport. ―The part-time parliament‖. ACM TOCS 16.2 (May 1998), pp. 133–169.</p>
<p>[22] Leslie Lamport, Dahlia Malkhi, and Lidong Zhou. ―Reconfiguring a state machine‖. SIGACT News 41.1 (Mar. 2010), pp. 63–73.</p>
<p>[23] Barbara Liskov. ―Practical uses of synchronized clocks in distributed systems‖. Distrib. Comput. 6.4 (July 1993), pp. 211–219.</p>
<p>[24] David B. Lomet and Feifei Li. ―Improving Transaction-Time DBMS Performance and Functionality‖. Proc. of ICDE (2009), pp. 581–591.</p>
<p>[25] Jacob R. Lorch et al. ―The SMART way to migrate replicated stateful services‖. Proc. of EuroSys. 2006, pp. 103–115.</p>
<p>[26] MarkLogic. MarkLogic 5 Product Documentation. 2012.</p>
<p>[27] Keith Marzullo and Susan Owicki. ―Maintaining the time in a distributed system‖. Proc. of PODC. 1983, pp. 295–305.</p>
<p>[28] Sergey Melnik et al. ―Dremel: Interactive Analysis of Web-Scale Datasets‖. Proc. of VLDB. 2010, pp. 330–339.</p>
<p>[29] D.L. Mills. Time synchronization in DCNET hosts. Internet Project Report IEN–173. COMSAT Laboratories, Feb. 1981.</p>
<p>[30] Oracle. Oracle Total Recall. 2012.</p>
<p>[31] Andrew Pavlo et al. ―A comparison of approaches to large-scale data analysis‖. Proc. of SIGMOD. 2009, pp. 165–178.</p>
<p>[32] Daniel Peng and Frank Dabek. ―Large-scale incremental processing using distributed transactions and notifications‖. Proc. of OSDI. 2010, pp. 1–15.</p>
<p>[33] Daniel J. Rosenkrantz, Richard E. Stearns, and Philip M. Lewis II. ―System level concurrency control for distributed database systems‖. ACM TODS 3.2 (June 1978), pp. 178–198.</p>
<p>[34] Alexander Shraer et al. ―Dynamic Reconfiguration of Primary/Backup Clusters‖. Proc. of<br>SENIX ATC. 2012, pp. 425–438.</p>
<p>[35] Jeff Shute et al. ―F1—The Fault-Tolerant Distributed RDBMS Supporting Google’s Ad Business‖. Proc. of SIGMOD. May 2012, pp. 777–778.</p>
<p>[36] Yair Sovran et al. ―Transactional storage for geo-replicated systems‖. Proc. of SOSP. 2011, pp. 385–400.</p>
<p>[37] Michael Stonebraker. Why Enterprises Are Uninterested in NoSQL. 2010.</p>
<p>[38] Michael Stonebraker. Six SQL Urban Myths. 2010.</p>
<p>[39] Michael Stonebraker et al. ―The end of an architectural era: (it’s time for a complete rewrite)‖. Proc. of VLDB. 2007, pp. 1150–1160.</p>
<p>[40] Alexander Thomson et al. ―Calvin: Fast Distributed Transactions for Partitioned Database Systems‖. Proc. of SIGMOD.2012, pp. 1–12.</p>
<p>[41] Ashish Thusoo et al. ―Hive — A Petabyte Scale Data Warehouse Using Hadoop‖. Proc. of ICDE. 2010, pp. 996–1005.</p>
<p>[42] VoltDB. VoltDB Resources. 2012.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式数据库 </category>
            
            <category> Google Spanner </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式数据库 </tag>
            
            <tag> Spanner </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中wait、sleep和yield的区别]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E4%B8%ADwait%E3%80%81sleep%E5%92%8Cyield%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Java中wait、sleep的区别或者Java中sleep、yield的区别是Java面试或者多线程面试中最常问的问题之一。首先，一个最明显的区别是：<strong>wait是Object类的方法，sleep和yield是Thread类的静态方法</strong>。</p>
<a id="more"></a>



<p>本质上，wait方法是用来让线程<strong>等待某个条件</strong>，进入该条件的等待集中。而sleep和yield方法是用来让线程<strong>让出CPU时间</strong>，把CPU交给线程调度器，使得其他线程能获得CPU时间。</p>
<p>接下来详细比较三个方法。</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>常用的wait方法有<strong>wait( )</strong>和<strong>wait(long timeout)</strong></p>
<p>wait( )方法导致当前线程进入等待状态直到它被通知（其他线程调用notify或notifyAll方法。notify/notifyAll方法解除等待线程的阻塞状态）。    </p>
<p>wait(long timeout) 方法导致当前线程进入等待状态直到它被通知或者经过指定的时间。</p>
<p> <strong>wait( )后，线程会释放掉它所占有的对象的锁</strong>，从而使线程所在对象中的其它synchronized数据可被别的线程使用。</p>
<p><strong>wait方法只能在一个同步方法中调用</strong>。如果当前线程不是对象锁的持有者，该方法抛出一个IllegalMonitorStateException异常。</p>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>Thread.sleep(long millis),<strong>必须带有一个时间参数</strong>。</p>
<p> sleep(long millis)使当前线程进入停滞状态，所以执行sleep()的线程<strong>在指定的时间内肯定不会被执行</strong>。</p>
<p> sleep(long millis)可能使<strong>任意优先级</strong>的其他线程得到执行机会。</p>
<p>sleep(long millis)<strong>不会释放锁</strong>。</p>
<p>调用sleep方法的线程在唤醒之后<strong>不保证</strong>能获取到CPU，它会先进入就绪态，与其他线程<strong>竞争CPU</strong>。</p>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>yield方法<strong>没有参数</strong>。</p>
<p>yield方法使当前线程<strong>让出CPU</strong>，但让出的<strong>时间是不可设定的</strong>。</p>
<p>yield方法也<strong>不会释放锁</strong>。</p>
<p>yield只能把CPU让给<strong>相同优先级</strong>的其他线程，而<strong>不会把CPU给更高或更低优先级</strong>的其他线程。若此时没有其他线程跟它在有一个优先级，则该线程继续获得CPU时间，因此可能某线程<strong>刚调用yield方法又马上被执行</strong>。
<img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive安装配置文档（含Hive Metastore三种配置方式详解）]]></title>
      <url>http://linbingdong.com/2017/03/11/Hive%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>本文介绍Hive安装配置的整个过程，包括MySQL、Hive及Metastore的安装配置，并分析了Metastore三种配置方式的区别。</p>
<a id="more"></a>

<p>网上有很多介绍Hive Metastore三种配置方式的文章，但是理解都不对，给读者造成了很多误导。本人详细阅读Apache和CDH官方文档中关于Hive Metastore的部分，并经过实践，终于填好各种坑，安装配置成功，遂记录下本文，供大家参考。</p>
<h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h2><p>Hive Metastore有三种配置方式，分别是：</p>
<ol>
<li>Embedded Metastore Database (Derby)  内嵌模式</li>
<li>Local Metastore Server   本地元存储</li>
<li>Remote Metastore Server  远程元存储</li>
</ol>
<h3 id="Metadata、Metastore作用"><a href="#Metadata、Metastore作用" class="headerlink" title="Metadata、Metastore作用"></a>Metadata、Metastore作用</h3><ul>
<li><p>metadata即元数据。元数据包含用Hive创建的database、tabel等的元信息。<br>元数据存储在关系型数据库中。如Derby、MySQL等。</p>
</li>
<li><p>Metastore的作用是：客户端连接metastore服务，metastore再去连接MySQL数据库来存取元数据。有了metastore服务，就可以有多个客户端同时连接，而且这些客户端不需要知道MySQL数据库的用户名和密码，只需要连接metastore 服务即可。</p>
</li>
</ul>
<h3 id="三种配置方式区别"><a href="#三种配置方式区别" class="headerlink" title="三种配置方式区别"></a>三种配置方式区别</h3><ul>
<li><p>内嵌模式使用的是内嵌的Derby数据库来存储元数据，也不需要额外起Metastore服务。这个是默认的，配置简单，但是一次只能一个客户端连接，适用于用来实验，不适用于生产环境。</p>
</li>
<li><p>本地元存储和远程元存储都采用外部数据库来存储元数据，目前支持的数据库有：MySQL、Postgres、Oracle、MS SQL Server.在这里我们使用MySQL。</p>
</li>
<li><p>本地元存储和远程元存储的区别是：本地元存储不需要单独起metastore服务，用的是跟hive在同一个进程里的metastore服务。远程元存储需要单独起metastore服务，然后每个客户端都在配置文件里配置连接到该metastore服务。远程元存储的metastore服务和hive运行在不同的进程里。</p>
</li>
</ul>
<p>在生产环境中，建议用远程元存储来配置Hive Metastore。</p>
<h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><p>本教程Hadoop相关软件全部基于CDH5.5.1，用yum安装，系统环境如下：</p>
<ul>
<li>操作系统：CentOS 7.2</li>
<li>Hadoop 2.6.0</li>
<li>Hive1.1.0</li>
<li>Spark1.5.0</li>
<li>MySQL 5.6</li>
<li>JDK 1.8</li>
<li>Maven 3.3.3</li>
<li>Scala 2.10</li>
</ul>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.117.51     Goblin01           nn1  jn1  rm1  worker  master  hive  metastore  mysql</span><br><span class="line">192.168.117.52     Goblin02    zk2    nn2  jn2  rm2  worker          hive  metastore</span><br><span class="line">192.168.117.53     Goblin03    zk3    dn1  jn3       worker          hive</span><br><span class="line">192.168.117.54     Goblin04    zk4    dn2            worker          hive</span><br></pre></td></tr></table></figure>

<p>说明：Goblin01~04是每台机器的hostname，zk代表zookeeper，nn代表hadoop的namenode，dn代表datanode，jn代表journalnode，rm代表resourcemanager，worker代表Spark的slaves，master代表Spark的master</p>
<p>如果不需要Hive on Spark，只需要Hive on MR，则不需要安装Spark、Maven和Scala。</p>
<p>我们把metastore服务和MySQL都装在51上（装在哪一台都可以），51-54都安装Hive，这样多个客户端可以同时执行Hive命令。</p>
<p>在执行以下步骤之前，请确保已经安装了Hadoop集群</p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ol>
<li>下载mysql的repo源</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装mysql-community-release-el7-5.noarch.rpm包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo。</p>
<ol start="3">
<li>安装mysql</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install mysql-server</span><br></pre></td></tr></table></figure>

<h2 id="配置MySQL和metastore"><a href="#配置MySQL和metastore" class="headerlink" title="配置MySQL和metastore"></a>配置MySQL和metastore</h2><p>Step 1: Install and start MySQL if you have not<br>already done so</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install mysql-server</span><br><span class="line">$ sudo service mysqld start</span><br></pre></td></tr></table></figure>

<p>Step 2: Configure the MySQL Service and Connector</p>
<p>因为使用MySQL作为存储元数据的数据库，所以需要把连接MySQL的jar包放入或链接到$HIVE_HOME/lib目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install mysql-connector-java</span><br><span class="line">$ ln -s /usr/share/java/mysql-connector-java.jar /usr/lib/hive/lib/mysql-connector-java.jar</span><br></pre></td></tr></table></figure>

<p>To set the MySQL root password:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/bin/mysql_secure_installation</span><br><span class="line">[...]</span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line">[...]</span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Remove anonymous users? [Y/n] Y</span><br><span class="line">[...]</span><br><span class="line">Disallow root login remotely? [Y/n] N</span><br><span class="line">[...]</span><br><span class="line">Remove test database and access to it [Y/n] Y</span><br><span class="line">[...]</span><br><span class="line">Reload privilege tables now? [Y/n] Y</span><br><span class="line">All done!</span><br></pre></td></tr></table></figure>

<p>To make sure the MySQL server starts at boot:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo /sbin/chkconfig mysqld on</span><br><span class="line">$ sudo /sbin/chkconfig --list mysqld</span><br><span class="line">mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure>

<p>Step 3. Create the Database and User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; CREATE DATABASE metastore;</span><br><span class="line">mysql&gt; USE metastore;</span><br><span class="line">mysql&gt; SOURCE /usr/lib/hive/scripts/metastore/upgrade/mysql/hive-schema-0.12.0.mysql.sql;</span><br><span class="line">mysql&gt; CREATE USER &apos;hive&apos;@&apos;metastorehost&apos; IDENTIFIED BY &apos;mypassword&apos;;</span><br><span class="line">...</span><br><span class="line">mysql&gt; REVOKE ALL PRIVILEGES, GRANT OPTION FROM &apos;hive&apos;@&apos;metastorehost&apos;;</span><br><span class="line">mysql&gt; GRANT ALL ON metastore.* TO &apos;hive&apos;@&apos;metastorehost&apos; IDENTIFIED BY &apos;hive&apos;;</span><br><span class="line">mysql&gt; GRANT ALL ON metastore.* TO &apos;hive&apos;@&apos;%&apos; IDENTIFIED BY &apos;hive&apos;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; ALTER DATABASE metastore CHARACTER SET latin1;</span><br><span class="line">mysql&gt; quit;</span><br></pre></td></tr></table></figure>

<p>Step 4. Format the Database</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /usr/lib/hive/bin</span><br><span class="line">$ ./schematool --dbType mysql --initSchema</span><br></pre></td></tr></table></figure>

<h2 id="Hive配置"><a href="#Hive配置" class="headerlink" title="Hive配置"></a>Hive配置</h2><h3 id="HDFS存储位置配置"><a href="#HDFS存储位置配置" class="headerlink" title="HDFS存储位置配置"></a>HDFS存储位置配置</h3><p>Hive配置文件里要用到HDFS的一些路径，需要先手动创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir -p /usr/hive/warehouse</span><br><span class="line">hdfs dfs -mkdir -p /usr/hive/tmp</span><br><span class="line">hdfs dfs -mkdir -p /usr/hive/log</span><br><span class="line">hdfs dfs -chmod g+w /usr/hive/warehouse</span><br><span class="line">hdfs dfs -chmod g+w /usr/hive/tmp</span><br><span class="line">hdfs dfs -chmod g+w /usr/hive/log</span><br></pre></td></tr></table></figure>

<p>上述语句涉及hive-site.xml hive.metastore.warehouse.dir等，表示数据在hdfs中的存储位置</p>
<h3 id="hive-env-sh-所有节点）"><a href="#hive-env-sh-所有节点）" class="headerlink" title="hive-env.sh (所有节点）"></a>hive-env.sh (所有节点）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/lib/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/lib/hive/conf</span><br></pre></td></tr></table></figure>

<h3 id="hive-log4j-properties（所有节点）"><a href="#hive-log4j-properties（所有节点）" class="headerlink" title="hive-log4j.properties（所有节点）"></a>hive-log4j.properties（所有节点）</h3><p>首先创建log存放的文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /usr/lib/hive/logs</span><br></pre></td></tr></table></figure>

<p>然后配置hive-log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hive.log.dir=/usr/lib/hive/logs</span><br></pre></td></tr></table></figure>

<h3 id="服务端hive-site-xml"><a href="#服务端hive-site-xml" class="headerlink" title="服务端hive-site.xml"></a>服务端hive-site.xml</h3><p>服务端指的是Metastore服务所在的机器，即安装metastore的机器，这里是51和52。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;jdbc:mysql://Goblin01:3306/metastore?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;the URL of the MySQL database&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/usr/hive/warehouse&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.exec.scratchdir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/usr/hive/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.querylog.location&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/usr/hive/log&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="客户端hive-site-xml"><a href="#客户端hive-site-xml" class="headerlink" title="客户端hive-site.xml"></a>客户端hive-site.xml</h3><p>这里指的是53和54。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.metastore.uris&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;thrift://Goblin01:9083,Goblin02:9083&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;IP address (or fully-qualified domain name) and port of the metastore host&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/usr/hive/warehouse&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hive.exec.scratchdir&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/usr/hive/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hive.querylog.location&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/usr/hive/log&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="启动Hive"><a href="#启动Hive" class="headerlink" title="启动Hive"></a>启动Hive</h2><ol>
<li>启动MySQL</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mysqld start</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动metastore服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service hive-metastore start</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动Hive CLI</li>
</ol>
<p>因为在4台机器上都安装了hive，并且作了相关的配置，所有四台机器均可以启动Hive CLI（Hive交互式shell）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hive</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin#AdminManualMetastoreAdmin-RemoteMetastoreDatabase" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin#AdminManualMetastoreAdmin-RemoteMetastoreDatabase</a></p>
</li>
<li><p><a href="http://www.cloudera.com/documentation/archive/cdh/4-x/4-2-0/CDH4-Installation-Guide/cdh4ig_topic_18_4.html" target="_blank" rel="noopener">http://www.cloudera.com/documentation/archive/cdh/4-x/4-2-0/CDH4-Installation-Guide/cdh4ig_topic_18_4.html</a></p>
</li>
</ul>
<p><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中四种引用]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E4%B8%AD%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了使能更加灵活地控制对象的生命周期。从JDK 1.2版本开始，把对象的引用分为4种级别。这4种级别由高到低依次为：强引用、软引用、弱引用和虚引用。</p>
</blockquote>
<a id="more"></a> 

<ul>
<li><p>强引用（StrongReference）<br>强引用是级别最高，也是最常用的引用。<strong>拥有强引用的对象绝不会被垃圾回收器回收</strong>。</p>
</li>
<li><p>软引用（SoftReference）<br>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；<strong>如果内存空间不足了，就会回收这些对象的内存</strong>。</p>
</li>
</ul>
<ul>
<li><p>弱引用（WeakReference）<br>只具有弱引用的对象拥有更短暂的生命周期。<strong>在执行gc的时候会被回收</strong>。</p>
</li>
<li><p>虚引用（PhantomReference）<br>“虚引用”顾名思义，就是形同虚设，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<strong>仅用于在发生gc时接收一个系统通知</strong>。
<img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java I/O 总结]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%20I:O%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Java中I/O操作主要是指使用Java进行输入，输出操作. Java所有的I/O机制都是基于数据流进行输入输出，这些数据流表示了字符或者字节数据的流动序列。</p>
<a id="more"></a>

<p>数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据（不能随机读取）。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。</p>
<p>简而言之：数据流是一组有序，有起点和终点的字节的数据序列。包括输入流和输出流。</p>
<p>当程序需要读取数据的时候，就会建立一个通向数据源的连接，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会建立一个通向目的地的连接。</p>
<p>数据流分类：</p>
<p>流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种：** 1)  字节流：<strong>数据流中最小的数据单元是字节</strong> 2)  字符流：**数据流中最小的数据单元是字符， Java中的字符是Unicode编码，一个字符占用两个字节。</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Java.io包中最重要的就是5个类和一个接口。5个类指的是File、OutputStream、InputStream、Writer、Reader；一个接口指的是Serializable。掌握了这些就掌握了Java I/O的精髓了。</p>
<p>Java I/O主要包括如下3层次：</p>
<ol>
<li>流式部分——最主要的部分。如：OutputStream、InputStream、Writer、Reader等</li>
<li>非流式部分——如：File类、RandomAccessFile类和FileDescriptor等类</li>
<li>其他——文件读取部分的与安全相关的类，如：SerializablePermission类，以及与本地操作系统相关的文件系统的类，如：FileSystem类和Win32FileSystem类和WinNTFileSystem类。</li>
</ol>
<p>主要类如下：</p>
<ol>
<li>File（文件特征与管理）：用于文件或者目录的描述信息，例如生成新目录，修改文件名，删除文件，判断文件所在路径等。</li>
<li>InputStream（字节流，二进制格式操作）：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。</li>
<li>OutputStream（字节流，二进制格式操作）：抽象类。基于字节的输出操作。是所有输出流的父类。定义了所有输出流都具有的共同特征。</li>
<li>Reader（字符流，文本格式操作）：抽象类，基于字符的输入操作。</li>
<li>Writer（字符流，文本格式操作）：抽象类，基于字符的输出操作。</li>
<li>RandomAccessFile（随机文件操作）：它的功能丰富，<strong>可以从文件的任意位置进行存取（输入输出）操作</strong>。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-adc85fb95f884363.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="I:O体系.png"></p>
<h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h2><p>java.io包里有4个基本类：InputStream、OutputStream及Reader、Writer类，它们分别处理字节流和字符流。</p>
<p>其他各种各样的流都是由这4个派生出来的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ee60b12bd1f9a3dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="I/O流"></p>
<p><strong>按来源/去向分类：</strong></p>
<ol>
<li>File（文件）： FileInputStream, FileOutputStream, FileReader, FileWriter </li>
<li>byte[]：ByteArrayInputStream, ByteArrayOutputStream </li>
<li>Char[]: CharArrayReader, CharArrayWriter </li>
<li>String: StringBufferInputStream, StringReader, StringWriter </li>
<li>网络数据流：InputStream, OutputStream, Reader, Writer </li>
</ol>
<h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>InputStream 为字节输入流，它本身为一个抽象类，必须依靠其子类实现各种功能，此抽象类是表示字节输入流的所有类的超类。 继承自InputStream  的流都是向程序中输入数据的，且数据单位为字节（8bit）；</p>
<p>InputStream是输入字节数据用的类，所以InputStream类提供了3种重载的read方法.Inputstream类中的常用方法： </p>
<ul>
<li>public abstract int read( )：读取一个byte的数据，返回值是高位补0的int类型值。若返回值=-1说明没有读取到任何字节读取工作结束。</li>
<li>public int read(byte b[ ])：读取b.length个字节的数据放到b数组中。返回值是读取的字节数。该方法实际上是调用下一个方法实现的 </li>
<li>public int read(byte b[ ], int off, int len)：从输入流中最多读取len个字节的数据，存放到偏移量为off的b数组中。 </li>
<li>public int available( )：返回输入流中可以读取的字节数。注意：若输入阻塞，当前线程将被挂起，如果InputStream对象调用这个方法的话，它只会返回0，这个方法必须由继承InputStream类的子类对象调用才有用， </li>
<li>public long skip(long n)：忽略输入流中的n个字节，返回值是实际忽略的字节数, 跳过一些字节来读取 </li>
<li>public int close( ) ：使用完后，必须对我们打开的流进行关闭。</li>
</ul>
<p>来看看几种不同的InputStream：</p>
<ol>
<li>FileInputStream把一个文件作为InputStream，实现对文件的读取操作     </li>
<li>ByteArrayInputStream：把内存中的一个缓冲区作为InputStream使用 </li>
<li>StringBufferInputStream：把一个String对象作为InputStream </li>
<li>PipedInputStream：实现了pipe的概念，主要在线程中使用 </li>
<li>SequenceInputStream：把多个InputStream合并为一个InputStream </li>
</ol>
<h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>OutputStream提供了3个write方法来做数据的输出，这个是和InputStream是相对应的。 
　　</p>
<ul>
<li>public void write(byte b[ ])：将参数b中的字节写到输出流。 </li>
<li>public void write(byte b[ ], int off, int len) ：将参数b的从偏移量off开始的len个字节写到输出流。 </li>
<li>public abstract void write(int b) ：先将int转换为byte类型，把低字节写入到输出流中。 </li>
<li>public void flush( ) : 将数据缓冲区中数据全部输出，并清空缓冲区。 </li>
<li>public void close( ) : 关闭输出流并释放与流相关的系统资源。 </li>
</ul>
<p>几种不同的OutputStream：</p>
<ol>
<li>ByteArrayOutputStream：把信息存入内存中的一个缓冲区中 </li>
<li>FileOutputStream：把信息存入文件中 </li>
<li>PipedOutputStream：实现了pipe的概念，主要在线程中使用 </li>
<li>SequenceOutputStream：把多个OutStream合并为一个OutStream </li>
</ol>
<p>Reader和InputStream类似；Writer和OutputStream类似。</p>
<p>有两个需要注意的：</p>
<ol>
<li>*<em>InputStreamReader *</em>： 从输入流读取字节，在将它们转换成字符。</li>
<li><strong>BufferReader :</strong>接受Reader对象作为参数，并对其添加字符缓冲器，使用readline()方法可以读取一行。</li>
</ol>
<h2 id="如何选择I-O流"><a href="#如何选择I-O流" class="headerlink" title="如何选择I/O流"></a>如何选择I/O流</h2><ol>
<li>确定是输入还是输出<br>输入:输入流 InputStream Reader<br>输出:输出流 OutputStream Writer</li>
<li>明确操作的数据对象是否是纯文本<br>是:字符流 Reader，Writer<br>否:字节流 InputStream，OutputStream</li>
<li>明确具体的设备。<ul>
<li>文件：<br> 读：FileInputStream,, FileReader,<br> 写：FileOutputStream，FileWriter</li>
<li>数组：<br> byte[ ]：ByteArrayInputStream, ByteArrayOutputStream<br> char[ ]：CharArrayReader, CharArrayWriter</li>
<li>String：<br> StringBufferInputStream(已过时，因为其只能用于String的每个字符都是8位的字符串), StringReader,     StringWriter</li>
<li>Socket流<br> 键盘：用System.in（是一个InputStream对象）读取，用System.out（是一个OutoutStream对象）打印</li>
</ul>
</li>
<li>是否需要转换流<br>是，就使用转换流，从Stream转化为Reader、Writer：InputStreamReader，OutputStreamWriter </li>
<li>是否需要缓冲提高效率<br>是就加上Buffered：BufferedInputStream, BufferedOuputStream, BufferedReader, BufferedWriter</li>
<li>是否需要格式化输出</li>
</ol>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><ul>
<li>将标准输入（键盘输入）显示到标准输出（显示器），支持字符。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  <span class="comment">//将字节流转为字符流，带缓冲</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((ch = (<span class="keyword">char</span>) in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将AtomicityTest.java的内容打印到显示器</li>
</ul>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"AtomicityTest.java"</span>));</span><br><span class="line">String s;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((s = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader in = <span class="keyword">new</span> FileReader(<span class="string">"AtomicityTest.java"</span>);</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：(有可能出现乱码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"AtomicityTest.java"</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[n];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((in.read(buffer,<span class="number">0</span>,n) != -<span class="number">1</span> &amp;&amp; n &gt; <span class="number">0</span>))&#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(buffer));</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>将文件A的内容拷贝到文件B</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"AtomicityTest.java"</span>);</span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    out.write(b);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<ul>
<li>将标准输入的内容写入文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">FileWriter out = <span class="keyword">new</span> FileWriter(<span class="string">"systemIn.log"</span>);</span><br><span class="line">String s;</span><br><span class="line"><span class="keyword">while</span> (!(s = in.nextLine()).equals(<span class="string">"Q"</span>))&#123;</span><br><span class="line">    out.write(s + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix查询经验总结]]></title>
      <url>http://linbingdong.com/2017/03/11/Phoenix%E6%9F%A5%E8%AF%A2%E6%B5%8B%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>适当的索引能够让极大提升查询速度，因此在Phoenix查询的测试用例中包括了对有索引跟无索引的查询性能的比较。测试过程中遇到一些问题，经过探索，得到一些结论，在此记录下来。</p>
<a id="more"></a>

<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>适当的索引能够让极大提升查询速度，因此在Phoenix查询的测试用例中包括了对有索引跟无索引的查询性能的比较。测试过程中遇到一些问题，在此记录下来。</p>
<h2 id="2-问题及解决"><a href="#2-问题及解决" class="headerlink" title="2. 问题及解决"></a>2. 问题及解决</h2><h3 id="2-1-创建索引时报错，报错如下："><a href="#2-1-创建索引时报错，报错如下：" class="headerlink" title="2.1. 创建索引时报错，报错如下："></a>2.1. 创建索引时报错，报错如下：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//创建索引语句：</span><br><span class="line">0: jdbc:phoenix:localhost&gt; CREATE INDEX ind_1 ON TESTINPUT(ff1);</span><br><span class="line">//报错：</span><br><span class="line">Error: ERROR 1029 (42Y88): Mutable secondary indexes must have the hbase.regionserver.wal.codec property <span class="keyword">set</span> <span class="keyword">to</span> org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec <span class="keyword">in</span> the hbase-sites.xml <span class="keyword">of</span> every region <span class="keyword">server</span> tableName=IND_1 (state=<span class="number">42</span>Y88,code=<span class="number">1029</span>)</span><br><span class="line">java.sql.SQLException: <span class="keyword">ERROR</span> <span class="number">1029</span> (<span class="number">42</span>Y88): Mutable secondary <span class="keyword">indexes</span> must have the hbase.regionserver.wal.codec property <span class="keyword">set</span> <span class="keyword">to</span> org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec <span class="keyword">in</span> the hbase-sites.xml <span class="keyword">of</span> every region <span class="keyword">server</span> tableName=IND_1</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.exception.SQLExceptionCode$Factory$<span class="number">1.</span>newException(SQLExceptionCode.java:<span class="number">396</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.exception.SQLExceptionInfo.buildException(SQLExceptionInfo.java:<span class="number">145</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.schema.MetaDataClient.createIndex(MetaDataClient.java:<span class="number">1162</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.compile.CreateIndexCompiler$<span class="number">1.</span><span class="keyword">execute</span>(CreateIndexCompiler.java:<span class="number">95</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.jdbc.PhoenixStatement$<span class="number">2.</span><span class="keyword">call</span>(PhoenixStatement.java:<span class="number">322</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.jdbc.PhoenixStatement$<span class="number">2.</span><span class="keyword">call</span>(PhoenixStatement.java:<span class="number">314</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.call.CallRunner.run(CallRunner.java:<span class="number">53</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.jdbc.PhoenixStatement.executeMutation(PhoenixStatement.java:<span class="number">312</span>)</span><br><span class="line">	<span class="keyword">at</span> org.apache.phoenix.jdbc.PhoenixStatement.execute(PhoenixStatement.java:<span class="number">1435</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.Commands.execute(Commands.java:<span class="number">822</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.Commands.sql(Commands.java:<span class="number">732</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.SqlLine.dispatch(SqlLine.java:<span class="number">808</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.SqlLine.begin(SqlLine.java:<span class="number">681</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.SqlLine.start(SqlLine.java:<span class="number">398</span>)</span><br><span class="line">	<span class="keyword">at</span> sqlline.SqlLine.main(SqlLine.java:<span class="number">292</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>原因：Phoenix支持两种索引：可变索引跟不可变索引。在可变表上建的索引是可变索引，在不可变表上建的索引是不可变索引。可变索引是指插入或删除数据的时候会同时更新索引；不可变索引适用于只写入一次不再更改的表，索引只建立一次，再插入数据不会更新索引。上面使用的语句是创建可变索引，需要在hbase-site.xml中进行相关配置使其支持可变索引（不可变索引无需另外配置，默认支持）。</p>
</li>
<li><p>解决：对HMaster和HRegionserver节点分别增加配置,然后重启HBase集群</p>
<ul>
<li>HMaster</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.master.loadbalancer.class&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.coprocessor.master.classes&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.phoenix.hbase.index.master.IndexMasterObserver&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>HRegionserver</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.region.server.rpc.scheduler.factory.class&lt;/name&gt; </span><br><span class="line">   &lt;value&gt;org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory&lt;/value&gt;</span><br><span class="line">   &lt;description&gt;Factory to create the Phoenix RPC Scheduler that usesseparate queues for index and metadata updates&lt;/description&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.rpc.controllerfactory.class&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory&lt;/value&gt;</span><br><span class="line">   &lt;description&gt;Factory to create the Phoenix RPCScheduler that uses separate queues for index and metadataupdates&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.coprocessor.regionserver.classes&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;org.apache.hadoop.hbase.regionserver.LocalIndexMerger&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-对10亿数据查询时，报错如下："><a href="#2-2-对10亿数据查询时，报错如下：" class="headerlink" title="2.2. 对10亿数据查询时，报错如下："></a>2.2. 对10亿数据查询时，报错如下：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16/11/29 10:33:50 WARN client.ScannerCallable: Ignore, probably already closed</span><br><span class="line">org.apache.hadoop.hbase.regionserver.LeaseException: org.apache.hadoop.hbase.regionserver.LeaseException: lease &apos;1132&apos; does not exist</span><br><span class="line">	at org.apache.hadoop.hbase.regionserver.Leases.removeLease(Leases.java:221)</span><br><span class="line">	at org.apache.hadoop.hbase.regionserver.Leases.cancelLease(Leases.java:206)</span><br><span class="line">...</span><br><span class="line">org.apache.phoenix.exception.PhoenixIOException: org.apache.phoenix.exception.PhoenixIOException: Failed after attempts=36, exceptions:</span><br><span class="line">Tue Nov 29 10:33:50 CST 2016, null, java.net.SocketTimeoutException: callTimeout=60000, callDuration=60321: row &apos;��s,d&apos; on table &apos;TEST11&apos; at region=TEST11,\x11\x00\x00\x00\x00\x00\x00\x00\x00,1479985615575.c3adb68acea8d88d223bffd3acc16c2e., hostname=node-20-105,60020,1480385981798, seqNum=1244662</span><br><span class="line">...</span><br><span class="line">Caused by: org.apache.hadoop.hbase.ipc.CallTimeoutException: Call id=18173, waitTime=60001, operationTimeout=60000 expired.</span><br><span class="line">	at org.apache.hadoop.hbase.ipc.Call.checkAndSetTimeout(Call.java:70)</span><br><span class="line">	at org.apache.hadoop.hbase.ipc.RpcClientImpl.call(RpcClientImpl.java:1197)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：</li>
</ul>
<p>某些查询需要很长时间才能返回结果，被HBase的超时机制杀掉了。</p>
<ul>
<li>思路：</li>
</ul>
<p>增大超时时间，在hbase-site.xml里增加了如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.client.operation.timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.client.scanner.timeout.period&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.regionserver.lease.period&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;phoenix.query.timeoutMs&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;phoenix.query.keepAliveMs&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;600000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.client.ipc.pool.type&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;RoundRobinPool&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.client.ipc.pool.size&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;10&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>最终虽然配置生效了，但是还是报同样的错。已经将网上说的可能的配置项都配了还是无法解决超时问题。等增加了机器，查询时间变短，10亿数据的查询应该就没有超时问题了。</p>
<h2 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h2><ul>
<li><p>不可变索引默认支持，不需要另外配置；可变索引需要如上添加配置才能支持</p>
</li>
<li><p>创建不可变表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE TABLENAME (pk long PRIMARY KEY,col1 int) IMMUTABLE_ROWS=true;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建索引有以下几种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1);</span><br><span class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1,COLUMN2);</span><br><span class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1) INCLUDE(COLUMN2);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行查询的时候，Phoenix查询优化器将选择合适的索引。可以使用explain plan进行查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:localhost&gt; explain select ff3,if1 from testinput where ff3 &gt;= 0.7 and ff3 &lt; 0.9 order by if1;</span><br><span class="line">+------------------------------------------+</span><br><span class="line">|                   PLAN                   |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| CLIENT 1-CHUNK PARALLEL 1-WAY RANGE SCAN OVER IND_4 [0.7] - [0.9] |</span><br><span class="line">|     SERVER SORTED BY [&quot;IF1&quot;]             |</span><br><span class="line">| CLIENT MERGE SORT                        |</span><br><span class="line">+------------------------------------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>除非所有查询使用的列被索引或者覆盖列，否则二级索引不会被使用</p>
</li>
<li><p>建索引的时候不要包括primary key，否则索引不会被使用；可以单独对primary key建索引</p>
</li>
<li><p>where条件里有primary key的时候会使用Range Scan，因为表本来就是按照primary key的顺序排列的</p>
</li>
<li><p>primary key在插入时是自动排序的，插入完成后primary key保持有序（如果该表只有一个分区，则全局有序；如果有多个分区，则在每个分区内部有序，并非全局有序）</p>
</li>
<li><p>对某几个（1个或多个）列建索引，则会生成一张索引表，该表由创建索引的这几个列组成，并在最后一列添加primary key列。也就是说索引表也是一张表，只不过该表列数比原表少。</p>
</li>
<li><p>索引表的第一列是有序的</p>
</li>
<li><p>upsert into一个跟之前一样的primary key，会将之前那个primary key的记录替换成新的。</p>
</li>
<li><p>phoenix虽然不支持update语句，但是可以用upsert into tablename(id,columnname) values(id,newvalue)来实现同样的功能。</p>
</li>
<li><p>local index 对应的索引表的分区跟表的分区在同一个region server上（索引表分区数必须跟表分区数一样）</p>
</li>
<li><p>global index 对应的索引表的分区跟表的分区不一定在同一个region server上（索引表分区数必须跟表分区数一样）</p>
</li>
<li><p>对一张表建了多个local index，对于HBase来讲，其实只存了一张索引表。但是global index则不同。</p>
</li>
</ul>
<h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h2><ul>
<li><a href="https://github.com/forcedotcom/phoenix/wiki/Secondary-Indexing" target="_blank" rel="noopener">https://github.com/forcedotcom/phoenix/wiki/Secondary-Indexing</a></li>
<li><a href="http://phoenix.apache.org/language/index.html#create_index" target="_blank" rel="noopener">http://phoenix.apache.org/language/index.html#create_index</a></li>
<li><a href="http://blog.csdn.net/jiangshouzhuang/article/details/52387718" target="_blank" rel="noopener">http://blog.csdn.net/jiangshouzhuang/article/details/52387718</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据基准测试工具TPCx-BB源码分析]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7TPCx-BB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>TPCx-BB是大数据基准测试工具,它通过模拟零售商的30个应用场景，执行30个查询来衡量基于Hadoop的大数据系统的包括硬件和软件的性能。其中一些场景还用到了机器学习算法（聚类、线性回归等）。为了更好地了解被测试的系统的性能，需要对TPCx-BB整个测试流程深入了解。本文详细分析了整个TPCx-BB测试工具的源码，希望能够对大家理解TPCx-BB有所帮助。</p>
<a id="more"></a>

<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>主目录（<code>$BENCH_MARK_HOME</code>）下有：</p>
<ul>
<li>bin</li>
<li>conf</li>
<li>data-generator</li>
<li>engines</li>
<li>tools</li>
</ul>
<p>几个子目录。</p>
<p><strong>bin</strong>下有几个 <code>module</code> ,是执行时需要用到的脚本：<strong>bigBench</strong>、cleanLogs、logEnvInformation、<strong>runBenchmark</strong>、zipLogs等</p>
<p><strong>conf</strong>下有两个配置文件：<code>bigBench.properties</code> 和 <code>userSettings.conf</code></p>
<p><code>bigBench.properties</code> 主要设置 <code>workload</code>（执行的benchmarkPhases）和 <code>power_test_0</code>（<code>POWER_TEST</code> 阶段需要执行的SQL查询）</p>
<p>默认 <code>workload</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workload=CLEAN_ALL,ENGINE_VALIDATION_DATA_GENERATION,ENGINE_VALIDATION_LOAD_TEST,ENGINE_VALIDATION_POWER_TEST,ENGINE_VALIDATION_RESULT_VALIDATION,CLEAN_DATA,DATA_GENERATION,BENCHMARK_START,LOAD_TEST,POWER_TEST,THROUGHPUT_TEST_1,BENCHMARK_STOP,VALIDATE_POWER_TEST,VALIDATE_THROUGHPUT_TEST_1</span><br></pre></td></tr></table></figure>

<p>默认 <code>power_test_0</code> ：<code>1-30</code></p>
<p><code>userSetting.conf</code> 是一些基本设置，包括JAVA environment 、default settings for benchmark（database、engine、map_tasks、scale_factor …）、HADOOP environment、<br>HDFS config and paths、Hadoop data generation options(DFS_REPLICATION、HADOOP_JVM_ENV…)</p>
<p><strong>data-generator</strong>下是跟数据生成相关的脚本及配置文件。详细内容在下面介绍。</p>
<p><strong>engines</strong>下是TPCx-BB支持的4种引擎：biginsights、hive、impala、spark_sql。默认引擎为hive。实际上，只有hive目录下不为空，其他三个目录下均为空，估计是现在还未完善。</p>
<p><strong>tools</strong>下有两个jar包：<code>HadoopClusterExec.jar</code> 和 <code>RunBigBench.jar</code> 。其中 <code>RunBigBench.jar</code> 是执行TPCx-BB测试的一个非常重要的文件，大部分程序都在该jar包内。</p>
<h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><p>数据生成相关程序和配置都在 <code>data-generator</code> 目录下。该目录下有一个 <code>pdgf.jar</code> 包和 <code>config、dicts、extlib</code> 三个子目录。</p>
<p><strong>pdgf.jar</strong>是数据生成的Java程序，代码量很大。config下有两个配置文件：<code>bigbench-generation.xml</code> 和 <code>bigbench-schema.xml</code> 。</p>
<p><code>bigbench-generation.xml</code> 主要设置生成的原始数据（不是数据库表）包含哪几张表、每张表的表名以及表输出的目录、表文件的后缀、分隔符、字符编码等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tables</span>&gt;</span>	</span><br><span class="line">		<span class="comment">&lt;!-- not refreshed tables --&gt;</span>	</span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- tables not used in benchmark, but some tables have references to them. not refreshed. Kept for legacy reasons  --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"income_band"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"reason"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"ship_mode"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"web_site"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>		</span><br><span class="line">			<span class="comment">&lt;!-- /tables not used in benchmark  --&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- Static tables (fixed small size, generated only on node 1, skipped on others, not generated during refresh) --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"date_dim"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"time_dim"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"customer_demographics"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"household_demographics"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- /static tables --&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- "normal" tables. split over all nodes. not generated during refresh --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"store"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"warehouse"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"promotion"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"web_page"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- /"normal" tables.--&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- /not refreshed tables --&gt;</span>	</span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			refreshed tables. Generated on all nodes. </span></span><br><span class="line"><span class="comment">			Refresh tables generate extra data during refresh (e.g. add new data to the existing tables)</span></span><br><span class="line"><span class="comment">			In "normal"-Phase  generate table rows:  [0,REFRESH_PERCENTAGE*Table.Size]; </span></span><br><span class="line"><span class="comment">			In "refresh"-Phase generate table rows:  [REFRESH_PERCENTAGE*Table.Size+1, Table.Size] </span></span><br><span class="line"><span class="comment">			.Has effect only if  $&#123;REFRESH_SYSTEM_ENABLED&#125;==1. </span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scheduler</span> <span class="attr">name</span>=<span class="string">"DefaultScheduler"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">partitioner</span></span></span><br><span class="line"><span class="tag">						<span class="attr">name</span>=<span class="string">"pdgf.core.dataGenerator.scheduler.TemplatePartitioner"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">prePartition</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">					if($&#123;REFRESH_SYSTEM_ENABLED&#125;&gt;0)&#123;</span><br><span class="line">						int tableID = table.getTableID();</span><br><span class="line">						int timeID = 0;</span><br><span class="line">						long lastTableRow=table.getSize()-1;</span><br><span class="line">						long rowStart;</span><br><span class="line">						long rowStop;</span><br><span class="line">						boolean exclude=false;</span><br><span class="line">						long refreshRows=table.getSize()*(1.0-$&#123;REFRESH_PERCENTAGE&#125;);</span><br><span class="line">						if($&#123;REFRESH_PHASE&#125;&gt;0)&#123;</span><br><span class="line">							//Refresh part</span><br><span class="line">							rowStart = lastTableRow - refreshRows +1;</span><br><span class="line">							rowStop  = lastTableRow;</span><br><span class="line">							if(refreshRows&lt;=0)&#123;</span><br><span class="line">								exclude=true;</span><br><span class="line">							&#125;</span><br><span class="line">							</span><br><span class="line">						&#125;else&#123;</span><br><span class="line">							//"normal" part</span><br><span class="line">							rowStart = 0;</span><br><span class="line">							rowStop = lastTableRow - refreshRows;</span><br><span class="line">						&#125;</span><br><span class="line">						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);</span><br><span class="line">					&#125;else&#123;</span><br><span class="line">						//DEFAULT</span><br><span class="line">						return getParentPartitioner().getDefaultPrePartition(project, table);				</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					]]&gt;<span class="tag">&lt;/<span class="name">prePartition</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">partitioner</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">scheduler</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"SplitFileOutputWrapper"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- DEFAULT output for all Tables, if no table specific output is specified--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"CSVRowOutput"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileTemplate</span>&gt;</span>&lt;![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]&gt;<span class="tag">&lt;/<span class="name">fileTemplate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDir</span>&gt;</span>output/<span class="tag">&lt;/<span class="name">outputDir</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileEnding</span>&gt;</span>.dat<span class="tag">&lt;/<span class="name">fileEnding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>|<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sortByRowID</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sortByRowID</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"StatisticsOutput"</span> <span class="attr">active</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>$&#123;item_size&#125;<span class="tag">&lt;/<span class="name">size</span>&gt;</span><span class="comment">&lt;!-- a counter per item .. initialize later--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileTemplate</span>&gt;</span>&lt;![CDATA[outputDir + table.getName()+"_audit" +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]&gt;<span class="tag">&lt;/<span class="name">fileTemplate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDir</span>&gt;</span>output/<span class="tag">&lt;/<span class="name">outputDir</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileEnding</span>&gt;</span>.csv<span class="tag">&lt;/<span class="name">fileEnding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>,<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="comment">&lt;!--"" + pdgf.util.Constants.DEFAULT_LINESEPARATOR--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>bigbench-schema.xml</code> 设置了很多参数，有跟表的规模有关的，比如每张表的大小（记录的条数）;绝大多数是跟表的字段有关的，比如时间的起始、结束、性别比例、结婚比例、指标的上下界等。还具体定义了每个字段是怎么生成的，以及限制条件。示例如下：</p>
<p>生成的数据大小由 <code>SCALE_FACTOR（-f）</code> 决定。如 <code>-f 1</code>，则生成的数据总大小约为1G；<code>-f 100</code>，则生成的数据总大小约为100G。那么<code>SCALE_FACTOR（-f）</code> 是怎么精确控制生成的数据的大小呢？</p>
<p>原因是 <code>SCALE_FACTOR（-f）</code> 决定了每张表的记录数。如下，<code>customer</code> 表的记录数为 <code>100000.0d * ${SF_sqrt}</code>，即如果 <code>-f 1</code> 则 <code>customer</code> 表的记录数为 <code>100000*sqrt(1)= 10万条</code> ;如果 <code>-f 100</code> 则 <code>customer</code> 表的记录数为 <code>100000*sqrt(100)= 100万条</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;customer_size&#125;"</span> <span class="attr">type</span>=<span class="string">"long"</span>&gt;</span>100000.0d * $&#123;SF_sqrt&#125;<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;DIMENSION_TABLES_START_DAY&#125;"</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span>2000-01-03 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;DIMENSION_TABLES_END_DAY&#125;"</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span>2004-01-05 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;gender_likelihood&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;married_likelihood&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>0.3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;WP_LINK_MIN&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;WP_LINK_MAX&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"d_date"</span> <span class="attr">size</span>=<span class="string">"13"</span> <span class="attr">type</span>=<span class="string">"CHAR"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">gen_DateTime</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">disableRng</span>&gt;</span>true<span class="tag">&lt;/<span class="name">disableRng</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">useFixedStepSize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useFixedStepSize</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">startDate</span>&gt;</span>$&#123;date_dim_begin_date&#125;<span class="tag">&lt;/<span class="name">startDate</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">endDate</span>&gt;</span>$&#123;date_dim_end_date&#125;<span class="tag">&lt;/<span class="name">endDate</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">outputFormat</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">outputFormat</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gen_DateTime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"t_time_id"</span> <span class="attr">size</span>=<span class="string">"16"</span> <span class="attr">type</span>=<span class="string">"CHAR"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">gen_ConvertNumberToString</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gen_Id</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">size</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">characters</span>&gt;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="tag">&lt;/<span class="name">characters</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">gen_ConvertNumberToString</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"cd_dep_employed_count"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">type</span>=<span class="string">"INTEGER"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gen_Null</span> <span class="attr">probability</span>=<span class="string">"$&#123;NULL_CHANCE&#125;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gen_WeightedListItem</span> <span class="attr">filename</span>=<span class="string">"dicts/bigbench/ds-genProbabilities.txt"</span> <span class="attr">list</span>=<span class="string">"dependent_count"</span> <span class="attr">valueColumn</span>=<span class="string">"0"</span> <span class="attr">weightColumn</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">gen_Null</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>dicts</strong>下有city.dict、country.dict、male.dict、female.dict、state.dict、mail_provider.dict等字典文件，表里每一条记录的各个字段应该是从这些字典里生成的。</p>
<p><strong>extlib</strong>下是引用的外部程序jar包。有 <code>lucene-core-4.9.0.jar</code>、<code>commons-net-3.3.jar</code>、<code>xml-apis.jar</code>和<code>log4j-1.2.15.jar</code>等</p>
<p><strong>总结</strong>：</p>
<p><code>pdgf.jar</code>根据<code>bigbench-generation.xml</code> 和 <code>bigbench-schema.xml</code>两个文件里的配置（表名、字段名、表的记录条数、每个字段生成的规则），从 <code>dicts</code> 目录下对应的 <code>.dict</code><br>文件获取表中每一条记录、每个字段的值，生成原始数据。</p>
<p><code>customer</code> 表里的某条记录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 AAAAAAAAAAAAAAAA 1824793 3203 2555 28776 14690 Ms. Marisa Harrington N 17 4 1988 UNITED ARAB EMIRATES RRCyuY3XfE3a Marisa.Harrington@lawyer.com   gdMmGdU9</span><br></pre></td></tr></table></figure>

<p>如果执行 TPCx-BB 测试时指定 <code>-f 1（SCALE_FACTOR = 1）</code> 则最终生成的原始数据总大小约为 1G(977M+8.6M)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node-20-100 ~]<span class="comment"># hdfs dfs -du -h /user/root/benchmarks/bigbench/data</span></span><br><span class="line">12.7 M   38.0 M   /user/root/benchmarks/bigbench/data/customer</span><br><span class="line">5.1 M    15.4 M   /user/root/benchmarks/bigbench/data/customer_address</span><br><span class="line">74.2 M   222.5 M  /user/root/benchmarks/bigbench/data/customer_demographics</span><br><span class="line">14.7 M   44.0 M   /user/root/benchmarks/bigbench/data/date_dim</span><br><span class="line">151.5 K  454.4 K  /user/root/benchmarks/bigbench/data/household_demographics</span><br><span class="line">327      981      /user/root/benchmarks/bigbench/data/income_band</span><br><span class="line">405.3 M  1.2 G    /user/root/benchmarks/bigbench/data/inventory</span><br><span class="line">6.5 M    19.5 M   /user/root/benchmarks/bigbench/data/item</span><br><span class="line">4.0 M    12.0 M   /user/root/benchmarks/bigbench/data/item_marketprices</span><br><span class="line">53.7 M   161.2 M  /user/root/benchmarks/bigbench/data/product_reviews</span><br><span class="line">45.3 K   135.9 K  /user/root/benchmarks/bigbench/data/promotion</span><br><span class="line">3.0 K    9.1 K    /user/root/benchmarks/bigbench/data/reason</span><br><span class="line">1.2 K    3.6 K    /user/root/benchmarks/bigbench/data/ship_mode</span><br><span class="line">3.3 K    9.9 K    /user/root/benchmarks/bigbench/data/store</span><br><span class="line">4.1 M    12.4 M   /user/root/benchmarks/bigbench/data/store_returns</span><br><span class="line">88.5 M   265.4 M  /user/root/benchmarks/bigbench/data/store_sales</span><br><span class="line">4.9 M    14.6 M   /user/root/benchmarks/bigbench/data/time_dim</span><br><span class="line">584      1.7 K    /user/root/benchmarks/bigbench/data/warehouse</span><br><span class="line">170.4 M  511.3 M  /user/root/benchmarks/bigbench/data/web_clickstreams</span><br><span class="line">7.9 K    23.6 K   /user/root/benchmarks/bigbench/data/web_page</span><br><span class="line">5.1 M    15.4 M   /user/root/benchmarks/bigbench/data/web_returns</span><br><span class="line">127.6 M  382.8 M  /user/root/benchmarks/bigbench/data/web_sales</span><br><span class="line">8.6 K    25.9 K   /user/root/benchmarks/bigbench/data/web_site</span><br></pre></td></tr></table></figure>

<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>要执行TPCx-BB测试，首先需要切换到TPCx-BB源程序的目录下，然后进入bin目录，执行以下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bigBench runBenchmark <span class="_">-f</span> 1 -m 8 <span class="_">-s</span> 2 -j 5</span><br></pre></td></tr></table></figure>

<p>其中，-f、-m、-s、-j都是参数，用户可根据集群的性能以及自己的需求来设置。如果不指定，则使用默认值，默认值在 <code>conf</code> 目录下的 <code>userSetting.conf</code> 文件指定，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_DATABASE=<span class="string">"bigbench"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_ENGINE=<span class="string">"hive"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_MAP_TASKS=<span class="string">"80"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_SCALE_FACTOR=<span class="string">"1000"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"2"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_BENCHMARK_PHASE=<span class="string">"run_query"</span></span><br></pre></td></tr></table></figure>

<p>默认 <code>MAP_TASKS</code> 为 <code>80（-m 80）</code>、<code>SCALE_FACTOR</code> 为 <code>1000（-f 1000）</code>、<code>NUMBER_OF_PARALLEL_STREAMS</code> 为 <code>2（-s 2）</code>。</p>
<p>所有可选参数及其意义如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">General options:</span><br><span class="line"><span class="_">-d</span>  使用的数据库 (默认: <span class="variable">$BIG_BENCH_DEFAULT_DATABASE</span> -&gt; bigbench)</span><br><span class="line"><span class="_">-e</span>  使用的引擎 (默认: <span class="variable">$BIG_BENCH_DEFAULT_ENGINE</span> -&gt; hive)</span><br><span class="line"><span class="_">-f</span>  数据集的规模因子（scale factor） (默认: <span class="variable">$BIG_BENCH_DEFAULT_SCALE_FACTOR</span> -&gt; 1000)</span><br><span class="line">-h  显示帮助</span><br><span class="line">-m  数据生成的`map tasks`数 (default: <span class="variable">$BIG_BENCH_DEFAULT_MAP_TASKS</span>)<span class="string">"</span></span><br><span class="line"><span class="string">-s  并行的`stream`数 (默认: <span class="variable">$BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS</span> -&gt; 2)</span></span><br><span class="line"><span class="string">Driver specific options:</span></span><br><span class="line"><span class="string">-a  伪装模式执行</span></span><br><span class="line"><span class="string">-b  执行期间将调用的bash脚本在标准输出中打印出来</span></span><br><span class="line"><span class="string">-i  指定需要执行的阶段 (详情见<span class="variable">$BIG_BENCH_CONF_DIR</span>/bigBench.properties)</span></span><br><span class="line"><span class="string">-j  指定需要执行的查询 (默认：1-30共30个查询均执行)"</span></span><br><span class="line">-U  解锁专家模式</span><br></pre></td></tr></table></figure>

<p>若指定了<code>-U</code>,即解锁了专家模式，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"EXPERT MODE ACTIVE"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"WARNING - INTERNAL USE ONLY:"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Only set manually if you know what you are doing!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Ignoring them is probably the best solution"</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Running individual modules:"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: `basename <span class="variable">$0</span>` module [options]"</span></span><br><span class="line">-D  指定需要debug的查询部分. 大部分查询都只有一个单独的部分</span><br><span class="line">-p  需要执行的benchmark phase (默认: <span class="variable">$BIG_BENCH_DEFAULT_BENCHMARK_PHASE</span> -&gt; run_query)<span class="string">"</span></span><br><span class="line"><span class="string">-q  指定需要执行哪个查询</span></span><br><span class="line"><span class="string">-t  指定执行查询时的stream数</span></span><br><span class="line"><span class="string">-v  metastore population的sql脚本 (默认: <span class="variable">$&#123;USER_POPULATE_FILE:-"$BIG_BENCH_POPULATION_DIR/hiveCreateLoad.sql"&#125;</span>)"</span></span><br><span class="line">-w  metastore refresh的sql脚本 (默认: <span class="variable">$&#123;USER_REFRESH_FILE:-"$BIG_BENCH_REFRESH_DIR/hiveRefreshCreateLoad.sql"&#125;</span>)<span class="string">"</span></span><br><span class="line"><span class="string">-y  含额外的用户自定义查询参数的文件 (global: <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/queryParameters.sql)"</span></span><br><span class="line">-z  含额外的用户自定义引擎设置的文件 (global: <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/engineSettings.sql)<span class="string">"</span></span><br><span class="line"><span class="string">List of available modules:</span></span><br><span class="line"><span class="string">    <span class="variable">$BIG_BENCH_ENGINE_BIN_DIR</span></span></span><br></pre></td></tr></table></figure>

<p>回到刚刚执行TPCx-BB测试的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bigBench runBenchmark -f 1 -m 8 -s 2 -j 5</span><br></pre></td></tr></table></figure>

<h3 id="bigBench"><a href="#bigBench" class="headerlink" title="bigBench"></a>bigBench</h3><p><code>bigBench</code>是主脚本，<code>runBenchmark</code>是module。</p>
<p><code>bigBench</code> 里设置了很多环境变量，因为后面调用 <code>runBigBench.jar</code> 的时候需要在Java程序里读取这些环境变量。</p>
<p><code>bigBench</code> 前面都是在做一些基本工作，如设置环境变量、解析用户输入参数、赋予文件权限、设置路径等等。到最后一步调用 <code>runBenchmark</code> 的 <code>runModule()</code> 方法：</p>
<p>1.设置基本路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> BIG_BENCH_VERSION=<span class="string">"1.0"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_BIN_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/bin"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_CONF_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/conf"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DATA_GENERATOR_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/data-generator"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_TOOLS_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/tools"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_LOGS_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/logs"</span></span><br></pre></td></tr></table></figure>

<p>2.指定 <code>core-site.xml</code> 和 <code>hdfs-site.xml</code> 的路径</p>
<p>数据生成时要用到Hadoop集群，生成在hdfs上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> BIG_BENCH_DATAGEN_CORE_SITE=<span class="string">"<span class="variable">$BIG_BENCH_HADOOP_CONF</span>/core-site.xml"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DATAGEN_HDFS_SITE=<span class="string">"<span class="variable">$BIG_BENCH_HADOOP_CONF</span>/hdfs-site.xml"</span></span><br></pre></td></tr></table></figure>

<p>3.赋予整个包下所有可执行文件权限（.sh/.jar/.py）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.sh'</span> -exec chmod 755 &#123;&#125; +</span><br><span class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.jar'</span> -exec chmod 755 &#123;&#125; +</span><br><span class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.py'</span> -exec chmod 755 &#123;&#125; +</span><br></pre></td></tr></table></figure>


<p>4.设置 <code>userSetting.conf</code> 的路径并 <code>source</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">USER_SETTINGS=<span class="string">"<span class="variable">$BIG_BENCH_CONF_DIR</span>/userSettings.conf"</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="string">"<span class="variable">$USER_SETTINGS</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"User settings file <span class="variable">$USER_SETTINGS</span> not found"</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$USER_SETTINGS</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<p>5.解析输入参数和选项并根据选项的内容作设置</p>
<p>第一个参数必须是<code>module_name</code></p>
<p>如果没有输入参数或者第一个参数以”-“开头，说明用户没有输入需要运行的module。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> <span class="_">-eq</span> 0 || <span class="string">"`echo "</span><span class="variable">$1</span><span class="string">" | cut -c1`"</span> = <span class="string">"-"</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">export</span> MODULE_NAME=<span class="string">""</span></span><br><span class="line">	 SHOW_HELP=<span class="string">"1"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	 <span class="built_in">export</span> MODULE_NAME=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">	 <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> LIST_OF_USER_OPTIONS=<span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>


<p>解析用户输入的参数</p>
<p>根据用户输入的参数来设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":d:D:e:f:hm:p:q:s:t:Uv:w:y:z:abi:j:"</span> OPT; <span class="keyword">do</span></span><br><span class="line">   <span class="keyword">case</span> <span class="string">"<span class="variable">$OPT</span>"</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment"># script options</span></span><br><span class="line">    d)</span><br><span class="line">      <span class="comment">#echo "-d was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_DATABASE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    D)</span><br><span class="line">      <span class="comment">#echo "-D was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      DEBUG_QUERY_PART=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    e)</span><br><span class="line">      <span class="comment">#echo "-e was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_ENGINE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    f)</span><br><span class="line">      <span class="comment">#echo "-f was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_SCALE_FACTOR=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    h)</span><br><span class="line">      <span class="comment">#echo "-h was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      SHOW_HELP=<span class="string">"1"</span></span><br><span class="line">    ;;</span><br><span class="line">    m)</span><br><span class="line">      <span class="comment">#echo "-m was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_MAP_TASKS=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    p)</span><br><span class="line">      <span class="comment">#echo "-p was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_BENCHMARK_PHASE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    q)</span><br><span class="line">      <span class="comment">#echo "-q was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      QUERY_NUMBER=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    s)</span><br><span class="line">      <span class="comment">#echo "-t was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    t)</span><br><span class="line">      <span class="comment">#echo "-s was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_STREAM_NUMBER=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    U)</span><br><span class="line">      <span class="comment">#echo "-U was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_EXPERT_MODE=<span class="string">"1"</span></span><br><span class="line">    ;;</span><br><span class="line">    v)</span><br><span class="line">      <span class="comment">#echo "-v was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_POPULATE_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    w)</span><br><span class="line">      <span class="comment">#echo "-w was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_REFRESH_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    y)</span><br><span class="line">      <span class="comment">#echo "-y was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_QUERY_PARAMS_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    z)</span><br><span class="line">      <span class="comment">#echo "-z was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      USER_ENGINE_SETTINGS_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    <span class="comment"># driver options</span></span><br><span class="line">    a)</span><br><span class="line">      <span class="comment">#echo "-a was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      <span class="built_in">export</span> USER_PRETEND_MODE=<span class="string">"1"</span></span><br><span class="line">    ;;</span><br><span class="line">    b)</span><br><span class="line">      <span class="comment">#echo "-b was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      <span class="built_in">export</span> USER_PRINT_STD_OUT=<span class="string">"1"</span></span><br><span class="line">    ;;</span><br><span class="line">    i)</span><br><span class="line">      <span class="comment">#echo "-i was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      <span class="built_in">export</span> USER_DRIVER_WORKLOAD=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    j)</span><br><span class="line">      <span class="comment">#echo "-j was triggered, Parameter: $OPTARG" &gt;&amp;2</span></span><br><span class="line">      <span class="built_in">export</span> USER_DRIVER_QUERIES_TO_RUN=<span class="string">"<span class="variable">$OPTARG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    \?)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Invalid option: -<span class="variable">$OPTARG</span>"</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">    :)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Option -<span class="variable">$OPTARG</span> requires an argument."</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>


<p>6.设置全局变量</p>
<p>如果用户指定了某个参数的值，则采用该值，否则使用默认值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> BIG_BENCH_EXPERT_MODE=<span class="string">"<span class="variable">$&#123;USER_EXPERT_MODE:-"0"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> SHOW_HELP=<span class="string">"<span class="variable">$&#123;SHOW_HELP:-"0"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_DATABASE=<span class="string">"<span class="variable">$&#123;USER_DATABASE:-"$BIG_BENCH_DEFAULT_DATABASE"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE=<span class="string">"<span class="variable">$&#123;USER_ENGINE:-"$BIG_BENCH_DEFAULT_ENGINE"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_MAP_TASKS=<span class="string">"<span class="variable">$&#123;USER_MAP_TASKS:-"$BIG_BENCH_DEFAULT_MAP_TASKS"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_SCALE_FACTOR=<span class="string">"<span class="variable">$&#123;USER_SCALE_FACTOR:-"$BIG_BENCH_DEFAULT_SCALE_FACTOR"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"<span class="variable">$&#123;USER_NUMBER_OF_PARALLEL_STREAMS:-"$BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_BENCHMARK_PHASE=<span class="string">"<span class="variable">$&#123;USER_BENCHMARK_PHASE:-"$BIG_BENCH_DEFAULT_BENCHMARK_PHASE"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_STREAM_NUMBER=<span class="string">"<span class="variable">$&#123;USER_STREAM_NUMBER:-"0"&#125;</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/engines/<span class="variable">$BIG_BENCH_ENGINE</span>"</span></span><br><span class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE_CONF_DIR=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_DIR</span>/conf"</span></span><br></pre></td></tr></table></figure>


<p>7.检测 -s -m -f -j的选项是否为数字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_MAP_TASKS</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_MAP_TASKS</span> is not a number"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_SCALE_FACTOR</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_SCALE_FACTOR</span> is not a number"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span> is not a number"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_STREAM_NUMBER</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_STREAM_NUMBER</span> is not a number"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>8.检查引擎是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_DIR</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"Engine directory <span class="variable">$BIG_BENCH_ENGINE_DIR</span> not found. Aborting script..."</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Engine configuration directory <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span> not found. Aborting script..."</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>9.设置 <code>engineSetting.conf</code> 路径并 <code>source</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENGINE_SETTINGS=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/engineSettings.conf"</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="string">"<span class="variable">$ENGINE_SETTINGS</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"Engine settings file <span class="variable">$ENGINE_SETTINGS</span> not found"</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$ENGINE_SETTINGS</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>10.检查module是否存在</p>
<p>当输入某个module时，系统会先到<code>$BIG_BENCH_ENGINE_BIN_DIR/</code>目录下去找该module是否存在，如果存在，就<code>source &quot;$MODULE&quot;</code>；如果该目录下不存在指定的module，再到<code>export MODULE=&quot;$BIG_BENCH_BIN_DIR/&quot;</code>目录下找该module，如果存在，就<code>source &quot;$MODULE&quot;</code>；否则，输出<code>Module $MODULE not found, aborting script.</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MODULE=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_BIN_DIR</span>/<span class="variable">$MODULE_NAME</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$MODULE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$MODULE</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	 <span class="built_in">export</span> MODULE=<span class="string">"<span class="variable">$BIG_BENCH_BIN_DIR</span>/<span class="variable">$MODULE_NAME</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$MODULE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$MODULE</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"Module <span class="variable">$MODULE</span> not found, aborting script."</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>11.检查module里的runModule（）、helpModule ( )、runEngineCmd()方法是否有定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MODULE_RUN_METHOD=<span class="string">"runModule"</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">declare</span> -F <span class="string">"<span class="variable">$MODULE_RUN_METHOD</span>"</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$MODULE_RUN_METHOD</span> was not implemented, aborting script"</span></span><br><span class="line">	 <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>12.运行<code>module</code></p>
<p>如果module是runBenchmark，执行<br><code>runCmdWithErrorCheck &quot;$MODULE_RUN_METHOD&quot;</code><br>也就是<br><code>runCmdWithErrorCheck runModule（）</code></p>
<p><strong>由上可以看出，bigBench脚本主要执行一些如设置环境变量、赋予权限、检查并解析输入参数等基础工作，最终调用<code>runBenchmark</code>的<code>runModule()</code>方法继续往下执行。</strong></p>
<h3 id="runBenchmark"><a href="#runBenchmark" class="headerlink" title="runBenchmark"></a>runBenchmark</h3><p>接下来看看<code>runBenchmark</code>脚本。</p>
<p><code>runBenchmark</code>里有两个函数：<code>helpModule ()</code>和<code>runModule ()</code>。</p>
<p><code>helpModule ()</code>就是显示帮助。</p>
<p><code>runModule ()</code>是运行<code>runBenchmark</code>模块时真正调用的函数。该函数主要做四件事：</p>
<ol>
<li>清除之前生成的日志</li>
<li>调用<code>RunBigBench.jar</code>来执行</li>
<li>logEnvInformation</li>
<li>将日志文件夹打包成zip</li>
</ol>
<p>源码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">runModule</span></span> () &#123;</span><br><span class="line">  <span class="comment">#check input parameters</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span>"</span> -le 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The number of parallel streams -s must be greater than 0"</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> cleanLogs -U <span class="variable">$LIST_OF_USER_OPTIONS</span></span><br><span class="line">  <span class="string">"<span class="variable">$BIG_BENCH_JAVA</span>"</span> -jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/RunBigBench.jar"</span></span><br><span class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> <span class="built_in">log</span>EnvInformation -U <span class="variable">$LIST_OF_USER_OPTIONS</span></span><br><span class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> zipLogs -U <span class="variable">$LIST_OF_USER_OPTIONS</span></span><br><span class="line">  <span class="built_in">return</span> $?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于运行<code>runBenchmark</code>模块时又调用了<code>cleanLogs</code>、<code>logEnvInformation</code>、<code>zipLogs</code>三个模块以及<code>RunBigBench.jar</code>。其中<code>RunBigBench.jar</code>是TCPx-BB测试执行的核心代码，用Java语言编写。接下来分析<code>RunBigBench.jar</code>源码。</p>
<h3 id="runModule"><a href="#runModule" class="headerlink" title="runModule()"></a>runModule()</h3><p>runModule()函数用来执行某个module。我们已知，执行某个module需要切换到主目录下的bin目录，然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bigBench module_name arguments</span><br></pre></td></tr></table></figure>

<p>在runModule()函数里，cmdLine用来生成如上命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList cmdLine = <span class="keyword">new</span> ArrayList();</span><br><span class="line">cmdLine.add(<span class="string">"bash"</span>);</span><br><span class="line">cmdLine.add(<span class="keyword">this</span>.runScript);</span><br><span class="line">cmdLine.add(benchmarkPhase.getRunModule());</span><br><span class="line">cmdLine.addAll(arguments);</span><br></pre></td></tr></table></figure>

<p>其中，<code>this.runScript</code>为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runScript = (String)env.get(<span class="string">"BIG_BENCH_BIN_DIR"</span>) + <span class="string">"/bigBench"</span>;</span><br></pre></td></tr></table></figure>

<p><code>benchmarkPhase.getRunModule()</code>用来获得需要执行的module。</p>
<p><code>arguments</code>为用户输入的参数。</p>
<p>至此，cmdLine为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash <span class="variable">$BIG_BENCH_BIN_DIR</span>/bigBench module_name arguments</span><br></pre></td></tr></table></figure>

<p><strong>那么，怎么让系统执行该bash命令呢？答案是调用<code>runCmd()</code>方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> successful = <span class="keyword">this</span>.runCmd(<span class="keyword">this</span>.homeDir, benchmarkPhase.isPrintStdOut(), (String[])cmdLine.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure>

<p>接下来介绍rumCmd()方法</p>
<h3 id="runCmd"><a href="#runCmd" class="headerlink" title="runCmd()"></a>runCmd()</h3><p>runCmd()方法通过<code>ProcessBuilder</code>来创建一个操作系统进程，并用该进程执行以上的bash命令。</p>
<p><code>ProcessBuilder</code>还可以设置工作目录和环境。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(command);</span><br><span class="line">pb.directory(<span class="keyword">new</span> File(workingDirectory));</span><br><span class="line">Process p = <span class="keyword">null</span>;</span><br><span class="line">---</span><br><span class="line">p = pb.start();</span><br></pre></td></tr></table></figure>

<h3 id="getQueryList"><a href="#getQueryList" class="headerlink" title="getQueryList()"></a>getQueryList()</h3><p>getQueryList()用来获得需要执行的查询列表。从<code>$BIG_BENCH_LOGS_DIR/bigBench.properties</code>文件中读取。与<code>$BIG_BENCH_HOME/conf/bigBench.properties</code>内容一致。</p>
<p><code>bigBench.properties</code>里<code>power_test_0=1-30</code>规定了<code>powter_test_0</code>阶段需要执行的查询及其顺序。</p>
<p>可以用区间如 <code>5-12</code> 或者单个数字如 <code>21</code> 表示，中间用 <code>,</code> 隔开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">power_test_0=28-25,2-5,10,22,30</span><br></pre></td></tr></table></figure>

<p>表示<code>powter_test_0</code>阶段需要执行的查询及其顺序为：<code>25,26,27,28,2,3,4,5,10,22,30</code></p>
<p>如果想让30个查询按顺序执行，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">power_test_0=1-30</span><br></pre></td></tr></table></figure>

<p>获得查询列表的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getQueryList</span><span class="params">(BigBench.BenchmarkPhase benchmarkPhase, <span class="keyword">int</span> streamNumber)</span> </span>&#123;</span><br><span class="line">    String SHUFFLED_NAME_PATTERN = <span class="string">"shuffledQueryList"</span>;</span><br><span class="line">    BigBench.BenchmarkPhase queryOrderBasicPhase = BigBench.BenchmarkPhase.POWER_TEST;</span><br><span class="line">    String propertyKey = benchmarkPhase.getQueryListProperty(streamNumber);</span><br><span class="line">    <span class="keyword">boolean</span> queryOrderCached = benchmarkPhase.isQueryOrderCached();</span><br><span class="line">    <span class="keyword">if</span>(queryOrderCached &amp;&amp; <span class="keyword">this</span>.queryListCache.containsKey(propertyKey)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList((Collection)<span class="keyword">this</span>.queryListCache.get(propertyKey));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object queryList;</span><br><span class="line">        String basicPhaseNamePattern;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.properties.containsKey(propertyKey)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(benchmarkPhase.isQueryOrderRandom()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.queryListCache.containsKey(<span class="string">"shuffledQueryList"</span>)) &#123;</span><br><span class="line">                    basicPhaseNamePattern = queryOrderBasicPhase.getQueryListProperty(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="keyword">this</span>.properties.containsKey(basicPhaseNamePattern)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property "</span> + basicPhaseNamePattern + <span class="string">" is not defined, but is the basis for shuffling the query list."</span>);</span><br><span class="line">                    &#125;                      <span class="keyword">this</span>.queryListCache.put(<span class="string">"shuffledQueryList"</span>, <span class="keyword">this</span>.getQueryList(queryOrderBasicPhase, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                queryList = (List)<span class="keyword">this</span>.queryListCache.get(<span class="string">"shuffledQueryList"</span>);                  <span class="keyword">this</span>.shuffleList((List)queryList, <span class="keyword">this</span>.rnd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                queryList = <span class="keyword">this</span>.getQueryList(queryOrderBasicPhase, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            queryList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            String[] var11;</span><br><span class="line">            <span class="keyword">int</span> var10 = (var11 = <span class="keyword">this</span>.properties.getProperty(propertyKey).split(<span class="string">","</span>)).length;</span><br><span class="line">            label65:</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var9 = <span class="number">0</span>; var9 &lt; var10; ++var9) &#123;</span><br><span class="line">                basicPhaseNamePattern = var11[var9];</span><br><span class="line">                String[] queryRange = basicPhaseNamePattern.trim().split(<span class="string">"-"</span>);</span><br><span class="line">                <span class="keyword">switch</span>(queryRange.length) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:                       ((List)queryList).add(Integer.valueOf(Integer.parseInt(queryRange[<span class="number">0</span>].trim())));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">int</span> startQuery = Integer.parseInt(queryRange[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">int</span> endQuery = Integer.parseInt(queryRange[<span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">int</span> i;</span><br><span class="line">                    <span class="keyword">if</span>(startQuery &gt; endQuery) &#123;</span><br><span class="line">                        i = startQuery;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(i &lt; endQuery) &#123;</span><br><span class="line">                                <span class="keyword">continue</span> label65;</span><br><span class="line">                            &#125;                               ((List)queryList).add(Integer.valueOf(i));</span><br><span class="line">                            --i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        i = startQuery;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(i &gt; endQuery) &#123;</span><br><span class="line">                                <span class="keyword">continue</span> label65;</span><br><span class="line">                            &#125;                              ((List)queryList).add(Integer.valueOf(i));</span><br><span class="line">                            ++i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Query numbers must be in the form X or X-Y, comma separated."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(queryOrderCached) &#123;              <span class="keyword">this</span>.queryListCache.put(propertyKey, <span class="keyword">new</span> ArrayList((Collection)queryList));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList((Collection)queryList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="parseEnvironment"><a href="#parseEnvironment" class="headerlink" title="parseEnvironment()"></a>parseEnvironment()</h3><p>parseEnvironment()读取系统的环境变量并解析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map env = System.getenv();</span><br><span class="line"><span class="keyword">this</span>.version = (String)env.get(<span class="string">"BIG_BENCH_VERSION"</span>);</span><br><span class="line"><span class="keyword">this</span>.homeDir = (String)env.get(<span class="string">"BIG_BENCH_HOME"</span>);</span><br><span class="line"><span class="keyword">this</span>.confDir = (String)env.get(<span class="string">"BIG_BENCH_CONF_DIR"</span>);</span><br><span class="line"><span class="keyword">this</span>.runScript = (String)env.get(<span class="string">"BIG_BENCH_BIN_DIR"</span>) + <span class="string">"/bigBench"</span>;</span><br><span class="line"><span class="keyword">this</span>.datagenDir = (String)env.get(<span class="string">"BIG_BENCH_DATA_GENERATOR_DIR"</span>);</span><br><span class="line"><span class="keyword">this</span>.logDir = (String)env.get(<span class="string">"BIG_BENCH_LOGS_DIR"</span>);</span><br><span class="line"><span class="keyword">this</span>.dataGenLogFile = (String)env.get(<span class="string">"BIG_BENCH_DATAGEN_STAGE_LOG"</span>);</span><br><span class="line"><span class="keyword">this</span>.loadLogFile = (String)env.get(<span class="string">"BIG_BENCH_LOADING_STAGE_LOG"</span>);</span><br><span class="line"><span class="keyword">this</span>.engine = (String)env.get(<span class="string">"BIG_BENCH_ENGINE"</span>);</span><br><span class="line"><span class="keyword">this</span>.database = (String)env.get(<span class="string">"BIG_BENCH_DATABASE"</span>);</span><br><span class="line"><span class="keyword">this</span>.mapTasks = (String)env.get(<span class="string">"BIG_BENCH_MAP_TASKS"</span>);</span><br><span class="line"><span class="keyword">this</span>.numberOfParallelStreams = Integer.parseInt((String)env.get(<span class="string">"BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS"</span>));</span><br><span class="line"><span class="keyword">this</span>.scaleFactor = Long.parseLong((String)env.get(<span class="string">"BIG_BENCH_SCALE_FACTOR"</span>));</span><br><span class="line"><span class="keyword">this</span>.stopAfterFailure = ((String)env.get(<span class="string">"BIG_BENCH_STOP_AFTER_FAILURE"</span>)).equals(<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure>

<p>并自动在用户指定的参数后面加上 <code>-U</code> (解锁专家模式)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.userArguments.add(<span class="string">"-U"</span>);</span><br></pre></td></tr></table></figure>

<p>如果用户指定了 <code>PRETEND_MODE</code>、<code>PRINT_STD_OUT</code>、<code>WORKLOAD</code>、<code>QUERIES_TO_RUN</code>，则以用户指定的参数为准，否则使用默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_PRETEND_MODE"</span>)) &#123;</span><br><span class="line">	<span class="keyword">this</span>.properties.setProperty(<span class="string">"pretend_mode"</span>, (String)env.get(<span class="string">"USER_PRETEND_MODE"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_PRINT_STD_OUT"</span>)) &#123;  <span class="keyword">this</span>.properties.setProperty(<span class="string">"show_command_stdout"</span>, (String)env.get(<span class="string">"USER_PRINT_STD_OUT"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_DRIVER_WORKLOAD"</span>)) &#123;</span><br><span class="line">   <span class="keyword">this</span>.properties.setProperty(<span class="string">"workload"</span>, (String)env.get(<span class="string">"USER_DRIVER_WORKLOAD"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_DRIVER_QUERIES_TO_RUN"</span>)) &#123;	<span class="keyword">this</span>.properties.setProperty(BigBench.BenchmarkPhase.POWER_TEST.getQueryListProperty(<span class="number">0</span>), (String)env.get(<span class="string">"USER_DRIVER_QUERIES_TO_RUN"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取 <code>workload</code> 并赋值 <code>benchmarkPhases</code>。如果 <code>workload</code> 里不包含 <code>BENCHMARK_START</code> 和 <code>BENCHMARK_STOP</code>，自动在 <code>benchmarkPhases</code> 的首位和末位分别加上 <code>BENCHMARK_START</code> 和 <code>BENCHMARK_STOP</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.benchmarkPhases = <span class="keyword">new</span> ArrayList();</span><br><span class="line">Iterator var7 = Arrays.asList(<span class="keyword">this</span>.properties.getProperty(<span class="string">"workload"</span>).split(<span class="string">","</span>)).iterator();</span><br><span class="line">	</span><br><span class="line"><span class="keyword">while</span>(var7.hasNext()) &#123;</span><br><span class="line">    String benchmarkPhase = (String)var7.next();</span><br><span class="line">    <span class="keyword">this</span>.benchmarkPhases.add(BigBench.BenchmarkPhase.valueOf(benchmarkPhase.trim()));</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.benchmarkPhases.contains(BigBench.BenchmarkPhase.BENCHMARK_START)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.benchmarkPhases.add(<span class="number">0</span>, BigBench.BenchmarkPhase.BENCHMARK_START);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.benchmarkPhases.contains(BigBench.BenchmarkPhase.BENCHMARK_STOP)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.benchmarkPhases.add(BigBench.BenchmarkPhase.BENCHMARK_STOP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><p><code>run()</code> 方法是 <code>RunBigBench.jar</code> 里核心的方法。所有的执行都是通过 <code>run()</code> 方法调用的。比如 <code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code>等。<code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code> 又通过调用 <code>runCmd()</code> 方法来创建操作系统进程，执行bash命令，调用bash脚本。</p>
<p><code>run()</code> 方法里通过一个 <code>while</code> 循环来逐一执行 <code>workload</code> 里的每一个 <code>benchmarkPhase</code>。 不同的 <code>benchmarkPhase</code> 会调用 <code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code>…中的不同方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">long</span> e = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">this</span>.log.finer(<span class="string">"Benchmark phases: "</span> + <span class="keyword">this</span>.benchmarkPhases);</span><br><span class="line">Iterator startCheckpoint = <span class="keyword">this</span>.benchmarkPhases.iterator();</span><br><span class="line"><span class="keyword">long</span> throughputStart;</span><br><span class="line"><span class="keyword">while</span>(startCheckpoint.hasNext()) &#123;</span><br><span class="line">    BigBench.BenchmarkPhase children = (BigBench.BenchmarkPhase)startCheckpoint.next();</span><br><span class="line">    <span class="keyword">if</span>(children.isPhaseDone()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log.info(<span class="string">"The phase "</span> + children.name() + <span class="string">" was already performed earlier. Skipping this phase"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>($SWITCH_TABLE$io$bigdatabenchmark$v1$driver$BigBench$BenchmarkPhase()[children.ordinal()]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The value "</span> + children.name() + <span class="string">" is only used internally."</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:                                    <span class="keyword">this</span>.log.info(children.getConsoleMessage());</span><br><span class="line">                e = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span>(!BigBench.BenchmarkPhase.BENCHMARK_START.isPhaseDone()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Error: Cannot stop the benchmark before starting it"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                throughputStart = System.currentTimeMillis();</span><br><span class="line">              <span class="keyword">this</span>.log.info(String.format(<span class="string">"%-55s finished. Time: %25s"</span>, <span class="keyword">new</span> Object[]&#123;children.getConsoleMessage(), BigBench.Helper.formatTime(throughputStart - e)&#125;));               <span class="keyword">this</span>.logTreeRoot.setCheckpoint(<span class="keyword">new</span> BigBench.Checkpoint(BigBench.BenchmarkPhase.BENCHMARK, -<span class="number">1L</span>, -<span class="number">1L</span>, e, throughputStart, <span class="keyword">this</span>.logTreeRoot.isSuccessful()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">28</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">29</span>:</span><br><span class="line">                <span class="keyword">this</span>.runModule(children, <span class="keyword">this</span>.userArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, validationArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">this</span>.runModule(children, validationArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, validationArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, validationArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">                <span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, <span class="keyword">this</span>.userArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                <span class="keyword">this</span>.runQueries(children, <span class="keyword">this</span>.numberOfParallelStreams, <span class="keyword">this</span>.userArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, <span class="keyword">this</span>.userArguments);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, <span class="keyword">this</span>.userArguments);</span><br><span class="line">            &#125;</span><br><span class="line">            children.setPhaseDone(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var21) &#123;</span><br><span class="line">            <span class="keyword">this</span>.log.info(<span class="string">"==============\nBenchmark run terminated\nReason: An error occured while running a command in phase "</span> + children + <span class="string">"\n=============="</span>);</span><br><span class="line">            var21.printStackTrace();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.stopAfterFailure || children.mustSucceed()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 <code>case 1-29</code> 并不是 <code>1-29</code> 条查询，而是枚举类型里的 <code>1-29</code> 个 <code>benmarkPhase</code> 。如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">enum</span> BenchmarkPhase &#123;</span><br><span class="line">BENCHMARK((String)<span class="keyword">null</span>, <span class="string">"benchmark"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark"</span>),</span><br><span class="line">BENCHMARK_START((String)<span class="keyword">null</span>, <span class="string">"benchmark_start"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark: Start"</span>),</span><br><span class="line">BENCHMARK_STOP((String)<span class="keyword">null</span>, <span class="string">"benchmark_stop"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark: Stop"</span>),</span><br><span class="line">CLEAN_ALL(<span class="string">"cleanAll"</span>, <span class="string">"clean_all"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean all"</span>),</span><br><span class="line">ENGINE_VALIDATION_CLEAN_POWER_TEST(<span class="string">"cleanQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean power test queries"</span>),</span><br><span class="line">ENGINE_VALIDATION_CLEAN_LOAD_TEST(<span class="string">"cleanMetastore"</span>, <span class="string">"engine_validation_metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean metastore"</span>),</span><br><span class="line">ENGINE_VALIDATION_CLEAN_DATA(<span class="string">"cleanData"</span>, <span class="string">"engine_validation_data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean data"</span>),</span><br><span class="line">ENGINE_VALIDATION_DATA_GENERATION(<span class="string">"dataGen"</span>, <span class="string">"engine_validation_data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench engine validation: Data generation"</span>),</span><br><span class="line">ENGINE_VALIDATION_LOAD_TEST(<span class="string">"populateMetastore"</span>, <span class="string">"engine_validation_metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench engine validation: Populate metastore"</span>),</span><br><span class="line">ENGINE_VALIDATION_POWER_TEST(<span class="string">"runQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Power test"</span>),</span><br><span class="line">ENGINE_VALIDATION_RESULT_VALIDATION(<span class="string">"validateQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Check all query results"</span>),</span><br><span class="line">CLEAN_POWER_TEST(<span class="string">"cleanQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean power test queries"</span>),</span><br><span class="line">CLEAN_THROUGHPUT_TEST_1(<span class="string">"cleanQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean first throughput test queries"</span>),</span><br><span class="line">CLEAN_THROUGHPUT_TEST_2(<span class="string">"cleanQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean second throughput test queries"</span>),</span><br><span class="line">CLEAN_LOAD_TEST(<span class="string">"cleanMetastore"</span>, <span class="string">"metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Load test"</span>),</span><br><span class="line">CLEAN_DATA(<span class="string">"cleanData"</span>, <span class="string">"data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Data"</span>),</span><br><span class="line">DATA_GENERATION(<span class="string">"dataGen"</span>, <span class="string">"data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench preparation: Data generation"</span>),</span><br><span class="line">LOAD_TEST(<span class="string">"populateMetastore"</span>, <span class="string">"metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench phase 1: Load test"</span>),</span><br><span class="line">POWER_TEST(<span class="string">"runQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 2: Power test"</span>),</span><br><span class="line">THROUGHPUT_TEST((String)<span class="keyword">null</span>, <span class="string">"throughput_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Throughput test"</span>),</span><br><span class="line">THROUGHPUT_TEST_1(<span class="string">"runQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: First throughput test run"</span>),</span><br><span class="line">THROUGHPUT_TEST_REFRESH(<span class="string">"refreshMetastore"</span>, <span class="string">"throughput_test_refresh"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Throughput test data refresh"</span>),</span><br><span class="line">THROUGHPUT_TEST_2(<span class="string">"runQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Second throughput test run"</span>),</span><br><span class="line">VALIDATE_POWER_TEST(<span class="string">"validateQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: Power test results"</span>),</span><br><span class="line">VALIDATE_THROUGHPUT_TEST_1(<span class="string">"validateQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: First throughput test results"</span>),</span><br><span class="line">VALIDATE_THROUGHPUT_TEST_2(<span class="string">"validateQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: Second throughput test results"</span>),</span><br><span class="line">SHOW_TIMES(<span class="string">"showTimes"</span>, <span class="string">"show_times"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query times"</span>),</span><br><span class="line">SHOW_ERRORS(<span class="string">"showErrors"</span>, <span class="string">"show_errors"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query errors"</span>),</span><br><span class="line">SHOW_VALIDATION(<span class="string">"showValidation"</span>, <span class="string">"show_validation"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query validation results"</span>);</span><br><span class="line"><span class="keyword">private</span> String runModule;</span><br><span class="line"><span class="keyword">private</span> String namePattern;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> queryOrderRandom;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> queryOrderCached;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> printStdOut;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mustSucceed;</span><br><span class="line"><span class="keyword">private</span> String consoleMessage;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> phaseDone;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BenchmarkPhase</span><span class="params">(String runModule, String namePattern, <span class="keyword">boolean</span> queryOrderRandom, <span class="keyword">boolean</span> queryOrderCached, <span class="keyword">boolean</span> printStdOut, <span class="keyword">boolean</span> mustSucceed, String consoleMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.runModule = runModule;</span><br><span class="line">    <span class="keyword">this</span>.namePattern = namePattern;</span><br><span class="line">    <span class="keyword">this</span>.queryOrderRandom = queryOrderRandom;</span><br><span class="line">    <span class="keyword">this</span>.queryOrderCached = queryOrderCached;</span><br><span class="line">    <span class="keyword">this</span>.printStdOut = printStdOut;</span><br><span class="line">    <span class="keyword">this</span>.mustSucceed = mustSucceed;</span><br><span class="line">    <span class="keyword">this</span>.consoleMessage = consoleMessage;</span><br><span class="line">    <span class="keyword">this</span>.phaseDone = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3对应 <code>BENCHMARK_STOP</code>，4对应 <code>CLEAN_ALL</code>,29对应 <code>SHOW_VALIDATION</code>，依此类推…</p>
<p>可以看出：</p>
<p><code>CLEAN_ALL、CLEAN_LOAD_TEST、LOAD_TEST、THROUGHPUT_TEST_REFRESH、SHOW_TIMES、SHOW_ERRORS、SHOW_VALIDATION</code>等benchmarkPhases调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runModule(children, <span class="keyword">this</span>.userArguments);</span><br></pre></td></tr></table></figure>

<p>方法是 <code>runModule</code> ，参数是 <code>this.userArguments</code>。</p>
<p><code>ENGINE_VALIDATION_CLEAN_POWER_TEST、ENGINE_VALIDATION_POWER_TEST、ENGINE_VALIDATION_RESULT_VALIDATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, validationArguments);</span><br></pre></td></tr></table></figure>

<p>方法是 <code>runQueries</code> ，参数是 <code>1</code>(stream number) 和 <code>validationArguments</code>。</p>
<p><code>ENGINE_VALIDATION_CLEAN_LOAD_TEST</code> 和 <code>ENGINE_VALIDATION_LOAD_TEST</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runModule(children, validationArguments);</span><br></pre></td></tr></table></figure>

<p><code>ENGINE_VALIDATION_CLEAN_DATA</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, validationArguments);</span><br></pre></td></tr></table></figure>

<p><code>ENGINE_VALIDATION_DATA_GENERATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, validationArguments);</span><br></pre></td></tr></table></figure>

<p><code>CLEAN_POWER_TEST</code>、<code>POWER_TEST</code>、<code>VALIDATE_POWER_TEST</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, <span class="keyword">this</span>.userArguments);</span><br></pre></td></tr></table></figure>

<p><code>CLEAN_THROUGHPUT_TEST_1``CLEAN_THROUGHPUT_TEST_2``THROUGHPUT_TEST_1``THROUGHPUT_TEST_2``VALIDATE_THROUGHPUT_TEST_1</code> <code>VALIDATE_THROUGHPUT_TEST_2</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.runQueries(children, <span class="keyword">this</span>.numberOfParallelStreams, <span class="keyword">this</span>.userArguments);</span><br></pre></td></tr></table></figure>

<p><code>CLEAN_DATA</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, <span class="keyword">this</span>.userArguments);</span><br></pre></td></tr></table></figure>

<p><code>DATA_GENERATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, <span class="keyword">this</span>.userArguments);</span><br></pre></td></tr></table></figure>

<p>总结一下以上的方法调用可以发现：</p>
<ul>
<li>跟 <code>ENGINE_VALIDATION</code> 相关的benchmarkPhase用的参数都是 <code>validationArguments</code>。其余用的是 <code>userArguments</code></li>
<li>跟 <code>POWER_TEST</code> 相关的都是调用 <code>runQueries()</code> 方法，因为 <code>POWER_TEST</code> 就是执行SQL查询</li>
<li>跟 <code>CLEAN_DATA</code> <code>DATA_GENERATION</code> 相关的都是调用 <code>generateData()</code> 方法</li>
<li>跟 <code>LOAD_TEST</code> <code>SHOW</code> 相关的都是调用 <code>runModule()</code> 方法</li>
</ul>
<h3 id="benchmarkPhase-和-module-对应关系"><a href="#benchmarkPhase-和-module-对应关系" class="headerlink" title="benchmarkPhase 和 module 对应关系"></a>benchmarkPhase 和 module 对应关系</h3><p>具体每个 <code>benchmarkPhase</code> 跟 <code>module</code>（执行的脚本）的对应关系如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CLEAN_ALL -&gt; <span class="string">"cleanAll"</span></span><br><span class="line">ENGINE_VALIDATION_CLEAN_POWER_TEST -&gt; <span class="string">"cleanQuery"</span></span><br><span class="line">ENGINE_VALIDATION_CLEAN_LOAD_TEST -&gt; <span class="string">"cleanMetastore"</span>,</span><br><span class="line">ENGINE_VALIDATION_CLEAN_DATA -&gt; <span class="string">"cleanData"</span></span><br><span class="line">ENGINE_VALIDATION_DATA_GENERATION -&gt; <span class="string">"dataGen"</span></span><br><span class="line">ENGINE_VALIDATION_LOAD_TEST -&gt; <span class="string">"populateMetastore"</span></span><br><span class="line">ENGINE_VALIDATION_POWER_TEST -&gt; <span class="string">"runQuery"</span></span><br><span class="line">ENGINE_VALIDATION_RESULT_VALIDATION -&gt; <span class="string">"validateQuery"</span></span><br><span class="line">CLEAN_POWER_TEST -&gt; <span class="string">"cleanQuery"</span></span><br><span class="line">CLEAN_THROUGHPUT_TEST_1 -&gt; <span class="string">"cleanQuery"</span></span><br><span class="line">CLEAN_THROUGHPUT_TEST_2 -&gt; <span class="string">"cleanQuery"</span></span><br><span class="line">CLEAN_LOAD_TEST -&gt; <span class="string">"cleanMetastore"</span></span><br><span class="line">CLEAN_DATA -&gt; <span class="string">"cleanData"</span></span><br><span class="line">DATA_GENERATION -&gt; <span class="string">"dataGen"</span></span><br><span class="line">LOAD_TEST -&gt; <span class="string">"populateMetastore"</span></span><br><span class="line">POWER_TEST -&gt; <span class="string">"runQuery"</span></span><br><span class="line">THROUGHPUT_TEST -&gt; (String)<span class="keyword">null</span></span><br><span class="line">THROUGHPUT_TEST_1 -&gt; <span class="string">"runQuery"</span></span><br><span class="line">THROUGHPUT_TEST_REFRESH -&gt; <span class="string">"refreshMetastore"</span></span><br><span class="line">THROUGHPUT_TEST_2 -&gt; <span class="string">"runQuery"</span></span><br><span class="line">VALIDATE_POWER_TEST -&gt; <span class="string">"validateQuery"</span></span><br><span class="line">VALIDATE_THROUGHPUT_TEST_1 -&gt; <span class="string">"validateQuery"</span></span><br><span class="line">VALIDATE_THROUGHPUT_TEST_2 -&gt; <span class="string">"validateQuery"</span></span><br><span class="line">SHOW_TIMES -&gt; <span class="string">"showTimes"</span></span><br><span class="line">SHOW_ERRORS -&gt; <span class="string">"showErrors"</span></span><br><span class="line">SHOW_VALIDATION -&gt; <span class="string">"showValidation"</span></span><br></pre></td></tr></table></figure>

<p>当执行某个 <code>benchmarkPhase</code> 时会去调用如上该 <code>benchmarkPhase</code> 对应的 <code>module</code> （脚本位于 <code>$BENCH_MARK_HOME/engines/hive/bin</code> 目录下）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cmdLine.add(benchmarkPhase.getRunModule());</span><br></pre></td></tr></table></figure>

<h3 id="程序调用流程"><a href="#程序调用流程" class="headerlink" title="程序调用流程"></a>程序调用流程</h3><p><img src="./bigBench.png" alt="Alt text"></p>
<p>接下来介绍每个module的功能</p>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><h3 id="cleanAll"><a href="#cleanAll" class="headerlink" title="cleanAll"></a>cleanAll</h3><pre><code>1. DROP DATABASE
2. 删除hdfs上的源数据</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"dropping database (with all tables)"</span></span><br><span class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-e</span> <span class="string">"DROP DATABASE IF EXISTS <span class="variable">$BIG_BENCH_DATABASE</span> CASCADE;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_HOME&#125;</span>"</span></span><br><span class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_HOME&#125;</span>"</span></span><br></pre></td></tr></table></figure>

<h3 id="cleanQuery"><a href="#cleanQuery" class="headerlink" title="cleanQuery"></a>cleanQuery</h3><pre><code>1. 删除对应的 Query 生成的临时表
2. 删除对应的 Query 生成的结果表</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-e</span> <span class="string">"DROP TABLE IF EXISTS <span class="variable">$TEMP_TABLE1</span>; DROP TABLE IF EXISTS <span class="variable">$TEMP_TABLE2</span>; DROP TABLE IF EXISTS <span class="variable">$RESULT_TABLE</span>;"</span></span><br><span class="line"><span class="built_in">return</span> $?</span><br></pre></td></tr></table></figure>

<h3 id="cleanMetastore"><a href="#cleanMetastore" class="headerlink" title="cleanMetastore"></a>cleanMetastore</h3><pre><code>1. 调用 `dropTables.sql` 将23张表依次DROP</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"cleaning metastore tables"</span></span><br><span class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-f</span> <span class="string">"<span class="variable">$BIG_BENCH_CLEAN_METASTORE_FILE</span>"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> BIG_BENCH_CLEAN_METASTORE_FILE=<span class="string">"<span class="variable">$BIG_BENCH_CLEAN_DIR</span>/dropTables.sql"</span></span><br></pre></td></tr></table></figure>

<p><code>dropTables.sql</code> 将23张表依次DROP,源码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerAddressTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerDemographicsTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:dateTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:householdDemographicsTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:incomeTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:itemTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:promotionTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:reasonTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:shipModeTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:timeTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:warehouseTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webSiteTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webPageTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:inventoryTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeSalesTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeReturnsTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webSalesTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webReturnsTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:marketPricesTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:clickstreamsTableName&#125;;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:reviewsTableName&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="cleanData"><a href="#cleanData" class="headerlink" title="cleanData"></a>cleanData</h3><pre><code>1. 删除hdfs上 /user/root/benchmarks/bigbench/data 目录
2. 删除hdfs上 /user/root/benchmarks/bigbench/data_refresh 目录</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></span><br><span class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></span><br><span class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line"><span class="comment">### dataGen</span></span><br><span class="line"></span><br><span class="line">	1. 创建目录 /user/root/benchmarks/bigbench/data 并赋予权限</span><br><span class="line">	2. 创建目录 /user/root/benchmarks/bigbench/data_refresh 并赋予权限</span><br><span class="line">	3. 调用 HadoopClusterExec.jar 和 pdgf.jar 生成 base data 到 /user/root/benchmarks/bigbench/data 目录下</span><br><span class="line">	4. 调用 HadoopClusterExec.jar 和 pdgf.jar 生成 refresh data 到 /user/root/benchmarks/bigbench/data_refresh 目录下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建目录 /user/root/benchmarks/bigbench/data 并赋予权限</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">runCmdWithErrorCheck hadoop fs -mkdir -p <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></span><br><span class="line">runCmdWithErrorCheck hadoop fs -chmod 777 <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></span><br></pre></td></tr></table></figure>

<p>创建目录 /user/root/benchmarks/bigbench/data_refresh 并赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runCmdWithErrorCheck hadoop fs -mkdir -p <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></span><br><span class="line">runCmdWithErrorCheck hadoop fs -chmod 777 <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></span><br></pre></td></tr></table></figure>

<p>调用 HadoopClusterExec.jar 和 pdgf.jar 生成 base data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runCmdWithErrorCheck hadoop jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/HadoopClusterExec.jar"</span> -archives <span class="string">"<span class="variable">$&#123;PDGF_ARCHIVE_PATH&#125;</span>"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_EXEC_DEBUG&#125;</span> -taskFailOnNonZeroReturnValue -execCWD <span class="string">"<span class="variable">$&#123;PDGF_DISTRIBUTED_NODE_DIR&#125;</span>"</span> <span class="variable">$&#123;HadoopClusterExecOptions&#125;</span> -exec <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_JVM_ENV&#125;</span> -cp <span class="string">"<span class="variable">$&#123;HADOOP_CP&#125;</span>:pdgf.jar"</span> <span class="variable">$&#123;PDGF_CLUSTER_CONF&#125;</span> pdgf.Controller -nc HadoopClusterExec.tasks -nn HadoopClusterExec.taskNumber -ns -c -sp REFRESH_PHASE 0 -o <span class="string">"'<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>/'+table.getName()+'/'"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_OPTIONS&#125;</span> <span class="_">-s</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_TABLES&#125;</span> <span class="variable">$&#123;PDGF_OPTIONS&#125;</span> <span class="string">"<span class="variable">$@</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$BIG_BENCH_DATAGEN_STAGE_LOG</span>"</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>调用 HadoopClusterExec.jar 和 pdgf.jar 生成 refresh data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runCmdWithErrorCheck hadoop jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/HadoopClusterExec.jar"</span> -archives <span class="string">"<span class="variable">$&#123;PDGF_ARCHIVE_PATH&#125;</span>"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_EXEC_DEBUG&#125;</span> -taskFailOnNonZeroReturnValue -execCWD <span class="string">"<span class="variable">$&#123;PDGF_DISTRIBUTED_NODE_DIR&#125;</span>"</span> <span class="variable">$&#123;HadoopClusterExecOptions&#125;</span> -exec <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_JVM_ENV&#125;</span> -cp <span class="string">"<span class="variable">$&#123;HADOOP_CP&#125;</span>:pdgf.jar"</span> <span class="variable">$&#123;PDGF_CLUSTER_CONF&#125;</span> pdgf.Controller -nc HadoopClusterExec.tasks -nn HadoopClusterExec.taskNumber -ns -c -sp REFRESH_PHASE 1 -o <span class="string">"'<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>/'+table.getName()+'/'"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_OPTIONS&#125;</span> <span class="_">-s</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_TABLES&#125;</span> <span class="variable">$&#123;PDGF_OPTIONS&#125;</span> <span class="string">"<span class="variable">$@</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$BIG_BENCH_DATAGEN_STAGE_LOG</span>"</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h3 id="populateMetastore"><a href="#populateMetastore" class="headerlink" title="populateMetastore"></a>populateMetastore</h3><p> 该过程是真正的创建数据库表的过程。建表的过程调用的是 <code>$BENCH_MARK_HOME/engines/hive/population/</code> 目录下的 <code>hiveCreateLoad.sql</code> ,通过该sql文件来建数据库表。</p>
<ol>
<li>从 /user/root/benchmarks/bigbench/data 路径下读取 .dat 的原始数据，生成 TEXTFILE 格式的外部临时表</li>
<li>用 <code>select * from 临时表</code> 来创建最终的 ORC 格式的数据库表</li>
<li>删除外部临时表。</li>
</ol>
<p>从 /user/root/benchmarks/bigbench/data 路径下读取 .dat 的原始数据，生成 TEXTFILE 格式的外部临时表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</span><br><span class="line">  ( c_customer_sk             <span class="built_in">bigint</span>              <span class="comment">--not null</span></span><br><span class="line">  , c_customer_id             <span class="keyword">string</span>              <span class="comment">--not null</span></span><br><span class="line">  , c_current_cdemo_sk        <span class="built_in">bigint</span></span><br><span class="line">  , c_current_hdemo_sk        <span class="built_in">bigint</span></span><br><span class="line">  , c_current_addr_sk         <span class="built_in">bigint</span></span><br><span class="line">  , c_first_shipto_date_sk    <span class="built_in">bigint</span></span><br><span class="line">  , c_first_sales_date_sk     <span class="built_in">bigint</span></span><br><span class="line">  , c_salutation              <span class="keyword">string</span></span><br><span class="line">  , c_first_name              <span class="keyword">string</span></span><br><span class="line">  , c_last_name               <span class="keyword">string</span></span><br><span class="line">  , c_preferred_cust_flag     <span class="keyword">string</span></span><br><span class="line">  , c_birth_day               <span class="built_in">int</span></span><br><span class="line">  , c_birth_month             <span class="built_in">int</span></span><br><span class="line">  , c_birth_year              <span class="built_in">int</span></span><br><span class="line">  , c_birth_country           <span class="keyword">string</span></span><br><span class="line">  , c_login                   <span class="keyword">string</span></span><br><span class="line">  , c_email_address           <span class="keyword">string</span></span><br><span class="line">  , c_last_review_date        <span class="keyword">string</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$&#123;hiveconf:fieldDelimiter&#125;'</span></span><br><span class="line">  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE LOCATION <span class="string">'$&#123;hiveconf:hdfsDataPath&#125;/$&#123;hiveconf:customerTableName&#125;'</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure>


<p>用 <code>select * from 临时表</code> 来创建最终的 ORC 格式的数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> $&#123;hiveconf:tableFormat&#125;</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>删除外部临时表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</span><br></pre></td></tr></table></figure>

<p>总结下执行以下 <code>TPCx-BB</code> 测试命令代码的执行步骤:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./bigBench runBenchmark -f <span class="number">1</span> -m <span class="number">8</span> -s <span class="number">2</span> -j <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="runQuery"><a href="#runQuery" class="headerlink" title="runQuery"></a>runQuery</h3><pre><code>1. runQuery 调用每个query下的 run.sh 里的 `query_run_main_method()` 方法
2. `query_run_main_method()` 调用 `runEngineCmd` 来执行query脚本（qxx.sql）</code></pre><p>runQuery 调用每个query下的 run.sh 里的 <code>query_run_main_method()</code> 方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">QUERY_MAIN_METHOD=<span class="string">"query_run_main_method"</span></span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="string">"<span class="variable">$QUERY_MAIN_METHOD</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$LOG_FILE_NAME</span>"</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><code>query_run_main_method()</code> 调用 <code>runEngineCmd</code> 来执行query脚本（qxx.sql）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">query_run_main_method</span></span> () &#123;</span><br><span class="line">	QUERY_SCRIPT=<span class="string">"<span class="variable">$QUERY_DIR</span>/<span class="variable">$QUERY_NAME</span>.sql"</span></span><br><span class="line">	<span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$QUERY_SCRIPT</span>"</span> ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"SQL file <span class="variable">$QUERY_SCRIPT</span> can not be read."</span></span><br><span class="line">		<span class="built_in">exit</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	runCmdWithErrorCheck runEngineCmd <span class="_">-f</span> <span class="string">"<span class="variable">$QUERY_SCRIPT</span>"</span></span><br><span class="line">	<span class="built_in">return</span> $?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一般情况下 <code>query_run_main_method ()</code> 方法只是执行对应的query脚本，但是像 q05、q20… 这些查询，用到了机器学习算法，所以在执行对应的query脚本后会把生成的结果表作为输入，然后调用执行机器学习算法（如聚类、逻辑回归）的jar包继续执行，得到最终的结果。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">runEngineCmd</span></span> () &#123;</span><br><span class="line">  <span class="keyword">if</span> addInitScriptsToParams</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="string">"<span class="variable">$BINARY</span>"</span> <span class="string">"<span class="variable">$&#123;BINARY_PARAMS[@]&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;INIT_PARAMS[@]&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">BINARY=<span class="string">"/usr/bin/hive"</span></span><br><span class="line">BINARY_PARAMS+=(--hiveconf BENCHMARK_PHASE=<span class="variable">$BIG_BENCH_BENCHMARK_PHASE</span> --hiveconf STREAM_NUMBER=<span class="variable">$BIG_BENCH_STREAM_NUMBER</span> --hiveconf QUERY_NAME=<span class="variable">$QUERY_NAME</span> --hiveconf QUERY_DIR=<span class="variable">$QUERY_DIR</span> --hiveconf RESULT_TABLE=<span class="variable">$RESULT_TABLE</span> --hiveconf RESULT_DIR=<span class="variable">$RESULT_DIR</span> --hiveconf TEMP_TABLE=<span class="variable">$TEMP_TABLE</span> --hiveconf TEMP_DIR=<span class="variable">$TEMP_DIR</span> --hiveconf TABLE_PREFIX=<span class="variable">$TABLE_PREFIX</span>)</span><br><span class="line">INIT_PARAMS=(-i <span class="string">"<span class="variable">$BIG_BENCH_QUERY_PARAMS_FILE</span>"</span> -i <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_SETTINGS_FILE</span>"</span>)</span><br><span class="line">INIT_PARAMS+=(-i <span class="string">"<span class="variable">$LOCAL_QUERY_ENGINE_SETTINGS_FILE</span>"</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"User defined query parameter file found. Adding <span class="variable">$USER_QUERY_PARAMS_FILE</span> to hive init."</span></span><br><span class="line">  INIT_PARAMS+=(-i <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"User query parameter file <span class="variable">$USER_QUERY_PARAMS_FILE</span> can not be read."</span></span><br><span class="line">  <span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"User defined engine settings file found. Adding <span class="variable">$USER_ENGINE_SETTINGS_FILE</span> to hive init."</span></span><br><span class="line">  INIT_PARAMS+=(-i <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"User hive settings file <span class="variable">$USER_ENGINE_SETTINGS_FILE</span> can not be read."</span></span><br><span class="line">  <span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">return</span> 0</span><br></pre></td></tr></table></figure>

<h3 id="validateQuery"><a href="#validateQuery" class="headerlink" title="validateQuery"></a>validateQuery</h3><pre><code>1. 调用每个query下的 run.sh 里的 `query_run_validate_method()` 方法
2. `query_run_validate_method()` 比较 `$BENCH_MARK_HOME/engines/hive/queries/qxx/results/qxx-result` 和hdfs上 `/user/root/benchmarks/bigbench/queryResults/qxx_hive_${BIG_BENCH_BENCHMARK_PHASE}_${BIG_BENCH_STREAM_NUMBER}_result` 两个文件，如果一样，则验证通过，否则验证失败。</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> diff -q <span class="string">"<span class="variable">$VALIDATION_RESULTS_FILENAME</span>"</span> &lt;(hadoop fs -cat <span class="string">"<span class="variable">$RESULT_DIR</span>/*"</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Validation of <span class="variable">$VALIDATION_RESULTS_FILENAME</span> passed: Query returned correct results"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Validation of <span class="variable">$VALIDATION_RESULTS_FILENAME</span> failed: Query returned incorrect results"</span></span><br><span class="line">	VALIDATION_PASSED=<span class="string">"0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><strong>SF为1时(-f 1)，用上面的方法比较，SF不为1（&gt;1）时,只要hdfs上的结果表中行数大于等于1即验证通过</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ `hadoop fs -cat <span class="string">"<span class="variable">$RESULT_DIR</span>/*"</span> | head -n 10 | wc <span class="_">-l</span>` -ge 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Validation passed: Query returned results"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Validation failed: Query did not return results"</span></span><br><span class="line">	<span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="refreshMetastore"><a href="#refreshMetastore" class="headerlink" title="refreshMetastore"></a>refreshMetastore</h3><pre><code>1. 调用 `$BENCH_MARK_HOME/engines/hive/refresh/` 目录下的 `hiveRefreshCreateLoad.sql` 脚本
2. `hiveRefreshCreateLoad.sql` 将hdfs上 `/user/root/benchmarks/bigbench/data_refresh/` 目录下每个表数据插入外部临时表
3. 外部临时表再将每个表的数据插入Hive数据库对应的表中</code></pre><p><code>hiveRefreshCreateLoad.sql</code> 将hdfs上 <code>/user/root/benchmarks/bigbench/data_refresh/</code> 目录下每个表数据插入外部临时表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</span><br><span class="line">  ( c_customer_sk             <span class="built_in">bigint</span>              <span class="comment">--not null</span></span><br><span class="line">  , c_customer_id             <span class="keyword">string</span>              <span class="comment">--not null</span></span><br><span class="line">  , c_current_cdemo_sk        <span class="built_in">bigint</span></span><br><span class="line">  , c_current_hdemo_sk        <span class="built_in">bigint</span></span><br><span class="line">  , c_current_addr_sk         <span class="built_in">bigint</span></span><br><span class="line">  , c_first_shipto_date_sk    <span class="built_in">bigint</span></span><br><span class="line">  , c_first_sales_date_sk     <span class="built_in">bigint</span></span><br><span class="line">  , c_salutation              <span class="keyword">string</span></span><br><span class="line">  , c_first_name              <span class="keyword">string</span></span><br><span class="line">  , c_last_name               <span class="keyword">string</span></span><br><span class="line">  , c_preferred_cust_flag     <span class="keyword">string</span></span><br><span class="line">  , c_birth_day               <span class="built_in">int</span></span><br><span class="line">  , c_birth_month             <span class="built_in">int</span></span><br><span class="line">  , c_birth_year              <span class="built_in">int</span></span><br><span class="line">  , c_birth_country           <span class="keyword">string</span></span><br><span class="line">  , c_login                   <span class="keyword">string</span></span><br><span class="line">  , c_email_address           <span class="keyword">string</span></span><br><span class="line">  , c_last_review_date        <span class="keyword">string</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$&#123;hiveconf:fieldDelimiter&#125;'</span></span><br><span class="line">  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE LOCATION <span class="string">'$&#123;hiveconf:hdfsDataPath&#125;/$&#123;hiveconf:customerTableName&#125;'</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">set</span> hdfsDataPath=$&#123;env:BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">外部临时表再将每个表的数据插入Hive数据库对应的表中</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在测试之前会先用PDGF（并行数据生成框架）生成数据。指定Scale Factor为1（1GB），生成以下共23张表。以下是每张表的建表语句及每张表里的某一条记录。</p>
<h3 id="23张表"><a href="#23张表" class="headerlink" title="23张表"></a>23张表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show tables;</span><br><span class="line">OK</span><br><span class="line">customer</span><br><span class="line">customer_address</span><br><span class="line">customer_demographics</span><br><span class="line">date_dim</span><br><span class="line">household_demographics</span><br><span class="line">income_band</span><br><span class="line">inventory</span><br><span class="line">item</span><br><span class="line">item_marketprices</span><br><span class="line">product_reviews</span><br><span class="line">promotion</span><br><span class="line">reason</span><br><span class="line">ship_mode</span><br><span class="line">store</span><br><span class="line">store_returns</span><br><span class="line">store_sales</span><br><span class="line">time_dim</span><br><span class="line">warehouse</span><br><span class="line">web_clickstreams</span><br><span class="line">web_page</span><br><span class="line">web_returns</span><br><span class="line">web_sales</span><br><span class="line">web_site</span><br><span class="line">Time taken: 0.017 seconds, Fetched: 23 row(s)</span><br></pre></td></tr></table></figure>

<h3 id="customer-（99000行）4-03MB"><a href="#customer-（99000行）4-03MB" class="headerlink" title="customer （99000行）4.03MB"></a>customer （99000行）4.03MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table customer;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customer`</span>(</span><br><span class="line"> <span class="string">`c_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_customer_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_current_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_current_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_current_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_first_shipto_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_first_sales_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`c_salutation`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_first_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_last_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_preferred_cust_flag`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_birth_day`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`c_birth_month`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`c_birth_year`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`c_birth_country`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_login`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_email_address`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`c_last_review_date`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'99000\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'88084062\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'4221267\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167154\')</span></span><br><span class="line"><span class="string">Time taken: 0.116 seconds, Fetched: 34 row(s)</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 AAAAAAAAAAAAAAAA 1824793 3203 2555 28776 14690 Ms. Marisa Harrington N 17 4 1988 UNITED ARAB EMIRATES RRCyuY3XfE3a Marisa.Harrington@lawyer.com 	gdMmGdU9</span><br></pre></td></tr></table></figure>

<h3 id="customer-address（49500行）-0-92MB"><a href="#customer-address（49500行）-0-92MB" class="headerlink" title="customer_address（49500行） 0.92MB"></a>customer_address（49500行） 0.92MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table customer_address;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customer_address`</span>(</span><br><span class="line"> <span class="string">`ca_address_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ca_address_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_street_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_street_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_street_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_suite_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_city`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_county`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_state`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_zip`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_country`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`ca_gmt_offset`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ca_location_type`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer_address\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'49500\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'55836000\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'966548\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167160\')</span></span><br><span class="line"><span class="string">Time taken: 0.043 seconds, Fetched: 29 row(s)</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6187 AAAAAAAAAAAAAJDZ 536 6th Lake Drive UKL8bE5C Lowell Brule County SD 18464 United States -6 apartment</span><br></pre></td></tr></table></figure>

<h3 id="customer-demographics-19200800行）6-84MB"><a href="#customer-demographics-19200800行）6-84MB" class="headerlink" title="customer_demographics (19200800行）6.84MB"></a>customer_demographics (19200800行）6.84MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table customer_demographics;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`customer_demographics`</span>(</span><br><span class="line"> <span class="string">`cd_demo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`cd_gender`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`cd_marital_status`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`cd_education_status`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`cd_purchase_estimate`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`cd_credit_rating`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`cd_dep_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`cd_dep_employed_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`cd_dep_college_count`</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer_demographics\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'1\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'1920800\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'718371044\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'7167503\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167169\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 F 	U Primary 6000 Good 0 5 0</span><br></pre></td></tr></table></figure>

<h3 id="date-dim-（109573行）-1-67MB"><a href="#date-dim-（109573行）-1-67MB" class="headerlink" title="date_dim （109573行） 1.67MB"></a>date_dim （109573行） 1.67MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table date_dim;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`date_dim`</span>(</span><br><span class="line"> <span class="string">`d_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`d_date_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_month_seq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_week_seq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_quarter_seq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_year`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_dow`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_moy`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_dom`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_qoy`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_fy_year`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_fy_quarter_seq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_fy_week_seq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_day_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_quarter_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_holiday`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_weekend`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_following_holiday`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_first_dom`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_last_dom`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_same_day_ly`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_same_day_lq`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`d_current_day`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_current_week`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_current_month`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_current_quarter`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`d_current_year`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/date_dim\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'1\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'109573\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'123050479\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'1748707\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167172\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 AAAAAAAAAAAAAAAA 1900-01-01 0 0 0 1900 1 1 1 1 1900 0 0 Monday 1900Q1 Y 	N 	N 2448812 2458802 2472542 2420941 N 	N 	NN 	N</span><br></pre></td></tr></table></figure>

<h3 id="household-demographics-（7200行）-14-31KB"><a href="#household-demographics-（7200行）-14-31KB" class="headerlink" title="household_demographics （7200行） 14.31KB"></a>household_demographics （7200行） 14.31KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table household_demographics;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`household_demographics`</span>(</span><br><span class="line"> <span class="string">`hd_demo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`hd_income_band_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`hd_buy_potential`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`hd_dep_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`hd_vehicle_count`</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/household_demographics\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'1\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'7200\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'835168\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'14655\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167173\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 3 1001-5000 0 0</span><br></pre></td></tr></table></figure>

<h3 id="income-band-（20行）-754B"><a href="#income-band-（20行）-754B" class="headerlink" title="income_band （20行） 754B"></a>income_band （20行） 754B</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table income_band;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`income_band`</span>(</span><br><span class="line"> <span class="string">`ib_income_band_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ib_lower_bound`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`ib_upper_bound`</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/income_band\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'20\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'320\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'754\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167179\')</span></span><br><span class="line"><span class="string">Time taken: 0.032 seconds, Fetched: 19 row(s)</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 10000</span><br></pre></td></tr></table></figure>

<h3 id="inventory-（23255100行）-34-55MB"><a href="#inventory-（23255100行）-34-55MB" class="headerlink" title="inventory （23255100行） 34.55MB"></a>inventory （23255100行） 34.55MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table inventory;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`inventory`</span>(</span><br><span class="line"> <span class="string">`inv_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`inv_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`inv_warehouse_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`inv_quantity_on_hand`</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/inventory\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'3\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'23255100\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'651118804\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'36234106\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167235\')</span></span><br><span class="line"><span class="string">Time taken: 0.031 seconds, Fetched: 20 row(s)</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">36890 0 0 503</span><br></pre></td></tr></table></figure>

<h3 id="item-（17820行）-2-36MB"><a href="#item-（17820行）-2-36MB" class="headerlink" title="item （17820行） 2.36MB"></a>item （17820行） 2.36MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table item;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item`</span>(</span><br><span class="line"> <span class="string">`i_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`i_item_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_rec_start_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_rec_end_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_item_desc`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_current_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`i_wholesale_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`i_brand_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`i_brand`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_class_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`i_class`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_category_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`i_category`</span> strong,</span><br><span class="line"> <span class="string">`i_manufact_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`i_manufact`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_size`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_formulation`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_color`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_units`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_container`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`i_manager_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`i_product_name`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/item\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'1\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'17820\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'31238428\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'2472973\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167181\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 AAAAAAAAAAAAAAAA 2000-01-14 quickly even dinos beneath the frays must have to boost boldly careful bold escapades: stealthily even forges over the dependencies integrate always past the quiet sly decoys-- notornis sol 72.29 64.96 3898712 71TS7NSbvH1YbdiQMG6ttBHKAljiNoIRB 1 Fan Shop 9 Sports &amp; Outdoors 995 2VOxvrIWwlJQTSk6 small 99Ee1r6uFbZSSClAX3 dodger Oz Unknown 18 8m9n5Q7T33DNWidoA6nWlg6ydmpA1SKOoOJLXiLVb</span><br></pre></td></tr></table></figure>

<h3 id="item-marketprices-（89100行）-0-63MB"><a href="#item-marketprices-（89100行）-0-63MB" class="headerlink" title="item_marketprices （89100行） 0.63MB"></a>item_marketprices （89100行） 0.63MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table item_marketprices;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item_marketprices`</span>(</span><br><span class="line"> <span class="string">`imp_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`imp_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`imp_competitor`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`imp_competitor_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`imp_start_date`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`imp_end_date`</span> <span class="built_in">bigint</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/item_marketprices\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'89100\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'21736912\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'657024\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167275\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 4737 AAAAAAAAAAAAAAIN 66.4 36890 36958</span><br></pre></td></tr></table></figure>

<h3 id="product-reviews-（89991行）-24-36MB"><a href="#product-reviews-（89991行）-24-36MB" class="headerlink" title="product_reviews （89991行） 24.36MB"></a>product_reviews （89991行） 24.36MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table product_reviews;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_reviews`</span>(</span><br><span class="line"> <span class="string">`pr_review_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`pr_review_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`pr_review_time`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`pr_review_rating`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`pr_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`pr_user_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`pr_order_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`pr_review_content`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/product_reviews\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'89991\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'79597043\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'25546821\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167305\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 2004-02-25 21:43:07 1 3683 88783 41241 Had to offset the praise handed down by so many years is probably the result of some sin committed (obviously so grievous don\&apos;t &quot;get&quot; it. Why all the original artwork by Stephen Gammel.</span><br></pre></td></tr></table></figure>

<h3 id="promotion-（300行）-15-83KB"><a href="#promotion-（300行）-15-83KB" class="headerlink" title="promotion （300行） 15.83KB"></a>promotion （300行） 15.83KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table promotion;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`promotion`</span>(</span><br><span class="line"> <span class="string">`p_promo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`p_promo_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_start_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`p_end_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`p_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`p_cost`</span> <span class="built_in">decimal</span>(<span class="number">15</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`p_response_target`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`p_promo_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_dmail`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_email`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_catalog`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_tv`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_radio`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_press`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_event`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_demo`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_channel_details`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_purpose`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`p_discount_active`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/promotion\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'300\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'404926\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'16204\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167186\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 AAAAAAAAAAAAAAAH 94455 108529 13511 427.76 1 bar 	YN 	Y 	N 	N 	N 	N 	N 	blithe grouches past the blithe quick epitaphs print rut Unknown N</span><br></pre></td></tr></table></figure>

<h3 id="reason-（35行）-3-17KB"><a href="#reason-（35行）-3-17KB" class="headerlink" title="reason （35行） 3.17KB"></a>reason （35行） 3.17KB</h3><p>建表语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table reason;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`reason`</span>(</span><br><span class="line"> <span class="string">`r_reason_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`r_reason_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`r_reason_desc`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/reason\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'35\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'9027\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'3240\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167190\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 uy 	busily sly excuses hang: slow braids to the daring somas was toward the epitaphs-- gifts betw</span><br></pre></td></tr></table></figure>

<h3 id="ship-mode-（20行）-2-93KB"><a href="#ship-mode-（20行）-2-93KB" class="headerlink" title="ship_mode （20行） 2.93KB"></a>ship_mode （20行） 2.93KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table ship_mode;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ship_mode`</span>(</span><br><span class="line"> <span class="string">`sm_ship_mode_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sm_ship_mode_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`sm_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`sm_code`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`sm_carrier`</span> strong,</span><br><span class="line"> <span class="string">`sm_contract`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/ship_mode\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'20\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'9576\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'3001\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167196\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12 wGyozLRZ3uL 	iCTZsMlNzsQ 	cBRc FlWM9v tm0ehuQ2</span><br></pre></td></tr></table></figure>

<h3 id="store-（12行）-8-03KB"><a href="#store-（12行）-8-03KB" class="headerlink" title="store （12行） 8.03KB"></a>store （12行） 8.03KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table store;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`store`</span>(</span><br><span class="line"> <span class="string">`s_store_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`s_store_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_rec_start_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_rec_end_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_closed_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`s_store_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_number_employees`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`s_floor_space`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`s_hours`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_manager`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_market_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`s_geography_class`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_market_desc`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_market_manager`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_division_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`s_division_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_company_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`s_company_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_street_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_street_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_street_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_suite_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_city`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_county`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_state`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_zip`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_country`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`s_gmt_offset`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`s_tax_precentage`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'12\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'25962\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'8214\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167201\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">10 AAAAAAAAAAAAAAAK 2000-11-01 6235 Avalon 254 6468537 8AM-12AM Michael Barlow 6 Unknown final sly gifts by the even final dependencies x-ray under the fluffy Barry Shaw 1 Unknown1Unknown 993 Mill Pkwy aQV Cold Springs Cumberland County TN 95692 United States -5 0.03</span><br></pre></td></tr></table></figure>

<h3 id="store-returns-37902行）-1-19MB"><a href="#store-returns-37902行）-1-19MB" class="headerlink" title="store_returns (37902行） 1.19MB"></a>store_returns (37902行） 1.19MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table store_returns;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`store_returns`</span>(</span><br><span class="line"> <span class="string">`sr_returned_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_return_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_store_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_reason_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_ticket_number`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`sr_return_quantity`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`sr_return_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_return_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_return_amt_inc_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_fee`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_return_ship_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_refunded_cash`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_reversed_charge`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_store_credit`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`sr_net_loss`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store_returns\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'37902\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'41388272\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'1250563\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167251\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">37375 38182 11520 7640 242073 6754 25731 2 22 20293 33 1990.89 119.45 2110.34 34.14 2433.41 477.81 559.84 953.24 2672.31</span><br></pre></td></tr></table></figure>

<h3 id="store-sales-（667579行）-23-49MB"><a href="#store-sales-（667579行）-23-49MB" class="headerlink" title="store_sales （667579行） 23.49MB"></a>store_sales （667579行） 23.49MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table store_sales;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`store_sales`</span>(</span><br><span class="line"> <span class="string">`ss_sold_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_sold_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_store_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_promo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_ticket_number`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ss_quantity`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`ss_wholesale_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_list_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_sales_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_ext_discount_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_ext_sales_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_ext_wholesale_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_ext_list_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_ext_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_coupon_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_net_paid`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_net_paid_inc_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ss_net_profit`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store_sales\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'667579\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'953293700\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'24629162\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167245\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">37115 20244 16481 98676 1211207 5239 37107 9 38 11138 93 56.47 82.45 36.28 4293.81 3374.04 5251.71 7667.85 101.22 0 3374.04 3475.26 -1877.67</span><br></pre></td></tr></table></figure>

<h3 id="time-dim-（86400行）-219-49KB"><a href="#time-dim-（86400行）-219-49KB" class="headerlink" title="time_dim （86400行） 219.49KB"></a>time_dim （86400行） 219.49KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table time_dim;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`time_dim`</span>(</span><br><span class="line"> <span class="string">`t_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`t_time_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`t_time`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`t_hour`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`t_minute`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`t_second`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`t_am_pm`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`t_shift`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`t_sub_shift`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`t_meal_time`</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/time_dim\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'1\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'86400\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'41040000\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'224757\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167202\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 AAAAAAAAAAAAAAAC 2 0 0 2 AM 	third 	night</span><br></pre></td></tr></table></figure>

<h3 id="warehouse-（5行）-1-94KB"><a href="#warehouse-（5行）-1-94KB" class="headerlink" title="warehouse （5行） 1.94KB"></a>warehouse （5行） 1.94KB</h3><p>建表语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table warehouse;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`warehouse`</span>(</span><br><span class="line"> <span class="string">`w_warehouse_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`w_warehouse_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_warehouse_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_warehouse_sq_ft`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`w_street_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_street_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_street_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_suite_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_city`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_county`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_state`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_zip`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_country`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`w_gmt_offset`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/warehouse\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'5\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'5695\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'1980\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167204\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 AAAAAAAAAAAAAAAB 	frets would sleep 845707 181 9th 13thCourt kQ Sherwood Forest Teton County WY 87891 United States -7</span><br></pre></td></tr></table></figure>

<h3 id="web-clickstreams-（6770550行）-34-11MB"><a href="#web-clickstreams-（6770550行）-34-11MB" class="headerlink" title="web_clickstreams （6770550行） 34.11MB"></a>web_clickstreams （6770550行） 34.11MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table web_clickstreams;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`web_clickstreams`</span>(</span><br><span class="line"> <span class="string">`wcs_click_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wcs_click_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wcs_sales_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wcs_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wcs_web_page_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wcs_user_sk`</span> <span class="built_in">bigint</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_clickstreams\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'6770550\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'253337416\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'35768476\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167298\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">36890 27089 NULL 15465 47 NULL</span><br></pre></td></tr></table></figure>

<h3 id="web-page-（60行）-6-81KB"><a href="#web-page-（60行）-6-81KB" class="headerlink" title="web_page （60行） 6.81KB"></a>web_page （60行） 6.81KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table web_page;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`web_page`</span>(</span><br><span class="line"> <span class="string">`wp_web_page_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wp_web_page_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_rec_start_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_rec_end_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_creation_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wp_access_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wp_autogen_flag`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wp_url`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`wp_char_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`wp_link_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`wp_image_count`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`wp_max_ad_count`</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_page\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'60\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'38763\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'6969\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167215\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24 AAAAAAAAAAAAAAAY 2000-12-19 38819 69008 0 44446 http://www.C8jdri37RmtbDNeFnXjmYbyBPzeO4WWK9pVYP6xtBJbaQ5yIj4s.com 	feedback	4340 	23 	5 	2</span><br></pre></td></tr></table></figure>

<h3 id="web-returns-（38487行）-1-40MB"><a href="#web-returns-（38487行）-1-40MB" class="headerlink" title="web_returns （38487行） 1.40MB"></a>web_returns （38487行） 1.40MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table web_returns;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`web_returns`</span>(</span><br><span class="line"> <span class="string">`wr_returned_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_returned_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_refunded_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_refunded_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_refunded_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_refunded_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_returning_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_returning_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_returning_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_returning_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_web_page_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_reason_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_order_number`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`wr_return_quantity`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`wr_return_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_return_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_return_amt_inc_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_fee`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_return_ship_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_refunded_cash`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_reversed_charge`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_account_credit`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`wr_net_loss`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_returns\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'38487\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'43257220\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'1471571\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167269\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">38952 68126 9590 52948 893223 2020 6942 52948 893223 2020 6942 32 13 63444 33 626.0125.04 651.05 18.74 958.4 244.14 286.4 95.47 1008.48</span><br></pre></td></tr></table></figure>

<h3 id="web-sales-（668052行）-32-99MB"><a href="#web-sales-（668052行）-32-99MB" class="headerlink" title="web_sales （668052行） 32.99MB"></a>web_sales （668052行） 32.99MB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table web_sales;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`web_sales`</span>(</span><br><span class="line"> <span class="string">`ws_sold_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_sold_time_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_item_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_bill_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_bill_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_bill_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_bill_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_customer_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_cdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_hdemo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_addr_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_web_page_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_web_site_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_ship_mode_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_warehouse_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_promo_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_order_number`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`ws_quantity`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`ws_wholesale_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_list_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_sales_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_discount_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_sales_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_wholesale_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_list_price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_coupon_amt`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_ext_ship_cost`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_net_paid`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_net_paid_inc_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_net_paid_inc_ship`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_net_paid_inc_ship_tax`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`ws_net_profit`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_sales\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'668052\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'1221174888\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'34585166\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167263\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">36890 26789 36993 794 85457 380790 2436 42649 29934 1583844 5251 525 2 14 1 3 120 0 93 32.62 81.22 59.29 2039.49 5513.97 3033.66 7553.46 330.84 0 1661.76 5513.97 5844.81 7175.73 7506.57 2480.31</span><br></pre></td></tr></table></figure>

<h3 id="web-site-（30行）10-31KB"><a href="#web-site-（30行）10-31KB" class="headerlink" title="web_site （30行）10.31KB"></a>web_site （30行）10.31KB</h3><p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive&gt; show create table web_site;</span><br><span class="line">OK</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`web_site`</span>(</span><br><span class="line"> <span class="string">`web_site_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`web_site_id`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_rec_start_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_rec_end_date`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_open_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`web_close_date_sk`</span> <span class="built_in">bigint</span>,</span><br><span class="line"> <span class="string">`web_class`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_manager`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_mkt_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`web_mkt_class`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_mkt_desc`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_market_manager`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_company_id`</span> <span class="built_in">int</span>,</span><br><span class="line"> <span class="string">`web_company_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_street_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_street_name`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_street_type`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_suite_number`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_city`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_county`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_state`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_zip`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_country`</span> <span class="keyword">string</span>,</span><br><span class="line"> <span class="string">`web_gmt_offset`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"> <span class="string">`web_tax_percentage`</span> <span class="built_in">decimal</span>(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE</span><br><span class="line"> \<span class="string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</span></span><br><span class="line"><span class="string">STORED AS INPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</span></span><br><span class="line"><span class="string">OUTPUTFORMAT</span></span><br><span class="line"><span class="string"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</span></span><br><span class="line"><span class="string">LOCATION</span></span><br><span class="line"><span class="string"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_site\'</span></span><br><span class="line"><span class="string">TBLPROPERTIES (</span></span><br><span class="line"><span class="string"> \'COLUMN_STATS_ACCURATE\'=\'true\',</span></span><br><span class="line"><span class="string"> \'numFiles\'=\'2\',</span></span><br><span class="line"><span class="string"> \'numRows\'=\'30\',</span></span><br><span class="line"><span class="string"> \'rawDataSize\'=\'62832\',</span></span><br><span class="line"><span class="string"> \'totalSize\'=\'10554\',</span></span><br><span class="line"><span class="string"> \'transient_lastDdlTime\'=\'1473167210\')</span></span><br></pre></td></tr></table></figure>

<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 AAAAAAAAAAAAAAAC 2002-07-17 site_0 16450 91500 Unknown Gregory George 1 sheaves despite the quietly sly asymp 	thin enticing frets except the sometimes final courts might promise blithe dino Frank Hernandez 1 ese 17 5th Ave EbDxJVL Georgetown Guadalupe County TX 75435 United States -6 0.01</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> TPCx-BB </tag>
            
            <tag> 基准测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZeroMQ初探]]></title>
      <url>http://linbingdong.com/2017/03/11/ZeroMQ%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>ZeroMQ介绍、三种模式讲解及代码示例(Java &amp;&amp; Python)。</p>
<a id="more"></a>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ZeroMQ（也称为 ØMQ，0MQ 或 zmq）是一个可嵌入的网络通讯库（对 Socket 进行了封装）。 它提供了携带跨越多种传输协议（如：进程内，进程间，TCP 和多播）的原子消息的 sockets 。 有了ZeroMQ，我们可以通过发布-订阅、任务分发、和请求-回复等模式来建立 N-N 的 socket 连接。 ZeroMQ 的异步 I / O 模型为我们提供可扩展的基于异步消息处理任务的多核应用程序。 它有一系列语言API（几乎囊括所有编程语言），并能够在大多数操作系统上运行。</p>
<p>传统的 TCP Socket 的连接是1对1的，可以认为“1个 socket = 1个连接”，每一个线程独立维护一个 socket 。但是 ZMQ 摒弃了这种1对1的模式，ZMQ的 Socket 可以很轻松地实现1对N和N对N的连接模式，一个 ZMQ 的 socket 可以自动地维护一组连接，用户无法操作这些连接，用户只能操作套接字而不是连接本身。所以说在 ZMQ 的世界里，连接是私有的。</p>
<h2 id="三种基本模型"><a href="#三种基本模型" class="headerlink" title="三种基本模型"></a>三种基本模型</h2><p>ZMQ 提供了三种基本的通信模型，分别是 Request-Reply 、Publish-Subscribe 和 Parallel Pipeline ，接下来举例说明三种模型并给出相应的代码实现。</p>
<h3 id="Request-Reply（请求-回复）"><a href="#Request-Reply（请求-回复）" class="headerlink" title="Request-Reply（请求-回复）"></a>Request-Reply（请求-回复）</h3><p>以 “Hello World” 为例。客户端发起请求，并等待服务端回应请求。客户端发送一个简单的 “Hello”，服务端则回应一个 “World”。可以有 N 个客户端，一个服务端，因此是 1-N 连接。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-bdc5fcaa6a2fa8c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Request-Reply"></p>
<p>服务端代码如下：</p>
<ul>
<li>hwserver.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hwserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket responder = context.socket(ZMQ.REP);</span><br><span class="line">        responder.bind(<span class="string">"tcp://*:5555"</span>);</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] request = responder.recv(<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">"Received"</span> + <span class="keyword">new</span> String(request));</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            String reply = <span class="string">"World"</span>;</span><br><span class="line">            responder.send(reply.getBytes(),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        responder.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>hwserver.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line">context = zmq.Context()</span><br><span class="line">socket = context.socket(zmq.REP)</span><br><span class="line">socket.bind(<span class="string">"tcp://*:5555"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    message = socket.recv()</span><br><span class="line">    print(<span class="string">"Received request: %s"</span> % message)</span><br><span class="line">    <span class="comment"># Do some 'work'</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    socket.send(<span class="string">b"World"</span>)</span><br></pre></td></tr></table></figure>

<p>客户端代码如下：</p>
<ul>
<li>hwclient.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hwclient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket requester = context.socket(ZMQ.REQ);</span><br><span class="line">        requester.connect(<span class="string">"tcp://localhost:5555"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> requestNbr = <span class="number">0</span>; requestNbr != <span class="number">10</span>; requestNbr++) &#123;</span><br><span class="line">            String request = <span class="string">"Hello"</span>;</span><br><span class="line">            System.out.println(<span class="string">"Sending Hello"</span> + requestNbr);</span><br><span class="line">            requester.send(request.getBytes(),<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] reply = requester.recv(<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">"Reveived "</span> + <span class="keyword">new</span> String(reply) + <span class="string">" "</span> + requestNbr);</span><br><span class="line">        &#125;</span><br><span class="line">        requester.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>hwclient.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line">context = zmq.Context()</span><br><span class="line">print(<span class="string">"Connecting to hello world server..."</span>)</span><br><span class="line">socket = context.socket(zmq.REQ)</span><br><span class="line">socket.connect(<span class="string">"tcp://localhost:5555"</span>)</span><br><span class="line"><span class="keyword">for</span> request <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">"Sending request %s ..."</span> % request)</span><br><span class="line">    socket.send(<span class="string">b"Hello"</span>)</span><br><span class="line">    message = socket.recv()</span><br><span class="line">    print(<span class="string">"Received reply %s [ %s ]"</span> % (request,message))</span><br></pre></td></tr></table></figure>

<p>从以上的过程，我们可以了解到使用 ZMQ 写基本的程序的方法，需要注意的是：</p>
<ol>
<li>服务端和客户端无论谁先启动，效果是相同的，这点不同于 Socket。</li>
<li>在服务端收到信息以前，程序是阻塞的，会一直等待客户端连接上来。</li>
<li>服务端收到信息后，会发送一个 “World” 给客户端。值得注意的是一定是客户端连接上来以后，发消息给服务端，服务端接受消息然后响应客户端，这样一问一答。</li>
<li>ZMQ 的通信单元是消息，它只知道消息的长度，并不关心消息格式。因此，你可以使用任何你觉得好用的数据格式，如 Xml、Protocol Buffers、Thrift、json 等等。</li>
</ol>
<h3 id="Publish-Subscribe（发布-订阅）"><a href="#Publish-Subscribe（发布-订阅）" class="headerlink" title="Publish-Subscribe（发布-订阅）"></a>Publish-Subscribe（发布-订阅）</h3><p>下面以一个天气预报的例子来介绍该模式。</p>
<p>服务端不断地更新各个城市的天气，客户端可以订阅自己感兴趣（通过一个过滤器）的城市的天气信息。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3faf1defd6c84b82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Publish-Subscribe"></p>
<p>服务端代码如下：</p>
<ul>
<li>wuserver.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wuserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket publisher = context.socket(ZMQ.PUB);</span><br><span class="line">        publisher.bind(<span class="string">"tcp://*:5556"</span>);</span><br><span class="line">        publisher.bind(<span class="string">"icp://weather"</span>);</span><br><span class="line">        Random srandom = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            <span class="keyword">int</span> zipcode, temperature, relhumidity;</span><br><span class="line">            zipcode = <span class="number">10000</span> + srandom.nextInt(<span class="number">10000</span>);</span><br><span class="line">            temperature = srandom.nextInt(<span class="number">215</span>) - <span class="number">80</span> + <span class="number">1</span>;</span><br><span class="line">            relhumidity = srandom.nextInt(<span class="number">50</span>) + <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">            String update = String.format(<span class="string">"%05d %d %d"</span>, zipcode, temperature, relhumidity);</span><br><span class="line">        &#125;</span><br><span class="line">        publisher.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>wuserver.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line">context = zmq.Context()</span><br><span class="line">socket = context.socket(zmq.PUB)</span><br><span class="line">socket.bind(<span class="string">"tcp://*:5556"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    zipcode = randrange(<span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line">    temperature = randrange(<span class="number">-80</span>, <span class="number">135</span>)</span><br><span class="line">    relhumidity = randrange(<span class="number">10</span>, <span class="number">60</span>)</span><br><span class="line">    socket.send_string(<span class="string">"%i %i %i"</span> % (zipcode, temperature, relhumidity))</span><br></pre></td></tr></table></figure>

<p>客户端代码如下：</p>
<ul>
<li>wuclient.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wuclient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket suscriber = context.socket(ZMQ.SUB);</span><br><span class="line">        suscriber.connect(<span class="string">"tcp://localhost:5556"</span>);</span><br><span class="line">        String filter = (args.length &gt; <span class="number">0</span>) ? args[<span class="number">0</span>] : <span class="string">"10001"</span>;</span><br><span class="line">        suscriber.suscribe(filter.getBytes());  <span class="comment">//过滤条件</span></span><br><span class="line">        <span class="keyword">int</span> update_nbr;</span><br><span class="line">        <span class="keyword">long</span> total_temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (update_nbr = <span class="number">0</span>; update_nbr &lt; <span class="number">100</span>; update_nbr++) &#123;</span><br><span class="line">            String string = suscriber.recvStr(<span class="number">0</span>).trim();</span><br><span class="line">            StringTokenizer sscanf = <span class="keyword">new</span> StringTokenizer(string, <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">int</span> zipcode = Integer.valueOf(sscanf.nextToken());</span><br><span class="line">            <span class="keyword">int</span> temperature = Integer.valueOf(sscanf.nextToken());</span><br><span class="line">            <span class="keyword">int</span> relhumidity = Integer.valueOf(sscanf.nextToken());</span><br><span class="line">            total_temp += temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Average temperature for zipcode '"</span> + filter + <span class="string">"' was "</span> + (<span class="keyword">int</span>) (total_temp / update_nbr));</span><br><span class="line">        suscriber.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>wuclient.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line">context = zmq.Context()</span><br><span class="line">socket = context.socket(zmq.SUB)</span><br><span class="line">print(<span class="string">"Collecting updates from weather server..."</span>)</span><br><span class="line">socket.connect(<span class="string">"tcp://localhost:5556"</span>)</span><br><span class="line">zip_filter = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">"10001"</span></span><br><span class="line"><span class="keyword">if</span> isinstance(zip_filter, bytes):</span><br><span class="line">    zip_filter = zip_filter.decode(<span class="string">'ascii'</span>)</span><br><span class="line">socket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)</span><br><span class="line">total_temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> update_nbr <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    string = socket.recv_string()</span><br><span class="line">    zipcode, temperature, relhumidity = string.split()</span><br><span class="line">    total_temp += int(temperature)</span><br><span class="line">print(<span class="string">"Average temperature for zipcode '%s' was %dF"</span> % (zip_filter, total_temp / (update_nbr + <span class="number">1</span>)))</span><br></pre></td></tr></table></figure>

<p>服务器端生成随机数 zipcode、temperature、relhumidity 分别代表城市代码、温度值和湿度值，然后不断地广播信息。而客户端通过设置过滤参数，接受特定城市代码的信息，最终将收集到的温度求平均值。</p>
<p>需要注意的是：</p>
<ol>
<li>与 “Hello World” 例子不同的是，Socket 的类型变成 ZMQ.PUB 和 ZMQ.SUB 。</li>
<li>客户端需要设置一个过滤条件，接收自己感兴趣的消息。</li>
<li>发布者一直不断地发布新消息，如果中途有订阅者退出，其他均不受影响。当订阅者再连接上来的时候，收到的就是后来发送的消息了。这样比较晚加入的或者是中途离开的订阅者必然会丢失掉一部分信息。这是该模式的一个问题，即所谓的 “Slow joiner” 。</li>
</ol>
<h3 id="Parallel-Pipeline"><a href="#Parallel-Pipeline" class="headerlink" title="Parallel Pipeline"></a>Parallel Pipeline</h3><p>Parallel Pipeline 处理模式如下：</p>
<ul>
<li>ventilator 分发任务到各个 worker</li>
<li>每个 worker 执行分配到的任务</li>
<li>最后由 sink 收集从 worker 发来的结果</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b407a578492a4ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Parallel Pipeline"></p>
<ul>
<li>taskvent.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taskvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ZMQ.Context context = <span class="keyword">new</span> ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket sender = context.socket(ZMQ.PUSH);</span><br><span class="line">        sender.bind(<span class="string">"tcp://*:5557"</span>);</span><br><span class="line">        ZMQ.Socket sink = context.socket(ZMQ.PUSH);</span><br><span class="line">        sink.connect(<span class="string">"tcp://localhost:5558"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Please enter when the workers are ready: "</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">"Sending task to workes\n"</span>);</span><br><span class="line">        sink.send(<span class="string">"0"</span>,<span class="number">0</span>);</span><br><span class="line">        Random srandom = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">int</span> task_nbr;</span><br><span class="line">        <span class="keyword">int</span> total_msec = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (task_nbr = <span class="number">0</span>; task_nbr &lt; <span class="number">100</span>; task_nbr++) &#123;</span><br><span class="line">            <span class="keyword">int</span> workload;</span><br><span class="line">            workload = srandom.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            total_msec += workload;</span><br><span class="line">            System.out.print(workload + <span class="string">"."</span>);</span><br><span class="line">            String string = String.format(<span class="string">"%d"</span>, workload);</span><br><span class="line">            sender.send(string, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Total expected cost: "</span> + total_msec + <span class="string">" msec"</span>);</span><br><span class="line">        sink.close();</span><br><span class="line">        sender.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>taskvent.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    raw_input</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    raw_input = input</span><br><span class="line">context = zmq.Context()</span><br><span class="line">sender = context.socket(zmq.PUSH)</span><br><span class="line">sender.bind(<span class="string">"tcp://*:5557"</span>)</span><br><span class="line">sink = context.socket(zmq.PUSH)</span><br><span class="line">sink.connect(<span class="string">"tcp://localhost:5558"</span>)</span><br><span class="line">print(<span class="string">"Please enter when workers are ready: "</span>)</span><br><span class="line">_ = raw_input()</span><br><span class="line">print(<span class="string">"Sending tasks to workers..."</span>)</span><br><span class="line">sink.send(<span class="string">b'0'</span>)</span><br><span class="line">random.seed()</span><br><span class="line">total_msec = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> task_nbr <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    workload = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    total_msec += workload</span><br><span class="line">    sender.send_string(<span class="string">u'%i'</span> % workload)</span><br><span class="line">print(<span class="string">"Total expected cost: %s msec"</span> % total_msec)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>taskwork.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taskwork</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket receiver = context.socket(ZMQ.PULL);</span><br><span class="line">        receiver.connect(<span class="string">"tcp://localhost:5557"</span>);</span><br><span class="line">        ZMQ.Socket sender = context.socket(ZMQ.PUSH);</span><br><span class="line">        sender.connect(<span class="string">"tcp://localhost:5558"</span>);</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            String string = receiver.recv(<span class="number">0</span>).trim();</span><br><span class="line">            Long mesc = Long.parseLong(string);</span><br><span class="line">            System.out.flush();</span><br><span class="line">            System.out.print(string + <span class="string">"."</span>);</span><br><span class="line">            Sleep(mesc);</span><br><span class="line">            sender.send(<span class="string">""</span>.getBytes(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sender.close();</span><br><span class="line">        receiver.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>taskwork.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context = zmq.Context()</span><br><span class="line">receiver = context.socket(zmq.PULL)</span><br><span class="line">receiver.connect(<span class="string">"tcp://localhost:5557"</span>)</span><br><span class="line">sender = context.socket(zmq.PUSH)</span><br><span class="line">sender.connect(<span class="string">"tcp://localhost:5558"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    s = receiver.recv()</span><br><span class="line">    sys.stdout.write(<span class="string">'.'</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    time.sleep(int(s) * <span class="number">0.001</span>)</span><br><span class="line">    sender.send(<span class="string">b''</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>tasksink.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tasksink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</span><br><span class="line">        ZMQ.Socket receiver = context.socket(ZMQ.PULL);</span><br><span class="line">        receiver.bind(<span class="string">"tcp://*:5558"</span>);</span><br><span class="line">        String string = <span class="keyword">new</span> String(receiver.recv(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">long</span> tstart = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> task_nbr;</span><br><span class="line">        <span class="keyword">int</span> total_mesc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (task_nbr = <span class="number">0</span>; task_nbr &lt; <span class="number">100</span>; task_nbr++) &#123;</span><br><span class="line">            string = <span class="keyword">new</span> String(receiver.recv(<span class="number">0</span>).trim());</span><br><span class="line">            <span class="keyword">if</span> ((task_nbr / <span class="number">10</span>) * <span class="number">10</span> == task_nbr) &#123;</span><br><span class="line">                System.out.print(<span class="string">":"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">"."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> tend = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"\nTotal elapsed time: "</span> + (tend - tstart) + <span class="string">"msec"</span>);</span><br><span class="line">        receiver.close();</span><br><span class="line">        context.term();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>tasksink.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> zmq</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context = zmq.Context()</span><br><span class="line">receiver = context.socket(zmq.PULL)</span><br><span class="line">receiver.bind(<span class="string">"tcp://*:5558"</span>)</span><br><span class="line">s = receiver.recv()</span><br><span class="line">tstart = time.time()</span><br><span class="line"><span class="keyword">for</span> task_nbr <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    s = receiver.recv()</span><br><span class="line">    <span class="keyword">if</span> task_nbr % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        sys.stdout.write(<span class="string">':'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.stdout.write(<span class="string">'.'</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">tend = time.time()</span><br><span class="line">print(<span class="string">"Total elapsed time: %d msec"</span> % ((tend - tstart) * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<p>以下两点需要注意：</p>
<ol>
<li>ventilator 使用 ZMQ.PUSH 来分发任务；worker 用 ZMQ.PULL 来接收任务，用 ZMQ.PUSH 来发送结果；sink 用 ZMQ.PULL 来接收 worker 发来的结果。</li>
<li>ventilator 既是服务端，也是客户端（此时服务端是 sink）；worker 在两个过程中都是客户端；sink 也一直都是服务端。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://zguide.zeromq.org/page:all#advanced-request-reply" target="_blank" rel="noopener">ZeroMQ官方用户指南</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ZeroMQ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Socket编程 </tag>
            
            <tag> ZeroMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java文件管理操作]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>linux里有mkdir、rm、cp、mv、touch等对文件或目录进行操作的命令，Java中也有对应的方法。</p>
<p>Path和Files类封装了处理文件系统所需的所有功能。比如，可以用Files类删除或重命名文件，或者查询文件最后被修改的时间等。换句话说，流类关心的是文件的内容，而Files类关心的是对文件和目录的操作。</p>
<a id="more"></a> 

<p>Path和Files是在Java SE 7中新添加进来的类，比自JDK 1.0以来就一直使用的File类要方便得多。</p>
<h2 id="java-nio-file-Paths-7"><a href="#java-nio-file-Paths-7" class="headerlink" title="java.nio.file.Paths 7"></a>java.nio.file.Paths 7</h2><p><strong>Path</strong>表示的是文件或目录的路径。是一个字符串。</p>
<ul>
<li>java.nio.file.Paths<ul>
<li>static Path get(String first, String…more)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path dir = Paths.get(<span class="string">"/Users/linbingdong"</span>,<span class="string">"Downloads"</span>,<span class="string">"xxx.txt"</span>);</span><br></pre></td></tr></table></figure>

<p> Paths.get方法通过给定的字符串<strong>创建一个路径</strong>。该方法可以接受<strong>一个或多个</strong>字符串，并自动将它们用默认文件系统的路径分隔符<strong>连接</strong>起来。</p>
<p>要操作文件或目录之前，都需要先用Paths.get方法生成相应的路径。</p>
<h2 id="java-nio-file-Files-7"><a href="#java-nio-file-Files-7" class="headerlink" title="java.nio.file.Files 7"></a>java.nio.file.Files 7</h2><p>Files类使得普通文件操作变得快捷。</p>
<ul>
<li>java.nio.file.Files<ul>
<li>static byte[] readAllBytes(Path path)</li>
<li>static Path write(Path path, byte[] contents, OpenOption…options)</li>
<li>static Path copy(Path from, Path to, CopyOption…options)</li>
<li>static Path move (Path from, Path to, CopyOption…options)</li>
<li>static void delete(Path path)</li>
<li>static Path createFile(Path path, FileAttribute&lt;?&gt;… attrs)</li>
<li>static Path createDirectory(Path path, FileAttribute&lt;?&gt;…attrs)</li>
<li>static Path createDirectories(Path path, FileAttribute&lt;?&gt;…attrs)</li>
<li>static boolean exists(Path path)</li>
<li>static boolean isReadable(Path path)</li>
<li>static boolean isDirectory(Path path)</li>
</ul>
</li>
</ul>
<p>要读入文件内容是，首先将文件内容以字节的方式读入字节数组，再将字节数组作为参数传入新建的String对象。</p>
<p>要将String写入文件，需要调用String.getBytes()。</p>
<p>具体各方法的用法见示例</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd on 2017/1/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path from = Paths.get(<span class="string">"/Users/linbingdong/hehe"</span>);</span><br><span class="line">        Path to = Paths.get(<span class="string">"/Users/linbingdong/hehe2"</span>);</span><br><span class="line">        Path newDir = Paths.get(<span class="string">"/Users/linbingdong/test"</span>,<span class="string">"hi"</span>,<span class="string">"hei"</span>,<span class="string">"oo"</span>);</span><br><span class="line">        <span class="comment">//Files.copy(from,to);</span></span><br><span class="line">        Files.createDirectories(newDir);</span><br><span class="line">        <span class="comment">//Files.copy(from,newDir, StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class="line">        <span class="comment">//Files.move(from,to);</span></span><br><span class="line">        System.out.println(newDir.getParent());</span><br><span class="line">        System.out.println(newDir.getRoot());</span><br><span class="line">        System.out.println(newDir.getFileName());  <span class="comment">//获取路径中最后一个字段,不管是目录还是文件</span></span><br><span class="line">        System.out.println(newDir.getFileSystem());</span><br><span class="line">        System.out.println(newDir.getNameCount());   <span class="comment">//路径层级的个数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Files.readAllBytes(to);   <span class="comment">//获取文本内容存入byte数组</span></span><br><span class="line">        String contents = <span class="keyword">new</span> String(bytes, Charset.defaultCharset());  <span class="comment">//将byte数组转化成String对象</span></span><br><span class="line">        System.out.println(contents);</span><br><span class="line">        Files.write(to,contents.getBytes());  <span class="comment">//覆盖写    获取String对象对应的byte数组</span></span><br><span class="line">        <span class="comment">//Files.write(to,contents.getBytes(), StandardOpenOption.APPEND);  //追加写</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Files.delete(newDir);</span></span><br><span class="line">        Files.createDirectories(newDir);  <span class="comment">//创建路径中的所有中间目录 相当于mkdir -p</span></span><br><span class="line">        Path newFile = Paths.get(<span class="string">"/Users/linbingdong/test"</span>,<span class="string">"hi"</span>,<span class="string">"hei"</span>,<span class="string">"oo"</span>,<span class="string">"hhhh"</span>);</span><br><span class="line">        <span class="comment">//Files.createFile(newFile); //创建一个新文件 最后是文件名</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Files.exists(newFile));  <span class="comment">//判断是否存在</span></span><br><span class="line">        System.out.println(Files.size(newFile)); <span class="comment">//返回文件的字节数</span></span><br><span class="line">        System.out.println(Files.isDirectory(newFile)); <span class="comment">//判断是否是文件夹</span></span><br><span class="line">        Path basePath = Paths.get(<span class="string">"/Users/linbingdong/test"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(basePath)) &#123; <span class="comment">//迭代目录中的文件</span></span><br><span class="line">            <span class="keyword">for</span> (Path entry: entries) &#123;</span><br><span class="line">                System.out.println(entry.getFileName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong><br>以上的方法适用于处理<strong>中等长度</strong>的<strong>文本文件</strong>，如果要处理的<strong>文件较大</strong>，或者是<strong>二进制文件</strong>，那么还是应该使用所熟知的<strong>流或者读入器、写出器</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream in = Files.newInputStream(Path);</span><br><span class="line">OutputStream out = Files.newOutputStream(Path);</span><br><span class="line">Reader in = Files.newBufferedReader(Path,charset);</span><br><span class="line">Writer out = Files.newBufferedWriter(path,charset);</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——从ACID到CAP/BASE]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E4%BB%8EACID%E5%88%B0CAP:BASE/</url>
      <content type="html"><![CDATA[<p>本文先介绍传统关系数据库中事务的ACID特性，再介绍分布式系统中的经典理论——CAP定理和BASE理论。</p>
<a id="more"></a>


<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务的定义：</strong></p>
<blockquote>
<p>事务（Transaction）是由一系列对系统中数据进行<strong>访问与更新</strong>的操作所组成的一个<strong>程序执行逻辑单元</strong>（Unit），狭义上的事务特指数据库事务。</p>
</blockquote>
<p><strong>事务的作用：</strong></p>
<ul>
<li><p>当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作相互干扰。</p>
</li>
<li><p>事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。</p>
</li>
</ul>
<p>事务具有四个特性，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）,简称为事务的ACID特性。</p>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>事务的原子性是指事务必须是一个<strong>原子的操作序列单元</strong>。事务中包含的各项操作在一次执行过程中，<strong>要么全部执行，要么全部不执行</strong>。</p>
<p>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚。只有所有的操作全部成功，整个事务才算是成功完成。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行前后，数据库都必须处于一致性状态。换句话说，事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。</p>
<p>举个例子</p>
<p>银行的转账操作就是一个事务。假设A和B原来账户都有100元。此时A转账给B50元，转账结束后，应该是A账户减去50元变成50元，B账户增加50元变成150元。A、B的账户总和还是200元。转账前后，数据库就是从一个一致性状态（A100元，B100元，A、B共200元）转变到另一个一致性状态（A50元，B150元，A、B共200元）。假设转账结束后只扣了A账户，没有增加B账户，这时数据库就处于不一致的状态。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>事务的隔离性是指在<strong>并发</strong>环境中，并发的事务是<strong>相互隔离</strong>的，事务之间<strong>互不干扰</strong>。</p>
<p>在标准的SQL规范中，定义的4个事务隔离级别，不同隔离级别对事务的处理不同。4个隔离级别分别是：未授权读取、授权读取、可重复读取和串行化。</p>
<p>下表展示了不同隔离级别下事务访问数据的差异</p>
<table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">脏读</th>
<th align="center">可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">未授权读取</td>
<td align="center">存在</td>
<td align="center">不可以</td>
<td align="center">存在</td>
</tr>
<tr>
<td align="center">授权读取</td>
<td align="center">不存在</td>
<td align="center">不可以</td>
<td align="center">存在</td>
</tr>
<tr>
<td align="center">可重复读取</td>
<td align="center">不存在</td>
<td align="center">可以</td>
<td align="center">存在</td>
</tr>
<tr>
<td align="center">串行化</td>
<td align="center">不存在</td>
<td align="center">可以</td>
<td align="center">不存在</td>
</tr>
</tbody></table>
<p>以上4个级别的隔离性依次增强，分别解决不同的问题。<strong>事务隔离级别越高，就越能保证数据的完整性和一致性，但同时对并发性能的影响也越大</strong>。</p>
<p>通常，对于绝大多数的应用来说，可以优先考虑将数据库系统的隔离级别设置为<strong>授权读取</strong>，这能够在避免脏读的同时保证较好的并发性能。尽管这种事务隔离级别会导致不可重复读、幻读和第二类丢失更新等并发问题，但较为科学的做法是在可能出现这类问题的个别场合中，由应用程序主动采用悲观锁或乐观锁来进行事务控制。</p>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务的持久性又称为永久性，是指一个事务一旦提交，对数据库中对应数据的状态变更就应该是<strong>永久性</strong>的。即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其<strong>恢复</strong>到事务成功结束时的状态。</p>
<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>事务在分布式计算领域也得到了广泛的应用。在单机数据库中，我们很容易能够实现一套满足ACID特性的事务处理系统，但是在分布式数据库中，数据分散在各台不同的机器上，如何对这些数据进行分布式事务处理具有非常大的挑战。</p>
<blockquote>
<p>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于分布式系统的<strong>不同节点</strong>之上。通常一个分布式事务会涉及对<strong>多个数据源</strong>或<strong>业务系统</strong>的操作。</p>
</blockquote>
<p>举个例子来说明分布式事务。一个最典型的分布式事务场景是<strong>跨行的转账操作</strong>。该操作涉及调用两个异地的银行服务。其中一个是本地银行提供的取款服务，另一个是目标银行提供的存款服务，这两个服务本身是无状态且相互独立的，共同构成了一个完整的分布式事务。取款和存款两个步骤要么都执行，要么都不执行。否则，如果从本地银行取款成功，但是因为某种原因存款服务失败了，那么必须<strong>回滚</strong>到取款之前的状态，否则就会导致数据不一致。</p>
<p>从上面的例子可以看出，一个分布式事务可以看作是由<strong>多个分布式操作序列</strong>组成的，例如上面例子中的取款服务和存款服务，通常可以把这一系列分布式的操作序列称为<strong>子事务</strong>。由于分布式事务中，各个子事务的执行是分布式的，因此要实现一种能够保证ACID特性的分布式事务处理系统就显得格外复杂。</p>
<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>CAP定理：</p>
<blockquote>
<p>一个分布式系统<strong>不可能</strong>同时满足<strong>一致性</strong>（C:Consistency）、<strong>可用性</strong>（A:Availability）和<strong>分区容错性</strong>（P:Partition tolerance）这三个基本要求，最多只能满足<strong>其中的两项</strong>。</p>
</blockquote>
<h3 id="一致性-1"><a href="#一致性-1" class="headerlink" title="一致性"></a>一致性</h3><p>在分布式环境中，一致性是指数据在<strong>多个副本之间</strong>是否能够<strong>保持一致</strong>的特性（这点跟ACID中的一致性含义不同）。</p>
<p>对于一个将数据副本分布在不同节点上的分布式系统来说，如果对第一个节点的数据进行了更新操作并且更新成功后，却没有使得第二个节点上的数据得到相应的更新，于是在对第二个节点的数据进行读取操作时，获取的依然是更新前的数据（称为<strong>脏数据</strong>），这就是典型的分布式数据不一致情况。在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都能读取到最新的值，那么这样的系统就被认为具有<strong>强一致性</strong>（或严格的一致性）。</p>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>可用性是指系统提供的服务必须<strong>一直处于可用</strong>的状态，对于用户的每一个操作请求总是能够在<strong>有限的时间</strong>内<strong>返回结果</strong>，如果超过了这个时间范围，那么系统就被认为是不可用的。</p>
<p>『有限的时间内』是一个在系统设计之初就设定好的运行指标，<strong>不同的系统会有很大的差别</strong>。比如对于一个在线搜索引擎来说，通常在0.5秒内需要给出用户搜索关键词对应的检索结果。而对应Hive来说，一次正常的查询时间可能在20秒到30秒之间。</p>
<p>『返回结果』是可用性的另一个非常重要的指标，它要求系统在完成对用户请求的处理后，返回一个正常的响应结果。正常的响应结果通常能够<strong>明确</strong>地反映出对请求的处理结果，及成功或失败，而不是一个让用户感到困惑的返回结果。</p>
<p>让我们再来看看上面提到的在线搜索引擎的例子，如果用户输入指定的搜索关键词后，返回的结果是一个系统错误，比如”OutOfMemoryErroe”或”System Has Crashed”等提示语，那么我们认为此时系统是不可用的。</p>
<h3 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h3><p>分区容错性要求一个分布式系统需要具备如下特性：分布式系统在遇到任何网络分区故障的时候，仍然能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p>
<p>网络分区是指在分布式系统中，不同的节点分布在不同的<strong>子网络</strong>（机房或异地网络等）中，由于一些特殊的原因导致这些子网络之间出现网络<strong>不连通</strong>的状况，但各个子网络的<strong>内部网络是正常的</strong>，从而导致整个系统的网络环境被切分成了<strong>若干个孤立的区域</strong>。</p>
<p>以上就是对CAP定理中一致性、可用性和分区容错性的讲解。</p>
<p>既然一个分布式系统无法同时满足上述三个要求，而只能满足其中的两项，因此在对CAP定理应用时，我们就需要抛弃其中的一项，下表是抛弃CAP中任意一项特性的场景说明。</p>
<table>
<thead>
<tr>
<th align="center">CAP</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">放弃P</td>
<td align="center">如果希望能够避免系统出现分区容错性问题，一种较为简单的做法是将所有的数据（或者仅仅是哪些与事务相关的数据）都放在<strong>一个分布式节点上</strong>。这样做虽然无法100%保证系统不会出错，但至少不会碰到由于网络分区带来的负面影响。但同时需要注意的是，放弃P的同时也就意味着放弃了系统的可扩展性</td>
</tr>
<tr>
<td align="center">放弃A</td>
<td align="center">一旦系统遇到网络分区或其他故障或为了保证一致性时，放弃可用性，那么受到影响的服务需要等待一定的时间，因此在等待期间系统<strong>无法对外提供正常的服务</strong>，即<strong>不可用</strong></td>
</tr>
<tr>
<td align="center">放弃C</td>
<td align="center">这里所说的放弃一致性，实际上指的是放弃数据的<strong>强一致性</strong>，而保留数据的<strong>最终一致性</strong>。这样的系统无法保证数据保持实时的一致性，但是能够承诺的是，数据<strong>最终会达到一个一致的状态</strong>。</td>
</tr>
</tbody></table>
<p>需要明确的一点是：对于一个分布式系统而言，分区容错性可以说是一个<strong>最基本的要求</strong>。因为既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓的分布式系统了，因此必然出现子网络。而对于分布式系统而言，网络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。因此系统架构师往往需要把精力花在如何根据业务特点<strong>在C（一致性）和A（可用性）之间寻求平衡</strong>。</p>
<h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE是<strong>Basically Available(基本可用）</strong>、<strong>Soft state(软状态）</strong>和<strong>Eventually consistent(最终一致性）</strong>三个短语的简写。BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是<strong>基于CAP定理逐步演化</strong>而来的，其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方法来使系统达到<strong>最终一致性</strong>。接下来，我们着重对BASE中的三要素进行讲解。</p>
<h3 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a>基本可用</h3><p>基本可用是指分布式系统在出现不可预知故障的时候，允许<strong>损失部分可用性</strong>——但请注意，这绝不等价于系统不可用。一下就是两个”基本可用”的例子。</p>
<ul>
<li><p><strong>响应时间上的损失：</strong>正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</p>
</li>
<li><p><strong>功能上的损失：</strong>正常情况下，在一个电子商务网站（比如淘宝）上购物，消费者几乎能够顺利地完成每一笔订单。但在一些节日大促购物高峰的时候（比如双十一、双十二），由于消费者的购物行为激增，为了保护系统的稳定性（或者保证一致性），部分消费者可能会被引导到一个降级页面，如下：</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-37e6cda2c76b8cec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基本可用"></p>
<h3 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h3><p>软状态是指允许系统中的数据存在<strong>中间状态</strong>，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同的数据副本之间进行数据同步的过程<strong>存在延时</strong>。</p>
<h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，<strong>最终能够达到一个一致的状态</strong>。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p>
<p>最终一致性是一种<strong>特殊的弱一致性</strong>：系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问都能够获取到最新的值。同时，在没有发生故障的前提下，数据到达一致状态的时间延迟，取决于网络延迟、系统负载和数据复制方案设计等因素。</p>
<p>在实际工程实践中，最终一致性存在一下五类主要变种。</p>
<ul>
<li>因果一致性(Causal consistency)</li>
<li>读己之所写(Read your writes)</li>
<li>会话一致性(Session consistency)</li>
<li>单调读一致性(Monotonic read consistency)</li>
<li>单调写一致性(Monotonic write consistency)</li>
</ul>
<p>以上就是最终一致性的五种常见的变种，在实际系统实践中，可以将其中的若干个变种互相结合起来，以构建一个具有最终一致性特性的分布式系统。事实上，最终一致性并不是只有那些大型分布式系统才涉及的特性，许多<strong>现代的关系型数据库</strong>都采用了最终一致性模型。在现代关系型数据库中（比如MySQL和PostgreSQL），大多都会采用<strong>同步或异步</strong>方式来实现<strong>主备数据复制</strong>技术。在同步方式中，数据的复制过程通常是更新事务的一部分，因此在事务完成后，主备数据库的数据就会达到一致。而在异步方式中，备库的更新往往会存在延时，这取决于事务日志在主备数据库之间传输的时间长短。如果传输时间过长或者甚至在日志传输过程中出现异常导致无法及时将事务应用到备库上，那么很显然，从备库中读取的数据将是旧的，因此就出现了数据不一致的情况。当然，无论是采用多次重试还是人为数据订正，关系型数据库还是能够保证最终数据达到一致，这就是系统提供最终一致性保证的经典案例。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《从Paxos到ZooKeeper——分布式一致性原理与实践》<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java对象流与序列化]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%E5%AF%B9%E8%B1%A1%E6%B5%81%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>Java语言支持一种称为<strong>对象序列化（object serialization）</strong>的非常通用的机制，它可以将任何对象写入到流中，并在之后将其读回。被序列化的每个对象都有一个序列号，唯一标识该对象，而不是通过该对象的内存地址来表示对象。这样就能将一个对象集合从一台集群传送到另一台机器，与对象在内存中的地址无关。</p>
<a id="more"></a> 

<p><strong>示例：</strong></p>
<p><code>ObjectStreamTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lbd on 2017/1/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Employee harry = <span class="keyword">new</span> Employee(<span class="string">"Harry Hacker"</span>, <span class="number">50000</span>, <span class="number">1989</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">        Manager carl = <span class="keyword">new</span> Manager(<span class="string">"Carl Cracker"</span>, <span class="number">80000</span>, <span class="number">1987</span>, <span class="number">12</span>, <span class="number">15</span>);</span><br><span class="line">        carl.setSecretary(harry);</span><br><span class="line">        Manager tony = <span class="keyword">new</span> Manager(<span class="string">"Tony Tester"</span>, <span class="number">40000</span>, <span class="number">1990</span>, <span class="number">3</span>, <span class="number">15</span>);</span><br><span class="line">        tony.setSecretary(harry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">        staff[<span class="number">0</span>] = carl;</span><br><span class="line">        staff[<span class="number">1</span>] = harry;</span><br><span class="line">        staff[<span class="number">2</span>] = tony;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee1.dat"</span>)))&#123;</span><br><span class="line">            out.writeObject(staff);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"employee1.dat"</span>)))&#123;</span><br><span class="line">            Employee[] newStaff = (Employee[]) in.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Employee e : newStaff)&#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.salary + <span class="string">" "</span> + <span class="keyword">this</span>.year + <span class="string">" "</span> + <span class="keyword">this</span>.month + <span class="string">" "</span> + <span class="keyword">this</span>.day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    Employee secretary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, salary, year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecretary</span><span class="params">(Employee e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.secretary = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>Employee和Manager都必须实现Serializable接口才能被序列化!(Serializable接口没有任何方法)</li>
<li>对象流输出中包含所有对象的类型和数据域</li>
<li>每个对象都被赋予一个序列号</li>
<li>相同对象的重复出现将被存储为对这个对象的序列号的引用</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix综述（SQL on HBase）]]></title>
      <url>http://linbingdong.com/2017/03/11/Phoenix%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="1-Phoenix概述"><a href="#1-Phoenix概述" class="headerlink" title="1. Phoenix概述"></a>1. Phoenix概述</h2><p>Phoenix最早是saleforce的一个开源项目，后来成为Apache基金的顶级项目。</p>
<a id="more"></a>

<p>Phoenix是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表，插入数据和对HBase数据进行查询。</p>
<blockquote>
<p>put the SQL back in NoSQL</p>
</blockquote>
<p>Phoenix完全使用Java编写，作为HBase内嵌的JDBC驱动。Phoenix查询引擎会将SQL查询转换为一个或多个HBase扫描，并编排执行以生成标准的JDBC结果集。直接使用HBase API、协同处理器与自定义过滤器，对于简单查询来说，其性能量级是毫秒，对于百万级别的行数来说，其性能量级是秒。 </p>
<p>HBase的查询工具有很多，如：Hive、Tez、Impala、Spark SQL、Phoenix等。</p>
<p>Phoenix通过以下方式使我们可以少写代码，并且性能比我们自己写代码更好：</p>
<ul>
<li>将SQL编译成原生的HBase scans。</li>
<li>确定scan关键字的最佳开始和结束</li>
<li>让scan并行执行</li>
<li>…</li>
</ul>
<p>使用Phoenix的公司</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ab4f066b9dfce30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="2-历史演进"><a href="#2-历史演进" class="headerlink" title="2. 历史演进"></a>2. 历史演进</h2><ul>
<li><strong>3.0/4.0 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/array_type.html" target="_blank" rel="noopener">ARRAY Type</a></strong>. 支持标准的JDBC数组类型</p>
<p><strong><a href="http://phoenix.apache.org/sequences.html" target="_blank" rel="noopener">Sequences</a></strong>. 支持 CREATE/DROP SEQUENCE, NEXT VALUE FOR, CURRENT VALUE FOR也实现了</p>
<p><strong><a href="http://phoenix.apache.org/multi-tenancy.html" target="_blank" rel="noopener">Multi-tenancy</a></strong>. 同一张HBase物理表上，不同的租户可以创建相互独立的视图</p>
<p><strong><a href="http://phoenix.apache.org/views.html" target="_blank" rel="noopener">Views</a></strong>. 同一张HBase物理表上可以创建不同的视图</p>
<ul>
<li><strong>3.1/4.1 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/pig_integration.html#Pig_Loader" target="_blank" rel="noopener">Apache Pig Loader</a></strong> . 通过pig来处理数据时支持pig加载器来利用Phoenix的性能</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-136" target="_blank" rel="noopener">Derived Tables</a></strong>. 允许在一个FROM子句中使用SELECT子句来定义一张衍生表</p>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Local_Indexing" target="_blank" rel="noopener">Local Indexing</a></strong>. 后面介绍</p>
<p><strong><a href="http://phoenix.apache.org/tracing.html" target="_blank" rel="noopener">Tracing</a></strong>. 后面介绍</p>
<ul>
<li><strong>3.2/4.2 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/subqueries.html" target="_blank" rel="noopener">Subqueries</a></strong> 支持在WHERE和FROM子句中的独立子查询和相关子查询</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-167" target="_blank" rel="noopener">Semi/anti joins</a></strong>. 通过标准的[NOT] IN 和 [NOT] EXISTS关键字来支持半/反连接</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-852" target="_blank" rel="noopener">Optimize foreign key joins</a></strong>. 通过利用跳跃扫描过滤器来优化外键连接</p>
<p><strong><a href="http://phoenix.apache.org/update_statistics.html" target="_blank" rel="noopener">Statistics Collection</a></strong>. 通过收集表的统计信息来提高并行查询能力</p>
<ul>
<li><strong>3.3/4.3 release</strong></li>
</ul>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1179" target="_blank" rel="noopener">Many-to-many joins</a></strong>. 支持两边都太大以至于无法放进内存的连接</p>
<p><strong><a href="http://phoenix.apache.org/phoenix_mr.html" target="_blank" rel="noopener">Map-reduce Integration</a></strong>. 支持Map-reduce集成</p>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Functional_Indexes" target="_blank" rel="noopener">Functional Indexes</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.4 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/udf.html" target="_blank" rel="noopener">User Defined Functions</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.5 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Asynchronous_Index_Population" target="_blank" rel="noopener">Asynchronous Index Population</a></strong>. 通过一个Map-reduce job，索引可以被异步创建</p>
<ul>
<li><strong>4.6 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/rowtimestamp.html" target="_blank" rel="noopener">Time series Optimization</a></strong>. 优化针对时间序列数据的查询</p>
<ul>
<li><strong>4.7 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/transactions.html" target="_blank" rel="noopener">Transaction Support</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.8 release</strong></li>
</ul>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-258" target="_blank" rel="noopener">DISTINCT Query Optimization</a></strong>. 使用搜索逻辑来大幅提高 SELECT DISTINCT 和 COUNT DISTINCT的查询性能 </p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1734" target="_blank" rel="noopener">Local Index Improvements</a></strong>. Reworked 后面介绍</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-2743" target="_blank" rel="noopener">Hive Integration</a></strong>. 能够在Phoenix内使用Hive来支持大表和大表之间的连接</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1311" target="_blank" rel="noopener">Namespace Mapping</a></strong>. 将Phoenix schema映射到HBase的命名空间来增强不同schema之间的隔离性</p>
<h2 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h2><h3 id="3-1-Transactions-beta-事务"><a href="#3-1-Transactions-beta-事务" class="headerlink" title="3.1 Transactions (beta)  事务"></a>3.1 <a href="http://phoenix.apache.org/transactions.html" target="_blank" rel="noopener">Transactions (beta)</a>  事务</h3><p>该特性还处于beta版，并非正式版。通过集成<a href="http://tephra.incubator.apache.org/" target="_blank" rel="noopener">Tephra</a>,Phoenix可以支持ACID特性。Tephra也是Apache的一个项目,是事务管理器，它在像HBase这样的分布式数据存储上提供全局一致事务。HBase本身在行层次和区层次上支持强一致性，Tephra额外提供交叉区、交叉表的一致性来支持可扩展性。</p>
<p>要想让Phoenix支持事务特性，需要以下步骤：</p>
<ul>
<li>配置客户端hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;phoenix.transactions.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置服务端hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;data.tx.snapshot.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/tmp/tephra/snapshots&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;data.tx.timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;60&lt;/value&gt;</span><br><span class="line">  &lt;description&gt; set the transaction timeout (time after which open transactions become invalid) to a reasonable value.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置$HBASE_HOME并启动Tephra</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/tephra</span><br></pre></td></tr></table></figure>

<p>通过以上配置，Phoenix已经支持了事务特性，但创建表的时候默认还是不支持的。如果想创建一个表支持事务特性，需要显示声明，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE my_table (k BIGINT PRIMARY KEY, v VARCHAR) TRANSACTIONAL=true;</span><br></pre></td></tr></table></figure>

<p>就是在建表语句末尾增加 <code>TRANSACTIONAL=true</code>。</p>
<p>原本存在的表也可以更改成支持事务的，需要注意的是，事务表无法改回非事务的，因此更改的时候要小心。一旦改成事务的，就改不回去了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE my_other_table SET TRANSACTIONAL=true;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-User-defined-functions-UDFs-用户定义函数"><a href="#3-2-User-defined-functions-UDFs-用户定义函数" class="headerlink" title="3.2 User-defined functions(UDFs)  用户定义函数"></a>3.2 <a href="http://phoenix.apache.org/udf.html" target="_blank" rel="noopener">User-defined functions(UDFs)</a>  用户定义函数</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><p>Phoenix从4.4.0版本开始支持用户自定义函数。</p>
<p>用户可以创建临时或永久的用户自定义函数。这些用户自定义函数可以像内置的create、upsert、delete一样被调用。临时函数是针对特定的会话或连接，对其他会话或连接不可见。永久函数的元信息会被存储在一张叫做SYSTEM.FUNCTION的系统表中，对任何会话或连接均可见。</p>
<h4 id="3-2-2-配置"><a href="#3-2-2-配置" class="headerlink" title="3.2.2 配置"></a>3.2.2 配置</h4><ul>
<li>hive-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;phoenix.functions.allowUserDefinedFunctions&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;fs.hdfs.impl&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.hadoop.hdfs.DistributedFileSystem&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;$&#123;hbase.tmp.dir&#125;/hbase&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;The directory shared by region servers and into</span><br><span class="line">    which HBase persists.  The URL should be &apos;fully-qualified&apos;</span><br><span class="line">    to include the filesystem scheme.  For example, to specify the</span><br><span class="line">    HDFS directory &apos;/hbase&apos; where the HDFS instance&apos;s namenode is</span><br><span class="line">    running at namenode.example.org on port 9000, set this value to:</span><br><span class="line">    hdfs://namenode.example.org:9000/hbase.  By default, we write</span><br><span class="line">    to whatever $&#123;hbase.tmp.dir&#125; is set too -- usually /tmp --</span><br><span class="line">    so change this configuration or else all data will be lost on</span><br><span class="line">    machine restart.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.dynamic.jars.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;$&#123;hbase.rootdir&#125;/lib&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;</span><br><span class="line">    The directory from which the custom udf jars can be loaded</span><br><span class="line">    dynamically by the phoenix client/region server without the need to restart. However,</span><br><span class="line">    an already loaded udf class would not be un-loaded. See</span><br><span class="line">    HBASE-1936 for more details.</span><br><span class="line">  &lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>后两个配置需要跟hbse服务端的配置一致。</p>
<p>以上配置完后，在JDBC连接时还需要执行以下语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Properties props = new Properties();</span><br><span class="line">props.setProperty(&quot;phoenix.functions.allowUserDefinedFunctions&quot;, &quot;true&quot;);</span><br><span class="line">Connection conn = DriverManager.getConnection(&quot;jdbc:phoenix:localhost&quot;, props);</span><br></pre></td></tr></table></figure>

<p>以下是可选的配置，用于动态类加载的时候把jar包从hdfs拷贝到本地文件系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.local.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;$&#123;hbase.tmp.dir&#125;/local/&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;Directory on the local filesystem to be used</span><br><span class="line">    as a local storage.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Secondary-Indexing-二级索引"><a href="#3-3-Secondary-Indexing-二级索引" class="headerlink" title="3.3 Secondary Indexing  二级索引"></a>3.3 <a href="http://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="noopener">Secondary Indexing</a>  二级索引</h3><p>在HBase中，只有一个单一的按照字典序排序的rowKey索引，当使用rowKey来进行数据查询的时候速度较快，但是如果不使用rowKey来查询的话就会使用filter来对全表进行扫描，很大程度上降低了检索性能。而Phoenix提供了二级索引技术来应对这种使用rowKey之外的条件进行检索的场景。</p>
<ul>
<li>Covered Indexes</li>
</ul>
<blockquote>
<p>只需要通过索引就能返回所要查询的数据，所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)</p>
</blockquote>
<ul>
<li>Functional Indexes</li>
</ul>
<blockquote>
<p>从Phoeinx4.3以上就支持函数索引，其索引不局限于列，可以合适任意的表达式来创建索引，当在查询时用到了这些表达式时就直接返回表达式结果</p>
</blockquote>
<ul>
<li>Global Indexes</li>
</ul>
<blockquote>
<p>Global indexing适用于多读少写的业务场景。<br>使用Global indexing的话在写数据的时候会消耗大量开销，因为所有对数据表的更新操作（DELETE, UPSERT VALUES and UPSERT SELECT）,会引起索引表的更新，而索引表是分布在不同的数据节点上的，跨节点的数据传输带来了较大的性能消耗。在读数据的时候Phoenix会选择索引表来降低查询消耗的时间。在默认情况下如果想查询的字段不是索引字段的话索引表不会被使用，也就是说不会带来查询速度的提升。</p>
</blockquote>
<ul>
<li>Local Indexes</li>
</ul>
<blockquote>
<p>Local indexing适用于写操作频繁的场景。<br>与Global indexing一样，Phoenix会自动判定在进行查询的时候是否使用索引。使用Local indexing时，索引数据和数据表的数据是存放在相同的服务器中的避免了在写操作的时候往不同服务器的索引表中写索引带来的额外开销。使用Local indexing的时候即使查询的字段不是索引字段索引表也会被使用，这会带来查询速度的提升，这点跟Global indexing不同。一个数据表的所有索引数据都存储在一个单一的独立的可共享的表中。</p>
</blockquote>
<h3 id="3-4-Statistics-Collection-统计信息收集"><a href="#3-4-Statistics-Collection-统计信息收集" class="headerlink" title="3.4 Statistics Collection  统计信息收集"></a>3.4 <a href="http://phoenix.apache.org/update_statistics.html" target="_blank" rel="noopener">Statistics Collection</a>  统计信息收集</h3><blockquote>
<p>UPDATE STATISTICS可以更新某张表的统计信息，以提高查询性能</p>
</blockquote>
<h3 id="3-5-Row-timestamp-时间戳"><a href="#3-5-Row-timestamp-时间戳" class="headerlink" title="3.5 Row timestamp  时间戳"></a>3.5 <a href="http://phoenix.apache.org/rowtimestamp.html" target="_blank" rel="noopener">Row timestamp</a>  时间戳</h3><blockquote>
<p>从4.6版本开始，Phoenix提供了一种将HBase原生的row timestamp映射到Phoenix列的方法。这样有利于充分利用HBase提供的针对存储文件的时间范围的各种优化，以及Phoenix内置的各种查询优化。</p>
</blockquote>
<h3 id="3-6-Paged-Queries-分页查询"><a href="#3-6-Paged-Queries-分页查询" class="headerlink" title="3.6 Paged Queries  分页查询"></a>3.6 <a href="http://phoenix.apache.org/paged.html#" target="_blank" rel="noopener">Paged Queries</a>  分页查询</h3><blockquote>
<p>Phoenix支持分页查询：</p>
<ul>
<li>Row Value Constructors (RVC)</li>
<li>OFFSET with limit</li>
</ul>
</blockquote>
<h3 id="3-7-Salted-Tables-散步表"><a href="#3-7-Salted-Tables-散步表" class="headerlink" title="3.7 Salted Tables  散步表"></a>3.7 <a href="http://phoenix.apache.org/salted.html" target="_blank" rel="noopener">Salted Tables</a>  散步表</h3><blockquote>
<p>如果row key是自动增长的，那么HBase的顺序写会导致region server产生数据热点的问题，Phoenix的Salted Tables技术可以解决region server的热点问题</p>
</blockquote>
<h3 id="3-8-Skip-Scan-跳跃扫描"><a href="#3-8-Skip-Scan-跳跃扫描" class="headerlink" title="3.8 Skip Scan  跳跃扫描"></a>3.8 <a href="http://phoenix.apache.org/skip_scan.html" target="_blank" rel="noopener">Skip Scan</a>  跳跃扫描</h3><blockquote>
<p>可以在范围扫描的时候提高性能</p>
</blockquote>
<h3 id="3-9-Views-视图"><a href="#3-9-Views-视图" class="headerlink" title="3.9 Views  视图"></a>3.9 <a href="http://phoenix.apache.org/views.html" target="_blank" rel="noopener">Views</a>  视图</h3><blockquote>
<p>标准的SQL视图语法现在在Phoenix上也支持了。这使得能在同一张底层HBase物理表上创建多个虚拟表。</p>
</blockquote>
<h3 id="3-10-Multi-tenancy-多租户"><a href="#3-10-Multi-tenancy-多租户" class="headerlink" title="3.10 Multi tenancy  多租户"></a>3.10 <a href="http://phoenix.apache.org/multi-tenancy.html" target="_blank" rel="noopener">Multi tenancy</a>  多租户</h3><blockquote>
<p>通过指定不同的租户连接实现数据访问的隔离</p>
</blockquote>
<h3 id="3-11-Dynamic-Columns-动态列"><a href="#3-11-Dynamic-Columns-动态列" class="headerlink" title="3.11 Dynamic Columns  动态列"></a>3.11 <a href="http://phoenix.apache.org/dynamic_columns.html" target="_blank" rel="noopener">Dynamic Columns</a>  动态列</h3><blockquote>
<p>Phoenix 1.2, specifying columns dynamically is now supported by allowing column definitions to included in parenthesis after the table in the FROM clause on a SELECT statement. Although this is not standard SQL, it is useful to surface this type of functionality to leverage the late binding ability of HBase.</p>
</blockquote>
<h3 id="3-12-Bulk-CSV-Data-Loading-大量CSV数据加载"><a href="#3-12-Bulk-CSV-Data-Loading-大量CSV数据加载" class="headerlink" title="3.12 Bulk CSV Data Loading  大量CSV数据加载"></a>3.12 <a href="http://phoenix.apache.org/bulk_dataload.html" target="_blank" rel="noopener">Bulk CSV Data Loading</a>  大量CSV数据加载</h3><blockquote>
<p>加载CSV数据到Phoenix表有两种方式：1. 通过psql命令以单线程的方式加载，数据量少的情况下适用。 2. 基于MapReduce的bulk load工具，适用于数据量大的情况</p>
</blockquote>
<h3 id="3-13-Query-Server-查询服务器"><a href="#3-13-Query-Server-查询服务器" class="headerlink" title="3.13 Query Server  查询服务器"></a>3.13 <a href="http://phoenix.apache.org/server.html" target="_blank" rel="noopener">Query Server</a>  查询服务器</h3><blockquote>
<p>Phoenix4.4引入的一个单独的服务器来提供thin客户端的连接</p>
</blockquote>
<h3 id="3-14-Tracing-追踪"><a href="#3-14-Tracing-追踪" class="headerlink" title="3.14 Tracing  追踪"></a>3.14 <a href="http://phoenix.apache.org/tracing.html" target="_blank" rel="noopener">Tracing</a>  追踪</h3><blockquote>
<p>从4.1版本开始Phoenix增加这个特性来追踪每条查询的踪迹，这使用户能够看到每一条查询或插入操作背后从客户端到HBase端执行的每一步。</p>
</blockquote>
<h3 id="3-15-Metrics-指标"><a href="#3-15-Metrics-指标" class="headerlink" title="3.15 Metrics  指标"></a>3.15 <a href="http://phoenix.apache.org/metrics.html" target="_blank" rel="noopener">Metrics</a>  指标</h3><blockquote>
<p>Phoenix提供各种各样的指标使我们能够知道Phoenix客户端在执行不同SQL语句的时候其内部发生了什么。这些指标在客户端JVM中通过两种方式来收集：</p>
<ul>
<li><strong>Request level metrics</strong> - collected at an individual SQL statement<br>level</li>
<li><strong>Global metrics</strong> - collected at the client JVM level</li>
</ul>
</blockquote>
<h2 id="4-架构和组成"><a href="#4-架构和组成" class="headerlink" title="4. 架构和组成"></a>4. 架构和组成</h2><ul>
<li>Phoenix架构</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c0f2f49522ae3da2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Phoenix Architecture.png"></p>
<ul>
<li>Phoenix在Hadoop生态系统中的位置</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-684d1b6dcfcdf8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="位置.png"></p>
<h2 id="5-数据存储"><a href="#5-数据存储" class="headerlink" title="5. 数据存储"></a>5. 数据存储</h2><blockquote>
<p>Phoenix将HBase的数据模型映射到关系型世界</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3d6f52d14720d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Data Model.png"></p>
<h2 id="6-对QL的支持"><a href="#6-对QL的支持" class="headerlink" title="6. 对QL的支持"></a>6. 对QL的支持</h2><p>支持的命令如下：</p>
<ul>
<li>SELECT</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">SELECT * FROM TEST LIMIT 1000;</span><br><span class="line">SELECT * FROM TEST LIMIT 1000 OFFSET 100;</span><br><span class="line">SELECT full_name FROM SALES_PERSON WHERE ranking &gt;= 5.0 UNION ALL SELECT reviewer_name FROM CUSTOMER_REVIEW WHERE score &gt;= 8.0</span><br></pre></td></tr></table></figure>

<ul>
<li>UPSERT VALUES</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">UPSERT INTO TEST VALUES(&apos;foo&apos;,&apos;bar&apos;,3);</span><br><span class="line">UPSERT INTO TEST(NAME,ID) VALUES(&apos;foo&apos;,123);</span><br></pre></td></tr></table></figure>

<ul>
<li>UPSERT SELECT</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">UPSERT INTO test.targetTable(col1, col2) SELECT col3, col4 FROM test.sourceTable WHERE col5 &lt; 100</span><br><span class="line">UPSERT INTO foo SELECT * FROM bar;</span><br></pre></td></tr></table></figure>

<ul>
<li>DELETE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DELETE FROM TEST;</span><br><span class="line">DELETE FROM TEST WHERE ID=123;</span><br><span class="line">DELETE FROM TEST WHERE NAME LIKE &apos;foo%&apos;;</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE TABLE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE my_schema.my_table ( id BIGINT not null primary key, date)</span><br><span class="line">CREATE TABLE my_table ( id INTEGER not null primary key desc, date DATE not null,m.db_utilization DECIMAL, i.db_utilization) m.DATA_BLOCK_ENCODING=&apos;DIFF&apos;</span><br><span class="line">CREATE TABLE stats.prod_metrics ( host char(50) not null, created_date date not null,txn_count bigint CONSTRAINT pk PRIMARY KEY (host, created_date) )</span><br><span class="line">CREATE TABLE IF NOT EXISTS &quot;my_case_sensitive_table&quot;</span><br><span class="line">    ( &quot;id&quot; char(10) not null primary key, &quot;value&quot; integer)</span><br><span class="line">    DATA_BLOCK_ENCODING=&apos;NONE&apos;,VERSIONS=5,MAX_FILESIZE=2000000 split on (?, ?, ?)</span><br><span class="line">CREATE TABLE IF NOT EXISTS my_schema.my_table (org_id CHAR(15), entity_id CHAR(15), payload binary(1000),CONSTRAINT pk PRIMARY KEY (org_id, entity_id) )TTL=86400</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP TABLE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP TABLE my_schema.my_table;</span><br><span class="line">DROP TABLE IF EXISTS my_table;</span><br><span class="line">DROP TABLE my_schema.my_table CASCADE;</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE FUNCTION</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">CREATE FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos; using jar &apos;hdfs:/localhost:8080/hbase/lib/myjar.jar&apos;</span><br><span class="line">CREATE FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos;</span><br><span class="line">CREATE FUNCTION my_increment(integer, integer constant defaultvalue=&apos;10&apos;) returns integer as &apos;com.mypackage.MyIncrementFunction&apos; using jar &apos;/hbase/lib/myincrement.jar&apos;</span><br><span class="line">CREATE TEMPORARY FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos; using jar &apos;hdfs:/localhost:8080/hbase/lib/myjar.jar&apos;</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP FUNCTION</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP FUNCTION IF EXISTS my_reverse</span><br><span class="line">DROP FUNCTION my_reverse</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE VIEW</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">CREATE VIEW &quot;my_hbase_table&quot;( k VARCHAR primary key, &quot;v&quot; UNSIGNED_LONG) default_column_family=&apos;a&apos;;</span><br><span class="line">CREATE VIEW my_view ( new_col SMALLINT ) AS SELECT * FROM my_table WHERE k = 100;</span><br><span class="line">CREATE VIEW my_view_on_view AS SELECT * FROM my_view WHERE new_col &gt; 70;</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP VIEW</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP VIEW my_view</span><br><span class="line">DROP VIEW IF EXISTS my_schema.my_view</span><br><span class="line">DROP VIEW IF EXISTS my_schema.my_view CASCADE</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE SEQUENCE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">CREATE SEQUENCE my_sequence;</span><br><span class="line">CREATE SEQUENCE my_sequence START WITH -1000</span><br><span class="line">CREATE SEQUENCE my_sequence INCREMENT BY 10</span><br><span class="line">CREATE SEQUENCE my_schema.my_sequence START 0 CACHE 10</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP SEQUENCE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP SEQUENCE my_sequence</span><br><span class="line">DROP SEQUENCE IF EXISTS my_schema.my_sequence</span><br></pre></td></tr></table></figure>

<ul>
<li>ALTER</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">ALTER TABLE my_schema.my_table ADD d.dept_id char(10) VERSIONS=10</span><br><span class="line">ALTER TABLE my_table ADD dept_name char(50), parent_id char(15) null primary key</span><br><span class="line">ALTER TABLE my_table DROP COLUMN d.dept_id, parent_id;</span><br><span class="line">ALTER VIEW my_view DROP COLUMN new_col;</span><br><span class="line">ALTER TABLE my_table SET IMMUTABLE_ROWS=true,DISABLE_WAL=true;</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">CREATE INDEX my_idx ON sales.opportunity(last_updated_date DESC)</span><br><span class="line">CREATE INDEX my_idx ON log.event(created_date DESC) INCLUDE (name, payload) SALT_BUCKETS=10</span><br><span class="line">CREATE INDEX IF NOT EXISTS my_comp_idx ON server_metrics ( gc_time DESC, created_date DESC ) DATA_BLOCK_ENCODING=&apos;NONE&apos;,VERSIONS=?,MAX_FILESIZE=2000000 split on (?, ?, ?)</span><br><span class="line">CREATE INDEX my_idx ON sales.opportunity(UPPER(contact_name))</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP INDEX my_idx ON sales.opportunity</span><br><span class="line">DROP INDEX IF EXISTS my_idx ON server_metrics</span><br></pre></td></tr></table></figure>

<ul>
<li>ALTER INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">ALTER INDEX my_idx ON sales.opportunity DISABLE</span><br><span class="line">ALTER INDEX IF EXISTS my_idx ON server_metrics REBUILD</span><br></pre></td></tr></table></figure>

<ul>
<li>EXPLAIN</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">EXPLAIN SELECT NAME, COUNT(*) FROM TEST GROUP BY NAME HAVING COUNT(*) &gt; 2;</span><br><span class="line">EXPLAIN SELECT entity_id FROM CORE.CUSTOM_ENTITY_DATA WHERE organization_id=&apos;00D300000000XHP&apos; AND SUBSTR(entity_id,1,3) = &apos;002&apos; AND created_date &lt; CURRENT_DATE()-1;</span><br></pre></td></tr></table></figure>

<ul>
<li>UPDATE STATISTICS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">UPDATE STATISTICS my_table</span><br><span class="line">UPDATE STATISTICS my_schema.my_table INDEX</span><br><span class="line">UPDATE STATISTICS my_index</span><br><span class="line">UPDATE STATISTICS my_table COLUMNS</span><br><span class="line">UPDATE STATISTICS my_table SET phoenix.stats.guidepost.width=50000000</span><br></pre></td></tr></table></figure>

<ul>
<li>CREATE SCHEMA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">CREATE SCHEMA IF NOT EXISTS my_schema</span><br><span class="line">CREATE SCHEMA my_schema</span><br></pre></td></tr></table></figure>

<ul>
<li>USE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">USE my_schema</span><br><span class="line">USE DEFAULT</span><br></pre></td></tr></table></figure>

<ul>
<li>DROP SCHEMA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">DROP SCHEMA IF EXISTS my_schema</span><br><span class="line">DROP SCHEMA my_schema</span><br></pre></td></tr></table></figure>

<h2 id="7-安装部署"><a href="#7-安装部署" class="headerlink" title="7. 安装部署"></a>7. 安装部署</h2><h3 id="7-1-安装预编译的Phoenix"><a href="#7-1-安装预编译的Phoenix" class="headerlink" title="7.1 安装预编译的Phoenix"></a>7.1 安装预编译的Phoenix</h3><ul>
<li><p>下载并解压最新版的phoenix-[version]-bin.tar包</p>
</li>
<li><p>将phoenix-[version]-server.jar放入服务端和master节点的HBase的lib目录下</p>
</li>
<li><p>重启HBase</p>
</li>
<li><p>将phoenix-[version]-client.jar添加到所有Phoenix客户端的classpath</p>
</li>
</ul>
<h3 id="7-2-使用Phoenix"><a href="#7-2-使用Phoenix" class="headerlink" title="7.2 使用Phoenix"></a>7.2 使用Phoenix</h3><h4 id="7-2-1-命令行"><a href="#7-2-1-命令行" class="headerlink" title="7.2.1 命令行"></a>7.2.1 命令行</h4><p>若要在命令行执行交互式SQL语句：</p>
<p>1.切换到bin目录</p>
<p>2.执行以下语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sqlline.py localhost</span><br></pre></td></tr></table></figure>

<p>若要在命令行执行SQL脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sqlline.py localhost ../examples/stock_symbol.sql</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c1a747aba143487f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h4 id="7-2-2-客户端"><a href="#7-2-2-客户端" class="headerlink" title="7.2.2 客户端"></a>7.2.2 客户端</h4><p> <a href="http://squirrel-sql.sourceforge.net/" target="_blank" rel="noopener">SQuirrel</a>是用来连接Phoenix的客户端。</p>
<p>SQuirrel安装步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Remove prior phoenix-[*oldversion*]-client.jar from the lib directory of SQuirrel, copy phoenix-[*newversion*]-client.jar to the lib directory (*newversion* should be compatible with the version of the phoenix server jar used with your HBase installation)</span><br><span class="line">2. Start SQuirrel and add new driver to SQuirrel (Drivers -&gt; New Driver)</span><br><span class="line">3. In Add Driver dialog box, set Name to Phoenix, and set the Example URL to jdbc:phoenix:localhost.</span><br><span class="line">4. Type “org.apache.phoenix.jdbc.PhoenixDriver” into the Class Name textbox and click OK to close this dialog.</span><br><span class="line">5. Switch to Alias tab and create the new Alias (Aliases -&gt; New Aliases)</span><br><span class="line">6. In the dialog box, Name: *any name*, Driver: Phoenix, User Name: *anything*, Password: *anything*</span><br><span class="line">7. Construct URL as follows: jdbc:phoenix: *zookeeper quorum server*. For example, to connect to a local HBase use: jdbc:phoenix:localhost</span><br><span class="line">8. Press Test (which should succeed if everything is setup correctly) and press OK to close.</span><br><span class="line">9. Now double click on your newly created Phoenix alias and click Connect. Now you are ready to run SQL queries against Phoenix.</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-30cf6769ba33e129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8. 测试"></a>8. 测试</h2><h3 id="8-1-Pherf"><a href="#8-1-Pherf" class="headerlink" title="8.1 Pherf"></a>8.1 Pherf</h3><p>Pherf是可以通过Phoenix来进行性能和功能测试的工具。Pherf可以用来生成高度定制的数据集，并且测试SQL在这些数据集上的性能。</p>
<h4 id="8-1-1-构建Pherf"><a href="#8-1-1-构建Pherf" class="headerlink" title="8.1.1 构建Pherf"></a>8.1.1 构建Pherf</h4><p>Pherf是在用maven构建Phoenix的过程中同时构建的。可以用两种不同的配置来构建：</p>
<ol>
<li>集群（默认）</li>
</ol>
<blockquote>
<p>This profile builds Pherf such that it can run along side an existing cluster. The dependencies are pulled from the HBase classpath.</p>
</blockquote>
<ol start="2">
<li>独立</li>
</ol>
<blockquote>
<p>This profile builds all of Pherf’s dependencies into a single standalone jar. The deps will be pulled from the versions specified in Phoenix’s pom.</p>
</blockquote>
<ul>
<li>构建全部的Phoenix。包含Pherf的默认配置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure>

<ul>
<li>用Pherf的独立配置来构建Phoenix。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -P standalone -DskipTests</span><br></pre></td></tr></table></figure>

<h4 id="8-1-2-安装"><a href="#8-1-2-安装" class="headerlink" title="8.1.2 安装"></a>8.1.2 安装</h4><p>用以上的Maven命令构建完Pherf后，会在该模块的目标目录下生成一个zip文件。</p>
<ol>
<li>将该zip文件解压到合适的目录</li>
<li>配置<code>env.sh</code>文件</li>
<li>./pherf.sh -h</li>
<li>想要在一个真正的集群上测试，运行如下命令: </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./pherf.sh -drop all -l -q -z localhost -schemaFile .*user_defined_schema.sql -scenarioFile .*user_defined_scenario.xml</span><br></pre></td></tr></table></figure>

<h4 id="8-1-3-命令示例"><a href="#8-1-3-命令示例" class="headerlink" title="8.1.3 命令示例"></a>8.1.3 命令示例</h4><ul>
<li>列出所有可运行的场景文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$./pherf.sh -listFiles</span><br></pre></td></tr></table></figure>

<ul>
<li>删掉全部场景文件中存在的特定的表、加载和查询数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$./pherf.sh -drop all -l -q -z localhost</span><br></pre></td></tr></table></figure>

<h4 id="8-1-4-参数"><a href="#8-1-4-参数" class="headerlink" title="8.1.4 参数"></a>8.1.4 参数</h4><blockquote>
<p>-h Help<br>-l Apply schema and load data<br>-q Executes Multi-threaded query sets and write results<br>-z [quorum] Zookeeper quorum<br>-m Enable monitor for statistics<br>-monitorFrequency [frequency in Ms] _Frequency at which the monitor will snopshot stats to log file.<br>-drop [pattern] Regex drop all tables with schema name as PHERF. Example drop Event tables: -drop .(EVENT). Drop all: -drop .* or -drop all*
-scenarioFile Regex or file name of a specific scenario file to run.<br>-schemaFile Regex or file name of a specific schema file to run.<br>-export Exports query results to CSV files in CSV_EXPORT directory<br>-diff Compares results with previously exported results<br>-hint Executes all queries with specified hint. Example SMALL<br>-rowCountOverride<br>-rowCountOverride [number of rows] Specify number of rows to be upserted rather than using row count specified in schema</p>
</blockquote>
<h4 id="8-1-5-为数据生成增加规则"><a href="#8-1-5-为数据生成增加规则" class="headerlink" title="8.1.5 为数据生成增加规则"></a>8.1.5 为数据生成增加规则</h4><h4 id="8-1-6-定义场景"><a href="#8-1-6-定义场景" class="headerlink" title="8.1.6 定义场景"></a>8.1.6 定义场景</h4><h4 id="8-1-7-结果"><a href="#8-1-7-结果" class="headerlink" title="8.1.7 结果"></a>8.1.7 结果</h4><p>结果实时写入结果目录中。可以打开.jpg格式文件来实时可视化。</p>
<h4 id="8-1-8-测试"><a href="#8-1-8-测试" class="headerlink" title="8.1.8 测试"></a>8.1.8 测试</h4><blockquote>
<p>Run unit tests: mvn test -DZK_QUORUM=localhost<br>Run a specific method: mvn -Dtest=ClassName#methodName test<br>More to come…</p>
</blockquote>
<h3 id="8-2-性能"><a href="#8-2-性能" class="headerlink" title="8.2 性能"></a>8.2 性能</h3><p>Phoenix通过以下方法来奉行<code>把计算带到离数据近的地方</code>的哲学：</p>
<ul>
<li><p>协处理器<br>在服务端执行操作来最小化服务端和客户端的数据传输</p>
</li>
<li><p>定制的过滤器<br>为了删减数据使之尽可能地靠近源数据并最小化启动代价，Phoenix使用原生的HBase APIs而不是使用Map/Reduce框架</p>
</li>
</ul>
<h4 id="8-2-1-Phoenix对比相近产品"><a href="#8-2-1-Phoenix对比相近产品" class="headerlink" title="8.2.1 Phoenix对比相近产品"></a>8.2.1 Phoenix对比相近产品</h4><h5 id="8-2-1-1-Phoenix-vs-Hive-running-over-HDFS-and-HBase"><a href="#8-2-1-1-Phoenix-vs-Hive-running-over-HDFS-and-HBase" class="headerlink" title="8.2.1.1 Phoenix vs Hive (running over HDFS and HBase)"></a>8.2.1.1 Phoenix vs Hive (running over HDFS and HBase)</h5><p><img src="http://upload-images.jianshu.io/upload_images/1752522-697a95a8cab3a28d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Query: select count(1) from table over 10M and 100M rows. Data is 5 narrow columns. Number of Region Servers: 4 (HBase heap: 10GB, Processor: 6 cores @ 3.3GHz Xeon)</span><br></pre></td></tr></table></figure>

<h5 id="8-2-1-2-Phoenix-vs-Impala-running-over-HBase"><a href="#8-2-1-2-Phoenix-vs-Impala-running-over-HBase" class="headerlink" title="8.2.1.2 Phoenix vs Impala (running over HBase)"></a>8.2.1.2 Phoenix vs Impala (running over HBase)</h5><p><img src="http://upload-images.jianshu.io/upload_images/1752522-38710062c800a26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Query: select count(1) from table over 1M and 5M rows. Data is 3 narrow columns. Number of Region Server: 1 (Virtual Machine, HBase heap: 2GB, Processor: 2 cores @ 3.3GHz Xeon)</span><br></pre></td></tr></table></figure>

<h4 id="8-2-2-Latest-Automated-Performance-Run"><a href="#8-2-2-Latest-Automated-Performance-Run" class="headerlink" title="8.2.2 Latest Automated Performance Run"></a>8.2.2 Latest Automated Performance Run</h4><p><a href="http://phoenix-bin.github.io/client/performance/latest.htm" target="_blank" rel="noopener">Latest Automated Performance Run</a> | <a href="http://phoenix-bin.github.io/client/performance/" target="_blank" rel="noopener">Automated Performance Runs History</a></p>
<h4 id="8-2-3-Phoenix1-2性能提升"><a href="#8-2-3-Phoenix1-2性能提升" class="headerlink" title="8.2.3 Phoenix1.2性能提升"></a>8.2.3 Phoenix1.2性能提升</h4><ul>
<li>Essential Column Family</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c642457642dacd1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Skip Scan</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7c15c329a370c654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Salting</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-9079f69e939c61e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Top-N</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-81d30687fe0f32ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul>
<li><a href="http://phoenix.apache.org" target="_blank" rel="noopener">http://phoenix.apache.org</a></li>
<li><a href="http://phoenix.apache.org/Phoenix-in-15-minutes-or-less.html" target="_blank" rel="noopener">http://phoenix.apache.org/Phoenix-in-15-minutes-or-less.html</a></li>
<li><a href="http://hadooptutorial.info/apache-phoenix-hbase-an-sql-layer-on-hbase/" target="_blank" rel="noopener">http://hadooptutorial.info/apache-phoenix-hbase-an-sql-layer-on-hbase/</a></li>
<li><a href="http://www.phoenixframework.org/docs/resources" target="_blank" rel="noopener">http://www.phoenixframework.org/docs/resources</a></li>
<li><a href="https://en.wikipedia.org/wiki/Apache_Phoenix" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Apache_Phoenix</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 7新机制之自动关闭资源——try-with-resources]]></title>
      <url>http://linbingdong.com/2017/03/11/Java%207%E6%96%B0%E6%9C%BA%E5%88%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90%E2%80%94%E2%80%94try-with-resources/</url>
      <content type="html"><![CDATA[<p>在Java 7之前，IO操作为了保证资源能被关闭，往往会在try代码块后加上finally代码块来处理资源的关闭。</p>
<a id="more"></a>

<p>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (br != <span class="keyword">null</span>) br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 7新增了try-with-resources语法来保证资源的关闭。现在你可以这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));) &#123;</span><br><span class="line">  <span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码块里处理完后会自动关闭资源，不需要显示调用close()方法。也不需要finally。代码简洁了很多。</p>
<p>注意：</p>
<ul>
<li>被关闭的资源类需要实现AutoClosable接口或者是Closable接口。</li>
<li>需要自动关闭的资源在try后面的括号里声明。允许声明多个被关闭的资源，关闭的顺序是与创建资源的顺序相反。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix安装配置]]></title>
      <url>http://linbingdong.com/2017/03/11/Phoenix%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>介绍Phoenix安装配置的过程，记录在安装配置过程中遇到的问题及解决方案。</p>
<a id="more"></a>


<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Phoenix最早是saleforce的一个开源项目，后来成为Apache基金的顶级项目</p>
<p>Phoenix是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表、插入数据和对HBase数据进行查询</p>
<p>因此Phoenix跟HBase是离不开的，Phoenix的安装也是基于HBase的。在安装Phoenix之前，请确保集群上已经安装了Hadoop集群跟HBase集群</p>
<p>本集群上已部署CHD5.5.1版本的Hadooop（2.6.0）和HBase（1.0.0）</p>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.20.100 node-20-100 hdfs-master1 nn1     jn1 hmaster1</span><br><span class="line">192.168.20.101 node-20-101 hdfs-master2 nn2 zk1 jn2 hmaster2        Phoenix</span><br><span class="line">192.168.20.102 node-20-102 hdfs-slave1  dn1 zk2 jn3 hregionserver1</span><br><span class="line">192.168.20.103 node-20-103 hdfs-slave2  dn2 zk3 jn4 hregionserver2</span><br><span class="line">192.168.20.104 node-20-104 hdfs-slave3  dn3 zk4 jn5 hregionserver3</span><br><span class="line">192.168.20.105 node-20-105 hdfs-slave4  dn4 zk5     hregionserver4</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：Cloudera官方并不支持Phoenix，也就是说从Phoenix官网下的预编译的包在CDH安装的HBase上根本不能运行，Phoenix官网对此也没有任何说明！！！刚开始按照Phoenix官网给出的步骤安装完Phoenix后运行报错，幸好有StackOverflow，才找到了原因，并且找到解决方案。链接如下：<br><a href="http://stackoverflow.com/questions/31849454/using-phoenix-with-cloudera-hbase-installed-from-repo" target="_blank" rel="noopener">http://stackoverflow.com/questions/31849454/using-phoenix-with-cloudera-hbase-installed-from-repo</a></p>
<p>解决方案：<br>需要自己从Phoenix官网下载跟HBase版本对应的Phoenix版本（Phoenix 4.x版本均支持HBase 1.0.0）的源码来编译，得到编译后的两个相关jar包。具体安装步骤如下</p>
<h2 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2.安装配置"></a>2.安装配置</h2><p>Phoenix最新版本是4.8，4.x均支持HBase 1.0.0，这里选用Phoenix 4.6.0版本</p>
<h3 id="2-1下载并解压"><a href="#2-1下载并解压" class="headerlink" title="2.1下载并解压"></a>2.1下载并解压</h3><p>从Phoenix官网下载预编译的<code>phoenix-4.6.0-HBase-1.0-bin.tar.gz</code></p>
<p>Phoenix客户端所在的节点最好安装有ZooKeeper，方便后续操作</p>
<p>这里选择<code>192.168.20.101</code>节点作为Phoenix客户端</p>
<ul>
<li>切换到/opt目录下：<code>$ cd /opt</code></li>
<li>wget：<code>$ wget &#39;http://archive.apache.org/dist/phoenix/phoenix-4.6.0-HBase-1.0/bin/phoenix-4.6.0-HBase-1.0-bin.tar.gz&#39;</code></li>
<li>解压：<code>$ tar -xzvf phoenix-4.6.0-HBase-1.0-bin.tar.gz</code></li>
<li>建立软链接：<code>$ ln -s phoenix-4.6.0-HBase-1.0-bin phoenix</code></li>
</ul>
<h3 id="2-2编译源码"><a href="#2-2编译源码" class="headerlink" title="2.2编译源码"></a>2.2编译源码</h3><p>如果从Phoenix官网下载4.6.0的源码来编译，需要自己修改pom.xml文件，比较麻烦。Github上已经有人把修改过pom.xml文件的源码上传了，链接如下：<br><a href="https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.6-HBase-1.0-cdh5.5" target="_blank" rel="noopener">https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.6-HBase-1.0-cdh5.5</a></p>
<p>下载该链接的源码，用maven进行编译</p>
<ul>
<li>进入<code>phoenix-for-cloudera-4.6-HBase-1.0-cdh5.5</code>目录</li>
<li>$ <code>mvn package -DskipTests</code></li>
</ul>
<p>编译成功后显示如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2b6ef1568b8a332d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="compile succeed"></p>
<h3 id="2-3替换"><a href="#2-3替换" class="headerlink" title="2.3替换"></a>2.3替换</h3><p>将编译后``phoenix-for-cloudera-4.6-HBase-1.0-cdh5.5/phoenix-assembly/target<code>目录下的</code>phoenix-4.6.0-cdh5.5.1-client.jar<code>和</code>phoenix-4.6.0-cdh5.5.1-server.jar<code>分别替换</code>/opt/phoenix<code>目录下的</code>phoenix-4.6.0-HBase-1.0-client.jar<code>和</code>phoenix-4.6.0-HBase-1.0-server.jar`</p>
<h3 id="2-4将相关jar拷贝到HBase的lib目录下"><a href="#2-4将相关jar拷贝到HBase的lib目录下" class="headerlink" title="2.4将相关jar拷贝到HBase的lib目录下"></a>2.4将相关jar拷贝到HBase的lib目录下</h3><p>拷贝<code>phoenix-4.6.0-cdh5.5.1-server.jar</code>到集群上每个HBase的lib目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cp phoenix-4.6.0-cdh5.5.1-server.jar /usr/lib/hbase/lib</span><br><span class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-100:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</span><br><span class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-102:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</span><br><span class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-103:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</span><br><span class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-104:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</span><br><span class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-105:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</span><br></pre></td></tr></table></figure>

<h3 id="2-5配置Phoenix客户端的CLASSPATH"><a href="#2-5配置Phoenix客户端的CLASSPATH" class="headerlink" title="2.5配置Phoenix客户端的CLASSPATH"></a>2.5配置Phoenix客户端的CLASSPATH</h3><p>将<code>phoenix-4.6.0-cdh5.5.1-client.jar</code>添加到Phoenix客户端的CLASSPATH中，这里是192.168.20.101节点</p>
<p>在/etc/profile.d目录下新建phoenix.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CLASSPATH=.:/opt/phoenix/phoenix-4.6.0-cdh5.5.1-client.jar</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source phoenix.sh</span><br></pre></td></tr></table></figure>

<h3 id="2-6配置hbase-site-xml"><a href="#2-6配置hbase-site-xml" class="headerlink" title="2.6配置hbase-site.xml"></a>2.6配置hbase-site.xml</h3><ul>
<li>Master的hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;     &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.master.loadbalancer.class&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.coprocessor.master.classes&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.phoenix.hbase.index.master.IndexMasterObserver&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;300000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Region Server的hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.region.server.rpc.scheduler.factory.class&lt;/name&gt; </span><br><span class="line">&lt;value&gt;org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory&lt;/value&gt;</span><br><span class="line">&lt;description&gt;Factory to create the Phoenix RPC Scheduler that usesseparate queues for index and metadata updates&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hbase.rpc.controllerfactory.class&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory&lt;/value&gt;</span><br><span class="line">&lt;description&gt;Factory to create the Phoenix RPCScheduler that uses separate queues for index and metadataupdates&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hbase.coprocessor.regionserver.classes&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.hadoop.hbase.regionserver.LocalIndexMerger&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;300000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>至此，Phoenix安装配置完毕</p>
<h2 id="3-验证是否可用"><a href="#3-验证是否可用" class="headerlink" title="3.验证是否可用"></a>3.验证是否可用</h2><h3 id="3-1进入CLI"><a href="#3-1进入CLI" class="headerlink" title="3.1进入CLI"></a>3.1进入CLI</h3><p>切换到/opt/phoenix/bin目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod 777 sqlline.py</span><br><span class="line">$ chmod 777 psql.py</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./sqlline.py localhost</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6811f8b8fff76e7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="install success"></p>
<p>说明Phoenix安装成功</p>
<h3 id="3-2在终端执行SQL脚本"><a href="#3-2在终端执行SQL脚本" class="headerlink" title="3.2在终端执行SQL脚本"></a>3.2在终端执行SQL脚本</h3><p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./sqlline.py localhost ../examples/STOCK_SYMBOL.sql</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a01d00372d5f552f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="null.png"></p>
<p>解决：</p>
<p>将<code>examples/STOCK_SYMBOL.sql</code>里第一行<code>-- creates stock table with single row</code>删掉</p>
<p>重新运行：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-65804dfefcc6bdbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="null.png"></p>
<h3 id="3-3加载数据"><a href="#3-3加载数据" class="headerlink" title="3.3加载数据"></a>3.3加载数据</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ psql.py localhost ../examples/web_stat.sql ../examples/web_stat.csv ../examples/web_stat_queries.sql</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8efc41108666544d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix表和索引分区数对插入和查询性能的影响]]></title>
      <url>http://linbingdong.com/2017/03/11/Phoenix%E8%A1%A8%E5%92%8C%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA%E6%95%B0%E5%AF%B9%E6%8F%92%E5%85%A5%E5%92%8C%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      <content type="html"><![CDATA[<p>Phoenix在建表和建索引的时候可以指定SALT_BUCKETS数，即分区数，从而提高插入和查询性能。</p>
<p>通过指定分区，可以将对一张表的操作分配给多个Region Server进行处理，从而提高效率。 </p>
<a id="more"></a>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-HBase概述"><a href="#1-1-HBase概述" class="headerlink" title="1.1 HBase概述"></a>1.1 HBase概述</h3><p>HBase由master节点和region server节点组成。在100-105集群上，100和101是master节点，102-105是region server节点。</p>
<p>每个region server管理很多region，每个region只会属于一个region server。一个region的大小可以自己配置（100-105集群上一个region大小为100GB）。</p>
<p>在HBase中创建一张表时，刚开始默认是一个region，若表越来越大，超过一个region的大小，则会split成两个region。当然也可以在建表的时候预分区几个region，如果表的大小超过了预分区的region的大小也会split。</p>
<h3 id="1-2-Phoenix分区"><a href="#1-2-Phoenix分区" class="headerlink" title="1.2 Phoenix分区"></a>1.2 Phoenix分区</h3><p>Phoenix在建表和建索引的时候可以指定SALT_BUCKETS数，即分区数，从而提高插入和查询性能。方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS test1 (pk BIGINT PRIMARY KEY,ff1 DOUBLE,sf1 VARCHAR,if1 INTEGER) SALT_BUCKETS=20;</span><br></pre></td></tr></table></figure>

<p>通过指定分区，可以将对一张表的操作分配给多个Region Server进行处理，从而提高效率。 </p>
<p>但是官网上并没有对分区数应设为多少比较合适给出建议，网上有博客说应该指定为region server总CPU核数的0.5~1倍之间。测试集群region sever每个节点40核，4个节点共160核。</p>
<h3 id="1-3-目的"><a href="#1-3-目的" class="headerlink" title="1.3 目的"></a>1.3 目的</h3><p>测试并确定分区数对Phoenix插入和查询性能的影响，确定当前集群在表分区和索引分区数分别为多少的情况下性能最优，接下来Phoenix性能测试采用该最优方案。</p>
<h2 id="2-方案"><a href="#2-方案" class="headerlink" title="2. 方案"></a>2. 方案</h2><h3 id="2-1-方案设计"><a href="#2-1-方案设计" class="headerlink" title="2.1 方案设计"></a>2.1 方案设计</h3><p>创建多张表，除了表和索引的分区数不同外其他条件均相同，分别执行插入和查询操作，对比插入和查询时间。</p>
<p>相同的条件有：</p>
<ol>
<li>用90*2线程执行插入</li>
<li>用1个线程进行查询</li>
<li>每轮查询执行42条查询语句，重复10次</li>
<li>表的总记录数为1000万</li>
<li>表的字段数和每个字段的类型</li>
<li>每个表都建3个global index</li>
</ol>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS test4 (pk BIGINT PRIMARY KEY,ff1 DOUBLE,ff2 DOUBLE,sf1 VARCHAR,if1 INTEGER,if2 INTEGER,if3 INTEGER,if4 INTEGER,if5 INTEGER,if6 INTEGER) SALT_BUCKETS=40;</span><br><span class="line">CREATE INDEX ind_l4 ON test4(pk) SALT_BUCKETS=20;</span><br><span class="line">CREATE INDEX ind_l4_1 ON test4(ff1,ff2,sf1) SALT_BUCKETS=20;</span><br><span class="line">CREATE INDEX ind_l4_2 ON test4(if1) SALT_BUCKETS=20;</span><br></pre></td></tr></table></figure>

<p><strong>注：若只指定了表的分区数，未指定索引的分区数，则默认索引的分区数跟表分区数一样。</strong></p>
<h3 id="2-2-测试用例"><a href="#2-2-测试用例" class="headerlink" title="2.2 测试用例"></a>2.2 测试用例</h3><table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">表分区数</th>
<th align="center">索引分区数</th>
<th align="center">插入时间</th>
<th align="center">查询时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T2</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T3</td>
<td align="center">20</td>
<td align="center">1</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T4</td>
<td align="center">20</td>
<td align="center">20</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T5</td>
<td align="center">40</td>
<td align="center">20</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T6</td>
<td align="center">40</td>
<td align="center">40</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T7</td>
<td align="center">60</td>
<td align="center">60</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T8</td>
<td align="center">80</td>
<td align="center">12</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T9</td>
<td align="center">80</td>
<td align="center">40</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T10</td>
<td align="center">80</td>
<td align="center">80</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T11</td>
<td align="center">120</td>
<td align="center">40</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">T12</td>
<td align="center">120</td>
<td align="center">120</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h2><h3 id="3-1-软硬件环境"><a href="#3-1-软硬件环境" class="headerlink" title="3.1 软硬件环境"></a>3.1 软硬件环境</h3><ul>
<li>Master服务器<ul>
<li>IP：192.168.20.100,192.168.20.101</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 * 2（300G、2.5吋、10K）      SAS硬盘 * 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>Phoenix 4.6</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>Region服务器<ul>
<li>IP：192.168.20.102, 192.168.20.103, 192.168.20.104, 192.168.20.105</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 * 2（300G、2.5吋、10K）      SAS硬盘 * 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1<ul>
<li>软件：</li>
</ul>
</li>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>客户端服务器<ul>
<li>IP：192.168.20.100,192.168.20.102</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 * 2（300G、2.5吋、10K）      SAS硬盘 * 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>Phoenix客户端<ul>
<li>IP：192.168.20.101</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 * 2（300G、2.5吋、10K）      SAS硬盘 * 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>Phoenix 4.6</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-结果"><a href="#3-2-结果" class="headerlink" title="3.2 结果"></a>3.2 结果</h3><table>
<thead>
<tr>
<th align="center">用例编号</th>
<th align="center">表分区数</th>
<th align="center">索引分区数</th>
<th align="center">插入时间</th>
<th align="center">查询时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">T1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">779</td>
<td align="center">4490</td>
</tr>
<tr>
<td align="center">T2</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">303</td>
<td align="center">735</td>
</tr>
<tr>
<td align="center">T3</td>
<td align="center">20</td>
<td align="center">1</td>
<td align="center">203</td>
<td align="center">1200</td>
</tr>
<tr>
<td align="center">T4</td>
<td align="center">20</td>
<td align="center">20</td>
<td align="center">319</td>
<td align="center">697</td>
</tr>
<tr>
<td align="center">T5</td>
<td align="center">40</td>
<td align="center">20</td>
<td align="center">380</td>
<td align="center">592</td>
</tr>
<tr>
<td align="center">T6</td>
<td align="center">40</td>
<td align="center">40</td>
<td align="center">369</td>
<td align="center">531</td>
</tr>
<tr>
<td align="center">T7</td>
<td align="center">60</td>
<td align="center">60</td>
<td align="center">441</td>
<td align="center">587</td>
</tr>
<tr>
<td align="center">T8</td>
<td align="center">80</td>
<td align="center">12</td>
<td align="center">384</td>
<td align="center">714</td>
</tr>
<tr>
<td align="center">T9</td>
<td align="center">80</td>
<td align="center">40</td>
<td align="center">522</td>
<td align="center">653</td>
</tr>
<tr>
<td align="center">T10</td>
<td align="center">80</td>
<td align="center">80</td>
<td align="center">478</td>
<td align="center">623</td>
</tr>
<tr>
<td align="center">T11</td>
<td align="center">120</td>
<td align="center">40</td>
<td align="center">512</td>
<td align="center">764</td>
</tr>
<tr>
<td align="center">T12</td>
<td align="center">120</td>
<td align="center">120</td>
<td align="center">526</td>
<td align="center">753</td>
</tr>
</tbody></table>
<p>插入时间和查询时间单位均为秒。<br>查询时间为执行42个查询每个查询10次的总时间。</p>
<h2 id="4-分析"><a href="#4-分析" class="headerlink" title="4. 分析"></a>4. 分析</h2><p>通过观察3.2结果中的数据，可得出以下结论：</p>
<p>对比T1和其他可知，<strong>有分区相对无分区在插入和查询上都有极大的性能提升。</strong></p>
<p>对比T3和T4,T8和T9可知，<strong>在一定范围内，增大索引分区数使插入变慢，查询变快。</strong></p>
<p>对比T11和T12可知，<strong>当索引分区达到一定大小后，再增加分区数已经无法提升查询性能。</strong></p>
<p>综合比较来看，<strong>当前集群在表分区数和索引分区数均为40时插入和查询的综合性能最好。</strong></p>
<p>因此，Phoenix的性能测试中将采用表分区数和索引分区数均为40的方案。<br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phoenix </tag>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL综合]]></title>
      <url>http://linbingdong.com/2017/03/11/%E5%AD%A6%E4%B9%A0PostgreSQL%E4%B8%8D%E5%8F%AF%E9%94%99%E8%BF%87%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>PostgreSQL是以加州大学伯克利分校计算机系开发的<a href="http://db.cs.berkeley.edu/postgres.html" target="_blank" rel="noopener"> POSTGRES, Version 4.2</a>为基础的对象关系型数据库管理系统(ORDBMS)。POSTGRES开创的许多概念在很久以后才出现在商业数据库中。</p>
<a id="more"></a>

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostgreSQL是以加州大学伯克利分校计算机系开发的<a href="http://db.cs.berkeley.edu/postgres.html" target="_blank" rel="noopener"> POSTGRES, Version 4.2</a>为基础的对象关系型数据库管理系统(ORDBMS)。POSTGRES开创的许多概念在很久以后才出现在商业数据库中。</p>
<p>PostgreSQL支持大部分SQL标准并且提供了许多其它现代特性：</p>
<ul>
<li>复杂查询</li>
<li>外键</li>
<li>触发器</li>
<li>可更新的视图</li>
<li>事务完整性</li>
<li>多版本并发控制</li>
</ul>
<p>另外，PostgreSQL可以用许多方法进行扩展，比如通过增加新的：</p>
<ul>
<li>数据类型</li>
<li>函数</li>
<li>操作符</li>
<li>聚合函数</li>
<li>索引方法</li>
<li>过程语言</li>
</ul>
<p>经过二十几年的发展，PostgreSQL 是目前世界上最先进的开源数据库系统。</p>
<h2 id="2-体系基本概念"><a href="#2-体系基本概念" class="headerlink" title="2. 体系基本概念"></a>2. 体系基本概念</h2><p>PostgreSQL使用常见的客户端/服务器 的模式。一次PostgreSQL会话由下列相关的进程(程序)组成：</p>
<ul>
<li><p>服务器进程</p>
<p>它管理数据库文件，接受来自客户端应用与数据库的连接，并且代表客 户端在数据库上执行操作。数据库服务器程序叫postgres。</p>
</li>
<li><p>客户端应用</p>
<p>客户端应用可能本身就是多种多样的：它们可以是一个字符界面的工具，也可以是一个图形界面的应用， 或者是一个通过访问数据库来显示网页的 web 服务器，或者是一个特殊的数据库管理工具。一些客户端应用是和PostgreSQL发布一起提供的，但绝大部分是用户开发的。</p>
</li>
</ul>
<p>PostgreSQL服务器可以处理来自客户端的多个并发连接。 因此，它为每个连接启动(“forks”)一个新的进程。从这个时候开始，客户端和新服务器进程就不再经过最初的postgres进程进行通讯。因此，主服务器总是在运行，等待客户端连接，而客户端及其相关联的服务器进程则是起起停停。</p>
<h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h2><h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\l 列出所有数据库   或者： SELECT datname FROM pg_database;</span><br><span class="line">\du 列出所有角色/用户 或者： SELECT rolname FROM pg_roles;</span><br><span class="line">\q 退出数据库</span><br><span class="line">\d 列出当前数据库里的所有表</span><br><span class="line">\dt 列出当前数据库里的所有资料表</span><br><span class="line">\c dbname 切换数据库</span><br><span class="line">\dx 显示安装的插件</span><br><span class="line">\x 切换横向竖向显示</span><br><span class="line">show &lt;参数名&gt; 查看该参数的值</span><br></pre></td></tr></table></figure>

<h3 id="3-2-建表"><a href="#3-2-建表" class="headerlink" title="3.2 建表"></a>3.2 建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> weather (</span><br><span class="line">    city            <span class="built_in">varchar</span>(<span class="number">80</span>),</span><br><span class="line">    temp_lo         <span class="built_in">int</span>,           <span class="comment">-- low temperature</span></span><br><span class="line">    temp_hi         <span class="built_in">int</span>,           <span class="comment">-- high temperature</span></span><br><span class="line">    prcp            <span class="built_in">real</span>,          <span class="comment">-- precipitation</span></span><br><span class="line">    <span class="built_in">date</span>            <span class="built_in">date</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-从文本加载数据"><a href="#3-3-从文本加载数据" class="headerlink" title="3.3 从文本加载数据"></a>3.3 从文本加载数据</h3><p>先在/tmp下创建mydb.txt,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;shanghai&apos; 20 30 0.07 &apos;2011-11-11&apos;</span><br><span class="line">&apos;chengdu&apos; 2 45 0.9 &apos;2008-09-08&apos;</span><br><span class="line">&apos;shanghai&apos; 20 30 0.07 &apos;2011-11-11&apos;</span><br><span class="line">&apos;chengdu&apos; 2 45 0.9 &apos;2008-09-08&apos;</span><br></pre></td></tr></table></figure>

<p>将mydb.txt里的内容导入weather表中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">COPY weather FROM &apos;/tmp/mydb.txt&apos; delimiter &apos; &apos;;  --delimiter指定分隔符，txt文件默认分隔符是&apos;\t&apos;,CSV文件默认分隔符是&apos;,&apos;</span><br></pre></td></tr></table></figure>

<p>此时查看weather表中的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from weather;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mydb=# select * from weather;</span><br><span class="line">    city    | tmp_lo | tmp_hi | prcp |    date</span><br><span class="line">------------+--------+--------+------+------------</span><br><span class="line"> &apos;shanghai&apos; |     20 |     30 | 0.07 | 2011-11-11</span><br><span class="line"> &apos;chengdu&apos;  |      2 |     45 |  0.9 | 2008-09-08</span><br><span class="line"> &apos;shanghai&apos; |     20 |     30 | 0.07 | 2011-11-11</span><br><span class="line"> &apos;chengdu&apos;  |      2 |     45 |  0.9 | 2008-09-08</span><br><span class="line">(4 行记录)</span><br></pre></td></tr></table></figure>

<h2 id="4-单机部署"><a href="#4-单机部署" class="headerlink" title="4. 单机部署"></a>4. 单机部署</h2><p>在192.168.20.93和192.168.20.94上分别部署了单机版的PostgreSQL。</p>
<h3 id="4-1-安装PostgreSQL源"><a href="#4-1-安装PostgreSQL源" class="headerlink" title="4.1 安装PostgreSQL源"></a>4.1 安装PostgreSQL源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="4-2-执行安装命令"><a href="#4-2-执行安装命令" class="headerlink" title="4.2 执行安装命令"></a>4.2 执行安装命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install postgresql94-server postgresql94-contrib</span><br></pre></td></tr></table></figure>

<h3 id="4-3-验证是否安装成功"><a href="#4-3-验证是否安装成功" class="headerlink" title="4.3 验证是否安装成功"></a>4.3 验证是否安装成功</h3><p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep postgres</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgresql94-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-server-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-libs-9.4.10-1PGDG.rhel7.x86_64</span><br><span class="line">postgresql94-contrib-9.4.10-1PGDG.rhel7.x86_64</span><br></pre></td></tr></table></figure>

<p>说明安装成功</p>
<h3 id="4-4-初始化数据库"><a href="#4-4-初始化数据库" class="headerlink" title="4.4 初始化数据库"></a>4.4 初始化数据库</h3><p>先创建数据存放目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>赋予postgres用户该目录的权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown postgres /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>切换到postgres用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<p>执行初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initdb -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>-D 后面是数据库文件存放的目录，如果不指定则默认在/var/lib/pgsql/9.4/data下</p>
<p>初始化的日志如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属于此数据库系统的文件宿主为用户 &quot;postgres&quot;.</span><br><span class="line">此用户也必须为服务器进程的宿主.</span><br><span class="line">数据库簇将使用本地化语言 &quot;zh_CN.UTF-8&quot;进行初始化.</span><br><span class="line">默认的数据库编码已经相应的设置为 &quot;UTF8&quot;.</span><br><span class="line">initdb: 无法为本地化语言环境&quot;zh_CN.UTF-8&quot;找到合适的文本搜索配置</span><br><span class="line">缺省的文本搜索配置将会被设置到&quot;simple&quot;</span><br><span class="line"></span><br><span class="line">禁止为数据页生成校验和.</span><br><span class="line"></span><br><span class="line">修复已存在目录 /opt/pgsql/data 的权限 ... 成功</span><br><span class="line">正在创建子目录 ... 成功</span><br><span class="line">选择默认最大联接数 (max_connections) ... 100</span><br><span class="line">选择默认共享缓冲区大小 (shared_buffers) ... 128MB</span><br><span class="line">选择动态共享内存实现 ......posix</span><br><span class="line">创建配置文件 ... 成功</span><br><span class="line">在 /opt/pgsql/data/base/1 中创建 template1 数据库 ... 成功</span><br><span class="line">初始化 pg_authid ...  成功</span><br><span class="line">初始化dependencies ... 成功</span><br><span class="line">创建系统视图 ... 成功</span><br><span class="line">正在加载系统对象描述 ...成功</span><br><span class="line">创建(字符集)校对规则 ... 成功</span><br><span class="line">创建字符集转换 ... 成功</span><br><span class="line">正在创建字典 ... 成功</span><br><span class="line">对内建对象设置权限 ... 成功</span><br><span class="line">创建信息模式 ... 成功</span><br><span class="line">正在装载PL/pgSQL服务器端编程语言...成功</span><br><span class="line">清理数据库 template1 ... 成功</span><br><span class="line">拷贝 template1 到 template0 ... 成功</span><br><span class="line">拷贝 template1 到 template0 ... 成功</span><br><span class="line">同步数据到磁盘...成功</span><br><span class="line"></span><br><span class="line">成功. 您现在可以用下面的命令运行数据库服务器:</span><br><span class="line"></span><br><span class="line">    /usr/pgsql-9.4/bin/postmaster -D /opt/pgsql/data/</span><br><span class="line">或者</span><br><span class="line">    /usr/pgsql-9.4/bin/pg_ctl -D /opt/pgsql/data/ -l logfile start</span><br></pre></td></tr></table></figure>

<h3 id="4-5-启动服务"><a href="#4-5-启动服务" class="headerlink" title="4.5 启动服务"></a>4.5 启动服务</h3><p>1.切换到postgres用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure>

<p>因为启动服务同样必须以PostgreSQL用户帐户登录来做。 </p>
<p>2.启动服务</p>
<p>没有-D选项，服务器将使用环境变量PGDATA命名的目录； 如果这个环境变量也没有，将导致失败。通常，最好在后台启动postgres，使用下面的 Unix shell 语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl -D /opt/pgsql/data/ -l logfile start</span><br></pre></td></tr></table></figure>

<p>3.设置开机自动启动</p>
<p>在Linux系统里，要么往/etc/rc.d/rc.local或 /etc/rc.local文件里加上下面几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data</span><br></pre></td></tr></table></figure>

<h3 id="4-6-创建用户"><a href="#4-6-创建用户" class="headerlink" title="4.6 创建用户"></a>4.6 创建用户</h3><p>PostgreSQL使用<em>角色</em>的概念管理数据库访问权限。 根据角色自身的设置不同，一个角色可以看做是一个数据库用户，或者一组数据库用户。 角色可以拥有数据库对象(比如表)以及可以把这些对象上的权限赋予其它角色， 以控制谁拥有访问哪些对象的权限。另外，我们也可以把一个角色的<em>成员</em> 权限赋予其它角色，这样就允许成员角色使用分配给另一个角色的权限。<br>角色的概念替换了”用户”和”组”。在PostgreSQL 版本 8.1 之前，用户和组是独立类型的记录，但现在它们只是角色。 任何角色都可以是一个用户、一个组、或者两者。</p>
<p>数据库角色从概念上与操作系统用户是完全无关的。在实际使用中把它们对应起来可能比较方便， 但这不是必须的。数据库角色在整个数据库集群中是全局的(而不是每个库不同)。 要创建一个角色，使用 SQL 命令<a href="http://www.postgres.cn/docs/9.4/sql-createrole.html" target="_blank" rel="noopener">CREATE ROLE</a>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE ROLE name;</span><br></pre></td></tr></table></figure>

<p><em>name</em>遵循 SQL 标识的规则：要么完全没有特殊字符， 要么用双引号包围(实际上你通常会给命令增加额外的选项，比如LOGIN。 下面显示更多细节)。要删除一个现有角色，使用类似的<a href="http://www.postgres.cn/docs/9.4/sql-droprole.html" target="_blank" rel="noopener">DROP ROLE</a>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP ROLE name;</span><br></pre></td></tr></table></figure>

<p>为了方便，程序<a href="http://www.postgres.cn/docs/9.4/app-createuser.html" target="_blank" rel="noopener">createuser</a>和<a href="http://www.postgres.cn/docs/9.4/app-dropuser.html" target="_blank" rel="noopener">dropuser</a> 提供了对了这些 SQL 命令的封装。我们可以在 shell 命令上直接调用它们：</p>
<p>直接在shell里输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createuser lbd;</span><br></pre></td></tr></table></figure>

<p>这样就创建了lbd这个角色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dropuser lbd;</span><br></pre></td></tr></table></figure>

<p>这样就创建了lbd这个角色。</p>
<p>要检查现有角色的集合，可以检查pg_roles系统表，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT rolname FROM pg_roles;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# SELECT rolname FROM pg_roles;</span><br><span class="line"> rolname</span><br><span class="line">----------</span><br><span class="line"> postgres</span><br><span class="line"> lbd</span><br><span class="line">(2 行记录)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.postgres.cn/docs/9.4/app-psql.html" target="_blank" rel="noopener">psql</a>的元命令\du<br>也可以用于列出现有角色。</p>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                        角色列表</span><br><span class="line"> 角色名称 |               属性                | 成员属于</span><br><span class="line">---------+----------------------------------+----------</span><br><span class="line"> lbd     |                                   | &#123;&#125;</span><br><span class="line"> postgres| 超级用户, 建立角色, 建立 DB, 复制     | &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-主从流复制部署"><a href="#5-主从流复制部署" class="headerlink" title="5. 主从流复制部署"></a>5. 主从流复制部署</h2><p>192.168.20.93上部署主服务器，192.168.20.94上部署从服务器。</p>
<h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>postgres在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<p>与基于文件日志传送相比，流复制允许保持从服务器更新。 从服务器连接主服务器，其产生的流WAL记录到从服务器， 而不需要等待主服务器写完WAL文件。</p>
<p>PostgreSQL流复制默认是异步的。在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。</p>
<p>同步复制必须等主服务器和从服务器都写完WAL后才能提交事务。这样在一定程度上会增加事务的响应时间。</p>
<p>配置同步复制仅需要一个额外的配置步骤： <a href="http://www.postgres.cn/docs/9.4/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES" target="_blank" rel="noopener">synchronous_standby_names</a>必须设置为一个非空值。synchronous_commit也必须设置为on。</p>
<p>这里部署的是异步的流复制。</p>
<p><strong>注:</strong><br>主从服务器所在节点的系统、环境等最好一致。PostgreSQL版本也最好一致，否则可能会有问题。</p>
<h3 id="5-2-安装部署"><a href="#5-2-安装部署" class="headerlink" title="5.2 安装部署"></a>5.2 安装部署</h3><p>先在192.168.20.93和192.168.20.94均安装PostgreSQL。</p>
<p>具体安装部署步骤见上一节：单机部署</p>
<h4 id="5-2-1-主服务器"><a href="#5-2-1-主服务器" class="headerlink" title="5.2.1 主服务器"></a>5.2.1 主服务器</h4><p>主服务器为192.168.20.93</p>
<p>先创建一个新目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /opt/pgsql/pg_archive</span><br></pre></td></tr></table></figure>

<p>1.首先需要创建一个数据库用户进行主从同步。创建用户replica，并赋予登录和复制的权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres# CREATE ROLE replica login replication encrypted password &apos;replica&apos;</span><br></pre></td></tr></table></figure>

<p>2.修改pg_hba.conf，允许replica用户来同步。</p>
<p>在pg_hba.conf里增加两行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host     all             all          192.168.20.94/32          trust   #允许94连接到主服务器</span><br><span class="line">host   replication      replica       192.168.20.94/32          md5   #允许94使用replica用户来复制</span><br></pre></td></tr></table></figure>

<p>这样，就设置了replica这个用户可以从192.168.20.93进行流复制请求。</p>
<p><strong>注：</strong><br>第二个字段必须要填replication</p>
<p>4.修改postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listen_addresses = &apos;*&apos;   # 监听所有IP</span><br><span class="line">archive_mode = on  # 允许归档</span><br><span class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  # 用该命令来归档logfile segment</span><br><span class="line">wal_level = hot_standby </span><br><span class="line">max_wal_senders = 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</span><br><span class="line">wal_keep_segments = 256 ＃ 设置流复制保留的最多的xlog数目</span><br><span class="line">wal_sender_timeout = 60s ＃ 设置流复制主机发送数据的超时时间</span><br><span class="line">max_connections = 100 # 这个设置要注意下，从库的max_connections必须要大于主库的</span><br></pre></td></tr></table></figure>

<p>配置完两个文件后重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl stop -D /opt/pgsql/data</span><br><span class="line">pg_ctl start -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<p>3.测试94能否连接93数据库。在94上运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psql -h 192.168.20.93 -U postgres</span><br></pre></td></tr></table></figure>

<p>看看是否能进入数据库。若可以，则正常。</p>
<h4 id="5-2-2-从服务器"><a href="#5-2-2-从服务器" class="headerlink" title="5.2.2 从服务器"></a>5.2.2 从服务器</h4><p>1.从主节点拷贝数据到从节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">rm -rf /opt/pgsql/data/*   #先将data目录下的数据都清空</span><br><span class="line">pg_basebackup -h 192.168.20.93 -U replica -D /opt/pgsql/data -X stream -P  # 从93拷贝数据到94（基础备份）</span><br><span class="line">mkdir /opt/pgsql/pg_archive</span><br></pre></td></tr></table></figure>

<p>2.配置recovery.conf</p>
<p>复制/usr/pgsql-9.4/share/recovery.conf.sample 到 /opt/pgsql/data/recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/pgsql-9.4/share/recovery.conf.sample /opt/pgsql/data/recovery.conf</span><br></pre></td></tr></table></figure>

<p>修改recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">standby_mode = on    # 说明该节点是从服务器</span><br><span class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  # 主服务器的信息以及连接的用户</span><br><span class="line">recovery_target_timeline = &apos;latest&apos;</span><br></pre></td></tr></table></figure>

<p>3.配置postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wal_level = hot_standby</span><br><span class="line">max_connections = 1000 ＃ 一般查多于写的应用从库的最大连接数要比较大</span><br><span class="line">hot_standby = on ＃ 说明这台机器不仅仅是用于数据归档，也用于数据查询</span><br><span class="line">max_standby_streaming_delay = 30s # 数据流备份的最大延迟时间</span><br><span class="line">wal_receiver_status_interval = 10s # 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</span><br><span class="line">hot_standby_feedback = on # 如果有错误的数据复制，是否向主进行反馈</span><br></pre></td></tr></table></figure>

<p>配置完后重启从服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pg_ctl stop -D /opt/pgsql/data</span><br><span class="line">pg_ctl start -D /opt/pgsql/data</span><br></pre></td></tr></table></figure>

<h3 id="5-3-验证是否部署成功"><a href="#5-3-验证是否部署成功" class="headerlink" title="5.3 验证是否部署成功"></a>5.3 验证是否部署成功</h3><p>在主节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select client_addr,sync_state from pg_stat_replication;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</span><br><span class="line">  client_addr  | sync_state</span><br><span class="line">---------------+------------</span><br><span class="line"> 192.168.20.94 | async</span><br><span class="line">(1 行记录)</span><br></pre></td></tr></table></figure>

<p>说明94是从服务器，在接收流，而且是异步流复制。</p>
<p>此外，还可以分别在主、从节点上运行 ps aux | grep postgres 来查看进程：</p>
<p>主服务器（93）上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres 262270  0.0  0.0 337844  2832 ?        Ss   10:14   0:00 postgres: wal sender process replica 192.168.20.94(13059) streaming 0/A002A88</span><br></pre></td></tr></table></figure>

<p>可以看到有一个 wal sender 进程。</p>
<p>从服务器（94）上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgres 569868  0.0  0.0 384604  2960 ?        Ss   10:14   0:02 postgres: wal receiver process   streaming 0/A002B60</span><br></pre></td></tr></table></figure>

<p>可以看到有一个 wal receiver 进程。</p>
<p>至此，PostgreSQL主从流复制安装部署完成。</p>
<p>在主服务器上插入数据或删除数据，在从服务器上能看到相应的变化。从服务器上只能查询，不能插入或删除。</p>
<h2 id="6-主要配置"><a href="#6-主要配置" class="headerlink" title="6. 主要配置"></a>6. 主要配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 连接相关</span><br><span class="line"></span><br><span class="line">listen_addresses = &apos;*&apos;      数据库用来监听客户端连接的IP地址，*表示监听所有IP。</span><br><span class="line">port = 5432     数据库监听户端连接的TCP端口。默认值是5432。</span><br><span class="line">max_connections = 100   允许客户端的最大连接数，默认是100，足够了。</span><br><span class="line">superuser_reserved_connections = 3 为超级用户保留的连接数，默认为3。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 资源使用</span><br><span class="line"></span><br><span class="line">shared_buffers = 128MB  可以被PostgreSQL用于缓存数据的内存大小。大的shared_buffers需要大的checkpoint_segments,同时需要申请更多的System V共享内存资源.这个值不需要设的太大, 因为PostgreSQL还依赖操作系统的cache来提高读性能。另外, 写操作频繁的数据库这个设太大反而会增加checkpoint压力(除非你使用了SSD或者IOPS能力很好的存储).</span><br><span class="line">work_mem = 4MB   内部排序和哈希操作可使用的工作内存大小。</span><br><span class="line">maintenance_work_mem = 64MB 这里定义的内存只是在CREATE INDEX, VACUUM等时用到。这个值越大, VACUUM, CREATE INDEX的操作越快, 当然大到一定程度瓶颈就不在内存了, 可能是CPU例如创建索引.这个值是一个操作的内存使用上限, 而不是一次性分配出去的. 并且需要注意如果开启了autovacuum, 最大可能有autovacuum_max_workers*maintenance_work_mem的内存被系统消耗掉.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. WAL</span><br><span class="line"></span><br><span class="line">wal_level = hot_standby  如果需要做数据库WAL日志备份的话至少需要设置成archive级别, 如果需要做hot_standby那么需要设置成hot_standby。hot_standby意味着WAL记录得更详细, 如果没有打算做hot_standby设置得越低性能越好。</span><br><span class="line">fsync = on  强制把数据同步更新到磁盘</span><br><span class="line">wal_buffers = -1  默认是-1 根据shared_buffers的设置自动调整shared_buffers*3% .最大限制是XLOG的segment_size.</span><br><span class="line">checkpoint_segments = 3  多少个xlog file产生后开始checkpoint操作。建议设置为shared_buffers除以单个XLOG文件的大小。</span><br><span class="line">checkpoint_timeout = 5min 这个和checkpoint_segments的效果是一样的, 只是触发的条件是时间条件。</span><br><span class="line">archive_mode = on 允许归档。</span><br><span class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  归档调用的命令。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 主从复制</span><br><span class="line"></span><br><span class="line">## postgresql.conf</span><br><span class="line"></span><br><span class="line">max_wal_senders = 32 最大的wal sender进程数。</span><br><span class="line">hot_standby = on  在从服务器上设置为 on ，则该服务器也可用作查询。</span><br><span class="line">max_standby_streaming_delay = 30s  数据流备份的最大延迟时间。</span><br><span class="line">wal_receiver_status_interval = 10s  多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间。</span><br><span class="line">hot_standby_feedback = on  如果有错误的数据复制，是否向主进行反馈。</span><br><span class="line"></span><br><span class="line">## recovery.conf（只有从服务器需要配置）</span><br><span class="line"></span><br><span class="line">standby_mode = on  说明该节点是从服务器</span><br><span class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  主服务器的信息以及连接的用户</span><br><span class="line">recovery_target_timeline = &apos;latest&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 内核资源</span><br><span class="line"></span><br><span class="line">max_files_per_process = 1000 设定每个数据库进程能够打开的文件的数目。默认值是1000。</span><br><span class="line">shared_preload_libraries = &apos;&apos;  设置数据库在启动时要加载的操作系统共享库文件。如果有多个库文件，名字用逗号分开。如果数据库在启动时未找到shared_preload_libraries指定的某个库文件，数据库将无法启动。默认值为空串。</span><br><span class="line"></span><br><span class="line">6. AUTOVACUUM参数</span><br><span class="line"></span><br><span class="line">autovacuum = on  是否打开数据库的自动垃圾收集功能。默认值是on。如果autovacuum被设为on，参数track_counts也要被设为on，自动垃圾收集才能正常工作。注意，即使这个参数被设为off，如果事务ID回绕即将发生，数据库会自动启动一个垃圾收集操作。这个参数只能在文件postgresql.conf中被设置。</span><br><span class="line">log_autovacuum_min_duration = -1  单位是毫秒。如果它的值为0，所有的垃圾搜集操作都会被记录在数据库运行日志中，如果它的值是-1，所有的垃圾收集操作都不会被记录在数据库运行日志中。如果把它的值设为250毫秒，只要自动垃圾搜集发出的VACUUM和ANALYZE命令的执行时间超过250毫秒，VACUUM和ANALYZE命令的相关信息就会被记录在数据库运行日志中。默认值是-1。</span><br><span class="line">autovacuum_max_workers = 3  设置能同时运行的最大的自动垃圾收集工作进程的数目。默认值是3。</span><br><span class="line">autovacuum_naptime = 1min  设置自动垃圾收集控制进程的睡眠时间。</span><br><span class="line">autovacuum_vacuum_threshold = 50  设置触发垃圾收集操作的阈值。默认值是50。只有一个表上被删除或更新的记录的数目超过了autovacuum_vacuum_threshold的值，才会对这个表执行垃圾收集操作。</span><br><span class="line"></span><br><span class="line">7. 文件位置</span><br><span class="line"></span><br><span class="line">data_directory = &apos;/opt/pgsql/data&apos;           数据存放位置，初始化时可以指定，也可以在这里修改。</span><br><span class="line">hba_file = &apos;/opt/pgsql/data/pg_hba.conf&apos;     主从复制配置文件pg_hba.conf的路径</span><br><span class="line">ident_file = /opt/pgsql/data/pg_ident.conf&apos;   配置文件pg_ident.conf的路径</span><br><span class="line"></span><br><span class="line">8. 编码</span><br><span class="line"></span><br><span class="line">lc_messages = &apos;zh_CN.UTF-8&apos;                系统错误信息的语言环境</span><br><span class="line">lc_monetary = &apos;zh_CN.UTF-8&apos;                货币格式的语言环境</span><br><span class="line">lc_numeric = &apos;zh_CN.UTF-8&apos;                 数字的语言环境</span><br><span class="line">lc_time = &apos;zh_CN.UTF-8&apos;                    时间的语言环境</span><br></pre></td></tr></table></figure>

<h2 id="7-插件（扩展）"><a href="#7-插件（扩展）" class="headerlink" title="7. 插件（扩展）"></a>7. 插件（扩展）</h2><p>PostgreSQL的contrib/目录和extension/目录附带包含若干插件的源代码。 在<a href="http://www.postgres.cn/docs/9.4/contrib.html" target="_blank" rel="noopener">附录 F</a>中被描述。其它插件是独立开发的， 比如<a href="http://www.postgis.org/" target="_blank" rel="noopener">PostGIS</a>。 甚至PostgreSQL的复制方案也是在外部开发的。 比如 <a href="http://www.slony.info/" target="_blank" rel="noopener">Slony-I</a> 是一个流行的主/从复制方案，它就是独立在核心项目之外开发的。</p>
<p>PostgreSQL的插件主要用来提供新的用户自定义函数，操作符，或类型。 若要使用插件，需要在数据库系统中注册新的SQL对象。（如果该插件没有在contrib或extension目录下，需要先自己安装，或者在编译源码的时候指定。） 在PostgreSQL 9.1和以后版本，这是通过执行 <a href="http://www.postgres.cn/docs/9.4/sql-createextension.html" target="_blank" rel="noopener">CREATE EXTENSION</a>命令来实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE EXTENSION module_name</span><br></pre></td></tr></table></figure>

<p>此命令必须由数据库管理员运行。如想在某个数据库中使用该插件，则必须在该数据库中运行如上命令。另外， 在数据库template1中运行它，这样在随后创建的数据库中也可使用该插件。</p>
<p>具体插件的安装使用请参考下一节：PostGIS插件安装与使用</p>
<h2 id="8-PostGIS插件安装与使用"><a href="#8-PostGIS插件安装与使用" class="headerlink" title="8. PostGIS插件安装与使用"></a>8. PostGIS插件安装与使用</h2><h3 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h3><p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<p>PostGIS支持所有的空间数据类型，这些类型包括：点（POINT）、线（LINESTRING）、多边形（POLYGON）、多点 （MULTIPOINT）、多线（MULTILINESTRING）、多多边形（MULTIPOLYGON）和集合对象集 （GEOMETRYCOLLECTION）等。PostGIS支持所有的对象表达方法，比如WKT和WKB。</p>
<p>PostGIS支持所有的数据存取和构造方法，如GeomFromText()、AsBinary()，以及GeometryN()等。</p>
<p>PostGIS提供简单的空间分析函数（如Area和Length）同时也提供其他一些具有复杂分析功能的函数，比如Distance。</p>
<p>PostGIS提供了对于元数据的支持，如GEOMETRY_COLUMNS和SPATIAL_REF_SYS，同时，PostGIS也提供了相应的支持函数，如AddGeometryColumn和DropGeometryColumn。</p>
<p>PostGIS提供了一系列的二元谓词（如Contains、Within、Overlaps和Touches）用于检测空间对象之间的空间关系，同时返回布尔值来表征对象之间符合这个关系。</p>
<p>PostGIS提供了空间操作符（如Union和Difference）用于空间数据操作。比如，Union操作符融合多边形之间的边界。两个交迭的多边形通过Union运算就会形成一个新的多边形，这个新的多边形的边界为两个多边形中最大边界。</p>
<p>PostGIS还提供以下功能：</p>
<p><strong>数据库坐标变换</strong></p>
<p>数据库中的几何类型可以通过Transform函数从一种投影系变换到另一种投影系中。在OpenGIS中的几何类型都将SRID作为自身结构的一部分，但不知什么原因，在OpenGIS的SFSQL规范中，并没有引入Transform。</p>
<p><strong>球体长度运算</strong></p>
<p>存储在普通地理坐标系中的集合类型如果不进行坐标变换是无法进行程度运算的，OpenGIS所提供的坐标变换使得积累类型的程度计算变成可能。</p>
<p><strong>三维的几何类型</strong></p>
<p>SFSQL规范只是针对二维集合类型。OpenGIS提供了对三维集合类型的支持，具体是利用输入的集合类型维数来决定输出的表现方式。例如，即便 所有几何对象内部都以三维形式存储，纯粹的二维交叉点通常还是以二维的形式返回。此外，还提供几何对象在不同维度间转换的功能。</p>
<p><strong>空间聚集函数</strong></p>
<p>在数据库中，聚集函数是一个执行某一属性列所有数据操作的函数。比如Sum和Average，Sum是求某一关系属性列的数据总和，Average 则是求取某一关系属性列的数据平均值。与此对应，空间聚集函数也是执行相同的操作，不过操作的对象是空间数据。例如聚集函数Extent返回一系列要素中 的最大的包裹矩形框，如“SELECT EXTENT(GEOM) FROM ROADS”这条SQL语句的执行结果是返回ROADS这个数据表中所有的包裹矩形框。</p>
<p><strong>栅格数据类型</strong></p>
<p>PostGIS通过一种新的数据类型片，提供对于大的栅格数据对象的存储。片由以下几个部分组成：包裹矩形框、SRID、类型和一个字节序列。通过 将片的大小控制在数据库页值（32×32）以下，使得快速的随即访问变成可能。一般大的图片也是通过将其切成32×32像素的片然后再存储在数据库中的。</p>
<h3 id="8-2-部署"><a href="#8-2-部署" class="headerlink" title="8.2 部署"></a>8.2 部署</h3><h4 id="8-2-1-安装PostGIS"><a href="#8-2-1-安装PostGIS" class="headerlink" title="8.2.1 安装PostGIS"></a>8.2.1 安装PostGIS</h4>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install postgis2_94   # 因为安装的PostgreSQL版本为9.4，所以是postgis2_94</span><br></pre></td></tr></table></figure>

<p>  <strong>注：</strong><br>  需要PostgreSQL9.1以上版本才支持PostGIS.</p>
<h4 id="8-2-2-使PostGIS可用"><a href="#8-2-2-使PostGIS可用" class="headerlink" title="8.2.2 使PostGIS可用"></a>8.2.2 使PostGIS可用</h4><p>想要在PostgreSQL中使用PostGIS插件，安装只是第一步。每个数据库想要使用PostGIS必须先在该数据库中使PostGIS可用。假设我们想在gisdb这个数据库中使用PostGIS,先进入gisdb数据库，执行以下步骤：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# CREATE EXTENSION postgis;</span><br><span class="line">gisdb=# CREATE EXTENSION postgis_topology;</span><br></pre></td></tr></table></figure>

<h4 id="8-2-3-查看是否安装成功"><a href="#8-2-3-查看是否安装成功" class="headerlink" title="8.2.3 查看是否安装成功"></a>8.2.3 查看是否安装成功</h4><p>  在gisdb数据库中输入\du，查看已安装的插件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# \dx</span><br><span class="line">                                               已安装扩展列表</span><br><span class="line">       名称       | 版本  |  架构模式  |                                描述</span><br><span class="line">------------------+-------+------------+---------------------------------------------------------------------</span><br><span class="line"> plpgsql          | 1.0   | pg_catalog | PL/pgSQL procedural language</span><br><span class="line"> postgis          | 2.1.8 | public     | PostGIS geometry, geography, and raster spatial types and functions</span><br><span class="line"> postgis_topology | 2.1.8 | topology   | PostGIS topology spatial types and functions</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>可以看到已经安装了postgis和postgis_topology。</p>
<h3 id="8-3-使用"><a href="#8-3-使用" class="headerlink" title="8.3 使用"></a>8.3 使用</h3><h4 id="8-3-1-创建空间数据表"><a href="#8-3-1-创建空间数据表" class="headerlink" title="8.3.1 创建空间数据表"></a>8.3.1 创建空间数据表</h4><p>首先建立一个常规的表格存储有关城市（cities）的信息。这个表格有两栏，一个是 ID 编号，一个是城市名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# CREATE TABLE cities (id int4, name varchar(50));</span><br></pre></td></tr></table></figure>

<p>现在添加一个空间列用于存储城市的位置。习惯上这个列叫做 the_geom。它记录了数据为什么类型（点、线、面）、有几维（这里是二维）以及空间坐标系统。此处使用 EPSG:4326 坐标系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT AddGeometryColumn (&apos;cities&apos;, &apos;the_geom&apos;, 4326, &apos;POINT&apos;, 2);</span><br></pre></td></tr></table></figure>

<p>完成后，查询 cities 表单应当显示这个新栏目。同时页面将显示当前表达没有记录（0 rows）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# select * from cities;</span><br><span class="line"> id |      name       |                      the_geom</span><br><span class="line">----+-----------------+----------------------------------------------------</span><br><span class="line">（0行记录）</span><br></pre></td></tr></table></figure>

<p>为添加记录，需要使用 SQL 命令。对于空间列，使用 PostGIS 的 ST_GeomFromText可以将文本转化为坐标与参考系号的记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (1,ST_GeomFromText(&apos;POINT(-0.1257 51.508)&apos;,4326),&apos;London, England&apos;);</span><br><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (2,ST_GeomFromText(&apos;POINT(-81.233 42.983)&apos;,4326),&apos;London, Ontario&apos;);</span><br><span class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (3,ST_GeomFromText(&apos;POINT(27.91162491 -33.01529)&apos;,4326),&apos;East London,SA&apos;);</span><br></pre></td></tr></table></figure>

<p>当然，这样的输入方式难以操作。其它方式可以更快的输入数据。就目前来说，表格内已经有了一些城市数据，可以先进行查询等操作。</p>
<h4 id="8-3-2-简单查询"><a href="#8-3-2-简单查询" class="headerlink" title="8.3.2 简单查询"></a>8.3.2 简单查询</h4><p>标准的 SQL 操作都可以用于 PostGIS 表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT * FROM cities;</span><br><span class="line"> id |      name       |                      the_geom</span><br><span class="line">----+-----------------+----------------------------------------------------</span><br><span class="line">  1 | London, England | 0101000020E6100000BBB88D06F016C0BF1B2FDD2406C14940</span><br><span class="line">  2 | London, Ontario | 0101000020E6100000F4FDD478E94E54C0E7FBA9F1D27D4540</span><br><span class="line">  3 | East London,SA  | 0101000020E610000040AB064060E93B4059FAD005F58140C0</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>这里的坐标是无法阅读的 16 进制格式。要以 WKT 文本显示，使用 ST_AsText(the_geom) 或ST_AsEwkt(the_geom) 函数。也可以使用 ST_X(the_geom) 和 ST_Y(the_geom) 显示一个维度的坐标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=#  SELECT id, ST_AsText(the_geom), ST_AsEwkt(the_geom), ST_X(the_geom), ST_Y(the_geom) FROM cities;</span><br><span class="line"> id |          st_astext           |               st_asewkt                |    st_x     |   st_y</span><br><span class="line">----+------------------------------+----------------------------------------+-------------+-----------</span><br><span class="line">  1 | POINT(-0.1257 51.508)        | SRID=4326;POINT(-0.1257 51.508)        |     -0.1257 |    51.508</span><br><span class="line">  2 | POINT(-81.233 42.983)        | SRID=4326;POINT(-81.233 42.983)        |     -81.233 |    42.983</span><br><span class="line">  3 | POINT(27.91162491 -33.01529) | SRID=4326;POINT(27.91162491 -33.01529) | 27.91162491 | -33.01529</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<h4 id="8-3-3-空间查询"><a href="#8-3-3-空间查询" class="headerlink" title="8.3.3 空间查询"></a>8.3.3 空间查询</h4><p>PostGIS 为 PostgreSQL 扩展了许多空间操作功能。以上已经涉及了转换空间坐标格式的 ST_GeomFromText 。多数空间操作以 ST（spatial type）开头，在 PostGIS 文档相应章节有罗列。这里回答一个具体的问题：上面三个城市相互的距离是多少？查询语句怎么写？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gisdb=# SELECT p1.name,p2.name,ST_Distance_Sphere(p1.the_geom,p2.the_geom) FROM cities AS p1, cities AS p2 WHERE p1.id &gt; p2.id;</span><br><span class="line">      name       |      name       | st_distance_sphere</span><br><span class="line">-----------------+-----------------+--------------------</span><br><span class="line"> London, Ontario | London, England |   5875787.03777356</span><br><span class="line"> East London,SA  | London, England |   9789680.59961472</span><br><span class="line"> East London,SA  | London, Ontario |   13892208.6782928</span><br><span class="line">(3 行记录)</span><br></pre></td></tr></table></figure>

<p>输出显示了距离数据。注意 ‘WHERE’ 部分防止了输出城市到自身的距离（0）或者两个城市不同排列的距离数据（London, England 到 London, Ontario 和 London, Ontario 到 London, England 的距离是一样的）。</p>
<h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul>
<li><a href="https://www.postgresql.org/" target="_blank" rel="noopener">https://www.postgresql.org/</a></li>
<li><a href="http://www.postgres.cn/docs/9.4/index.html" target="_blank" rel="noopener">http://www.postgres.cn/docs/9.4/index.html</a></li>
<li><a href="http://www.cnblogs.com/yjf512/p/4499547.html" target="_blank" rel="noopener">http://www.cnblogs.com/yjf512/p/4499547.html</a></li>
<li><a href="https://yq.aliyun.com/articles/63183?spm=5176.100240.searchblog.173.aJC9Fo" target="_blank" rel="noopener">https://yq.aliyun.com/articles/63183?spm=5176.100240.searchblog.173.aJC9Fo</a></li>
<li><a href="https://yq.aliyun.com/articles/214?spm=5176.100240.searchblog.66.iduww3" target="_blank" rel="noopener">https://yq.aliyun.com/articles/214?spm=5176.100240.searchblog.66.iduww3</a></li>
<li><a href="http://postgis.net/install/" target="_blank" rel="noopener">http://postgis.net/install/</a></li>
<li><a href="http://www.cnblogs.com/zhaowenzhong/p/5667434.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhaowenzhong/p/5667434.html</a></li>
<li><a href="http://wiki.clusterlabs.org/wiki/PgSQL_Replicated_Cluster?spm=5176.100239.blogcont64841.22.H7WZ3U" target="_blank" rel="noopener">http://wiki.clusterlabs.org/wiki/PgSQL_Replicated_Cluster?spm=5176.100239.blogcont64841.22.H7WZ3U</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员资料大全]]></title>
      <url>http://linbingdong.com/2017/03/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>活到老，学到老。</p>
<a id="more"></a>

<p>本文由<a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="noopener">stanzhai</a>整理。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


<ul>
<li><a href="#%E8%B5%84%E6%96%99%E7%AF%87">资料篇</a><ul>
<li><a href="#%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9">技术站点</a></li>
<li><a href="#%E5%BF%85%E7%9C%8B%E4%B9%A6%E7%B1%8D">必看书籍</a></li>
<li><a href="#%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2">大牛博客</a></li>
<li><a href="#github%E7%AF%87">GitHub篇</a></li>
</ul>
</li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%AF%87">工具篇</a><ul>
<li><a href="#%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7">平台工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1">第三方服务</a></li>
<li><a href="#%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B7%A5%E5%85%B7">爬虫相关(好玩的工具)</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3">安全相关</a></li>
<li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">Web服务器性能/压力测试工具/负载均衡器</a></li>
</ul>
</li>
<li><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E5%85%B7">大数据处理/数据分析/分布式工具</a></li>
<li><a href="#web%E5%89%8D%E7%AB%AF">Web前端</a></li>
<li><a href="#%E8%AF%AD%E8%A8%80%E7%AF%87">语言篇</a><ul>
<li><a href="#scala">Scala</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#c--c">C &amp; C++</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>
<li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">游戏开发相关</a></li>
<li><a href="#%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">日志聚合，分布式日志收集</a></li>
<li><a href="#rtp%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%9F%B3%E8%A7%86%E9%A2%91">RTP,实时传输协议与音视频</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->

<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a>技术站点</h3><ul>
<li>在线学习：<a href="https://www.coursera.org/" target="_blank" rel="noopener">Coursera</a>、<a href="https://www.edx.org/" target="_blank" rel="noopener">edX</a>、<a href="https://cn.udacity.com/" target="_blank" rel="noopener">Udacity</a>、<a href="https://ocw.mit.edu/index.htm" target="_blank" rel="noopener">MIT公开课</a>、<a href="http://mooc.guokr.com/course/" target="_blank" rel="noopener">MOOC学院</a>、<a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></li>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a>：非常棒的针对编程的链接聚合网站</li>
<li><a href="https://www.techmeme.com/" target="_blank" rel="noopener">Techmeme</a>：美国知名科技新闻和博客聚集网站，类似的还有（Panda, Hacker &amp; Designer News）</li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank" rel="noopener">Reddit - Programming板块</a>：同上</li>
<li>Java牛人必备：<a href="http://www.programcreek.com/" target="_blank" rel="noopener">Program Creek</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a>：IT技术问答网站</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a>：中文的技术问答社区</li>
<li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>：全球最大的源代码管理平台，很多知名开源项目都在上面，如<a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">Linux内核</a>，<a href="https://github.com/openstack/openstack" target="_blank" rel="noopener">OpenStack</a>等</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="noopener">码云</a>：支持中文可免费创建私有项目的代码托管平台，可作为备选</li>
<li><a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode</a>：来做做这些题吧，看看自己的算法水平如何？这可比什么面试宝典强多了。</li>
<li><a href="http://www.lintcode.com/zh-cn/" target="_blank" rel="noopener">LintCode</a>：支持中文的编程题在线训练平台，可作为备选</li>
<li><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a>,<a href="https://www.topcoder.com/" target="_blank" rel="noopener">Topcoder</a>: 机器学习、大数据竞赛</li>
<li><a href="https://gold.xitu.io/" target="_blank" rel="noopener">掘金</a>：高质量的技术社区</li>
<li><a href="https://toutiao.io/" target="_blank" rel="noopener">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn" target="_blank" rel="noopener">InfoQ</a>：企业级应用，关注软件开发领域</li>
<li><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX: way to explore</a></li>
<li>国内老牌技术社区：<a href="https://www.oschina.net/" target="_blank" rel="noopener">OSChina</a>、<a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="noopener">CSDN</a>、<a href="http://www.51cto.com/" target="_blank" rel="noopener">51CTO</a></li>
<li>免费的it电子书：<a href="http://it-ebooks.info/" target="_blank" rel="noopener">http://it-ebooks.info/</a></li>
<li>在线学习：<a href="http://www.udemy.com/" target="_blank" rel="noopener">http://www.udemy.com/</a></li>
<li>优质学习资源：<a href="http://plus.mojiax.com/" target="_blank" rel="noopener">http://plus.mojiax.com/</a></li>
<li>代码练习：<a href="http://exercism.io/" target="_blank" rel="noopener">http://exercism.io/</a>   and  <a href="https://www.codingame.com" target="_blank" rel="noopener">https://www.codingame.com</a></li>
<li><a href="http://www.devstore.cn/" target="_blank" rel="noopener">DevStore</a>:开发者服务商店</li>
<li><a href="https://msdn.microsoft.com/zh-cn" target="_blank" rel="noopener">MSDN</a>：微软相关的官方技术集中地，主要是文档类</li>
<li><a href="https://developers.google.cn/" target="_blank" rel="noopener">谷歌开发者</a></li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="noopener">码库</a> - 收录了实用的开源项目及资源</li>
</ul>
<h3 id="必看书籍"><a href="#必看书籍" class="headerlink" title="必看书籍"></a>必看书籍</h3><ul>
<li>SICP(<a href="https://mitpress.mit.edu/sicp/" target="_blank" rel="noopener">Structure and Interpretation of Computer Programs</a>)</li>
<li>深入理解计算机系统</li>
<li>代码大全2</li>
<li>人件</li>
<li>人月神话</li>
<li>软件随想录</li>
<li>算法导论（麻省理工学院出版社）</li>
<li>离散数学及其应用</li>
<li>设计模式</li>
<li>编程之美</li>
<li>黑客与画家</li>
<li>编程珠玑</li>
<li>The Little Schemer</li>
<li>Simply Scheme_Introducing_Computer_Science</li>
<li>C++ Prime</li>
<li>Effective C++</li>
<li>TCP/IP详解</li>
<li>Unix 编程艺术</li>
<li>技术的本质</li>
<li>软件随想录</li>
<li>计算机程序设计艺术</li>
<li>职业篇：程序员的自我修养,程序员修炼之道,高效能程序员的修炼</li>
<li>《精神分析引论》弗洛伊德</li>
<li>《失控》《科技想要什么》《技术元素》凯文凯利</li>
<li>程序开发心理学</li>
<li>天地一沙鸥</li>
<li>搞定：无压力工作的艺术</li>
</ul>
<h3 id="大牛博客"><a href="#大牛博客" class="headerlink" title="大牛博客"></a>大牛博客</h3><ul>
<li>云风（游戏界大牛）: <a href="http://blog.codingnow.com/" target="_blank" rel="noopener">http://blog.codingnow.com/</a></li>
<li>王垠（不少文章喷到蛮有道理）：<a href="http://www.yinwang.org/" target="_blank" rel="noopener">http://www.yinwang.org/</a></li>
<li>冰河-伞哥(Lisp大牛)：<a href="http://tianchunbinghe.blog.163.com/" target="_blank" rel="noopener">http://tianchunbinghe.blog.163.com/</a></li>
<li>R大<a href="https://zhuanlan.zhihu.com/p/25042028" target="_blank" rel="noopener">【干货满满】RednaxelaFX写的文章/回答的导航帖</a></li>
<li>陈皓-左耳朵耗子：<a href="http://coolshell.cn/" target="_blank" rel="noopener">http://coolshell.cn/</a></li>
<li>Jeff Atwood（国外知名博主）: <a href="https://blog.codinghorror.com/" target="_blank" rel="noopener">https://blog.codinghorror.com/</a></li>
<li>阮一峰（黑客与画家译者，Web）：<a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">http://www.ruanyifeng.com/</a></li>
<li>廖雪峰（他的Python、Git教程不少人都看过）：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">http://www.liaoxuefeng.com/</a></li>
<li>道哥的黑板报（安全）：<a href="https://zhuanlan.zhihu.com/taosay" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/taosay</a></li>
<li><a href="https://github.com/search?l=&o=desc&p=1&q=location%3AChina&ref=advsearch&s=followers&type=Users&utf8=%E2%9C%93" target="_blank" rel="noopener">国内GitHub上关注度较高的开发者</a></li>
</ul>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p>** Awesome **</p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">Awesome</a>: 这是个Awesome合集，常见的资料这里面都能找到</li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">Awesome2</a>: 类似第一个Awesome</li>
<li><a href="https://github.com/jnv/lists" target="_blank" rel="noopener">杂七杂八、有用没用的Awesome合集</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">非常不错的语言类学习资料集合：Awesomeness</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="noopener">awesome-ios-ui</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="noopener">awesome-android-ui</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="noopener">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="noopener">awesome-public-datasets</a></li>
<li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="noopener">awesome-AppSec(系统安全)</a></li>
<li><a href="https://github.com/okulbilisim/awesome-datascience" target="_blank" rel="noopener">awesome-datascience</a></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="noopener">awesome-dataviz</a> - 数据可视化库及资料</li>
</ul>
<p>** 书籍资料 **</p>
<ul>
<li><a href="https://github.com/bingwen/free-programming-books/blob/master/free-programming-books-ch.md" target="_blank" rel="noopener">free-programming-books</a> <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="noopener">中文版</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="noopener">《程序员编程艺术 — 面试和算法心得》</a></li>
<li><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="noopener">GoBooks</a></li>
<li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="noopener">Papers we love</a></li>
<li><a href="https://github.com/JustFollowUs/Natural-Language-Processing" target="_blank" rel="noopener">自然语言处理NLP推荐学习路线及参考资料</a></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="noopener">超级棒的机器学习资料（框架，库，软件）</a>, <a href="http://www.oschina.net/news/53818/awesome-machine-learning" target="_blank" rel="noopener">中文翻译版</a></li>
<li><a href="http://news.cnblogs.com/n/504467/" target="_blank" rel="noopener">机器学习(Machine Learning)&amp;深入学习(Deep Learning)资料</a></li>
<li><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="noopener">Docker资料合集</a></li>
<li><a href="https://github.com/apache/incubator-storm/tree/master/examples/storm-starter" target="_blank" rel="noopener">学习使用Strom</a></li>
<li><a href="http://ercoppa.github.io/HadoopInternals/" target="_blank" rel="noopener">Hadoop Internals</a></li>
<li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="noopener">Spark Internals</a></li>
<li><a href="http://hadoop.readthedocs.org/en/latest/" target="_blank" rel="noopener">大数据时代的数据分析与数据挖掘 – 基于Hadoop实现</a></li>
<li><a href="http://samypesse.gitbooks.io/how-to-create-an-operating-system/index.html" target="_blank" rel="noopener">如何制作操作系统</a></li>
<li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="noopener">借助开源项目学习软件开发</a></li>
<li><a href="http://code.csdn.net/news/2821842" target="_blank" rel="noopener">几个不错的开源游戏引擎</a></li>
<li><a href="https://github.com/hit9/PyZh" target="_blank" rel="noopener">一起写Python文章，一起看Python文章</a></li>
<li><a href="http://blog.fens.me/series-r/" target="_blank" rel="noopener">R的极客理想系列文章</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="noopener">HTTP接口设计指南</a></li>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="noopener">分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a></li>
<li><a href="https://github.com/rxin/db-readings" target="_blank" rel="noopener">Readings in Databases</a></li>
<li><a href="https://github.com/rushter/data-science-blogs" target="_blank" rel="noopener">Data Science blogs</a></li>
<li><a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="noopener">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="noopener">Android Code Path</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="noopener">Android Learn Notes</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="noopener">PHP 类库框架，资料集合</a></li>
</ul>
<p>** 优秀项目 **</p>
<ul>
<li><a href="http://news.cnblogs.com/n/506775/" target="_blank" rel="noopener">最值得关注的10个C语言开源项目</a></li>
<li><a href="http://code.csdn.net/news/2822568" target="_blank" rel="noopener">15款值得学习的小型开源项目</a></li>
<li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="noopener">iOS-100个开源组件</a></li>
<li><a href="http://code.csdn.net/news/2822753" target="_blank" rel="noopener">十大Material Design开源项目</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="noopener">Android开源项目分类汇总</a></li>
</ul>
<p>** 前端 &amp; Node.js **</p>
<ul>
<li><a href="https://github.com/moklick/frontend-stuff" target="_blank" rel="noopener">前端资源</a></li>
<li><a href="https://github.com/w3crange/Front-End-Develop-Guide" target="_blank" rel="noopener">前端开发指南</a></li>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="noopener">前端技能汇总</a></li>
<li><a href="http://www.daqianduan.com/nav" target="_blank" rel="noopener">前端资源大导航</a></li>
<li><a href="https://github.com/lisposter/frontend-books" target="_blank" rel="noopener">收集前端方面的书籍</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="noopener">2014年最新前端开发面试题</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">简单清晰的JavaScript语言教程，代码示例</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">JavaScript编程规范</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="noopener">JavaScript必看视频</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript标准参考教程（阮一峰的，整理的不错）</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="noopener">JS必看</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning/blob/master/ZH-CN.md" target="_blank" rel="noopener">AngularJS Guide的中文分支</a></li>
<li><a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="noopener">Angular2学习资料</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="noopener">AngularJS应用的最佳实践和风格指南</a></li>
<li><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="noopener">React-Native学习指南</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></li>
<li><a href="https://github.com/sergtitov/NodeJS-Learning/blob/master/cn_resource.md" target="_blank" rel="noopener">node.js中文资料导航</a></li>
<li><a href="http://blog.fens.me/nodejs-roadmap/" target="_blank" rel="noopener">Nodejs学习路线图</a></li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/9629682#9629682" target="_blank" rel="noopener">如何学习nodejs</a></li>
</ul>
<p>** 工作，工具 **</p>
<ul>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="noopener">系统管理员工具集合</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="noopener">Pro Git</a></li>
<li><a href="https://github.com/taobao/nginx-book" target="_blank" rel="noopener">Nginx开发从入门到精通</a></li>
<li><a href="https://github.com/justjavac/Google-IPs.git" target="_blank" rel="noopener">Google 全球 IP 地址库</a></li>
<li><a href="https://github.com/greatghoul/remote-working" target="_blank" rel="noopener">收集整理远程工作相关的资料</a></li>
<li><a href="https://github.com/chriskempson/base16" target="_blank" rel="noopener">Color schemes for hackers</a></li>
<li><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="noopener">游戏开发工具集，MagicTools</a></li>
<li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="noopener">开发者工具箱， free-for-dev</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a></li>
<li><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="noopener">Git风格指南</a></li>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="noopener">Bast-App</a></li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a>平台工具</h3><ul>
<li>Phabricator: 软件开发平台，Facebook出品，现已开源，CodeReview神器（从这个往下一直到GitLab之间的工具统统可以忽略了）</li>
<li>Redmine/Trac：项目管理平台</li>
<li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究）</li>
<li>git，svn：源代码版本控制系统</li>
<li>GitLab/Gitorious：构建自己的GitHub服务器</li>
<li>Postman:RESTful，api测试工具，HTTP接口开发必备神器</li>
<li><a href="http://airbnb.design/lottie/" target="_blank" rel="noopener">Lottie</a>: AE动画变原生代码，设计师必备</li>
<li>Sonar：代码质量管理平台</li>
<li>Nessus: 系统漏洞扫描器</li>
<li>gitbook：<a href="https://www.gitbook.io/" target="_blank" rel="noopener">https://www.gitbook.io/</a>写书的好东西，当然用来写文档也很不错的（发现不少产品的文档就是用的它）</li>
<li>Travis-ci：开源项目持续集成必备，和GitHub相结合，<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a></li>
<li>Trello：简单高效的项目管理平台，注重看板管理</li>
<li>日志聚合：graylog、ELK（推荐新一代的graylog，基本上算作是开源的Splunk了）</li>
<li>开源测试工具、社区（Selenium、OpenQA.org）</li>
<li>Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。其他类似工具：CFEngine、SaltStack、Ansible</li>
<li>Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li>
<li>Ganglia：分布式监控系统</li>
<li>fleet：分布式init系统</li>
<li>Ansible：能够大大简化Unix管理员的自动化配置管理与流程控制方式。</li>
<li>GeoLite免费数据库</li>
<li>jsHint:js代码验证工具</li>
<li>haproxy: 高可用负载均衡（此外类似的系统还有nginx，lvs）</li>
<li>linux OS性能分析工具：dstat，iostat，iotop，nmon</li>
<li>kimono：将网页信息转换为api接口的工具</li>
<li>集群管理工具：pdsh，ClusterSSH，mussh（可以用它快速管理Hadoop集群）ipa-server做统一的认证管理</li>
<li>influxdb: 分布式时序数据库，结合Grafana可以进行实时数据分析</li>
<li>dot: 程序员绘图利器（是种语言，也是个工具）</li>
<li>Graph::Easy: （Ascii Art工具）字符流程图绘制，实乃程序员装逼神器。其他类似的工具Asciiflow, vi插件：drawit!</li>
<li>spf13-vim: 让你的vim飞起来！</li>
<li>Kubernetes: 容器集群管理系统</li>
<li>Gatling: 服务器性能压力测试工具</li>
<li>systemtap: Linux内核探测工具、内核调试神器</li>
<li>Cygwin：Windows下的类UNIX模拟环境</li>
<li>MinGW：Windows下的GNU工具集</li>
</ul>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="noopener">Mac下的神兵利器</a></li>
<li><a href="https://asciinema.org/" target="_blank" rel="noopener">asciinema</a>: 终端录屏神器</li>
<li>Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理</li>
<li>Charles: Mac上的Web代理调试工具，类似Fiddler</li>
<li><a href="https://fir.im/" target="_blank" rel="noopener">fir.im</a>免费的移动App内测托管平台</li>
<li>wireshark：知名的网络数据包分析工具</li>
<li>PowerCmd:替代Windows Cmd的利器</li>
<li>RegexBuddy:强大的正则表达式测试工具</li>
<li>Soure Insight：源代码阅读神器</li>
<li>SublimeText：程序员最爱的编辑器</li>
<li>Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的</li>
<li>Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。</li>
<li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li>
<li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li>
<li>Radmin: 远程控制工具，用了一段时间的DameWare，还要破解，对Win7支持的不好，还是发现这个好用</li>
<li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li>
<li>Clover：给资源管理器加上多标签，我平时工作的时候就用它，像Chrome一样使用资源管理器，甚是方便啊（这是Windows平台的）</li>
<li>WinLaunch：模拟Mac OS的Launch工具</li>
<li>Fritzing：绘制电路图</li>
<li>LICEcap：gif教程制作</li>
<li>git，svn：版本控制系统</li>
<li>Enigma Virtual Box（将exe，dll等封装成一个可执行程序）</li>
<li>Open DBDiff(针对SqlServer)数据库同步</li>
<li>SymmetricDS：数据库同步</li>
<li>BIEE,Infomatica，SPSS，weka，R语言：数据分析</li>
<li>CodeSmith，LightSwitch：代码生成</li>
<li>Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。</li>
<li>Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能</li>
<li>log explorer：查看SqlServer日志</li>
<li>dependency walker：查询Windows应用程序dll依赖项</li>
<li>Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上</li>
<li>ngrok：内网穿透工具</li>
<li>Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错<a href="http://www.processon.com/" target="_blank" rel="noopener">http://www.processon.com/</a></li>
<li>Origami: 次世代交互设计神器</li>
<li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a></li>
<li>tinyproxy:（Linux）小型的代理服务器支持http和https协议</li>
<li>EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。</li>
<li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢）</li>
<li>ApkIDE:Android反编译神器</li>
<li>翻、墙工具（自|由|门、天行浏览器，免费的VPN：<a href="http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）" target="_blank" rel="noopener">http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）</a></li>
<li>设计工具：Sketch、OmniGraffle</li>
<li>MindManger：思维导图</li>
<li>MagicDraw:Uml图工具</li>
<li>innotop：MySql状态监测工具</li>
<li>墨刀：比Axure更为简单的原型工具，可以快速制作原型</li>
<li>Karabiner: Mac专用，修改键盘键位的神器，机械键盘必备</li>
<li>Timing：Mac专用，统计你的时间都花在哪了</li>
<li>f.lux: 护眼神器，过滤蓝光，程序员护眼必备良品</li>
<li>LaTeX: 基于ΤΕΧ的排版系统, 让写论文更方便</li>
<li>Antlr：开源的语法分析器，可以让你毫无压力的写个小parser</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li>DnsPod：一个不错的智能DNS服务解析提供商</li>
<li>DigitalOcean：海外的云主机提供商，价格便宜，磁盘是SSD的，用过一段时间整体上还可以，不过毕竟是海外的，网速比较慢。国内的就是阿里云了。还有个比较知名的是：Linode，据说速度上比DigitalOcean好很多</li>
<li>移动端推送服务：个推、JPush、云巴</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>：移动应用开发服务，包括:数据存储、用户管理、消息推送、应用统计、社交分享、实时聊天等服务</li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a>: 漂亮炫酷的配色网站，程序员的福音</li>
<li><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku: PaaS平台</a></li>
</ul>
<h3 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a>爬虫相关(好玩的工具)</h3><ul>
<li>Phantomjs(Web自动化测试，服务端渲染等)</li>
<li>berserkJS(基于Phantomjs的改进版本)</li>
<li>SlimerJS</li>
<li>CasperJS</li>
<li>selenium</li>
<li>HtmlUnit（开源的java 页面分析工具，也是个Headless的浏览器）</li>
</ul>
<h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul>
<li>sql注入检测：sqlmap、haviji</li>
<li>端口扫描：nmap</li>
<li>渗透测试：BurpLoader</li>
<li>sqltools: sql漏洞利用工具</li>
<li>snort: 入侵检测</li>
</ul>
<h3 id="Web服务器性能-压力测试工具-负载均衡器"><a href="#Web服务器性能-压力测试工具-负载均衡器" class="headerlink" title="Web服务器性能/压力测试工具/负载均衡器"></a>Web服务器性能/压力测试工具/负载均衡器</h3><ul>
<li>ab: ab是apache自带的一款功能强大的测试工具</li>
<li>curl-loader: 真实模拟、测试Web负载</li>
<li>http_load: 程序非常小，解压后也不到100K</li>
<li>webbench: 是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。</li>
<li>Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li>
<li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li>
<li>Piwik：开源网站访问量统计系统</li>
<li>ClickHeat：开源的网站点击情况热力图</li>
<li>HAProxy：高性能TCP /HTTP负载均衡器</li>
<li>ElasticSearch：搜索引擎基于Lucene</li>
<li>Page Speed SDK和YSLOW</li>
<li>HAR Viewer: HAR分析工具</li>
<li>protractor：E2E（end to end）自动化测试工具</li>
</ul>
<h2 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a>大数据处理/数据分析/分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Spark：大规模数据处理框架（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>除了Spark，其他几个不错的计算框架还有：Kylin，Flink，Drill</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Druid: 实时数据分析存储系统</li>
<li>Ambari: 大数据平台搭建、监控利器；类似的还有CDH</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享</li>
<li>Impala：新一代开源大数据分析引擎，提供Sql语义，比Hive强在速度上</li>
<li>presto: facebook的开源工具，大数据分布式sql查询引擎</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍</li>
<li>开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
<li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li>
<li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li>
<li>NoSql：ScyllaDB（宣称是世界上最快的NoSql）、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</li>
<li>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum </li>
<li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、Tinkerpop</li>
<li>NLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li>
<li>机器学习：TensorFlow（Google出品），WEKA、Mahout、scikits.learn、SkyTree</li>
<li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</li>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎，类似的还有：Azkaban</li>
<li>开源的数据分析可视化工具：Weka、Orange、KNIME</li>
<li>Cobar：阿里巴巴的MySql分布式中间件</li>
<li>数据清洗：data wrangler， Google Refine</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a>: 谷歌出品，必属精品</li>
<li>Vue.js: 借鉴了Angular及React的JS框架，设计理念较为先进</li>
<li>GRUNT: js task runner</li>
<li>Sea.js: js模块化</li>
<li>knockout.js：MVVM开发前台，绑定技术</li>
<li>Angular.js: 使用超动感HTML &amp; JS开发WEB应用！</li>
<li>Highcharts.js，Flot:常用的Web图表插件</li>
<li>NVD3: 基于d3.js的图表库</li>
<li>Raw：非常不错的一款高级数据可视化工具</li>
<li>Rickshaw:时序图标库，可用于构建实时图表</li>
<li>JavaScript InfoVis Toolkit：另一款Web数据可视化插件</li>
<li>Pdf.js，在html中展现pdf</li>
<li>ACE，CodeMirror：Html代码编辑器（ACE甚好啊）</li>
<li>NProcess：绚丽的加载进度条</li>
<li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal)</li>
<li>Threejs：3DWeb库</li>
<li>Hightopo：基于Html5的2D、3D可视化UI库</li>
<li>jQuery.dataTables.js:高度灵活的表格插件</li>
<li>Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的</li>
<li>director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用</li>
<li>pace.js：页面加载进度条</li>
<li>bower：Web包管理器</li>
<li>jsnice：有趣的js反编译工具，猜压缩后的变量名，<a href="http://www.jsnice.org/" target="_blank" rel="noopener">http://www.jsnice.org/</a></li>
<li>D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js）</li>
<li>Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile.</li>
<li>UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li>
<li>前段UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li>
<li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/</a></li>
<li>图标资源：IcoMoon（我的最爱），Font Awesome, Themify Icons，FreePik，Glyphicons</li>
<li>artDialog:非常漂亮的对话框</li>
<li>AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架</li>
<li>Respond.js：让不懂爱的IE6-8支持响应式设计</li>
<li>require.js: js模块加载库</li>
<li>select2：比chosen具有更多特性的选择框替代库</li>
<li>AngularUI：集成angular.js的UI库</li>
<li>normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库</li>
<li>CreateJS：Html5游戏引擎</li>
<li>Less,Compass:简化CSS开发</li>
<li>emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像</li>
<li>simditor:一个不错的开源的html编辑器，简洁高效</li>
<li>Sencha:  基于html5的移动端开发框架</li>
<li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li>
<li>jquery-smooth-scroll:同上，平滑滚动插件</li>
<li>Animate.css:实现了各种动画效果的css库</li>
<li>Emmet:前端工程师必备，前身为 Zen Coding</li>
<li>React: facebook出品的js UI库</li>
<li>highlight.js：专门用来做语法高亮的库</li>
<li>GoJS: Html5交互式图表库，看demo更适合层次结构的图表。</li>
<li>10 Pure CSS (Mostly) Flat Mobile Devices: <a href="http://marvelapp.github.io/devices.css/" target="_blank" rel="noopener">http://marvelapp.github.io/devices.css/</a></li>
<li>CodePen: <a href="http://codepen.io/" target="_blank" rel="noopener">http://codepen.io/</a></li>
<li>jsfiddle: <a href="http://jsfiddle.net/" target="_blank" rel="noopener">http://jsfiddle.net/</a> 前端js，html，css测试利器</li>
</ul>
<h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><p>折腾中：Scala、Python、Lua、JavaScript、Go</p>
<p>待折腾：</p>
<ul>
<li><a href="http://racket-lang.org/" target="_blank" rel="noopener">Racket</a></li>
<li><a href="http://ocaml.org/" target="_blank" rel="noopener">OCaml</a></li>
<li><a href="https://www.rust-lang.org" target="_blank" rel="noopener">Rust</a></li>
<li><a href="http://julialang.org/" target="_blank" rel="noopener">Julia</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://www.scala-lang.org/api/current/" target="_blank" rel="noopener">Scala Standard Library API</a></li>
<li><a href="http://twitter.github.io/scala_school/" target="_blank" rel="noopener">Scala School!</a>: A Scala tutorial by Twitter</li>
<li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html" target="_blank" rel="noopener">A Tour of Scala</a>: Tutorial introducing the main concepts of Scala</li>
<li><a href="http://stackoverflow.com/tags/scala/info" target="_blank" rel="noopener">Scala Overview on StackOverflow</a>: A list of useful questions sorted by topic</li>
<li><a href="http://www.artima.com/pins1ed/" target="_blank" rel="noopener">Programming in Scala</a>，最新的第3版，还没有电子版，电子版是第一版</li>
<li>《Scala for the Impatient》</li>
<li>《Scala in Depth》</li>
<li>《Programming Scala》Dean Wampler and Alex Payne. O’Reilly 2009</li>
<li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf" target="_blank" rel="noopener">Scala By Example</a></li>
<li><a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="noopener">Scala Cheatsheet</a>学习模式匹配的好资料</li>
<li><a href="http://docs.scala-lang.org/glossary/" target="_blank" rel="noopener">Glossary of Scala and FP terms</a></li>
<li><a href="https://github.com/lihaoyi/Metascala" target="_blank" rel="noopener">Metascala: A JVM written in Scala</a></li>
<li><a href="https://scala-lms.github.io/" target="_blank" rel="noopener">LMS: Program Generation and Embedded Compilers in Scala</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li>常用的IDE：IntelliJ IDEA(强烈推荐)，Eclipse，Netbeans</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="noopener">fastutil</a>: 性能更好的Java集合框架</li>
<li>Guava: 谷歌的Java工具包，应用广泛</li>
<li>Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程，现在已经是apache下的一个独立项目了。Spark的HA也用的这货。</li>
<li>Rx(Reactive Extensions)框架：Vert.x, RxJava(Android中用的比较多),  Quasar</li>
<li>FindBugs: 代码静态分析工具，找出代码缺陷</li>
<li>Java反编译工具：Luyten，JD-Gui</li>
<li>Drools: 规则引擎</li>
<li>Jersey: Java RESTful 框架</li>
<li>canal: 阿里巴巴出品，binlog增量订阅&amp;消费组件</li>
<li>Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring，Hibernate</li>
<li>Netty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架，spark 1.2.0就用netty替代了nio）</li>
<li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的</li>
<li>jOOQ：java Orm框架</li>
<li>Janino: 超级小又快的Java编译器，Spark的Tungsten引起用的它</li>
<li>Activiti:工作流引擎，类似的还有jBPM、Snaker</li>
<li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li>
<li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li>
<li>Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的</li>
<li>web-harvest：Web数据提取工具</li>
<li>POM工具：Maven+Artifactory</li>
<li>Akka:一款基于actor模型实现的 并发处理框架</li>
<li>EclEmma：覆盖测试工具</li>
<li>Shiro:安全框架</li>
<li>joda-time:简化时间处理</li>
<li>parboiled:表达式解析</li>
<li>dozer: 深拷贝神器</li>
<li>dubbo: 阿里巴巴出品的分布式服务框架</li>
<li>jackson databind: json序列化工具(fastjson,simplejson)</li>
<li>Atomikos: 分布式事务管理</li>
<li>BoneCP：性能很赞的数据库连接池组件，据说比c3p0快好多</li>
<li>ProGuard: obconfuscation tool, 强大的混淆工具</li>
<li>S-99：Scala相关的99个问题</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li>PyCharm：最佳Python IDE</li>
<li>Eric,Eclipse+pydev,比较不错的Python IDE</li>
<li>PyWin:Win32 api编程包</li>
<li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib</li>
<li>GUI相关：PyQt，PyQwt</li>
<li>supervisor:进程监控工具</li>
<li>PyGame: 基于Python的多媒体开发和游戏软件开发模块</li>
<li>Web框架: Django 开源web开发框架，它鼓励快速开发,并遵循MVC设计</li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="noopener">Swift精选资料</a></li>
<li><a href="http://www.csdn.net/article/2015-01-09/2823502-swift-open-source-libs" target="_blank" rel="noopener">43个优秀的开源项目</a></li>
</ul>
<p><strong>客户端</strong></p>
<ul>
<li><a href="https://github.com/YANGReal/JokeClient-Swift" target="_blank" rel="noopener">糗事百科 Swift</a></li>
<li><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="noopener">HackerNews Swift</a></li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="noopener">知乎日报app</a></li>
</ul>
<p><strong>Framework</strong></p>
<ul>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="noopener">Twitter框架</a></li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="noopener">Mac下简单HTTP Server Swifter</a></li>
</ul>
<p><strong>小工具</strong></p>
<ul>
<li><a href="https://github.com/ChrisChares/swift-alarm" target="_blank" rel="noopener">Swift Alarm</a></li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="noopener">Swift Note</a></li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="noopener">Swift RSS Reader</a></li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="noopener">Swift-PM2.5查询app</a></li>
</ul>
<p><strong>游戏</strong></p>
<ul>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="noopener">Flappy Swift</a></li>
<li><a href="https://github.com/geek5nan/FanFanSwift" target="_blank" rel="noopener">FanFan Swift</a></li>
</ul>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><ul>
<li>Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器</li>
<li>CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单</li>
<li>netz:免费的 .NET 可执行文件压缩工具</li>
<li>SmartAssembly:变态的.net代码优化混淆工具</li>
<li>NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的)</li>
<li>ILMerge：将所有引用的DLL和exe文件打成一个exe文件</li>
<li>ILSpy:开源.net程序反编译工具</li>
<li>Javascript.NET：很不错的js执行引擎，对v8做了封装</li>
<li>NPOI: Excel操作</li>
<li>DotRAS:远程访问服务的模块</li>
<li>WinHtmlEditor: Winform下的html编辑器</li>
<li>SmartThreadPool:使用C#实现的，带高级特性的线程池</li>
<li>Snoop: WPF Spy Utility</li>
<li>Autofac: 轻量级IoC框架</li>
<li>HtmlAgilityPack：Html解析利器</li>
<li>Quartz.NET：Job调度</li>
<li>HttpLib：@CodePlex，简化http请求</li>
<li>SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了</li>
<li>DocX：未安装Office的情况下操作Word文件</li>
<li>Dapper：轻量级的ORM类，性能不错</li>
<li>HubbleDotNet：支持接入数据库的全文搜索系统</li>
<li>fastJSON：@CodeProject，高性能的json序列化类</li>
<li>ZXing.NET：@CodePlex，QR，条形码相关</li>
<li>Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎)</li>
<li>AntiXSS：微软的XSS防御库Microsoft Web Protection Library</li>
<li>Jint：JavaScript解释器</li>
<li>CS-Script：将C#代码文件作为脚本执行</li>
<li>Jexus：Linux下 高性能、易用、免费的ASP.NET服务器</li>
<li>Clay：将dynamic发挥的更加灵活，像写js一样写C#</li>
<li>DynamicJSON：不必定义数据模型获取json数据</li>
<li>SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析）</li>
<li>Roslyn：C#，VB编译器</li>
<li>ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便</li>
<li>UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF）</li>
<li>NetSparkle：应用自动更新组件</li>
<li>ConfuserEx: 开源.net混淆工具</li>
<li>ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务</li>
<li>Expression Evaluator：Eval for C#,处理字符串表达式</li>
<li><a href="http://nugetmusthaves.com/" target="_blank" rel="noopener">http://nugetmusthaves.com/</a></li>
<li>Reactive Extensions (Rx):异步，事件驱动编程包， Rx = Observables + LINQ + Schedulers</li>
</ul>
<h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul>
<li>Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。</li>
<li>libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢）</li>
<li>Boost:不多说了，准C++标准库</li>
<li>Valgrind\Ptmalloc\Purify: 调试工具</li>
<li>NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦)</li>
<li><a href="https://pocoproject.org/" target="_blank" rel="noopener">POCO</a> - 开源的C++类库及应用程序框架的集合,它主要提供简单的、快速的网络和可移植应用程序</li>
<li>breakpad:崩溃转储和分析模块，很多crashreport会用到</li>
<li>UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏开发相关"><a href="#游戏开发相关" class="headerlink" title="游戏开发相关"></a>游戏开发相关</h3><ul>
<li>MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的)</li>
<li>HP-Socket：见有有些页游服务器使用这个构建的</li>
<li>Unreal: 虚幻引擎，C++，基于这个引擎的游戏很多</li>
<li>OGRE：大名鼎鼎的3D图形渲染引擎，天龙八部OL、火炬之光等不少游戏都用了这个引擎</li>
<li>OpenVDB：梦工厂C++的特效库，开源的</li>
<li>cocos2d：跨平台2D游戏引擎</li>
<li>unity3d：跨平台3D游戏引擎，很火的哦</li>
<li>Nodejs：也有不少使用它来开发手游和也有服务器（网易的Pomelo）</li>
</ul>
<h3 id="日志聚合，分布式日志收集"><a href="#日志聚合，分布式日志收集" class="headerlink" title="日志聚合，分布式日志收集"></a>日志聚合，分布式日志收集</h3><ul>
<li>Scribe：Facebook的（nodejs + scribe + inotify 同步日志）</li>
<li>logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台</li>
<li>log.io: nodejs开发的实时日志收集系统</li>
</ul>
<h3 id="RTP-实时传输协议与音视频"><a href="#RTP-实时传输协议与音视频" class="headerlink" title="RTP,实时传输协议与音视频"></a>RTP,实时传输协议与音视频</h3><ul>
<li>RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准)</li>
<li>环形缓冲区，实时数据传输用</li>
<li>SDL,ffmpeg,live555,Speex</li>
<li>Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 好文转载 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[经典编程书籍]]></title>
      <url>http://linbingdong.com/2017/03/11/%E7%BB%8F%E5%85%B8%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<p>经典技术书籍，涵盖：计算机系统与网络、系统架构、算法与数据结构、前端开发、后端开发、移动开发、数据库、测试、项目与团队、程序员职业修炼、求职面试和编程相关的经典书籍。</p>
<p><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="noopener">原文</a></p>
<a id="more"></a>

<p>这个列表综合了伯乐在线网站以往推荐<a href="http://blog.jobbole.com/tag/book/" target="_blank" rel="noopener">经典书籍</a>文章中的列表，以及在微信和微博中被广泛推荐的好书。虽然已经包括了100多本，覆盖的面也比较全。仍然有很多方面需要补充，而且相信还有很多没有被收录的好书。欢迎大家在 issues 中推荐或自荐。</p>
<h2 id="计算机系统与网络"><a href="#计算机系统与网络" class="headerlink" title="计算机系统与网络"></a>计算机系统与网络</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00AAQXKXS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AAQXKXS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">图灵的秘密:他的生平、思想及论文解读</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F9OQE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F9OQE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">计算机系统概论</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F5RYM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5RYM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入理解Linux内核</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B003QN7J7U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003QN7J7U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入Linux内核架构</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00116OTVS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116OTVS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">TCP/IP详解 卷1：协议</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JUM2ML4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUM2ML4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Linux系统编程（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004X3Z3D4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004X3Z3D4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Linux内核设计与实现（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004BJ18KM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004BJ18KM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入理解计算机系统（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011AP7RY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011AP7RY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">计算机程序的构造和解释（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B009RSXIB4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009RSXIB4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编码：隐匿在计算机软硬件背后的语言</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0140I5WPK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0140I5WPK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">性能之颠：洞悉系统、企业与云计算</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011S72JB6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011S72JB6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">UNIX网络编程 卷1：套接字联网API（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B012R5A29O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B012R5A29O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">UNIX网络编程 卷2：进程间通信</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001GS7918/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001GS7918&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Windows核心编程(第5版)</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PB5QQ84/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PB5QQ84&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">WireShark网络分析就这么简单</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01AS1OS8A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AS1OS8A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">WireShark网络分析的艺术</a>》</li>
</ul>
<h2 id="编程通用"><a href="#编程通用" class="headerlink" title="编程通用"></a>编程通用</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B006P7V73G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006P7V73G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程原本</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0061XKRXA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">代码大全</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">UNIX编程艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0031M9GHC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">代码整洁之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00SFZH0DC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZH0DC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程珠玑（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0150BMQDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0150BMQDM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程珠玑（续）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IOAM6VE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IOAM6VE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">软件调试的艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KMJ2Q1U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KMJ2Q1U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">修改代码的艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007HYMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007HYMPBY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程语言实现模式</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008B4DTG4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008B4DTG4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编写可读代码的艺术</a>》</li>
<li>《解析极限编程：拥抱变化》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008UCHA58/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008UCHA58&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">精通正则表达式（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001NGO85I/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001NGO85I&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编译原理（第2版）</a>》龙书</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011LPUB42/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011LPUB42&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">重构：改善既有代码的设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRM3M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM3M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">七周七语言：理解多种编程范型</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBLUFK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBLUFK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">调试九法：软硬件错误的排查之道</a>》</li>
<li>《程序设计语言：实践之路（第3版）》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PG0MM3C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PG0MM3C&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">计算的本质：深入剖析程序和计算机</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001130JN8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">设计模式 : 可复用面向对象软件的基础</a>》</li>
</ul>
<h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B009OCFQ0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009OCFQ0O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">算法（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00AK7BYJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AK7BYJY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">算法导论（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B019NB0VCI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019NB0VCI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python算法教程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00S4HCQUI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S4HCQUI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">算法设计与分析基础（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B016DWSF8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSF8M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">学习 JavaScript 数据结构与算法,编程题</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LDG2DSG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LDG2DSG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据结构与算法,编程题分析 : C++描述（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B002WC7NGS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NGS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据结构与算法,编程题分析 : C语言描述（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01CNP0CG6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01CNP0CG6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据结构与算法,编程题分析 : Java语言描述（第2版）</a>》</li>
</ul>
<h2 id="职业修炼与规划"><a href="#职业修炼与规划" class="headerlink" title="职业修炼与规划"></a>职业修炼与规划</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00KQDTZ4S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KQDTZ4S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">大教堂与集市</a>》</li>
<li>《卓有成效的程序员》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LZJ8L9J/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LZJ8L9J&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员的职业素养</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004GV08CY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004GV08CY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员修炼之道：从小工到专家</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00H6X6LD4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6LD4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">软件开发者路线图：从学徒到高手</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBKDGM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKDGM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">我编程，我快乐: 程序员职业规划之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007VARUIM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VARUIM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员的思维修炼：开发认知潜能的九堂课</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00OA9L3NU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00OA9L3NU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">高效程序员的45个习惯：敏捷开发修炼之道(修订版)</a>》</li>
</ul>
<h2 id="大师访谈"><a href="#大师访谈" class="headerlink" title="大师访谈"></a>大师访谈</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00451BP72/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00451BP72&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程大师智慧</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRKMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRKMA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程大师访谈录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00QA7GA2Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QA7GA2Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程人生 : 15位软件先驱访谈录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007ED88CI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007ED88CI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">奇思妙想 : 15位计算机天才及其重大发现</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008G80O9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008G80O9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">图灵和ACM图灵奖</a>》</li>
</ul>
<h2 id="架构-性能"><a href="#架构-性能" class="headerlink" title="架构/性能"></a>架构/性能</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01ER75V6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75V6O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">微服务设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00NGW4EAG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NGW4EAG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">大数据日知录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B003LBSRDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003LBSRDM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">企业应用架构模式</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JMKWHFU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JMKWHFU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Web性能权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01M0EHQ43/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M0EHQ43&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">SRE：Google运维解密</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0153178XM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153178XM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">发布！软件的设计与部署</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HZFHQQI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HZFHQQI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">高扩展性网站的 50 条原则</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00F3Z26G8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00F3Z26G8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">大型网站技术架构:核心原理与案例分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00EP6TGAU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EP6TGAU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">恰如其分的软件架构：风险驱动的设计方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CMMUXC4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CMMUXC4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">软件系统架构：使用视点和视角与利益相关者合作（第2版）</a>》</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B013SGB2AO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013SGB2AO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">高性能 JavaScript</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0089TDFNS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0089TDFNS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">锋利的 jQuery（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B016DWSEWO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSEWO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 忍者秘籍</a>》（感谢<a href="https://github.com/jobbole/awesome-programming-books/issues?q=is%3Aissue+is%3Aopen+author%3Ajoker-danta" target="_blank" rel="noopener">@joker-danta</a> 补充推荐）</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00BQ7RMW0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BQ7RMW0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编写可维护的 JavaScript</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00W34DZ8K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W34DZ8K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">你不知道的 JavaScript（上）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007VISQ1Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VISQ1Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 权威指南（第6版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0097CON2S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 语言精粹（修订版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004VJM5KE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004VJM5KE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript DOM编程艺术 （第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007OQQVMY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007OQQVMY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 高级程序设计（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JVLEYY2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JVLEYY2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">JavaScript 异步编程：设计快速响应的网络应用</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00GMXI1QY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GMXI1QY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Effective JavaScript：编写高质量JavaScript代码的68个有效方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00H706BIG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H706BIG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">HTML5 权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B015316VJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B015316VJY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">HTML5 秘籍（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00K58535O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K58535O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">HTML5 与 CSS3 基础教程（第八版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01ET3FO86/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ET3FO86&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">CSS 揭秘</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00M2DKZ1W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZ1W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">CSS 设计指南（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F5SIC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5SIC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">CSS 权威指南（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LXL42O5/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LXL42O5&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入浅出 HTML 与 CSS</a>》</li>
</ul>
<h2 id="Java开发"><a href="#Java开发" class="headerlink" title="Java开发"></a>Java开发</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01ER75QC8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75QC8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java8 实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0077K9XHW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0077K9XHW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java并发编程实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01DLB7Z66/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01DLB7Z66&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java性能权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00E0D2OX4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00E0D2OX4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java程序员修炼之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B017MEN094/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B017MEN094&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">实战Java高并发程序设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java编程思想 （第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HI0BUF8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HI0BUF8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入理解Java虚拟机（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001PTGR52/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001PTGR52&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Effective java 中文版（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01M22BGUQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M22BGUQ&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java核心技术·卷1：基础知识（原书第9版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IK7SM6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IK7SM6O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Java核心技术·卷2：高级特性（原书第9版）</a>》</li>
</ul>
<h2 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00DVDDP0K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00DVDDP0K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">精通C#（第6版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00J94AG2A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00J94AG2A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入理解C#（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P8VZ8T4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P8VZ8T4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">CLR via C#（第4版）</a>》</li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00UI93JD8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00UI93JD8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">集体智慧编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P6OJ0TC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ0TC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">笨办法学Python</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KAFX65Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KAFX65Q&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python基础教程</a>》</li>
<li>《Python源码剖析》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007NB2B4M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NB2B4M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Head First Python</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00HECW20S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00HECW20S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">与孩子一起学编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004TUJ7A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004TUJ7A6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python学习手册（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00WKR1OKG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WKR1OKG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python Cookbook（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01MCUN37Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01MCUN37Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python参考手册（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01FQAS0KK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FQAS0KK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python核心编程（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HCVUJFA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HCVUJFA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python科学计算（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00GHGZLWS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GHGZLWS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">利用 Python 进行数据分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01ION3W54/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ION3W54&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Think Python：像计算机科学家一样思考Python（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00MHDPIJ6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MHDPIJ6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python编程实战:运用设计模式、并发和程序库创建高质量程序</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B019ZRGBVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019ZRGBVU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Python绝技：运用Python成为顶级黑客</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0153177A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153177A6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Flask Web开发:基于Python的Web应用开发实战</a>》</li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01FSXCBOQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FSXCBOQ&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Android编程权威指南（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00SFZGX08/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZGX08&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">移动应用UI设计模式（第2版）</a>》</li>
</ul>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00NKZCM3U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NKZCM3U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">iOS编程实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B013UG2ULW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013UG2ULW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">iOS编程（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00DE60G3S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00DE60G3S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Objective-C高级编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IDSGY06/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IDSGY06&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法</a>》</li>
</ul>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B004R1QIJU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004R1QIJU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Head First PHP &amp; MySQL（中文版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005D6IRRY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005D6IRRY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入PHP：面向对象、模式与实践（第3版）</a>》</li>
</ul>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00IZW4DK8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IZW4DK8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C标准库</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00163LU68/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00163LU68&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C和指针</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0012NIW9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012NIW9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C专家编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0012UMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012UMPBY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C陷阱与缺陷</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01D10NSCM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01D10NSCM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C语言接口与实现</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011425T8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011425T8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C程序设计语言（第2版）</a>》</li>
<li>《C语言参考手册（第5版）》</li>
</ul>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00YLZIRHI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00YLZIRHI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++标准库</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005CFUQR0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005CFUQR0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++编程思想</a>》</li>
<li><span style="font-weight: normal;">《</span>C++语言的设计与演化<span style="font-weight: normal;">》</span></li>
<li>《<a href="https://www.amazon.cn/gp/product/B003VPX6YS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003VPX6YS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++程序设计原理与实践</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ESUIL0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ESUIL0O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++ Primer （中文第5版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00S6U4C6E/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S6U4C6E&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++ Primer习题集(第5版)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01I9BNASA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01I9BNASA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">C++程序设计语言(第1-3部分)(原书第4版)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004G72P24/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004G72P24&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Effective C++:改善程序与设计的55个具体做法(第3版)(中文版) </a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004IP8BD6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004IP8BD6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">More Effective C++:35个改善编程与设计的有效方法(中文版) </a>》
&nbsp;</li>
</ul>
<h2 id="机器学习和数据挖掘"><a href="#机器学习和数据挖掘" class="headerlink" title="机器学习和数据挖掘"></a>机器学习和数据挖掘</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00JUE9DXW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUE9DXW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据之巅</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00NTM5GK0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NTM5GK0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">矩阵分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B002WC7NH2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NH2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">机器学习</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007TSFMTA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007TSFMTA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">统计学习方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01AG3ZV9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AG3ZV9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">机器学习导论</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008AK5YJO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008AK5YJO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">推荐系统实践</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00D747PTK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D747PTK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">机器学习实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00AY830HS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AY830HS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Web数据挖掘</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B006PHIVNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006PHIVNA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入浅出统计学</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00116C3DY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116C3DY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">模式分类（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00264GG56/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00264GG56&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">概率论与数理统计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PRH2BXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PRH2BXA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">统计学习基础(第2版)(英文)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007NR0T4A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NR0T4A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据挖掘：概念与技术（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00K5I91WK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K5I91WK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数据挖掘：实用机器学习工具与技术（原书第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011I34CGA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011I34CGA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">大数据：互联网大规模数据挖掘与分布式处理（第2版）</a>》</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00H6X6M1A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6M1A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">SQL应用重构</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/0596009763/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=0596009763&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">SQL Cookbook</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00C1W58DE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00C1W58DE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">高性能MySQL （第3版）</a>》</li>
<li>《深入浅出SQL（中文版）》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ETOV48K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ETOV48K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">MySQL技术内幕 : InnoDB存储引擎（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KR87J8G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KR87J8G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">深入浅出MySQL : 数据库开发、优化与管理维护</a>》</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B003JBIV0S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003JBIV0S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">探索式软件测试</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PVOND2W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PVOND2W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">有效的单元测试</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00FH36R6G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00FH36R6G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">Google软件测试之道</a>》</li>
</ul>
<h2 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00VR8ZO28/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00VR8ZO28&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">人月神话</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001DBRWL0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001DBRWL0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">快速软件开发</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00MO7R1SG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MO7R1SG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">人件（原书第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBKRQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKRQ8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">门后的秘密：卓越管理的故事</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00BLZMG8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BLZMG8W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">极客与团队：软件工程师的团队生存秘笈</a>》</li>
</ul>
<h2 id="求职面试"><a href="#求职面试" class="headerlink" title="求职面试"></a>求职面试</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00G8VOQOG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G8VOQOG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员面试金典（第5版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00W5269HO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W5269HO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">编程之美 : 微软技术面试心得</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRM7S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM7S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">金领简历：敲开苹果、微软、谷歌的大门</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00L5LKMVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00L5LKMVU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">剑指Offer：名企面试官精讲典型编程题（纪念版）</a>》</li>
</ul>
<h2 id="编程之外"><a href="#编程之外" class="headerlink" title="编程之外"></a>编程之外</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B005DSK4W8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005DSK4W8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">暗时间</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P6OJ09C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ09C&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">数学之美</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ANY9KZE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ANY9KZE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">赢得朋友</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008MIFWJG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008MIFWJG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">精益创业</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00QPZARMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QPZARMA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">批判性思维</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00M2DKZNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZNA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">世界是数字的</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00A4H3JJS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00A4H3JJS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员的数学</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00N4LZ6RO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00N4LZ6RO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">程序员健康指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005O4PUFC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005O4PUFC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">禅与摩托车维修艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0081M8TZ2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0081M8TZ2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">关键对话：如何高效能沟通</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00EY8JUBO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EY8JUBO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">写作法宝：非虚构写作指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00G1ZT2C0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G1ZT2C0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">黑客与画家 : 来自计算机时代的高见</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00WDTQU8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WDTQU8M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">软件随想录（卷1）</a>》《<a href="https://www.amazon.cn/gp/product/B00WFT32FY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WFT32FY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">软件随想录（卷2）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ICWNKT6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ICWNKT6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="noopener">如何把事情做到最好：改变全球9800万人的人生指导书</a>》
<img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习资料 </tag>
            
            <tag> 经典编程书籍 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串查找算法总结]]></title>
      <url>http://linbingdong.com/2017/02/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>字符串匹配是字符串的一种基本操作：给定一个长度为 M 的文本和一个长度为 N 的模式串，在文本中找到一个和该模式相符的子字符串，并返回该字字符串在文本中的位置。</p>
<a id="more"></a>

<p>KMP 算法，全称是 Knuth-Morris-Pratt 算法，以三个发明者命名，开头的那个K就是著名科学家 Donald Knuth 。KMP 算法的关键是求 next 数组。next 数组的长度为模式串的长度。next 数组中每个值代表模式串中当前字符前面的字符串中，有多大长度的相同前缀后缀。</p>
<p>Boyer-Moore 算法在实际应用中比 KMP 算法效率高，据说各种文本编辑器的”查找”功能（Ctrl+F），包括 linux 里的 grep 命令，都是采用 Boyer-Moore 算法。该算法有“坏字符”和“好后缀”两个概念。主要特点是字符串从后往前匹配。</p>
<p>Sunday 算法跟 KMP 算法一样，是从前往后匹配。在匹配失败时，关注文本串中参加匹配的最末位字符的下一位字符，如果该字符不在模式串中，则整个模式串移动到该字符之后。如果该字符在模式串中，将模式串右移使对应的字符对齐。</p>
<p>关于这几种算法的详细介绍，可参考<a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">该博客</a>。</p>
<p>下面分别给出暴力匹配、KMP 算法、Boyer-Moore 算法和 Sunday 算法的 Java 实现。</p>
<h3 id="暴力匹配："><a href="#暴力匹配：" class="headerlink" title="暴力匹配："></a>暴力匹配：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">forceSearch</span><span class="params">(String txt, String pat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M = txt.length();</span><br><span class="line">    <span class="keyword">int</span> N = pat.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= M - N; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (txt.charAt(i + j) != pat.charAt(j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == N)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="KMP-算法："><a href="#KMP-算法：" class="headerlink" title="KMP 算法："></a>KMP 算法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">KMPSearch</span><span class="params">(String txt, String pat, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> M = txt.length();</span><br><span class="line">        <span class="keyword">int</span> N = pat.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; M &amp;&amp; j &lt; N) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || txt.charAt(i) == pat.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == N)</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getNext</span><span class="params">(String pat, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = pat.length();</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; N - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == -<span class="number">1</span> || pat.charAt(j) == pat.charAt(k)) &#123;</span><br><span class="line">                ++k;</span><br><span class="line">                ++j;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String txt = <span class="string">"BBC ABCDAB CDABABCDABCDABDE"</span>;</span><br><span class="line">        String pat = <span class="string">"ABCDABD"</span>;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pat.length()];</span><br><span class="line">        getNext(pat, next);</span><br><span class="line">        System.out.println(KMPSearch(txt, pat, next));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Boyer-Moore-算法"><a href="#Boyer-Moore-算法" class="headerlink" title="Boyer-Moore 算法"></a>Boyer-Moore 算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyerMoore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRight</span><span class="params">(String pat, <span class="keyword">int</span>[] right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">            right[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pat.length(); i++) &#123;</span><br><span class="line">            right[pat.charAt(i)] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BoyerMooreSearch</span><span class="params">(String txt, String pat, <span class="keyword">int</span>[] right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> M = txt.length();</span><br><span class="line">        <span class="keyword">int</span> N = pat.length();</span><br><span class="line">        <span class="keyword">int</span> skip;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= M - N; i += skip) &#123;</span><br><span class="line">            skip = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pat.charAt(j) != txt.charAt(i + j)) &#123;</span><br><span class="line">                    skip = j - right[txt.charAt(i + j)];</span><br><span class="line">                    <span class="keyword">if</span> (skip &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                        skip = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (skip == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String txt = <span class="string">"BBC ABCDAB AACDABABCDABCDABDE"</span>;</span><br><span class="line">        String pat = <span class="string">"ABCDABD"</span>;</span><br><span class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        getRight(pat,right);</span><br><span class="line">        System.out.println(BoyerMooreSearch(txt, pat, right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sunday算法"><a href="#Sunday算法" class="headerlink" title="Sunday算法"></a>Sunday算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sunday</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String pat, Character c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pat.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pat.charAt(i) == c)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SundaySearch</span><span class="params">(String txt, String pat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> M = txt.length();</span><br><span class="line">        <span class="keyword">int</span> N = pat.length();</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> skip = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= M - N; i += skip) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (txt.charAt(i + j) != pat.charAt(j))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == M - N)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    skip = N - getIndex(pat, txt.charAt(i + N));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == N)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String txt = <span class="string">"BBC ABCDAB AACDABABCDABCDABD"</span>;</span><br><span class="line">        String pat = <span class="string">"ABCDABD"</span>;</span><br><span class="line">        System.out.println(SundaySearch(txt, pat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 算法 </tag>
            
            <tag> KMP </tag>
            
            <tag> Boyer-Moore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python用yield生成杨辉三角]]></title>
      <url>http://linbingdong.com/2017/02/16/Python%E7%94%A8yield%E7%94%9F%E6%88%90%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      <content type="html"><![CDATA[<p>so funny</p>
<a id="more"></a>

<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">  n = <span class="number">0</span></span><br><span class="line">  line = [<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">yield</span>(line)</span><br><span class="line">    line.append(<span class="number">0</span>)</span><br><span class="line">    line = [line[i<span class="number">-1</span>] + line[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(line))]</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> triangles():</span><br><span class="line">  print(line)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]</span><br><span class="line">[1, 1]</span><br><span class="line">[1, 2, 1]</span><br><span class="line">[1, 3, 3, 1]</span><br><span class="line">[1, 4, 6, 4, 1]</span><br><span class="line">[1, 5, 10, 10, 5, 1]</span><br><span class="line">[1, 6, 15, 20, 15, 6, 1]</span><br><span class="line">[1, 7, 21, 35, 35, 21, 7, 1]</span><br><span class="line">[1, 8, 28, 56, 70, 56, 28, 8, 1]</span><br><span class="line">[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《腾讯传》读书笔记]]></title>
      <url>http://linbingdong.com/2017/01/01/%E3%80%8A%E8%85%BE%E8%AE%AF%E4%BC%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>腾讯+吴晓波。一个是互联网巨头，一个是著名的财经作家，必将碰撞出绚丽的火花。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://upload-images.jianshu.io/upload_images/1752522-0e9be9ca898e2a4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="腾讯传"></p>
<p>腾讯+吴晓波。一个是互联网巨头，一个是著名的财经作家，必将碰撞出绚丽的火花。</p>
<p>该书记录了腾讯崛起的经历，讲述了腾讯如何从通讯工具起步，逐渐进入到社交网络、互动娱乐、电子商务等领域。书中还列举了许多腾讯著名产品如QQ空间、微信等诞生的经过以及曾经轰动的“3Q”大战，相当精彩。</p>
<p>更难能可贵的是，书中还涉及到腾讯很多产品设计的哲学和运用到的心理学知识，产品经理应该能从本书中获得不少启发。</p>
<p>此外，创业者也可以看看此书，了解腾讯这个巨头在成长过程中遇到的风险和挫折，以及公司是如何解决这些问题的，这些对创业者来说也是满满的干货。</p>
<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ul>
<li>互联网公司取得成功的八字秘诀：小步快跑、试错迭代</li>
<li>跟那些走在时代前沿的人在一起，你也能走在时代前沿</li>
<li>拥抱变化，顺应时代潮流</li>
<li>不是万事俱备才去做，很多事情都是被逼出来的</li>
<li>任何事情都不是一帆风顺的，未来很难预料，要拥抱变化</li>
<li>有多个创始人的好处是在重要关头可以一起商量</li>
<li>创业路上运气也很重要</li>
<li>风水轮流转。抓住机遇，一切皆有可能</li>
<li>腾讯曾经被搜狐、新浪、雅虎和联想拒绝过</li>
<li>投资者应该深入人民群众的生活中，看看大家都在干什么、玩什么、用什么</li>
<li>创始人不要放弃公司的控制权</li>
<li>不到最后一刻绝不放弃。山重水复疑无路，柳暗花明又一村</li>
<li>想要创新，就要有敏锐的商业嗅觉</li>
<li>中国移动是在2000年从电信剥离出来的</li>
<li>每个国家的用户习惯可能不同，因此需要采取不同的策略，不同的商业模式</li>
<li>要敢于创新，做一些别人没做过的，比如QQ的会员制</li>
<li>企业运作过程中难免会走一些弯路，重要的是及时发现，及时挽救</li>
<li>产品中很多要用到心理学，比如QQ秀，其实是人们情感的寄托，装扮QQ秀的过程本质上是一次自我性格及身份确认的过程</li>
<li>产品要善于发掘人性，比如微信的摇一摇、附近的人等</li>
<li>腾讯内部的赛马机制——非顶层规划，谁提出，谁执行。这样做的好处的大家充分发挥自己的潜力，奇思妙想，而且很有动力，相当于内部孕育着很多创业公司</li>
<li>刘炽平在腾讯的发展过程中起了重大的作用，因此创业者要找到合适的人才</li>
<li>战略转型是激烈竞争的结果，而未必是事先成熟规划的产物，再次印证了要拥抱变化</li>
<li>当笼统的研发部已经不能满足需求，于是开始以产品为单位来划分</li>
<li>大权独揽，小权分散</li>
<li>开辟疆土是相对容易的，但如果统治能力的半径达不到疆域的半径的话，这样的帝国难以持久。因此企业也不要随意扩张，随意分散精力</li>
<li>腾讯战略：紧盯市场，以最快的方式复制成功者模式，利用QQ用户优势进行后发超越</li>
<li>创业初期很可能只能招到二流、三流的人才</li>
<li>有时候可以放任盗版，这样有助于产品流行起来，比如微软对windows的态度</li>
<li>互联网，唯快不破</li>
<li>程序员应该能提出一些新理念，并带来效果。不要只会实现功能，多思考</li>
<li>到用户中去</li>
<li>如果质量不过关，欲速则不达</li>
<li>QQ主要靠增值业务和虚拟道具挣钱，比如会员、QQ秀、QQ空间、QQ农场</li>
<li>QQ在腾讯其他业务的推广中起了极大的作用，包括游戏，还有QQ弹窗对腾讯网的导流等</li>
<li>紧盯市场热点，快速根据优化，利用自己的流量优势实现整体替代</li>
<li>扩张也会有风险，搞不好还会失去原本的优势</li>
<li>创业者要善于控制互联网舆论，比如3Q大战中的周鸿祎</li>
<li>互联网也是弱肉强食</li>
<li>互联网最好的审美观——极简主义</li>
<li>互联网产品能否成功的关键是在某一场景下的用户体验</li>
<li>产品经理更应该依靠直觉和感性，而非图表和分析，来把握用户需求</li>
<li>一个好的产品往往从不完美开始</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive on Spark调优]]></title>
      <url>http://linbingdong.com/2016/11/30/Hive%20on%20Spark%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<p>之前在<code>Hive on Spark</code>跑<code>TPCx-BB</code>测试时，100g的数据量要跑十几个小时，一看CPU和内存的监控，发现    <code>POWER_TEST</code>阶段（依次执行30个查询）CPU只用了百分之十几，也就是没有把整个集群的性能利用起来，导致跑得很慢。因此，如何调整参数，使整个集群发挥最大性能显得尤为重要。</p>
<a id="more"></a>

<h2 id="Spark作业运行原理"><a href="#Spark作业运行原理" class="headerlink" title="Spark作业运行原理"></a>Spark作业运行原理</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-30cb518018e5486b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-base-mech.jpg"></p>
<p>详细原理见上图。我们使用spark-submit提交一个Spark作业之后，这个作业就会启动一个对应的Driver进程。根据你使用的部署模式（deploy-mode）不同，Driver进程可能在本地启动，也可能在集群中某个工作节点上启动。Driver进程本身会根据我们设置的参数，占有一定数量的内存和CPU core。而Driver进程要做的第一件事情，就是向集群管理器（可以是Spark Standalone集群，也可以是其他的资源管理集群，美团•大众点评使用的是YARN作为资源管理集群）申请运行Spark作业需要使用的资源，这里的资源指的就是Executor进程。YARN集群管理器会根据我们为Spark作业设置的资源参数，在各个工作节点上，启动一定数量的Executor进程，每个Executor进程都占有一定数量的内存和CPU core。</p>
<p>Spark是根据shuffle类算子来进行stage的划分。如果我们的代码中执行了某个shuffle类算子（比如reduceByKey、join等），那么就会在该算子处，划分出一个stage界限来。可以大致理解为，shuffle算子执行之前的代码会被划分为一个stage，shuffle算子执行以及之后的代码会被划分为下一个stage。因此一个stage刚开始执行的时候，它的每个task可能都会从上一个stage的task所在的节点，去通过网络传输拉取需要自己处理的所有key，然后对拉取到的所有相同的key使用我们自己编写的算子函数执行聚合操作（比如reduceByKey()算子接收的函数）。这个过程就是shuffle。</p>
<p>task的执行速度是跟每个Executor进程的CPU core数量有直接关系的。一个CPU core同一时间只能执行一个线程。而每个Executor进程上分配到的多个task，都是以每个task一条线程的方式，多线程并发运行的。如果CPU core数量比较充足，而且分配到的task数量比较合理，那么通常来说，可以比较快速和高效地执行完这些task线程。</p>
<p>以上就是Spark作业的基本运行原理的说明，大家可以结合上图来理解。理解作业基本原理，是我们进行资源参数调优的基本前提。</p>
<h2 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h2><p>了解完了Spark作业运行的基本原理之后，对资源相关的参数就容易理解了。所谓的Spark资源参数调优，其实主要就是对Spark运行过程中各个使用资源的地方，通过调节各种参数，来优化资源使用的效率，从而提升Spark作业的执行性能。以下参数就是Spark中主要的资源参数，每个参数都对应着作业运行原理中的某个部分。</p>
<p><strong>num-executors/spark.executor.instances</strong></p>
<ul>
<li><p>参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。</p>
</li>
<li><p>参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。</p>
</li>
</ul>
<p><strong>executor-memory/spark.executor.memory</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。</p>
</li>
<li><p>参数调优建议：每个Executor进程的内存设置4G<del>8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1/3</del>1/2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。</p>
</li>
</ul>
<p><strong>executor-cores/spark.executor.cores</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。</p>
</li>
<li><p>参数调优建议：Executor的CPU core数量设置为2<del>4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，那么num-executors * executor-cores不要超过队列总CPU core的1/3</del>1/2左右比较合适，也是避免影响其他同学的作业运行。</p>
</li>
</ul>
<p><strong>driver-memory</strong></p>
<ul>
<li>参数说明：该参数用于设置Driver进程的内存。</li>
</ul>
<ul>
<li>参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。</li>
</ul>
<p><strong>spark.default.parallelism</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。</p>
</li>
<li><p>参数调优建议：Spark作业的默认task数量为500<del>1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2</del>3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。</p>
</li>
</ul>
<p><strong>spark.storage.memoryFraction</strong></p>
<ul>
<li><p>参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。</p>
</li>
<li><p>参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</p>
</li>
</ul>
<p><strong>spark.shuffle.memoryFraction</strong></p>
<ul>
<li><p>参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。</p>
</li>
<li><p>参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</p>
</li>
</ul>
<h2 id="调优过程"><a href="#调优过程" class="headerlink" title="调优过程"></a>调优过程</h2><h3 id="数据量：10g"><a href="#数据量：10g" class="headerlink" title="数据量：10g"></a>数据量：10g</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-7d2f266269a7638b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-29 上午10.39.00.png"></p>
<p>可以看出：</p>
<ul>
<li>随着每个executor占用的CPU core数增加，q04查询的时间显著下降，q03也下降，但幅度没那么大。</li>
</ul>
<p>本次调优只设置了<code>spark.executor.memory</code>和<code>spark.executor.cores</code>两个参数，没有涉及到<code>spark.executor.instances</code>参数，而默认的<code>spark.executor.instances</code>为2，也就是每个作业只用到2个executor，因此还没将性能发挥到最佳。</p>
<p>接下来采用100g的数据量，并且增加<code>spark.executor.instances</code>参数的设置。</p>
<h3 id="数据量：100g"><a href="#数据量：100g" class="headerlink" title="数据量：100g"></a>数据量：100g</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-129acaa890a2163e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-29 上午10.51.55.png"></p>
<p>可以看出：</p>
<ul>
<li>调优前后查询时间有了很大的飞跃；</li>
<li>增加<code>spark.executor.instances</code>设置项指定每个作业占用的executor个数后性能又有很大提升（通过监控我们发现此时CPU利用率平均有好几十，甚至可以高到百分之九十几）；</li>
<li>至此，我们终于将整个集群性能充分发挥出来，达到目的。</li>
</ul>
<p>最后一列配置项是根据美团技术团队博客的建议设置的，可以看出性能相比我们之前自己的设置还是有一定提升的，至少该博客里建议的设置是比较通用的，因此之后我们都采取最后一列的设置来跑<code>TPCx-BB</code>测试。</p>
<p>最后来张大图展示调优前和调优后跑100g数据的对比：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7181c6fa8ed0bb19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="调优前后100g.jpg.png"></p>
<p>可以看出：</p>
<ul>
<li>绝大多数查询调优前后查询时间有了极大的飞跃；</li>
<li>但是像q01/q04/q14…这几个查询，可能因为查询涉及到的表比较小，调优前时间就很短，因此调优后也看不出很多差别，如果想看到大的差别，可能需要提高数据量，比如1T，3T；</li>
<li>q10和q18调优前后时间都较长，而且调优后性能没有提升，需要再深入探索下是什么原因。</li>
</ul>
<p>最后，用调优后的集群，分别跑10g、30g、100g的数据，结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e4b1b02a7909468f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10g、30g、100g.jpg.png"></p>
<p>可以看出：</p>
<ul>
<li>随着数据量增大，很多查询时间并没有明显增加，可能是因为集群性能太强，而且数据量还不够大，可以增大数据量继续观察</li>
<li>对于q10、q18和q30，随着数据量增大，时间明显增大，需再深入分析</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://tech.meituan.com/spark-tuning-basic.html" target="_blank" rel="noopener">http://tech.meituan.com/spark-tuning-basic.html</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive on Spark安装配置详解]]></title>
      <url>http://linbingdong.com/2016/10/10/Hive%20on%20Spark%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录如何安装配置Hive on Spark，在执行以下步骤之前，请先确保已经安装Hadoop集群，Hive，MySQL，JDK，Scala，具体安装步骤不再赘述。</p>
<a id="more"></a>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Hive默认使用MapReduce作为执行引擎，即Hive on mr。实际上，Hive还可以使用Tez和Spark作为其执行引擎，分别为Hive on Tez和Hive on Spark。由于MapReduce中间计算均需要写入磁盘，而Spark是放在内存中，所以总体来讲Spark比MapReduce快很多。因此，Hive on Spark也会比Hive on mr快。为了对比Hive on Spark和Hive on mr的速度，需要在已经安装了Hadoop集群的机器上安装Spark集群（Spark集群是建立在Hadoop集群之上的，也就是需要先装Hadoop集群，再装Spark集群，因为Spark用了Hadoop的HDFS、YARN等），然后把Hive的执行引擎设置为Spark。</p>
<p>Spark运行模式分为三种1、Spark on YARN 2、Standalone Mode 3、Spark on Mesos。<br>Hive on Spark默认支持Spark on YARN模式，因此我们选择Spark on YARN模式。Spark on YARN就是使用YARN作为Spark的资源管理器。分为Cluster和Client两种模式。</p>
<h2 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a>一、环境说明</h2><p>本教程Hadoop相关软件全部基于CDH5.5.1，用yum安装，系统环境如下：</p>
<ul>
<li>操作系统：CentOS 7.2</li>
<li>Hadoop 2.6.0</li>
<li>Hive1.1.0</li>
<li>Spark1.5.0</li>
<li>MySQL 5.6</li>
<li>JDK 1.8</li>
<li>Maven 3.3.3</li>
<li>Scala 2.10</li>
</ul>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.117.51     Goblin01           nn1  jn1  rm1  worker  master  hive  metastore  mysql</span><br><span class="line">192.168.117.52     Goblin02    zk2    nn2  jn2  rm2  worker          hive</span><br><span class="line">192.168.117.53     Goblin03    zk3    dn1  jn3       worker          hive</span><br><span class="line">192.168.117.54     Goblin04    zk4    dn2            worker          hive</span><br></pre></td></tr></table></figure>

<p>说明：Goblin01~04是每台机器的hostname，zk代表zookeeper，nn代表hadoop的namenode，dn代表datanode，jn代表journalnode，rm代表resourcemanager，worker代表Spark的slaves，master代表Spark的master</p>
<h2 id="二、编译和安装Spark（Spark-on-YARN）"><a href="#二、编译和安装Spark（Spark-on-YARN）" class="headerlink" title="二、编译和安装Spark（Spark on YARN）"></a>二、编译和安装Spark（Spark on YARN）</h2><h3 id="2-1-编译Spark源码"><a href="#2-1-编译Spark源码" class="headerlink" title="2.1 编译Spark源码"></a>2.1 编译Spark源码</h3><p>要使用Hive on Spark，所用的Spark版本必须不包含Hive的相关jar包，hive on spark 的官网上说“Note that you must have a version of Spark which does not include the Hive jars”。在spark官网下载的编译的Spark都是有集成Hive的，因此需要自己下载源码来编译，并且编译的时候不指定Hive。</p>
<p>我们这里用的Spark源码是spark-1.5.0-cdh5.5.1版本,下载地址如下：</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.5.1-src.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.5.1-src.tar.gz</a></p>
<p>下载完后用 tar xzvf 命令解压，进入解压完的文件夹，准备编译。</p>
<p><strong>注意：编译前请确保已经安装JDK、Maven和Scala，maven为3.3.3及以上版本，并在/etc/profile里配置环境变量。</strong></p>
<p>命令行进入在源码根目录下，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./make-distribution.sh --name &quot;hadoop2-without-hive&quot; --tgz &quot;-Pyarn,hadoop-provided,hadoop-2.6,parquet-provided&quot;</span><br></pre></td></tr></table></figure>

<p>若编译过程出现内存不足的情况，需要在运行编译命令之前先运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export MAVEN_OPTS=&quot;-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m&quot;</span><br></pre></td></tr></table></figure>

<p>来设置Maven的内存。</p>
<p>编译过程由于要下载很多Maven依赖的jar包，需要时间较长（大概一两个小时），要保证网络状况良好，不然很容易编译失败。若出现以下结果，则编译成功：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-321065dbcb3c6608.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译成功.jpg"></p>
<p>编译成功后，会在源码根目录下多出一个文件(红色部分）：</p>
<p>spark-1.5.0-cdh5.5.1-bin-hadoop2-without-hive.tgz</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f4575e21c44dbbf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译完生成的文件.png"></p>
<h3 id="2-2-安装Spark"><a href="#2-2-安装Spark" class="headerlink" title="2.2 安装Spark"></a>2.2 安装Spark</h3><ul>
<li><p>将编译完生成的spark-1.5.0-cdh5.5.1-bin-hadoop2-without-hive.tgz拷贝到Spark的安装路径，并用 tar -xzvf 命令解压</p>
</li>
<li><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$vim /etc/profile</span><br><span class="line">export SPARK_HOME=spark安装路径</span><br><span class="line">$source /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-配置Spark"><a href="#2-3-配置Spark" class="headerlink" title="2.3 配置Spark"></a>2.3 配置Spark</h3><p>配置spark-env.sh、slaves和spark-defaults.conf三个文件</p>
<ul>
<li>spark-env.sh </li>
</ul>
<p>主要配置JAVA\_HOME、SCALA\_HOME、HADOOP\_HOME、HADOOP\_CONF\_DIR、SPARK\_MASTER\_IP等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java</span><br><span class="line">export SCALA_HOME=/root/scala</span><br><span class="line">export HADOOP_HOME=/usr/lib/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop </span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_LAUNCH_WITH_SCALA=0</span><br><span class="line">export SPARK_WORKER_MEMORY=1g</span><br><span class="line">export SPARK_DRIVER_MEMORY=1g</span><br><span class="line">export SPARK_MASTER_IP=192.168.117.51</span><br><span class="line">export SPARK_LIBRARY_PATH=/root/spark-without-hive/lib</span><br><span class="line">export SPARK_MASTER_WEBUI_PORT=18080</span><br><span class="line">export SPARK_WORKER_DIR=/root/spark-without-hive/work</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line">export SPARK_WORKER_PORT=7078</span><br><span class="line">export SPARK_LOG_DIR=/root/spark-without-hive/log</span><br><span class="line">export SPARK_PID_DIR=&apos;/root/spark-without-hive/run&apos;</span><br></pre></td></tr></table></figure>

<ul>
<li>slaves（将所有节点都加入，master节点同时也是worker节点）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Goblin01</span><br><span class="line">Goblin02</span><br><span class="line">Goblin03</span><br><span class="line">Goblin04</span><br></pre></td></tr></table></figure>

<ul>
<li>spark-defaults.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.master                     yarn-cluster</span><br><span class="line">spark.home                       /root/spark-without-hive</span><br><span class="line">spark.eventLog.enabled           true</span><br><span class="line">spark.eventLog.dir               hdfs://Goblin01:8020/spark-log</span><br><span class="line">spark.serializer                 org.apache.spark.serializer.KryoSerializer</span><br><span class="line">spark.executor.memory            1g</span><br><span class="line">spark.driver.memory              1g</span><br><span class="line">spark.executor.extraJavaOptions  -XX:+PrintGCDetails -Dkey=value -Dnumbers=&quot;one two three&quot;</span><br></pre></td></tr></table></figure>

<p>spark.master指定Spark运行模式，可以是yarn-client、yarn-cluster…</p>
<p>spark.home指定SPARK_HOME路径</p>
<p>spark.eventLog.enabled需要设为true</p>
<p>spark.eventLog.dir指定路径，放在master节点的hdfs中，端口要跟hdfs设置的端口一致（默认为8020），否则会报错</p>
<p>spark.executor.memory和spark.driver.memory指定executor和dirver的内存，512m或1g，既不能太大也不能太小，因为太小运行不了，太大又会影响其他服务</p>
<h2 id="三、配置YARN"><a href="#三、配置YARN" class="headerlink" title="三、配置YARN"></a>三、配置YARN</h2><p>配置yarn-site.xml，跟hdfs-site.xml在同一个路径下（$HADOOP_HOME/etc/hadoop)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.resourcemanager.scheduler.class&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="四、配置Hive"><a href="#四、配置Hive" class="headerlink" title="四、配置Hive"></a>四、配置Hive</h2><ul>
<li>添加spark依赖到hive(将spark-assembly-1.5.0-cdh5.5.1-hadoop2.6.0.jar拷贝到$HIVE\_HOME/lib目录下）</li>
</ul>
<p>进入SPARK\_HOME</p>
<pre><code>cp spark-assembly-1.5.0-cdh5.5.1-hadoop2.6.0.jar /usr/lib/hive/lib</code></pre><ul>
<li>配置hive-site.xml</li>
</ul>
<p>配置的内容与spark-defaults.conf相同，只是形式不一样,以下内容是追加到hive-site.xml文件中的,并且注意前两个配置，如果不设置hive的spark引擎用不了，在后面会有详细的错误说明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.execution.engine&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;spark&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.enable.spark.execution.engine&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.home&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/root/spark-without-hive&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.master&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;yarn-client&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.enentLog.enabled&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.enentLog.dir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;hdfs://Goblin01:8020/spark-log&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.serializer&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.spark.serializer.KryoSerializer&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.executor.memeory&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1g&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.driver.memeory&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1g&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;spark.executor.extraJavaOptions&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;-XX:+PrintGCDetails -Dkey=value -Dnumbers=&quot;one two three&quot;&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="五、验证是否安装配置成功"><a href="#五、验证是否安装配置成功" class="headerlink" title="五、验证是否安装配置成功"></a>五、验证是否安装配置成功</h2><h3 id="1-验证Spark集群"><a href="#1-验证Spark集群" class="headerlink" title="1.验证Spark集群"></a>1.验证Spark集群</h3><p><strong>注意：在启动Spark集群之前，要确保Hadoop集群和YARN均已启动</strong></p>
<ul>
<li>进入$SPARK_HOME目录，执行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<p>用jps命令查看51节点上的master和worker，52、53、54节点上的worker是否都启动了</p>
<ul>
<li>同样在$SPARK_HOME目录下，提交计算Pi的任务，验证Spark集群是否能正常工作，运行如下命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn --deploy-mode client lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</span><br></pre></td></tr></table></figure>

<p>若无报错，并且算出Pi的值，说明Spark集群能正常工作</p>
<h3 id="2-验证Hive-on-Spark是否可用"><a href="#2-验证Hive-on-Spark是否可用" class="headerlink" title="2.验证Hive on Spark是否可用"></a>2.验证Hive on Spark是否可用</h3><ul>
<li>命令行输入 hive，进入hive CLI</li>
<li>set hive.execution.engine=spark; (将执行引擎设为Spark，默认是mr，退出hive CLI后，回到默认设置。若想让引擎默认为Spark，需要在hive-site.xml里设置）</li>
<li>create table test(ts BIGINT,line STRING); (创建表）</li>
<li>select count(*) from test;</li>
<li>若整个过程没有报错，并出现正确结果，则Hive on Spark配置成功。</li>
</ul>
<h2 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h2><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><p>编译spark基于maven有两种方式</p>
<ul>
<li>用mvn 命令编译</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./build/mvn -Pyarn -Phadoop-2.6 -Dhadoop.version=2.6.0 -DskipTests clean package</span><br></pre></td></tr></table></figure>

<p>编译到倒数MQTT模块一直报错，而且编译出的文件比较大，不适合安装集群，因此不推荐。使用Intellij IDEA maven 插件报错如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-569bec7cf6264afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-build-fail.png"></p>
<ul>
<li>使用spark提供的预编译脚本，网络状况稳定，会编译出需要的安装版本，<strong><em>推荐</em></strong>。命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./make-distribution.sh --name &quot;hadoop2-without-hive&quot; --tgz &quot;-Pyarn,hadoop-provided,hadoop-2.6,parquet-provided&quot;</span><br></pre></td></tr></table></figure>

<p>结果如上文所述。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi  --master yarn  lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b0e45240c1db92a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-fail.png"></p>
<p>原因：</p>
<p>hdfs的默认端口为8020 ，而我们在spark-default.conf中配置成了8021端口，导致连接不上HDFS报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.eventLog.enabled           true</span><br><span class="line">spark.eventLog.dir              hdfs://Goblin01:8021/spark-log</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>配置spark-default.conf中的spark.eventLog.dir 为本地路径，也就是不持久化日志到hdfs上，也就没有和hdfs的通行</p>
<p>or</p>
<p>spark-default.conf 注释掉 spark.eventLog.enabled   true</p>
<p>or</p>
<p>在spark-default.conf里配置的eventLog端口跟hdfs的默认端口（8020）一致</p>
<p>or</p>
<p>由于配置的hdfs是高可用的，51,52都可以作为namenode,我们的spark集群的主节点在51上，当51上的namenode变成standby，导致无法访问hdfs的8020端口（hdfs默认端口），也就是说在51上读不出hdfs上spark-log的内容，在spark-default.conf中配置为spark.eventLog.dir   hdfs://Goblin01:8021/spark-log，如果发生这种情况，直接kill掉52，让namenode只在51上运行。（这个后面要搭建spark的高可用模式解决）</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>运行：</p>
<p>在hive里设置引擎为spark，执行select count(*) from a; </p>
<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to execute spark task, with exception &apos;org.apache.hadoop.hive.ql.metadata.HiveException(Unsupported execution engine: Spark. Please set hive.execution.engine=mr)&apos;</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>这是因为CDH版的Hive默认运行支持Hive on Spark（By default, Hive on Spark is not enabled）.</p>
<p>需要用cloudera manager（cloudera官网给的的方法，但是要装cloudera manager，比较麻烦，不建议）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Go to the Hive service.</span><br><span class="line">Click the Configuration tab.</span><br><span class="line">Enter Enable Hive on Sparkin the Search field.</span><br><span class="line">Check the box for Enable Hive on Spark (Unsupported).</span><br><span class="line">Locate the Spark On YARN Service and click SPARK_ON_YARN.</span><br><span class="line">Click Save Changes to commit the changes.</span><br></pre></td></tr></table></figure>

<p>或者</p>
<p>在hive-site.xml添加配置(简单、推荐）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.enable.spark.execution.engine&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>终端输入hive无法启动hive CLI</p>
<p>原因：namenode挂了</p>
<p>解决：重启namenode</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn --deploy-mode client lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>没有报错，但是出现以下情况，停不下来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-5752bec7fb013e94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="停不下来.png"></p>
<p>原因：</p>
<ol>
<li>ResourceManager或者NodeManager挂掉，一直没有NodeManager响应，任务无法执行，所有停不下来。</li>
<li>还有一种情况是spark有别的application在运行，导致本次spark任务的等待或者失败</li>
</ol>
<p>解决：</p>
<ol>
<li>对于原因1，重启ResourceManager和NodeManager。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service hadoop-yarn-resourcemanager start;</span><br><span class="line">service hadoop-yarn-nodemanager start;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对于原因2，解决办法是在hadoop配置文件中设置yarn的并行度，在<code>/etc/hadoop/conf/capacity-scheduler.xml</code>文件中配置yarn.scheduler.capacity.maximum-am-resource-percent from 0.1 to 0.5</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;yarn.scheduler.capacity.maximum-am-resource-percent&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;0.5&lt;/value&gt;</span><br><span class="line">   &lt;description&gt;</span><br><span class="line">     Maximum percent of resources in the cluster which can be used to run</span><br><span class="line">     application masters i.e. controls number of concurrent running</span><br><span class="line">     applications.</span><br><span class="line">   &lt;/description&gt;</span><br><span class="line"> &lt;/property&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/Hive+on+Spark:+Getting+Started" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/Hive+on+Spark:+Getting+Started</a></li>
<li><a href="http://www.cloudera.com/documentation/enterprise/5-5-x/topics/admin_hos_config.html" target="_blank" rel="noopener">http://www.cloudera.com/documentation/enterprise/5-5-x/topics/admin_hos_config.html</a></li>
<li><a href="http://spark.apache.org/docs/latest/building-spark.html" target="_blank" rel="noopener">http://spark.apache.org/docs/latest/building-spark.html</a></li>
<li><a href="http://stackoverflow.com/questions/31743586/apache-spark-running-locally-giving-refused-connection-error" target="_blank" rel="noopener">http://stackoverflow.com/questions/31743586/apache-spark-running-locally-giving-refused-connection-error</a></li>
<li><a href="http://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi" target="_blank" rel="noopener">http://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi</a></li>
<li><a href="http://www.voidcn.com/blog/tianyiii/article/p-5986990.html" target="_blank" rel="noopener">http://www.voidcn.com/blog/tianyiii/article/p-5986990.html</a></li>
<li><a href="http://www.imooc.com/article/8613" target="_blank" rel="noopener">http://www.imooc.com/article/8613</a></li>
<li><a href="http://lxw1234.com/archives/2016/05/673.htm" target="_blank" rel="noopener">http://lxw1234.com/archives/2016/05/673.htm</a><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
