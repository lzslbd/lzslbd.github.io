<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java 中定义常量的几种方法]]></title>
      <url>http://linbingdong.com/2017/03/03/Java%20%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>主要有三种：接口、类和枚举。</p>
<a id="more"></a>
<p><strong>接口：</strong></p>
<ol>
<li>在接口里定义域(接口中会对域自动加上 <code>public static final</code> ，使之成为常量)</li>
<li>类实现该接口即可在类中调用该常量</li>
</ol>
<p><strong>类：</strong></p>
<p>直接用 <code>public static final</code> 定义常量。</p>
<p><strong>枚举：</strong></p>
<p>在枚举类中直接写上常量值。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Signal sg = <span class="keyword">new</span> Signal();</div><div class="line">        System.out.println(<span class="string">"interface method: "</span> + sg.RED);</div><div class="line">        SignalClassField scf = <span class="keyword">new</span> SignalClassField();</div><div class="line">        System.out.println(<span class="string">"class method: "</span> + scf.RED);</div><div class="line">        System.out.println(<span class="string">"emun method: "</span> + SignalEnum.RED.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//interface method</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SignalInterface</span> </span>&#123;</div><div class="line">    String RED = <span class="string">"InterfaceRED"</span>;</div><div class="line">    String GREEN = <span class="string">"GREEN"</span>;</div><div class="line">    String YELLOW = <span class="string">"YELLOW"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span> <span class="keyword">implements</span> <span class="title">SignalInterface</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//class method</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignalClassField</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RED = <span class="string">"ClassRED"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GREEN = <span class="string">"GREEN"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YELLOW = <span class="string">"YELLOW"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//enum method</span></div><div class="line"><span class="keyword">enum</span> SignalEnum &#123;</div><div class="line">    RED, GREEN, YELLOW</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface method: InterfaceRED</div><div class="line">class method: ClassRED</div><div class="line">emun method: RED</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[102] Binary Tree Level Order Traversal]]></title>
      <url>http://linbingdong.com/2017/03/01/LeetCode%5B102%5D%20Binary%20Tree%20Level%20Order%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<a id="more"></a>
<p>For example:<br>Given binary tree [3,9,20,null,null,15,7],</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [9,20],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure>
<p><strong>分析:</strong></p>
<p>使用队列。每出来一个将它的左右子节点依次加入。</p>
<p><strong>代码:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> result;</div><div class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</div><div class="line">        TreeNode n = root;</div><div class="line">        q.offer(n);</div><div class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</div><div class="line">            List&lt;Integer&gt; levelList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">            <span class="keyword">int</span> num = q.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</div><div class="line">                TreeNode temp = q.poll();</div><div class="line">                levelList.add(temp.val);</div><div class="line">                <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) q.offer(temp.left);</div><div class="line">                <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) q.offer(temp.right);</div><div class="line">            &#125;</div><div class="line">            result.add(levelList);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 关键字 static 、final 总结]]></title>
      <url>http://linbingdong.com/2017/03/01/Java%20%E5%85%B3%E9%94%AE%E5%AD%97%20static%20%E3%80%81final%20%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>static 和 final 是 Java 里两个关键字，在此对它们的用法做个总结。</p>
<a id="more"></a>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>被 static 修饰的域或方法属于类，独立于具体的对象。通过类名就可以直接调用，不需要实例化。访问时直接用<code>类名.static 域</code>和<code>类名.static 方法</code>即可。</p>
<p><strong>static 域：</strong></p>
<p>如果将域定义为 static ，每个类中只有一个这样的域。该类的所有对象都共享该 static 域。</p>
<p><strong>static 方法：</strong></p>
<p>static 方法可以通过类名直接调用，该类的任何对象也可以调用（但不推荐）。</p>
<ol>
<li>static 方法不能使用 this 和 super 关键字。</li>
<li>static 方法只能访问 static 域，不能访问实例域，因为实例域是与特定的对象相关联的。</li>
<li>static 方法必须被实现，而不能是 abstract 方法。</li>
</ol>
<p>以下两种情况可以考虑使用 static 方法：</p>
<ol>
<li>一个方法不需要访问对象状态，所需参数都是通过显示参数提供（如：Math.pow）</li>
<li>一个方法只需访问类的 static 域。</li>
</ol>
<p><strong>static 代码块：</strong></p>
<p>static 代码块，是在类中独立于类成员的 static 语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM 加载类时会执行这些静态的代码块，如果 static 代码块有多个，JVM 将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。所有 static 代码块都在 main 方法之前执行。</p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final 可以修饰域、方法和类。</p>
<p><strong>final 域：</strong></p>
<p>被 final 修饰的域是常量，值一旦给定就无法改变。</p>
<p><strong>final 方法：</strong></p>
<p>如果某个类不允许其子类覆盖某个方法，可以将该方法声明为 final 方法。</p>
<p>使用 final 方法有两个原因：</p>
<ol>
<li>防止子类覆盖该方法，修改它的意义和实现。</li>
<li>提高效率。编译器遇到 final 方法就会使用内联机制。</li>
</ol>
<p><strong>final 类：</strong></p>
<p>final 类不能被继承。final 类中的方法自动成为 final 方法，因为不能被继承，也就不会被覆盖。</p>
<p>使用 final 类和 final 方法的目的都是为了确保它们不会在子类中改变语义。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串查找算法总结（暴力匹配、KMP 算法、Boyer-Moore 算法和 Sunday 算法）]]></title>
      <url>http://linbingdong.com/2017/02/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E4%B9%8B%E6%9A%B4%E5%8A%9B%E5%8C%B9%E9%85%8D%20&amp;&%20KMP/</url>
      <content type="html"><![CDATA[<p>字符串匹配是字符串的一种基本操作：给定一个长度为 M 的文本和一个长度为 N 的模式串，在文本中找到一个和该模式相符的子字符串，并返回该字字符串在文本中的位置。</p>
<a id="more"></a>
<p>KMP 算法，全称是 Knuth-Morris-Pratt 算法，以三个发明者命名，开头的那个K就是著名科学家 Donald Knuth 。KMP 算法的关键是求 next 数组。next 数组的长度为模式串的长度。next 数组中每个值代表模式串中当前字符前面的字符串中，有多大长度的相同前缀后缀。</p>
<p>Boyer-Moore 算法在实际应用中比 KMP 算法效率高，据说各种文本编辑器的”查找”功能（Ctrl+F），包括 linux 里的 grep 命令，都是采用 Boyer-Moore 算法。该算法有“坏字符”和“好后缀”两个概念。主要特点是字符串从后往前匹配。</p>
<p>Sunday 算法跟 KMP 算法一样，是从前往后匹配。在匹配失败时，关注文本串中参加匹配的最末位字符的下一位字符，如果该字符不在模式串中，则整个模式串移动到该字符之后。如果该字符在模式串中，将模式串右移使对应的字符对齐。</p>
<p>关于这几种算法的详细介绍，可参考<a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="external">该博客</a>。</p>
<p>下面分别给出暴力匹配、KMP 算法、Boyer-Moore 算法和 Sunday 算法的 Java 实现。</p>
<h3 id="暴力匹配："><a href="#暴力匹配：" class="headerlink" title="暴力匹配："></a>暴力匹配：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">forceSearch</span><span class="params">(String txt, String pat)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> M = txt.length();</div><div class="line">    <span class="keyword">int</span> N = pat.length();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= M - N; i++) &#123;</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (txt.charAt(i + j) != pat.charAt(j))</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j == N)</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="KMP-算法："><a href="#KMP-算法：" class="headerlink" title="KMP 算法："></a>KMP 算法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">KMPSearch</span><span class="params">(String txt, String pat, <span class="keyword">int</span>[] next)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> M = txt.length();</div><div class="line">        <span class="keyword">int</span> N = pat.length();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; M &amp;&amp; j &lt; N) &#123;</div><div class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || txt.charAt(i) == pat.charAt(j)) &#123;</div><div class="line">                i++;</div><div class="line">                j++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                j = next[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j == N)</div><div class="line">            <span class="keyword">return</span> i - j;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getNext</span><span class="params">(String pat, <span class="keyword">int</span>[] next)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> N = pat.length();</div><div class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> k = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (j &lt; N - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (k == -<span class="number">1</span> || pat.charAt(j) == pat.charAt(k)) &#123;</div><div class="line">                ++k;</div><div class="line">                ++j;</div><div class="line">                next[j] = k;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                k = next[k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String txt = <span class="string">"BBC ABCDAB CDABABCDABCDABDE"</span>;</div><div class="line">        String pat = <span class="string">"ABCDABD"</span>;</div><div class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pat.length()];</div><div class="line">        getNext(pat, next);</div><div class="line">        System.out.println(KMPSearch(txt, pat, next));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Boyer-Moore-算法"><a href="#Boyer-Moore-算法" class="headerlink" title="Boyer-Moore 算法"></a>Boyer-Moore 算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyerMoore</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRight</span><span class="params">(String pat, <span class="keyword">int</span>[] right)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</div><div class="line">            right[i] = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pat.length(); i++) &#123;</div><div class="line">            right[pat.charAt(i)] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BoyerMooreSearch</span><span class="params">(String txt, String pat, <span class="keyword">int</span>[] right)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> M = txt.length();</div><div class="line">        <span class="keyword">int</span> N = pat.length();</div><div class="line">        <span class="keyword">int</span> skip;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= M - N; i += skip) &#123;</div><div class="line">            skip = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">                <span class="keyword">if</span> (pat.charAt(j) != txt.charAt(i + j)) &#123;</div><div class="line">                    skip = j - right[txt.charAt(i + j)];</div><div class="line">                    <span class="keyword">if</span> (skip &lt; <span class="number">1</span>)&#123;</div><div class="line">                        skip = <span class="number">1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (skip == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String txt = <span class="string">"BBC ABCDAB AACDABABCDABCDABDE"</span>;</div><div class="line">        String pat = <span class="string">"ABCDABD"</span>;</div><div class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        getRight(pat,right);</div><div class="line">        System.out.println(BoyerMooreSearch(txt, pat, right));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Sunday算法"><a href="#Sunday算法" class="headerlink" title="Sunday算法"></a>Sunday算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sunday</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String pat, Character c)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pat.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (pat.charAt(i) == c)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SundaySearch</span><span class="params">(String txt, String pat)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> M = txt.length();</div><div class="line">        <span class="keyword">int</span> N = pat.length();</div><div class="line">        <span class="keyword">int</span> i, j;</div><div class="line">        <span class="keyword">int</span> skip = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= M - N; i += skip) &#123;</div><div class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (txt.charAt(i + j) != pat.charAt(j))&#123;</div><div class="line">                    <span class="keyword">if</span> (i == M - N)</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    skip = N - getIndex(pat, txt.charAt(i + N));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (j == N)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String txt = <span class="string">"BBC ABCDAB AACDABABCDABCDABD"</span>;</div><div class="line">        String pat = <span class="string">"ABCDABD"</span>;</div><div class="line">        System.out.println(SundaySearch(txt, pat));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 算法 </tag>
            
            <tag> KMP </tag>
            
            <tag> Boyer-Moore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python日志模块示例]]></title>
      <url>http://linbingdong.com/2017/02/20/Python%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>给出Python日志模块显示配置和文件配置两种方式的示例</p>
<a id="more"></a>
<h2 id="显示配置"><a href="#显示配置" class="headerlink" title="显示配置"></a>显示配置</h2><p>在程序中直接调用函数来设置参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="comment"># 创建一个logger</span></div><div class="line">logger = logging.getLogger(<span class="string">'example'</span>)</div><div class="line">logger.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个输出到控制台的handler</span></div><div class="line">sh = logging.StreamHandler()</div><div class="line">sh.setLevel(logging.ERROR)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个输出到文件的handler</span></div><div class="line">fh = logging.FileHandler(<span class="string">'loggingtest.log'</span>)</div><div class="line">fh.setLevel(logging.INFO)</div><div class="line"></div><div class="line"><span class="comment"># 设置输出格式</span></div><div class="line">fmt = logging.Formatter(<span class="string">'%(asctime)s - %(threadName)s - [%(levelname)s] : %(message)s'</span>)</div><div class="line"></div><div class="line"><span class="comment"># handler设置formatter</span></div><div class="line">sh.setFormatter(fmt)</div><div class="line">fh.setFormatter(fmt)</div><div class="line"></div><div class="line"><span class="comment"># logger添加handler</span></div><div class="line">logger.addHandler(sh)</div><div class="line">logger.addHandler(fh)</div><div class="line"></div><div class="line"><span class="comment"># 写日志</span></div><div class="line">logger.debug(<span class="string">'debug message'</span>)</div><div class="line">logger.info(<span class="string">'info message'</span>)</div><div class="line">logger.warn(<span class="string">'warn message'</span>)</div><div class="line">logger.error(<span class="string">'error message'</span>)</div><div class="line">logger.critical(<span class="string">'critical message'</span>)</div></pre></td></tr></table></figure>
<h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><p>通过配置文件进行配置，使用fileConfig()函数读取配置文件</p>
<ul>
<li>配置文件 logging.conf :</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[loggers]</div><div class="line">keys=root,example01</div><div class="line"></div><div class="line">[logger_root]</div><div class="line">level=DEBUG</div><div class="line">handlers=hand01,hand02</div><div class="line"></div><div class="line">[logger_example01]</div><div class="line">handlers=hand01,hand02</div><div class="line">qualname=example01</div><div class="line">propagate=0</div><div class="line"></div><div class="line">[handlers]</div><div class="line">keys=hand01,hand02</div><div class="line"></div><div class="line">[handler_hand01]</div><div class="line">class=StreamHandler</div><div class="line">level=INFO</div><div class="line">formatter=form02</div><div class="line">args=(sys.stderr,)</div><div class="line"></div><div class="line">[handler_hand02]</div><div class="line">class=FileHandler</div><div class="line">level=DEBUG</div><div class="line">formatter=form01</div><div class="line">args=(&apos;log.log&apos;,&apos;a&apos;)</div><div class="line"></div><div class="line">[formatters]</div><div class="line">keys=form01,form02</div><div class="line"></div><div class="line">[formatter_form01]</div><div class="line">format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s</div><div class="line"></div><div class="line">[formatter_form02]</div><div class="line">format=%(asctime)s - %(threadName)s - [%(levelname)s] : %(message)s</div></pre></td></tr></table></figure>
<ul>
<li>程序 LogByFile.py :</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.config</div><div class="line"></div><div class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">'example01'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 写日志</span></div><div class="line">logger.debug(<span class="string">'debug message'</span>)</div><div class="line">logger.info(<span class="string">'info message'</span>)</div><div class="line">logger.warn(<span class="string">'warn message'</span>)</div><div class="line">logger.error(<span class="string">'error message'</span>)</div><div class="line">logger.critical(<span class="string">'critical message'</span>)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[经典编程书籍]]></title>
      <url>http://linbingdong.com/2017/02/20/%E7%BB%8F%E5%85%B8%E7%BC%96%E7%A8%8B%E4%B9%A6%E7%B1%8D/</url>
      <content type="html"><![CDATA[<p>经典技术书籍，涵盖：计算机系统与网络、系统架构、算法与数据结构、前端开发、后端开发、移动开发、数据库、测试、项目与团队、程序员职业修炼、求职面试和编程相关的经典书籍。</p>
<p><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="external">原文</a></p>
<a id="more"></a>
<p>这个列表综合了伯乐在线网站以往推荐<a href="http://blog.jobbole.com/tag/book/" target="_blank" rel="external">经典书籍</a>文章中的列表，以及在微信和微博中被广泛推荐的好书。虽然已经包括了100多本，覆盖的面也比较全。仍然有很多方面需要补充，而且相信还有很多没有被收录的好书。欢迎大家在 issues 中推荐或自荐。</p>
<h2 id="计算机系统与网络"><a href="#计算机系统与网络" class="headerlink" title="计算机系统与网络"></a>计算机系统与网络</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00AAQXKXS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AAQXKXS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">图灵的秘密:他的生平、思想及论文解读</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F9OQE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F9OQE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">计算机系统概论</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F5RYM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5RYM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入理解Linux内核</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B003QN7J7U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003QN7J7U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入Linux内核架构</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00116OTVS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116OTVS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">TCP/IP详解 卷1：协议</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JUM2ML4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUM2ML4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Linux系统编程（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004X3Z3D4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004X3Z3D4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Linux内核设计与实现（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004BJ18KM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004BJ18KM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入理解计算机系统（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011AP7RY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011AP7RY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">计算机程序的构造和解释（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B009RSXIB4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009RSXIB4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编码：隐匿在计算机软硬件背后的语言</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0140I5WPK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0140I5WPK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">性能之颠：洞悉系统、企业与云计算</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011S72JB6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011S72JB6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">UNIX网络编程 卷1：套接字联网API（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B012R5A29O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B012R5A29O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">UNIX网络编程 卷2：进程间通信</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001GS7918/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001GS7918&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Windows核心编程(第5版)</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PB5QQ84/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PB5QQ84&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">WireShark网络分析就这么简单</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01AS1OS8A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AS1OS8A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">WireShark网络分析的艺术</a>》</li>
</ul>
<h2 id="编程通用"><a href="#编程通用" class="headerlink" title="编程通用"></a>编程通用</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B006P7V73G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006P7V73G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程原本</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0061XKRXA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">代码大全</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">UNIX编程艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0031M9GHC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">代码整洁之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00SFZH0DC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZH0DC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程珠玑（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0150BMQDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0150BMQDM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程珠玑（续）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IOAM6VE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IOAM6VE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">软件调试的艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KMJ2Q1U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KMJ2Q1U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">修改代码的艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007HYMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007HYMPBY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程语言实现模式</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008B4DTG4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008B4DTG4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编写可读代码的艺术</a>》</li>
<li>《解析极限编程：拥抱变化》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008UCHA58/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008UCHA58&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">精通正则表达式（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001NGO85I/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001NGO85I&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编译原理（第2版）</a>》龙书</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011LPUB42/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011LPUB42&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">重构：改善既有代码的设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRM3M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM3M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">七周七语言：理解多种编程范型</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBLUFK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBLUFK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">调试九法：软硬件错误的排查之道</a>》</li>
<li>《程序设计语言：实践之路（第3版）》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PG0MM3C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PG0MM3C&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">计算的本质：深入剖析程序和计算机</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001130JN8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">设计模式 : 可复用面向对象软件的基础</a>》</li>
</ul>
<h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B009OCFQ0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009OCFQ0O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">算法（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00AK7BYJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AK7BYJY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">算法导论（原书第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B019NB0VCI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019NB0VCI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python算法教程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00S4HCQUI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S4HCQUI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">算法设计与分析基础（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B016DWSF8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSF8M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">学习 JavaScript 数据结构与算法,编程题</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LDG2DSG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LDG2DSG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据结构与算法,编程题分析 : C++描述（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B002WC7NGS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NGS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据结构与算法,编程题分析 : C语言描述（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01CNP0CG6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01CNP0CG6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据结构与算法,编程题分析 : Java语言描述（第2版）</a>》</li>
</ul>
<h2 id="职业修炼与规划"><a href="#职业修炼与规划" class="headerlink" title="职业修炼与规划"></a>职业修炼与规划</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00KQDTZ4S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KQDTZ4S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">大教堂与集市</a>》</li>
<li>《卓有成效的程序员》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LZJ8L9J/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LZJ8L9J&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员的职业素养</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004GV08CY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004GV08CY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员修炼之道：从小工到专家</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00H6X6LD4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6LD4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">软件开发者路线图：从学徒到高手</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBKDGM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKDGM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">我编程，我快乐: 程序员职业规划之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007VARUIM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VARUIM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员的思维修炼：开发认知潜能的九堂课</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00OA9L3NU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00OA9L3NU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">高效程序员的45个习惯：敏捷开发修炼之道(修订版)</a>》</li>
</ul>
<h2 id="大师访谈"><a href="#大师访谈" class="headerlink" title="大师访谈"></a>大师访谈</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00451BP72/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00451BP72&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程大师智慧</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRKMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRKMA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程大师访谈录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00QA7GA2Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QA7GA2Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程人生 : 15位软件先驱访谈录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007ED88CI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007ED88CI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">奇思妙想 : 15位计算机天才及其重大发现</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008G80O9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008G80O9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">图灵和ACM图灵奖</a>》</li>
</ul>
<h2 id="架构-性能"><a href="#架构-性能" class="headerlink" title="架构/性能"></a>架构/性能</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01ER75V6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75V6O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">微服务设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00NGW4EAG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NGW4EAG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">大数据日知录</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B003LBSRDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003LBSRDM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">企业应用架构模式</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JMKWHFU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JMKWHFU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Web性能权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01M0EHQ43/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M0EHQ43&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">SRE：Google运维解密</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0153178XM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153178XM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">发布！软件的设计与部署</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HZFHQQI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HZFHQQI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">高扩展性网站的 50 条原则</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00F3Z26G8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00F3Z26G8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">大型网站技术架构:核心原理与案例分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00EP6TGAU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EP6TGAU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">恰如其分的软件架构：风险驱动的设计方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CMMUXC4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CMMUXC4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">软件系统架构：使用视点和视角与利益相关者合作（第2版）</a>》</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B013SGB2AO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013SGB2AO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">高性能 JavaScript</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0089TDFNS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0089TDFNS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">锋利的 jQuery（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B016DWSEWO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSEWO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript 忍者秘籍</a>》（感谢<a href="https://github.com/jobbole/awesome-programming-books/issues?q=is%3Aissue+is%3Aopen+author%3Ajoker-danta" target="_blank" rel="external">@joker-danta</a> 补充推荐）</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00BQ7RMW0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BQ7RMW0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编写可维护的 JavaScript</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00W34DZ8K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W34DZ8K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">你不知道的 JavaScript（上）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007VISQ1Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VISQ1Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript 权威指南（第6版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0097CON2S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript 语言精粹（修订版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004VJM5KE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004VJM5KE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript DOM编程艺术 （第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007OQQVMY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007OQQVMY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript 高级程序设计（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00JVLEYY2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JVLEYY2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">JavaScript 异步编程：设计快速响应的网络应用</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00GMXI1QY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GMXI1QY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Effective JavaScript：编写高质量JavaScript代码的68个有效方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00H706BIG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H706BIG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">HTML5 权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B015316VJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B015316VJY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">HTML5 秘籍（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00K58535O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K58535O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">HTML5 与 CSS3 基础教程（第八版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01ET3FO86/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ET3FO86&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">CSS 揭秘</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00M2DKZ1W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZ1W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">CSS 设计指南（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F5SIC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5SIC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">CSS 权威指南（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01LXL42O5/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LXL42O5&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入浅出 HTML 与 CSS</a>》</li>
</ul>
<h2 id="Java开发"><a href="#Java开发" class="headerlink" title="Java开发"></a>Java开发</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01ER75QC8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75QC8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java8 实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0077K9XHW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0077K9XHW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java并发编程实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01DLB7Z66/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01DLB7Z66&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java性能权威指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00E0D2OX4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00E0D2OX4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java程序员修炼之道</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B017MEN094/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B017MEN094&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">实战Java高并发程序设计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java编程思想 （第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HI0BUF8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HI0BUF8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入理解Java虚拟机（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001PTGR52/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001PTGR52&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Effective java 中文版（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01M22BGUQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M22BGUQ&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java核心技术·卷1：基础知识（原书第9版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IK7SM6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IK7SM6O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Java核心技术·卷2：高级特性（原书第9版）</a>》</li>
</ul>
<h2 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00DVDDP0K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00DVDDP0K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">精通C#（第6版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00J94AG2A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00J94AG2A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入理解C#（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P8VZ8T4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P8VZ8T4&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">CLR via C#（第4版）</a>》</li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00UI93JD8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00UI93JD8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">集体智慧编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P6OJ0TC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ0TC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">笨办法学Python</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KAFX65Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KAFX65Q&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python基础教程</a>》</li>
<li>《Python源码剖析》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007NB2B4M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NB2B4M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Head First Python</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00HECW20S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00HECW20S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">与孩子一起学编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004TUJ7A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004TUJ7A6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python学习手册（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00WKR1OKG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WKR1OKG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python Cookbook（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01MCUN37Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01MCUN37Y&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python参考手册（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01FQAS0KK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FQAS0KK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python核心编程（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01HCVUJFA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HCVUJFA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python科学计算（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00GHGZLWS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GHGZLWS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">利用 Python 进行数据分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01ION3W54/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ION3W54&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Think Python：像计算机科学家一样思考Python（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00MHDPIJ6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MHDPIJ6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python编程实战:运用设计模式、并发和程序库创建高质量程序</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B019ZRGBVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019ZRGBVU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Python绝技：运用Python成为顶级黑客</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0153177A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153177A6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Flask Web开发:基于Python的Web应用开发实战</a>》</li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B01FSXCBOQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FSXCBOQ&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Android编程权威指南（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00SFZGX08/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZGX08&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">移动应用UI设计模式（第2版）</a>》</li>
</ul>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00NKZCM3U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NKZCM3U&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">iOS编程实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B013UG2ULW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013UG2ULW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">iOS编程（第4版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00DE60G3S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00DE60G3S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Objective-C高级编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00IDSGY06/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IDSGY06&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法</a>》</li>
</ul>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B004R1QIJU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004R1QIJU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Head First PHP &amp; MySQL（中文版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005D6IRRY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005D6IRRY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入PHP：面向对象、模式与实践（第3版）</a>》</li>
</ul>
<h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00IZW4DK8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IZW4DK8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C标准库</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00163LU68/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00163LU68&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C和指针</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0012NIW9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012NIW9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C专家编程</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0012UMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012UMPBY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C陷阱与缺陷</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01D10NSCM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01D10NSCM&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C语言接口与实现</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0011425T8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011425T8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C程序设计语言（第2版）</a>》</li>
<li>《C语言参考手册（第5版）》</li>
</ul>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00YLZIRHI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00YLZIRHI&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++标准库</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005CFUQR0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005CFUQR0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++编程思想</a>》</li>
<li><span style="font-weight: normal;">《</span>C++语言的设计与演化<span style="font-weight: normal;">》</span></li>
<li>《<a href="https://www.amazon.cn/gp/product/B003VPX6YS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003VPX6YS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++程序设计原理与实践</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ESUIL0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ESUIL0O&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++ Primer （中文第5版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00S6U4C6E/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S6U4C6E&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++ Primer习题集(第5版)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01I9BNASA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01I9BNASA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">C++程序设计语言(第1-3部分)(原书第4版)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004G72P24/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004G72P24&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Effective C++:改善程序与设计的55个具体做法(第3版)(中文版) </a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B004IP8BD6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004IP8BD6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">More Effective C++:35个改善编程与设计的有效方法(中文版) </a>》<br>&nbsp;</li>
</ul>
<h2 id="机器学习和数据挖掘"><a href="#机器学习和数据挖掘" class="headerlink" title="机器学习和数据挖掘"></a>机器学习和数据挖掘</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00JUE9DXW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUE9DXW&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据之巅</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00NTM5GK0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NTM5GK0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">矩阵分析</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B002WC7NH2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NH2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">机器学习</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007TSFMTA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007TSFMTA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">统计学习方法</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B01AG3ZV9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AG3ZV9K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">机器学习导论</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008AK5YJO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008AK5YJO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">推荐系统实践</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00D747PTK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D747PTK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">机器学习实战</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00AY830HS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AY830HS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Web数据挖掘</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B006PHIVNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006PHIVNA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入浅出统计学</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00116C3DY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116C3DY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">模式分类（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00264GG56/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00264GG56&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">概率论与数理统计</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PRH2BXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PRH2BXA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">统计学习基础(第2版)(英文)</a> 》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B007NR0T4A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NR0T4A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据挖掘：概念与技术（第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00K5I91WK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K5I91WK&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数据挖掘：实用机器学习工具与技术（原书第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B011I34CGA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011I34CGA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">大数据：互联网大规模数据挖掘与分布式处理（第2版）</a>》</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00H6X6M1A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6M1A&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">SQL应用重构</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/0596009763/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=0596009763&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">SQL Cookbook</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00C1W58DE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00C1W58DE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">高性能MySQL （第3版）</a>》</li>
<li>《深入浅出SQL（中文版）》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ETOV48K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ETOV48K&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">MySQL技术内幕 : InnoDB存储引擎（第2版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00KR87J8G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KR87J8G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">深入浅出MySQL : 数据库开发、优化与管理维护</a>》</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B003JBIV0S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003JBIV0S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">探索式软件测试</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00PVOND2W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PVOND2W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">有效的单元测试</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00FH36R6G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00FH36R6G&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">Google软件测试之道</a>》</li>
</ul>
<h2 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00VR8ZO28/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00VR8ZO28&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">人月神话</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B001DBRWL0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001DBRWL0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">快速软件开发</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00MO7R1SG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MO7R1SG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">人件（原书第3版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00CBBKRQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKRQ8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">门后的秘密：卓越管理的故事</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00BLZMG8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BLZMG8W&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">极客与团队：软件工程师的团队生存秘笈</a>》</li>
</ul>
<h2 id="求职面试"><a href="#求职面试" class="headerlink" title="求职面试"></a>求职面试</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B00G8VOQOG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G8VOQOG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员面试金典（第5版）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00W5269HO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W5269HO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">编程之美 : 微软技术面试心得</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ALPRM7S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM7S&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">金领简历：敲开苹果、微软、谷歌的大门</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00L5LKMVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00L5LKMVU&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">剑指Offer：名企面试官精讲典型编程题（纪念版）</a>》</li>
</ul>
<h2 id="编程之外"><a href="#编程之外" class="headerlink" title="编程之外"></a>编程之外</h2><ul>
<li>《<a href="https://www.amazon.cn/gp/product/B005DSK4W8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005DSK4W8&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">暗时间</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00P6OJ09C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ09C&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">数学之美</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ANY9KZE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ANY9KZE&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">赢得朋友</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B008MIFWJG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008MIFWJG&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">精益创业</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00QPZARMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QPZARMA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">批判性思维</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00M2DKZNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZNA&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">世界是数字的</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00A4H3JJS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00A4H3JJS&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员的数学</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00N4LZ6RO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00N4LZ6RO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">程序员健康指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B005O4PUFC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005O4PUFC&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">禅与摩托车维修艺术</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B0081M8TZ2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0081M8TZ2&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">关键对话：如何高效能沟通</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00EY8JUBO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EY8JUBO&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">写作法宝：非虚构写作指南</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00G1ZT2C0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G1ZT2C0&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">黑客与画家 : 来自计算机时代的高见</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00WDTQU8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WDTQU8M&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">软件随想录（卷1）</a>》《<a href="https://www.amazon.cn/gp/product/B00WFT32FY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WFT32FY&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">软件随想录（卷2）</a>》</li>
<li>《<a href="https://www.amazon.cn/gp/product/B00ICWNKT6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ICWNKT6&amp;linkCode=as2&amp;tag=vastwork-23" target="_blank" rel="external">如何把事情做到最好：改变全球9800万人的人生指导书</a>》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习资料 </tag>
            
            <tag> 经典编程书籍 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式一致性算法：Raft 算法（Raft 论文翻译）]]></title>
      <url>http://linbingdong.com/2017/02/19/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%EF%BC%9ARaft%20%E7%AE%97%E6%B3%95%EF%BC%88Raft%20%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Raft 算法是可以用来替代 Paxos 算法的分布式一致性算法，而且 raft 算法比 Paxos 算法更易懂且更容易实现。本文对 raft 论文进行翻译，希望能有助于读者更方便地理解 raft 的思想。如果对 Paxos 算法感兴趣，可以看我的另一篇文章：<a href="http://linbingdong.com/2016/12/30/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A8%E5%AF%BC/">分布式系列文章——Paxos算法原理与推导</a></p>
<a id="more"></a>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Raft 是用来管理复制日志（replicated log）的一致性协议。它跟 multi-Paxos 作用相同，效率也相当，但是它的组织结构跟 Paxos 不同。这使得 Raft 比 Paxos 更容易理解并且更容易在工程实践中实现。为了使 Raft 协议更易懂，Raft 将一致性的关键元素分开，如 leader 选举、日志复制和安全性，并且它实施更强的一致性以减少必须考虑的状态的数量。用户研究的结果表明，Raft 比 Paxos 更容易学习。 Raft 还包括一个用于变更集群成员的新机制，它使用重叠的大多数（overlapping majorities）来保证安全性。</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>一致性算法允许多台机器作为一个集群协同工作，并且在其中的某几台机器出故障时集群仍然能正常工作。 正因为如此，一致性算法在建立可靠的大规模软件系统方面发挥了关键作用。 在过去十年中，Paxos [15,16] 主导了关于一致性算法的讨论：大多数一致性的实现都是基于 Paxos 或受其影响，Paxos 已成为用于教授学生一致性相关知识的主要工具。</p>
<p>不幸的是，Paxos 实在是太难以理解，尽管许多人一直在努力尝试使其更易懂。 此外，其架构需要复杂的改变来支持实际系统。 结果是，系统开发者和学生都在与 Paxos 斗争。</p>
<p>在我们自己与 Paxos 斗争之后，我们开始着手寻找一个新的一致性算法，可以为系统开发和教学提供更好的基础。 我们的方法是不寻常的，因为我们的主要目标是可理解性：我们可以为实际系统定义一个一致性算法，并以比 Paxos 更容易学习的方式描述它吗？在该算法的设计过程中，重要的不仅是如何让该算法起作用，还有清晰地知道该算法为什么会起作用。</p>
<p>这项工作的结果是一个称为 Raft 的一致性算法。 在设计 Raft 时，我们使用了特定的技术来提高可理解性，包括分解（Raft 分离 leader 选举，日志复制和安全）和状态空间减少（相对于 Paxos ，Raft 减少了不确定性程度和服务器之间彼此不一致的方式 ）。 一项针对两个大学的 43 名学生的用户研究表明，Raft 比 Paxos 更容易理解：在学习两种算法后，其中 33 名学生能够更好地回答关于 Raft 的问题。</p>
<p>Raft 在许多方面类似于现有的一致性算法（尤其是 Oki 和 Liskov 的 Viewstamped Replication [29,22]），但它有几个新特性：</p>
<ul>
<li><strong>Strong leader</strong>：在 Raft 中，日志条目（log entries）只从 leader 流向其他服务器。 这简化了复制日志的管理，使得 raft 更容易理解。</li>
<li><strong>Leader 选举</strong>：Raft 使用随机计时器进行 leader 选举。 这只需在任何一致性算法都需要的心跳（heartbeats）上增加少量机制，同时能够简单快速地解决冲突。</li>
<li><strong>成员变更</strong>：Raft 使用了一种新的联合一致性方法，其中两个不同配置的大多数在过渡期间重叠。 这允许集群在配置更改期间继续正常运行。</li>
</ul>
<p>我们认为，Raft 优于 Paxos 和其他一致性算法，不仅在教学方面，在工程实现方面也是。 它比其他算法更简单且更易于理解; 它被描述得十分详细足以满足实际系统的需要; 它有多个开源实现，并被多家公司使用; 它的安全性已被正式规定和验证; 它的效率与其他算法相当。</p>
<p>本文的剩余部分介绍了复制状态机问题（第 2 节），讨论了 Paxos 的优点和缺点（第3节），描述了我们实现易理解性的方法（第 4 节），提出了 Raft 一致性算法（第 5-8 节），评估 Raft（第 9 节），并讨论了相关工作（第 10 节）。</p>
<h2 id="2-复制状态机"><a href="#2-复制状态机" class="headerlink" title="2 复制状态机"></a>2 复制状态机</h2><p>一致性算法是在复制状态机[37]的背景下产生的。 在这种方法中，一组服务器上的状态机计算相同状态的相同副本，并且即使某些服务器宕机，也可以继续运行。</p>
<p>复制状态机用于解决分布式系统中的各种容错问题。 例如，具有单个 leader 的大规模系统，如 GFS [8]，HDFS [38] 和 RAMCloud [33] ，通常使用单独的复制状态机来进行 leader 选举和存储 leader 崩溃后重新选举需要的配置信息。Chubby [2] 和 ZooKeeper [11] 都是复制状态机。</p>
<p>复制状态机通常使用复制日志实现，如图 1 所示。每个服务器存储一个包含一系列命令的日志，其状态机按顺序执行日志中的命令。 每个日志中命令都相同并且顺序也一样，因此每个状态机处理相同的命令序列。 这样就能得到相同的状态和相同的输出序列。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b2e0dc4401aefd3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<p>一致性算法的工作就是保证复制日志的一致性。 每台服务器上的一致性模块接收来自客户端的命令，并将它们添加到其日志中。 它与其他服务器上的一致性模块通信，以确保每个日志最终以相同的顺序包含相同的命令，即使有一些服务器失败。 一旦命令被正确复制，每个服务器上的状态机按日志顺序处理它们，并将输出返回给客户端。 这样就形成了高可用的复制状态机。</p>
<p>实际系统中的一致性算法通常具有以下属性：</p>
<ul>
<li><p>它们确保在所有非拜占庭条件下（包括网络延迟，分区和数据包丢失，重复和乱序）的安全性（不会返回不正确的结果）。</p>
</li>
<li><p>只要任何大多数（过半）服务器都可以运行，并且可以相互通信和与客户通信，一致性算法就可用。 因此，五台服务器的典型集群可以容忍任何两台服务器的故障。 假设服务器突然宕机，它们可以稍后从状态恢复并重新加入群集。</p>
</li>
<li><p>它们不依赖于时序来确保日志的一致性：错误的时钟和极端消息延迟在最坏的情况下会导致可用性问题（译者注：言外之意是可以保证一致性）。</p>
</li>
<li><p>在通常情况下，只要集群的大部分（过半服务器）已经响应了单轮远程过程调用，命令就可以完成; 少数（一半以下）慢服务器不会影响整个系统性能。</p>
</li>
</ul>
<h2 id="3-Paxos-存在的问题"><a href="#3-Paxos-存在的问题" class="headerlink" title="3 Paxos 存在的问题"></a>3 Paxos 存在的问题</h2><p>在过去十年里，Leslie Lamport 的 Paxos 协议[15]几乎成为一致性的同义词：它是课堂上教授最多的一致性协议，并且大多数一致性的实现也以它为起点。 Paxos 首先定义了能够在单个决策（例如单个复制日志条目）上达成一致的协议。 我们将这个子集称为 single-decree Paxos。 然后 Paxos 组合该协议的多个实例以促进一系列决策，例如日志（multi-Paxos）。 Paxos能够确保安全性和活性，并且支持集群成员的变更。它的正确性已被证明，并且在正常情况下是高效的。</p>
<p>不幸的是，Paxos 有两个显著的缺点。 第一个缺点是 Paxos 非常难以理解。 Paxos 的描述晦涩难懂，臭名昭著（译者注：《The Part-time Parliament》比较晦涩难懂，但是《Paxos Made Simple》就比较容易理解）; 很少有人成功地理解它，即使能理解也必须付出巨大的努力。 因此，已有几个尝试用更简单的方式来描述 Paxos [16,20,21] 。 这些描述集中在 single-degree Paxos ，但它们仍然具有挑战性。 在对 NSDI 2012 参会者的非正式调查中，我们发现很少有人喜欢 Paxos ，即使是经验丰富的研究人员。 我们自己也跟 Paxos 进行了艰苦的斗争; 我们也无法完全理解整个协议，直到阅读了几个更简单的描述和自己设计替代 Paxos 的协议，整个过程花了将近一年。</p>
<p>Paxos 晦涩难懂的原因是作者选择了single-degree Paxos作为基础。Single-decree Paxos 分成两个阶段，这两个阶段没有简单直观的说明，并且不能被单独理解。因此，很难理解为什么该算法能起作用。Multi-Paxos 的合成规则又增加了许多复杂性。我们相信，对多个决定（日志而不是单个日志条目）达成一致的总体问题可以用其他更直接和更明显的方式进行分解。</p>
<p>Paxos的第二个问题是它不能为构建实际的实现提供良好的基础。 一个原因是没有针对 multi-Paxos 的广泛同意的算法。 Lamport的描述主要是关于 single-decree Paxos; 他描述了 multi-Paxos 的可能方法，但缺少许多细节。 已经有几个尝试来具体化和优化 Paxos ，例如[26]，[39]和[13]，但这些彼此各不相同并且跟 Lamport 描述的也不同。 像Chubby [4] 这样的系统已经实现了类 Paxos（Paxos-like）算法，但大多数情况下，它们的细节并没有公布。</p>
<p>此外，Paxos 的架构对于构建实际系统来说是一个糟糕的设计，这是 single-decree 分解的另一个结果。 例如，独立地选择日志条目集合，然后再将它们合并到顺序日志中几乎没有任何好处，这只会增加复杂性。 围绕日志设计系统是更简单和有效的方法，新日志条目按照约束顺序地添加到日志中。 Paxos 的做法适用于只需要做一次决策的情况，如果需要做一系列决策，更简单和快速的方法是先选择一个 leader ，然后让该 leader 协调这些决策。</p>
<p>因此，实际的系统跟 Paxos 相差很大。几乎所有的实现都是从 Paxos 开始，然后发现很多实现上的难题，接着就开发了一种和 Paxos 完全不一样的架构。这样既费时又容易出错，而且 Paxos 本身晦涩难懂使得该问题更加严重。Paxos 的公式可能可以很好地证明它的正确性，但是现实的系统和 Paxos 差别是如此之大，以至于这些证明并没有什么太大的价值。下面来自 Chubby 作者的评论非常典型：</p>
<blockquote>
<p>在Paxos算法描述和实现现实系统之间有着巨大的鸿沟。最终的系统往往建立在一个还未被证明的协议之上。</p>
</blockquote>
<p>由于以上问题，我们得出的结论是 Paxos 算法没有为系统实践和教学提供一个良好的基础。考虑到一致性问题在大规模软件系统中的重要性，我们决定尝试设计一个能够替代 Paxos 并且具有更好特性的一致性算法。Raft算法就是这次实验的结果。</p>
<h2 id="4-为可理解性而设计"><a href="#4-为可理解性而设计" class="headerlink" title="4 为可理解性而设计"></a>4 为可理解性而设计</h2><p>在设计 Raft 算法过程中我们有几个目标：它必须提供一个完整的实际的系统实现基础，这样才能大大减少开发者的工作；它必须在任何情况下都是安全的并且在典型的应用条件下是可用的；并且在正常情况下是高效的。但是我们最重要的目标也是最大的挑战是可理解性。它必须保证能够被大多数人容易地理解。另外，它必须能够让人形成直观的认识，这样系统的构建者才能够在现实中进行扩展。</p>
<p>在设计 Raft 算法的时候，很多情况下我们需要在多个备选方案中进行选择。在这种情况下，我们基于可理解性来评估备选方案：解释各个备选方案的难道有多大（例如，Raft 的状态空间有多复杂，是否有微妙的含义）？对于一个读者而言，完全理解这个方案和含义是否容易？</p>
<p>我们意识到这样的分析具有高度的主观性；但是我们使用了两种通用的技术来解决这个问题。第一个技术就是众所周知的问题分解：只要有可能，我们就将问题分解成几个相对独立的，可被解决的、可解释的和可理解的子问题。例如，Raft 算法被我们分成 leader 选举，日志复制，安全性和成员变更几个部分。</p>
<p>我们使用的第二个方法是通过减少状态的数量来简化状态空间，使得系统更加连贯并且尽可能消除不确定性。特别的，所有的日志是不允许有空洞的，并且 Raft 限制了使日志之间不一致的方式。尽管在大多数情况下我们都试图去消除不确定性，但是在某些情况下不确定性可以提高可理解性。特别是，随机化方法虽然引入了不确定性，但是他们往往能够通过使用相近的方法处理可能的选择来减少状态空间。我们使用随机化来简化 Raft 中的 leader 选举算法。</p>
<h2 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5 Raft 一致性算法"></a>5 Raft 一致性算法</h2><p>Raft 是一种用来管理第 2 节中描述的复制日志的算法。图 2 是该算法的浓缩，可用作参考，图 3 列举了该算法的一些关键特性。图中的这些内容将在剩下的章节中逐一介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-07c1c597333affd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-15c4d42eb6548a93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p>
<p>Raft 通过首先选举一个 distinguished leader，然后让它全权负责管理复制日志来实现一致性。Leader 从客户端接收日志条目，把日志条目复制到其他服务器上，并且在保证安全性的时候通知其他服务器将日志条目应用到他们的状态机中。拥有一个 leader 大大简化了对复制日志的管理。例如，leader 可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都是从 leader 流向其他服务器。leader 可能宕机，也可能和其他服务器断开连接，这时一个新的 leader 会被选举出来。</p>
<p>通过选举一个 leader 的方式，Raft 将一致性问题分解成了三个相对独立的子问题，这些问题将会在接下来的子章节中进行讨论：</p>
<ul>
<li><strong>Leader 选举</strong>：当前的 leader 宕机时，一个新的 leader 必须被选举出来。（5.2 节）</li>
<li><strong>日志复制</strong>：Leader 必须从客户端接收日志条目然后复制到集群中的其他节点，并且强制要求其他节点的日志和自己的保持一致。</li>
<li><strong>安全性</strong>：Raft 中安全性的关键是图 3 中状态机的安全性：如果有任何的服务器节点已经应用了一个特定的日志条目到它的状态机中，那么其他服务器节点不能在同一个日志索引位置应用一条不同的指令。章节 5.4 阐述了 Raft 算法是如何保证这个特性的；该解决方案在选举机制（5.2 节）上增加了额外的限制。</li>
</ul>
<p>在展示一致性算法之后，本章节将讨论可用性的一些问题以及时序在系统中的作用。</p>
<h3 id="5-1-Raft-基础"><a href="#5-1-Raft-基础" class="headerlink" title="5.1 Raft 基础"></a>5.1 Raft 基础</h3><p>一个 Raft 集群包含若干个服务器节点；通常是 5 个，这样的系统可以容忍 2 个节点的失效。在任何时刻，每一个服务器节点都处于这三个状态之一：leader、follower 或者 candidate 。在正常情况下，集群中只有一个 leader 并且其他的节点全部都是 follower 。Follower 都是被动的：他们不会发送任何请求，只是简单的响应来自 leader 和 candidate 的请求。Leader 处理所有的客户端请求（如果一个客户端和 follower 通信，follower 会将请求重定向给 leader）。第三种状态，candidate ，是用来选举一个新的 leader（章节 5.2）。图 4 展示了这些状态和他们之间的转换关系；这些转换关系在接下来会进行讨论。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b308efb041bee9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p>
<p>Raft 把时间分割成任意长度的任期（term），如图 5 所示。任期用连续的整数标记。每一段任期从一次选举开始，一个或者多个 candidate 尝试成为 leader 。如果一个 candidate 赢得选举，然后他就在该任期剩下的时间里充当 leader 。在某些情况下，一次选举无法选出 leader 。在这种情况下，这一任期会以没有 leader 结束；一个新的任期（包含一次新的选举）会很快重新开始。Raft 保证了在任意一个任期内，最多只有一个 leader 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a405ff884cfcac10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p>
<p>不同的服务器节点观察到的任期转换的次数可能不同，在某些情况下，一个服务器节点可能没有看到 leader 选举过程或者甚至整个任期全程。任期在 Raft 算法中充当逻辑时钟的作用，这使得服务器节点可以发现一些过期的信息比如过时的 leader 。每一个服务器节点存储一个当前任期号，该编号随着时间单调递增。服务器之间通信的时候会交换当前任期号；如果一个服务器的当前任期号比其他的小，该服务器会将自己的任期号更新为较大的那个值。如果一个 candidate 或者 leader 发现自己的任期号过期了，它会立即回到 follower 状态。如果一个节点接收到一个包含过期的任期号的请求，它会直接拒绝这个请求。</p>
<p>Raft 算法中服务器节点之间使用 RPC 进行通信，并且基本的一致性算法只需要两种类型的 RPC。请求投票（RequestVote） RPC 由 candidate 在选举期间发起（章节 5.2），追加条目（AppendEntries）RPC 由 leader 发起，用来复制日志和提供一种心跳机制（章节 5.3）。第 7 节为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPC 来获得最佳的性能。</p>
<h3 id="5-2-Leader-选举"><a href="#5-2-Leader-选举" class="headerlink" title="5.2 Leader 选举"></a>5.2 Leader 选举</h3><p>Raft 使用一种心跳机制来触发 leader 选举。当服务器程序启动时，他们都是 follower 。一个服务器节点只要能从 leader 或 candidate 处接收到有效的 RPC 就一直保持 follower 状态。Leader 周期性地向所有 follower 发送心跳（不包含日志条目的 AppendEntries RPC）来维持自己的地位。如果一个 follower 在一段选举超时时间内没有接收到任何消息，它就假设系统中没有可用的 leader ，然后开始进行选举以选出新的 leader 。</p>
<p>要开始一次选举过程，follower 先增加自己的当前任期号并且转换到 candidate 状态。然后投票给自己并且并行地向集群中的其他服务器节点发送 RequestVote RPC（让其他服务器节点投票给它）。Candidate 会一直保持当前状态直到以下三件事情之一发生：(a) 它自己赢得了这次的选举（收到过半的投票），(b) 其他的服务器节点成为 leader ，(c) 一段时间之后没有任何获胜者。这些结果会在下面的章节里分别讨论。</p>
<p>当一个 candidate 获得集群中过半服务器节点针对同一个任期的投票，它就赢得了这次选举并成为 leader 。对于同一个任期，每个服务器节点只会投给一个 candidate ，按照先来先服务（first-come-first-served）的原则（注意：5.4 节在投票上增加了额外的限制）。要求获得过半投票的规则确保了最多只有一个 candidate 赢得此次选举（图 3 中的选举安全性）。一旦 candidate 赢得选举，就立即成为 leader 。然后它会向其他的服务器节点发送心跳消息来确定自己的地位并阻止新的选举。</p>
<p>在等待投票期间，candidate 可能会收到另一个声称自己是 leader 的服务器节点发来的 AppendEntries RPC 。如果这个 leader 的任期号（包含在RPC中）不小于 candidate 当前的任期号，那么 candidate 会承认该 leader 的合法地位并回到 follower 状态。 如果 RPC 中的任期号比自己的小，那么 candidate 就会拒绝这次的 RPC 并且继续保持 candidate 状态。</p>
<p>第三种可能的结果是 candidate 既没有赢得选举也没有输：如果有多个 follower 同时成为 candidate ，那么选票可能会被瓜分以至于没有 candidate 赢得过半的投票。当这种情况发生时，每一个候选人都会超时，然后通过增加当前任期号来开始一轮新的选举。然而，如果没有其他机制的话，该情况可能会无限重复。</p>
<p>Raft 算法使用随机选举超时时间的方法来确保很少发生选票瓜分的情况，就算发生也能很快地解决。为了阻止选票一开始就被瓜分，选举超时时间是从一个固定的区间（例如 150-300 毫秒）随机选择。这样可以把服务器都分散开以至于在大多数情况下只有一个服务器会选举超时；然后该服务器赢得选举并在其他服务器超时之前发送心跳。同样的机制被用来解决选票被瓜分的情况。每个 candidate 在开始一次选举的时候会重置一个随机的选举超时时间，然后一直等待直到选举超时；这样减小了在新的选举中再次发生选票瓜分情况的可能性。9.3 节展示了该方案能够快速地选出一个 leader 。</p>
<p>选举的例子可以很好地展示可理解性是如何指导我们选择设计方案的。起初我们打算使用一种等级系统（ranking system）：每一个 candidate 都被赋予一个唯一的等级（rank），等级用来在竞争的 candidate 之间进行选择。如果一个 candidate 发现另一个 candidate 拥有更高的等级，它就会回到 follower 状态，这样高等级的 candidate 能够更加容易地赢得下一次选举。但是我们发现这种方法在可用性方面会有一下小问题。我们对该算法进行了多次调整，但是每次调整之后都会有新的小问题。最终我们认为随机重试的方法更加显然且易于理解。</p>
<h3 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3 日志复制"></a>5.3 日志复制</h3><p>Leader 一旦被选举出来，就开始为客户端请求提供服务。客户端的每一个请求都包含一条将被复制状态机执行的指令。Leader 把该指令作为一个新的条目追加到日志中去，然后并行的发起 AppendEntries RPC 给其他的服务器，让它们复制该条目。当该条目被安全地复制（下面会介绍），leader 会应用该条目到它的状态机中（状态机执行该指令）然后把执行的结果返回给客户端。如果 follower 崩溃或者运行缓慢，或者网络丢包，leader 会不断地重试 AppendEntries RPC（即使已经回复了客户端）直到所有的 follower 最终都存储了所有的日志条目。</p>
<p>日志以图 6 展示的方式组织。每个<strong>日志条目</strong>存储一条<strong>状态机指令</strong>和 leader 收到该指令时的<strong>任期号</strong>。任期号用来检测多个日志副本之间的不一致情况，同时也用来保证图 3 中的某些性质。每个日志条目都有一个整数索引值来表明它在日志中的位置。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6ceba6710280cbaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p>
<p>Leader 决定什么时候把日志条目应用到状态机中是安全的；这种日志条目被称为<strong>已提交的</strong>。Raft 算法保证所有已提交的日志条目都是持久化的并且最终会被所有可用的状态机执行。一旦创建该日志条目的 leader 将它复制到过半的服务器上，该日志条目就会被提交（例如在图 6 中的条目 7）。同时，leader 日志中该日志条目之前的所有日志条目也都会被提交，包括由其他 leader 创建的条目。5.4 节讨论在 leader 变更之后应用该规则的一些细节，并且证明了这种提交的规则是安全的。Leader 追踪将会被提交的日志条目的最大索引，未来的所有 AppendEntries RPC 都会包含该索引，这样其他的服务器才能最终知道哪些日志条目需要被提交。Follower 一旦知道某个日志条目已经被提交就会将该日志条目应用到自己的本地状态机中（按照日志的顺序）。</p>
<p>我们设计了 Raft 日志机制来维持不同服务器之间日志高层次的一致性。这么做不仅简化了系统的行为也使得系统行为更加可预测，同时该机制也是保证安全性的重要组成部分。Raft 维护着以下特性，这些同时也构成了图 3 中的日志匹配特性：</p>
<ul>
<li>如果不同日志中的两个条目拥有相同的索引和任期号，那么他们存储了相同的指令。</li>
<li>如果不同日志中的两个条目拥有相同的索引和任期号，那么他们之前的所有日志条目也都相同。</li>
</ul>
<p>Leader 在特定的任期号内的一个日志索引处最多创建一个日志条目，同时日志条目在日志中的位置也从来不会改变。该点保证了上面的第一条特性。第二个特性是由 AppendEntries RPC 执行一个简单的一致性检查所保证的。在发送 AppendEntries RPC 的时候，leader 会将前一个日志条目的索引位置和任期号包含在里面。如果 follower 在它的日志中找不到包含相同索引位置和任期号的条目，那么他就会拒绝该新的日志条目。一致性检查就像一个归纳步骤：一开始空的日志状态肯定是满足 Log Matching Property（日志匹配特性） 的，然后一致性检查保证了日志扩展时的日志匹配特性。因此，每当 AppendEntries RPC 返回成功时，leader 就知道 follower 的日志一定和自己相同（从第一个日志条目到最新条目）。</p>
<p>正常操作期间，leader 和 follower 的日志保持一致，所以 AppendEntries RPC 的一致性检查从来不会失败。然而，leader 崩溃的情况会使日志处于不一致的状态（老的 leader 可能还没有完全复制它日志里的所有条目）。这种不一致会在一系列的 leader 和 follower 崩溃的情况下加剧。图 7 展示了在什么情况下 follower 的日志可能和新的 leader 的日志不同。Follower 可能缺少一些在新 leader 中有的日志条目，也可能拥有一些新 leader 没有的日志条目，或者同时发生。缺失或多出日志条目的情况可能会涉及到多个任期。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fc1352afc54b5ce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p>
<blockquote>
<p>图 7：当一个 leader 成功当选时（最上面那条日志），follower 可能是（a-f）中的任何情况。每一个盒子表示一个日志条目；里面的数字表示任期号。Follower 可能会缺少一些日志条目（a-b），可能会有一些未被提交的日志条目（c-d），或者两种情况都存在（e-f）。例如，场景 f 可能这样发生，f 对应的服务器在任期 2 的时候是 leader ，追加了一些日志条目到自己的日志中，一条都还没提交（commit）就崩溃了；该服务器很快重启，在任期 3 重新被选为 leader，又追加了一些日志条目到自己的日志中；在这些任期 2 和任期 3 中的日志都还没被提交之前，该服务器又宕机了，并且在接下来的几个任期里一直处于宕机状态。</p>
</blockquote>
<p>在 Raft 算法中，leader 通过强制 follower 复制它的日志来解决不一致的问题。这意味着 follower 中跟 leader 冲突的日志条目会被 leader 的日志条目覆盖。5.4 节会证明通过增加一个限制可以保证安全性。</p>
<p>要使得 follower 的日志跟自己一致，leader 必须找到两者达成一致的最大的日志条目（索引最大），删除 follower 日志中从那个点之后的所有日志条目，并且将自己从那个点之后的所有日志条目发送给 follower 。所有的这些操作都发生在对 AppendEntries RPCs 中一致性检查的回复中。Leader 针对每一个 follower 都维护了一个 nextIndex ，表示 leader 要发送给 follower 的下一个日志条目的索引。当选出一个新 leader 时，该 leader 将所有 nextIndex 的值都初始化为自己最后一个日志条目的 index 加1（图 7 中的 11）。如果 follower 的日志和 leader 的不一致，那么下一次 AppendEntries RPC 中的一致性检查就会失败。在被 follower 拒绝之后，leaer 就会减小 nextIndex 值并重试 AppendEntries RPC 。最终 nextIndex 会在某个位置使得 leader 和 follower 的日志达成一致。此时，AppendEntries RPC 就会成功，将 follower 中跟 leader 冲突的日志条目全部删除然后追加 leader 中的日志条目（如果有需要追加的日志条目的话）。一旦 AppendEntries RPC 成功，follower 的日志就和 leader 一致，并且在该任期接下来的时间里保持一致。</p>
<blockquote>
<p>如果想要的话，该协议可以被优化来减少被拒绝的 AppendEntries RPC 的个数。例如，当拒绝一个 AppendEntries RPC 的请求的时候，follower 可以包含冲突条目的任期号和自己存储的那个任期的第一个 index 。借助这些信息，leader  可以跳过那个任期内所有冲突的日志条目来减小 nextIndex；这样就变成每个有冲突日志条目的任期需要一个 AppendEntries RPC 而不是每个条目一次。在实践中，我们认为这种优化是没有必要的，因为失败不经常发生并且也不可能有很多不一致的日志条目。</p>
</blockquote>
<p>通过这种机制，leader 在当权之后就不需要任何特殊的操作来使日志恢复到一致状态。Leader 只需要进行正常的操作，然后日志就能在回复 AppendEntries 一致性检查失败的时候自动趋于一致。Leader 从来不会覆盖或者删除自己的日志条目（图 3 的 Leader Append-Only 属性）。</p>
<p>这样的日志复制机制展示了第 2 节中描述的一致性特性：只要过半的服务器能正常运行，Raft 就能够接受，复制并应用新的日志条目；在正常情况下，新的日志条目可以在一个 RPC 来回中被复制给集群中的过半机器；并且单个运行慢的 follower 不会影响整体的性能。</p>
<h3 id="5-4-安全性"><a href="#5-4-安全性" class="headerlink" title="5.4 安全性"></a>5.4 安全性</h3><p>前面的章节里描述了 Raft 算法是如何进行 leader 选举和日志复制的。然而，到目前为止描述的机制并不能充分地保证每一个状态机会按照相同的顺序执行相同的指令。例如，一个 follower 可能会进入不可用状态，在此期间，leader 可能提交了若干的日志条目，然后这个 follower 可能会被选举为 leader 并且用新的日志条目覆盖这些日志条目；结果，不同的状态机可能会执行不同的指令序列。</p>
<p>这节通过对 leader 选举增加一个限制来完善 Raft 算法。这一限制保证了对于给定的任意任期号， leader 都包含了之前各个任期所有被提交的日志条目（图 3 中的 Leader Completeness 性质）。有了这一 leader 选举的限制，我们也使得提交规则更加清晰。最后，我们展示了对于 Leader Completeness 性质的简要证明并且说明该性质是如何领导复制状态机执行正确的行为的。</p>
<h4 id="5-4-1-选举限制"><a href="#5-4-1-选举限制" class="headerlink" title="5.4.1 选举限制"></a>5.4.1 选举限制</h4><p>在任何基于 leader 的一致性算法中，leader 最终都必须存储所有已经提交的日志条目。在某些一致性算法中，例如 Viewstamped Replication[22]，一开始并没有包含所有已经提交的日志条目的服务器也可能被选为 leader 。这种算法包含一些额外的机制来识别丢失的日志条目并将它们传送给新的 leader ，要么是在选举阶段要么在之后很快进行。不幸的是，这种方法会导致相当大的额外的机制和复杂性。Raft 使用了一种更加简单的方法，它可以保证新 leader 在当选时就包含了之前所有任期号中已经提交的日志条目，不需要再传送这些日志条目给新 leader 。这意味着日志条目的传送是单向的，只从 leader 到 follower，并且 leader 从不会覆盖本地日志中已经存在的条目。</p>
<p>Raft 使用投票的方式来阻止 candidate 赢得选举除非该 candidate 包含了所有已经提交的日志条目。候选人为了赢得选举必须与集群中的过半节点通信，这意味着至少其中一个服务器节点包含了所有已提交的日志条目。如果 candidate 的日志至少和过半的服务器节点一样新（接下来会精确地定义“新”），那么他一定包含了所有已经提交的日志条目。RequestVote RPC 执行了这样的限制： RPC 中包含了 candidate 的日志信息，如果投票者自己的日志比 candidate 的还新，它会拒绝掉该投票请求。</p>
<p>Raft 通过比较两份日志中最后一条日志条目的索引值和任期号来定义谁的日志比较新。如果两份日志最后条目的任期号不同，那么任期号大的日志更新。如果两份日志最后条目的任期号相同，那么日志较长的那个更新。</p>
<h4 id="5-4-2-提交之前任期内的日志条目"><a href="#5-4-2-提交之前任期内的日志条目" class="headerlink" title="5.4.2 提交之前任期内的日志条目"></a>5.4.2 提交之前任期内的日志条目</h4><p>如同 5.3 节描述的那样，一旦当前任期内的某个日志条目已经存储到过半的服务器节点上，leader 就知道该日志条目已经被提交了。如果某个 leader 在提交某个日志条目之前崩溃了，以后的 leader 会试图完成该日志条目的复制。然而，如果是之前任期内的某个日志条目已经存储到过半的服务器节点上，leader 也无法立即断定该日志条目已经被提交了。图 8 展示了一种情况，一个已经被存储到过半节点上的老日志条目，仍然有可能会被未来的 leader 覆盖掉。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f23fc91c5094c2cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p>
<blockquote>
<p>图 8：如图的时间序列展示了为什么 leader 无法判断老的任期号内的日志是否已经被提交。在 (a) 中，S1 是 leader ，部分地复制了索引位置 2 的日志条目。在 (b) 中，S1 崩溃了，然后 S5 在任期 3 中通过 S3、S4 和自己的选票赢得选举，然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c)，S5 又崩溃了；S1 重新启动，选举成功，继续复制日志。此时，来自任期 2 的那条日志已经被复制到了集群中的大多数机器上，但是还没有被提交。如果 S1 在 (d) 中又崩溃了，S5 可以重新被选举成功（通过来自 S2，S3 和 S4 的选票），然后覆盖了他们在索引 2 处的日志。但是，在崩溃之前，如果 S1 在自己的任期里复制了日志条目到大多数机器上，如 (e) 中，然后这个条目就会被提交（S5 就不可能选举成功）。 在这种情况下，之前的所有日志也被提交了。</p>
</blockquote>
<p>为了消除图 8 中描述的问题，Raft 永远不会通过计算副本数目的方式来提交之前任期内的日志条目。只有 leader 当前任期内的日志条目才通过计算副本数目的方式来提交；一旦当前任期的某个日志条目以这种方式被提交，那么由于日志匹配特性，之前的所有日志条目也都会被间接地提交。在某些情况下，领导人可以安全地断定一个老的日志条目已经被提交（例如，如果该条目已经存储到所有服务器上），但是 Raft 为了简化问题使用了一种更加保守的方法。</p>
<p>Raft 会在提交规则上增加额外的复杂性是因为当 leader 复制之前任期内的日志条目时，这些日志条目都保留原来的任期号。在其他的一致性算法中，如果一个新的 leader 要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft 的做法使得更加容易推导出（reason about）日志条目，因为他们自始至终都使用同一个任期号。另外，和其他的算法相比，Raft 中的新 leader 只需要发送更少的日志条目（其他算法中必须在它们被提交之前发送更多的冗余日志条目来给它们重新编号）。</p>
<h4 id="5-4-3-安全性论证"><a href="#5-4-3-安全性论证" class="headerlink" title="5.4.3 安全性论证"></a>5.4.3 安全性论证</h4><p>在给出了完整的 Raft 算法之后，我们现在可以更加精确的讨论 leader 完整性特性（Leader Completeness Prop-erty）（这一讨论基于 9.2 节的安全性证明）。我们假设 leader 完整性特性是不满足的，然后我们推出矛盾来。假设任期 T 的 leader（leader T）在任期内提交了一个日志条目，但是该日志条目没有被存储到未来某些任期的 leader 中。假设 U 是大于 T 的没有存储该日志条目的最小任期号。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-03fb8b6791409bb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p>
<blockquote>
<p>图 9：如果 S1 （任期 T 的 leader）在它的任期里提交了一个新的日志条目，然后 S5 在之后的任期 U 里被选举为 leader ，那么肯定至少会有一个节点，如 S3，既接收了来自 S1 的日志条目，也给 S5 投票了。</p>
</blockquote>
<ol>
<li><p>U 一定在刚成为 leader 的时候就没有那条被提交的日志条目了（leader 从不会删除或者覆盖任何条目）。</p>
</li>
<li><p>Leader T 复制该日志条目给集群中的过半节点，同时，leader U 从集群中的过半节点赢得了选票。因此，至少有一个节点（投票者）同时接受了来自 leader T 的日志条目和给 leader U 投票了，如图 9。该投票者是产生矛盾的关键。</p>
</li>
<li><p>该投票者必须在给 leader U 投票之前先接受了从 leader T 发来的已经被提交的日志条目；否则它就会拒绝来自 leader T 的 AppendEntries 请求（因为此时它的任期号会比 T 大）。</p>
</li>
<li><p>该投票者在给 leader U 投票时依然保有这该日志条目，因为任何 U 、T 之间的 leader 都包含该日志条目（根据上述的假设），leader 从不会删除条目，并且 follower 只有跟 leader 冲突的时候才会删除条目。</p>
</li>
<li><p>该投票者把自己选票投给 leader U 时，leader U 的日志必须至少和投票者的一样新。这就导致了以下两个矛盾之一。</p>
</li>
<li><p>首先，如果该投票者和 leader U 的最后一个日志条目的任期号相同，那么 leader U 的日志至少和该投票者的一样长，所以 leader U 的日志一定包含该投票者日志中的所有日志条目。这是一个矛盾，因为该投票者包含了该已被提交的日志条目，但是在上述的假设里，leader U 是不包含的。</p>
</li>
<li><p>否则，leader U 的最后一个日志条目的任期号就必须比该投票者的大了。此外，该任期号也比 T 大，因为该投票者的最后一个日志条目的任期号至少和 T 一样大（它包含了来自任期 T 的已提交的日志）。创建了 leader U 最后一个日志条目的之前的 leader 一定已经包含了该已被提交的日志条目（根据上述假设，leader U 是第一个不包含该日志条目的 leader）。所以，根据日志匹配特性，leader U 一定也包含该已被提交的日志条目，这里产生了矛盾。</p>
</li>
<li><p>因此，所有比 T 大的任期的 leader 一定都包含了任期 T 中提交的所有日志条目。</p>
</li>
<li><p>日志匹配特性保证了未来的 leader 也会包含被间接提交的日志条目，例如图 8 (d) 中的索引 2。</p>
</li>
</ol>
<p>通过 Leader 完整性特性，我们就能证明图 3 中的状态机安全特性，即如果某个服务器已经将某个给定的索引处的日志条目应用到自己的状态机里了，那么其他的服务器就不会在相同的索引处应用一个不同的日志条目。在一个服务器应用一个日志条目到自己的状态机中时，它的日志和 leader 的日志从开始到该日志条目都相同，并且该日志条目必须被提交。现在考虑如下最小任期号：某服务器在该任期号中某个特定的索引处应用了一个日志条目；日志完整性特性保证拥有更高任期号的 leader 会存储相同的日志条目，所以之后任期里服务器应用该索引处的日志条目也会是相同的值。因此，状态机安全特性是成立的。</p>
<p>最后，Raft 要求服务器按照日志索引顺序应用日志条目。再加上状态机安全特性，这就意味着所有的服务器都会按照相同的顺序应用相同的日志条目到自己的状态机中。</p>
<h3 id="5-5-Follower-和-candidate-崩溃"><a href="#5-5-Follower-和-candidate-崩溃" class="headerlink" title="5.5 Follower 和 candidate 崩溃"></a>5.5 Follower 和 candidate 崩溃</h3><p>到目前为止，我们只关注了 leader 崩溃的情况。Follower 和 candidate 崩溃后的处理方式比 leader 崩溃要简单的多，并且两者的处理方式是相同的。如果 follower 或者 candidate 崩溃了，那么后续发送给他们的 RequestVote 和 AppendEntries RPCs 都会失败。Raft 通过无限的重试来处理这种失败；如果崩溃的机器重启了，那么这些 RPC 就会成功地完成。如果一个服务器在完成了一个 RPC，但是还没有响应的时候崩溃了，那么在它重启之后就会再次收到同样的请求。Raft 的 RPCs 都是幂等的，所以这样的重试不会造成任何伤害。例如，一个 follower 如果收到 AppendEntries 请求但是它的日志中已经包含了这些日志条目，它就会直接忽略这个新的请求中的这些日志条目。</p>
<h3 id="5-6-定时（timing）和可用性"><a href="#5-6-定时（timing）和可用性" class="headerlink" title="5.6 定时（timing）和可用性"></a>5.6 定时（timing）和可用性</h3><p>Raft 的要求之一就是安全性不能依赖定时：整个系统不能因为某些事件运行得比预期快一点或者慢一点就产生错误的结果。但是，可用性（系统能够及时响应客户端）不可避免的要依赖于定时。例如，当有服务器崩溃时，消息交换的时间就会比正常情况下长，candidate 将不会等待太长的时间来赢得选举；没有一个稳定的 leader ，Raft 将无法工作。</p>
<p>Leader 选举是 Raft 中定时最为关键的方面。 只要整个系统满足下面的时间要求，Raft 就可以选举出并维持一个稳定的 leader：</p>
<blockquote>
<p>广播时间（broadcastTime） &lt;&lt; 选举超时时间（electionTimeout） &lt;&lt; 平均故障间隔时间（MTBF）</p>
</blockquote>
<p>在这个不等式中，广播时间指的是一个服务器并行地发送 RPCs 给集群中所有的其他服务器并接收到响应的平均时间；选举超时时间就是在 5.2 节中介绍的选举超时时间；平均故障间隔时间就是对于一台服务器而言，两次故障间隔时间的平均值。广播时间必须比选举超时时间小一个量级，这样 leader 才能够可靠地发送心跳消息来阻止 follower 开始进入选举状态；再加上随机化选举超时时间的方法，这个不等式也使得选票瓜分的情况变得不可能。选举超时时间需要比平均故障间隔时间小上几个数量级，这样整个系统才能稳定地运行。当 leader 崩溃后，整个系统会有大约选举超时时间不可用；我们希望该情况在整个时间里只占一小部分。</p>
<p>广播时间和平均故障间隔时间是由系统决定的，但是选举超时时间是我们自己选择的。Raft 的 RPCs 需要接收方将信息持久化地保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒之间，取决于存储的技术。因此，选举超时时间可能需要在 10 毫秒到 500 毫秒之间。大多数的服务器的平均故障间隔时间都在几个月甚至更长，很容易满足时间的要求。</p>
<h2 id="6-集群成员变更"><a href="#6-集群成员变更" class="headerlink" title="6 集群成员变更"></a>6 集群成员变更</h2><p>到目前为止，我们都假设集群的配置（参与一致性算法的服务器集合）是固定不变的。但是在实践中，偶尔会改变集群的配置的，例如替换那些宕机的机器或者改变复制程度。尽管可以通过使整个集群下线，更新所有配置，然后重启整个集群的方式来实现，但是在更改期间集群会不可用。另外，如果存在手工操作步骤，那么就会有操作失误的风险。为了避免这样的问题，我们决定将配置变更自动化并将其纳入到 Raft 一致性算法中来。</p>
<p>为了使配置变更机制能够安全，在转换的过程中不能够存在任何时间点使得同一个任期里可能选出两个 leader 。不幸的是，任何服务器直接从旧的配置转换到新的配置的方案都是不安全的。一次性自动地转换所有服务器是不可能的，所以在转换期间整个集群可能划分成两个独立的大多数（见图 10）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-284d88f08ab84f85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p>
<blockquote>
<p>图 10：直接从一种配置转到另一种配置是不安全的，因为各个机器会在不同的时候进行转换。在这个例子中，集群从 3 台机器变成了 5 台。不幸的是，存在这样的一个时间点，同一个任期里两个不同的 leader 会被选出。一个获得旧配置里过半机器的投票，一个获得新配置里过半机器的投票。</p>
</blockquote>
<p>为了保证安全性，配置变更必须采用一种两阶段方法。目前有很多种两阶段的实现。例如，有些系统（比如，[22]）在第一阶段停掉旧的配置所以不能处理客户端请求；然后在第二阶段在启用新的配置。在 Raft 中，集群先切换到一个过渡的配置，我们称之为联合一致（joint consensus）；一旦联合一致已经被提交了，那么系统就切换到新的配置上。联合一致结合了老配置和新配置：</p>
<ul>
<li>日志条目被复制给集群中新、老配置的所有服务器。</li>
<li>新、旧配置的服务器都可以成为 leader 。</li>
<li>达成一致（针对选举和提交）需要分别在两种配置上获得过半的支持。</li>
</ul>
<p>联合一致允许独立的服务器在不妥协安全性的前提下，在不同的时刻进行配置转换过程。此外，联合一致允许集群在配置变更期间依然响应客户端请求。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6a440c013876545a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p>
<p>集群配置在复制日志中以特殊的日志条目来存储和通信；图 11 展示了配置变更过程。当一个 leader 接收到一个改变配置从 C-old 到 C-new 的请求，它就为联合一致将该配置（图中的 C-old,new）存储为一个日志条目，并以前面描述的方式复制该条目。一旦某个服务器将该新配置日志条目增加到自己的日志中，它就会用该配置来做出未来所有的决策（服务器总是使用它日志中最新的配置，无论该配置日志是否已经被提交）。这就意味着 leader 会使用 C-old,new 的规则来决定 C-old,new 的日志条目是什么时候被提交的。如果 leader 崩溃了，新 leader 可能是在 C-old 配置也可能是在 C-old,new 配置下选出来的，这取决于赢得选举的 candidate 是否已经接收到了 C-old,new 配置。在任何情况下， C-new 在这一时期都不能做出单方面决定。</p>
<p>一旦 C-old,new 被提交，那么 C-old 和 C-new 都不能在没有得到对方认可的情况下做出决定，并且 leader 完整性特性保证了只有拥有 C-old,new 日志条目的服务器才能被选举为 leader 。现在 leader 创建一个描述 C-new 配置的日志条目并复制到集群其他节点就是安全的了。此外，新的配置被服务器收到后就会立即生效。当新的配置在 C-new 的规则下被提交，旧的配置就变得无关紧要，同时不使用新配置的服务器就可以被关闭了。如图 11 所示，任何时刻 C-old 和 C-new 都不能单方面做出决定；这保证了安全性。</p>
<p>在关于配置变更还有三个问题需要解决。第一个问题是，新的服务器开始时可能没有存储任何的日志条目。当这些服务器以这种状态加入到集群中，它们需要一段时间来更新来赶上其他服务器，这段它们无法提交新的日志条目。为了避免因此而造成的系统短时间的不可用，Raft 在配置变更前引入了一个额外的阶段，在该阶段，新的服务器以没有投票权身份加入到集群中来（leader 也复制日志给它们，但是考虑过半的时候不用考虑它们）。一旦该新的服务器追赶上了集群中的其他机器，配置变更就可以按上面描述的方式进行。</p>
<p>第二个问题是，集群的 leader 可能不是新配置中的一员。在这种情况下，leader 一旦提交了 C-new 日志条目就会退位（回到 follower 状态）。这意味着有这样的一段时间（leader 提交 C-new 期间），leader 管理着一个不包括自己的集群；它复制着日志但不把自己算在过半里面。Leader 转换发生在 C-new 被提交的时候，因为这是新配置可以独立运转的最早时刻（将总是能够在 C-new 配置下选出新的领导人）。在此之前，可能只能从 C-old 中选出领导人。</p>
<p>第三个问题是，那些被移除的服务器（不在 C-new 中）可能会扰乱集群。这些服务器将不会再接收到心跳，所以当选举超时，它们就会进行新的选举过程。它们会发送带有新任期号的 RequestVote RPCs ，这样会导致当前的 leader 回到 follower 状态。新的 leader 最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致系统可用性很差。</p>
<p>为了防止这种问题，当服务器认为当前 leader 存在时，服务器会忽略RequestVote RPCs 。特别的，当服务器在最小选举超时时间内收到一个 RequestVote RPC，它不会更新任期号或者投票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待最小选举超时时间。相反，这有利于避免被移除的服务器的扰乱：如果 leader 能够发送心跳给集群，那它就不会被更大的任期号废黜。</p>
<h2 id="7-日志压缩"><a href="#7-日志压缩" class="headerlink" title="7 日志压缩"></a>7 日志压缩</h2><p>Raft 的日志在正常操作中随着包含更多的客户端请求不断地增长，但是在实际的系统中，日志不能无限制地增长。随着日志越来越长，它会占用越来越多的空间，并且需要花更多的时间来回放。如果没有一定的机制来清除日志中积累的过期的信息，最终就会带来可用性问题。</p>
<p>快照技术是日志压缩最简单的方法。在快照技术中，整个当前系统的状态都以快照的形式持久化到稳定的存储中，该时间点之前的日志全部丢弃。快照技术被使用在 Chubby 和 ZooKeeper 中，接下来的章节会介绍 Raft 中的快照技术。</p>
<p>增量压缩方法，例如日志清理或者日志结构合并树（log-structured merge trees，LSM 树），都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，它们先选择一个积累了大量已经被删除或者被覆盖的对象的数据区域，然后重写该区域还活着的对象，之后释放该区域。和快照技术相比，它们需要大量额外的机制和复杂性，快照技术通过操作整个数据集来简化该问题。状态机可以用和快照技术相同的接口来实现 LSM 树，但是日志清除方法就需要修改 Raft 了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-708be6a9e8be699d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图12"></p>
<blockquote>
<p>一台服务器用一个新快照替代了它日志中已经提交了的条目（索引 1 到 5），该快照只存储了当前的状态（变量 x 和 y 的值）。快照的 last included index 和 last included term 被保存来定位日志中条目 6 之前的快照</p>
</blockquote>
<p>图 12 展示了 Raft 中快照的基本思想。每个服务器独立地创建快照，快照只包括自己日志中已经被提交的条目。主要的工作是状态机将自己的状态写入快照中。Raft 快照中也包含了少量的元数据：the last included index 指的是最后一个被快照取代的日志条目的索引值（状态机最后应用的日志条目），the last included term 是该条目的任期号。保留这些元数据是为了支持快照后第一个条目的 AppendEntries 一致性检查，因为该条目需要之前的索引值和任期号。为了支持集群成员变更（第 6 节），快照中也包括日志中最新的配置作为 last included index 。一旦服务器完成写快照，他就可以删除 last included index 之前的所有日志条目，包括之前的快照。</p>
<p>尽管通常服务器都是独立地创建快照，但是 leader 必须偶尔发送快照给一些落后的跟随者。这通常发生在 leader 已经丢弃了需要发送给 follower 的下一条日志条目的时候。幸运的是这种情况在常规操作中是不可能的：一个与 leader 保持同步的 follower 通常都会有该日志条目。然而一个例外的运行缓慢的 follower 或者新加入集群的服务器（第 6 节）将不会有这个条目。这时让该 follower 更新到最新的状态的方式就是通过网络把快照发送给它。</p>
<p>Leader 使用 InstallSnapshot RPC 来发送快照给太落后的 follower ；见图 13。当 follower 收到带有这种 RPC 的快照时，它必须决定如何处理已经存在的日志条目。通常该快照会包含接收者日志中没有的信息。在这种情况下，follower 丢弃它所有的日志；这些会被该快照所取代，并且可能一些没有提交的条目会和该快照产生冲突。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照之后的条目仍然有用并保留。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-97e86b90137791b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图13"></p>
<p>这种快照的方式违反了 Raft 的 strong leader 原则，因为 follower 可以在不知道 leader 状态的情况下创建快照。但是我们认为这种违背是合乎情理的。Leader 的存在，是为了防止在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，因此没有决策会冲突。数据依然只能从 leader 流到 follower ，只是 follower 可以重新组织它们的数据了。</p>
<p>我们考虑过一种可替代的基于 leader 的快照方案，在该方案中，只有leader 会创建快照，然后 leader 会发送它的快照给所有的 follower 。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照过程。每个 follower 都已经拥有了创建自己的快照所需要的信息，而且很显然，follower 从本地的状态中创建快照远比通过网络接收别人发来的要来得经济。第二，leader 的实现会更加复杂。例如，leader 发送快照给 follower 的同时也要并行地将新的日志条目发送给它们，这样才不会阻塞新的客户端请求。</p>
<p>还有两个问题会影响快照的性能。首先，服务器必须决定什么时候创建快照。如果快照创建过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，就要承担耗尽存储容量的风险，同时也增加了重启时日志回放的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置得显著大于期望的快照的大小，那么快照的磁盘带宽负载就会很小。</p>
<p>第二个性能问题就是写入快照需要花费一段时间，并且我们不希望它影响到正常的操作。解决方案是通过写时复制的技术，这样新的更新就可以在不影响正在写的快照的情况下被接收。例如，具有泛函数据结构的状态机天然支持这样的功能。另外，操作系统对写时复制技术的支持（如 Linux 上的 fork）可以被用来创建整个状态机的内存快照（我们的实现用的就是这种方法）。</p>
<h2 id="8-客户端交互"><a href="#8-客户端交互" class="headerlink" title="8 客户端交互"></a>8 客户端交互</h2><p>本节介绍客户端如何和 Raft 进行交互，包括客户端如何找到 leader 和 Raft 是如何支持线性化语义的。这些问题对于所有基于一致性的系统都存在，并且 Raft 的解决方案和其他的也差不多。</p>
<p>Raft 的客户端发送所有的请求给 leader 。当客户端第一次启动的时候，它会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是 leader ，那么该服务器会拒绝客户端的请求并且提供关于它最近接收到的领导人的信息（AppendEntries 请求包含了 leader 的网络地址）。如果 leader 已经崩溃了，客户端请求就会超时；客户端之后会再次随机挑选服务器进行重试。</p>
<p>我们 Raft 的目标是要实现线性化语义（每一次操作立即执行，只执行一次，在它的调用和回复之间）。但是，如上述，Raft 可能执行同一条命令多次：例如，如果 leader 在提交了该日志条目之后，响应客户端之前崩溃了，那么客户端会和新的 leader 重试这条指令，导致这条命令被再次执行。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每个客户端已经处理的最新的序列号以及相关联的回复。如果接收到一条指令，该指令的序列号已经被执行过了，就立即返回结果，而不重新执行该请求。</p>
<p>只读的操作可以直接处理而不需要记录日志。但是，如果不采取任何其他措施，这么做可能会有返回过时数据（stale data）的风险，因为 leader 响应客户端请求时可能已经被新的 leader 替代了，但是它还不知道自己已经不是最新的 leader 了。线性化的读操作肯定不会返回过时数据，Raft 需要使用两个额外的预防措施来在不使用日志的情况下保证这一点。首先，leader 必须有关于哪些日志条目被提交了的最新信息。Leader 完整性特性保证了 leader 一定拥有所有已经被提交的日志条目，但是在它任期开始的时候，它可能不知道哪些是已经被提交的。为了知道这些信息，它需要在它的任期里提交一个日志条目。Raft 通过让 leader 在任期开始的时候提交一个空的没有任何操作的日志条目到日志中来处理该问题。第二，leader 在处理只读请求之前必须检查自己是否已经被替代了（如果一个更新的 leader 被选举出来了，它的信息就是过时的了）。Raft 通过让 leader 在响应只读请求之前，先和集群中的过半节点交换一次心跳信息来处理该问题。另一种可选的方案，leader 可以依赖心跳机制来实现一种租约的形式，但是这种方法依赖 timing 来保证安全性（假设时间误差是有界的）。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>[1] BOLOSKY, W. J., BRADSHAW, D., HAAGENS, R. B., KUSTERS, N. P., AND LI, P. Paxos replicated state machines as the basis of a high-performance data store. In Proc. NSDI’11, USENIX Conference on Networked Systems Design and Implementation (2011), USENIX, pp. 141–154.</li>
<li>[2] BURROWS, M. The Chubby lock service for loosely- coupled distributed systems. In Proc. OSDI’06, Sympo- sium on Operating Systems Design and Implementation (2006), USENIX, pp. 335–350.</li>
<li>[3] CAMARGOS, L. J., SCHMIDT, R. M., AND PEDONE, F. Multicoordinated Paxos. In Proc. PODC’07, ACM Sym- posium on Principles of Distributed Computing (2007), ACM, pp. 316–317.</li>
<li>[4] CHANDRA, T. D., GRIESEMER, R., AND REDSTONE, J. Paxos made live: an engineering perspective. In Proc. PODC’07, ACM Symposium on Principles of Distributed Computing (2007), ACM, pp. 398–407.</li>
<li>[5] CHANG, F., DEAN, J., GHEMAWAT, S., HSIEH, W. C., WALLACH, D. A., BURROWS, M., CHANDRA, T., FIKES, A., AND GRUBER, R. E. Bigtable: a distributed storage system for structured data. In Proc. OSDI’06, USENIX Symposium on Operating Systems Design and Implementation (2006), USENIX, pp. 205–218.</li>
<li>[6] CORBETT, J. C., DEAN, J., EPSTEIN, M., FIKES, A., FROST, C., FURMAN, J. J., GHEMAWAT, S., GUBAREV, A., HEISER, C., HOCHSCHILD, P., HSIEH, W., KAN- THAK, S., KOGAN, E., LI, H., LLOYD, A., MELNIK, S., MWAURA, D., NAGLE, D., QUINLAN, S., RAO, R., ROLIG, L., SAITO, Y., SZYMANIAK, M., TAYLOR, C., WANG, R., AND WOODFORD, D. Spanner: Google’s globally-distributed database. In Proc. OSDI’12, USENIX Conference on Operating Systems Design and Implemen- tation (2012), USENIX, pp. 251–264.</li>
<li>[7] COUSINEAU, D., DOLIGEZ, D., LAMPORT, L., MERZ, S., RICKETTS, D., AND VANZETTO, H. TLA+ proofs. In Proc. FM’12, Symposium on Formal Methods (2012), D. Giannakopoulou and D. Me ́ry, Eds., vol. 7436 of Lec- ture Notes in Computer Science, Springer, pp. 147–154.</li>
<li>[8] GHEMAWAT, S., GOBIOFF, H., AND LEUNG, S.-T. The Google file system. In Proc. SOSP’03, ACM Symposium on Operating Systems Principles (2003), ACM, pp. 29–43.</li>
<li>[9] GRAY,C.,ANDCHERITON,D.Leases:Anefficientfault- tolerant mechanism for distributed file cache consistency. In Proceedings of the 12th ACM Ssymposium on Operating Systems Principles (1989), pp. 202–210.</li>
<li>[10] HERLIHY, M. P., AND WING, J. M. Linearizability: a correctness condition for concurrent objects. ACM Trans- actions on Programming Languages and Systems 12 (July 1990), 463–492.</li>
<li>[11] HUNT, P., KONAR, M., JUNQUEIRA, F. P., AND REED, B. ZooKeeper: wait-free coordination for internet-scale systems. In Proc ATC’10, USENIX Annual Technical Con- ference (2010), USENIX, pp. 145–158.</li>
<li>[12] JUNQUEIRA, F. P., REED, B. C., AND SERAFINI, M. Zab: High-performance broadcast for primary-backup sys- tems. In Proc. DSN’11, IEEE/IFIP Int’l Conf. on Depend- able Systems &amp; Networks (2011), IEEE Computer Society, pp. 245–256.</li>
<li>[13] KIRSCH, J., AND AMIR, Y. Paxos for system builders. Tech. Rep. CNDS-2008-2, Johns Hopkins University, 2008.</li>
<li>[14] LAMPORT, L. Time, clocks, and the ordering of events in a distributed system. Commununications of the ACM 21, 7 (July 1978), 558–565.</li>
<li>[15] LAMPORT, L. The part-time parliament. ACM Transac- tions on Computer Systems 16, 2 (May 1998), 133–169.</li>
<li>[16] LAMPORT, L. Paxos made simple. ACM SIGACT News 32, 4 (Dec. 2001), 18–25.</li>
<li>[17] LAMPORT, L. Specifying Systems, The TLA+ Language and Tools for Hardware and Software Engineers. Addison- Wesley, 2002.</li>
<li>[18] LAMPORT, L. Generalized consensus and Paxos. Tech. Rep. MSR-TR-2005-33, Microsoft Research, 2005.</li>
<li>[19] LAMPORT, L. Fast paxos. Distributed Computing 19, 2 (2006), 79–103.</li>
<li>[20] LAMPSON, B. W. How to build a highly available system using consensus. In Distributed Algorithms, O. Baboaglu and K. Marzullo, Eds. Springer-Verlag, 1996, pp. 1–17.</li>
<li>[21] LAMPSON, B. W. The ABCD’s of Paxos. In Proc. PODC’01, ACM Symposium on Principles of Distributed Computing (2001), ACM, pp. 13–13.</li>
<li>[22] LISKOV, B., AND COWLING, J. Viewstamped replica- tion revisited. Tech. Rep. MIT-CSAIL-TR-2012-021, MIT, July 2012.<br>17</li>
<li>[23] LogCabin source code. logcabin/logcabin.<br><a href="http://github.com/" target="_blank" rel="external">http://github.com/</a></li>
<li>[24] LORCH, J. R., ADYA, A., BOLOSKY, W. J., CHAIKEN, R., DOUCEUR, J. R., AND HOWELL, J. The SMART way to migrate replicated stateful services. In Proc. Eu- roSys’06, ACM SIGOPS/EuroSys European Conference on Computer Systems (2006), ACM, pp. 103–115.</li>
<li>[25] MAO, Y., JUNQUEIRA, F. P., AND MARZULLO, K. Mencius: building efficient replicated state machines for<br>WANs. In Proc. OSDI’08, USENIX Conference on Operating Systems Design and Implementation (2008), USENIX, pp. 369–384.</li>
<li>[26] MAZIE` RES, D. Paxos made practical.<br>//www.scs.stanford.edu/ ̃dm/home/ papers/paxos.pdf, Jan. 2007.</li>
<li>[27] MORARU, I., ANDERSEN, D. G., AND KAMINSKY, M. There is more consensus in egalitarian parliaments. In Proc. SOSP’13, ACM Symposium on Operating System Principles (2013), ACM.</li>
<li>[28] Raft user study. <a href="http://ramcloud.stanford" target="_blank" rel="external">http://ramcloud.stanford</a>. edu/ ̃ongaro/userstudy/.</li>
<li>[29] OKI, B. M., AND LISKOV, B. H. Viewstamped replication: A new primary copy method to support highly-available distributed systems. In Proc. PODC’88, ACM Symposium on Principles of Distributed Computing (1988), ACM, pp. 8–17.</li>
<li>[30] O’NEIL, P., CHENG, E., GAWLICK, D., AND ONEIL, E. The log-structured merge-tree (LSM-tree). Acta Informat- ica 33, 4 (1996), 351–385.</li>
<li>[31] ONGARO, D. Consensus: Bridging Theory and Practice. PhD thesis, Stanford University, 2014 (work in progress).<a href="http://ramcloud.stanford.edu/" target="_blank" rel="external">http://ramcloud.stanford.edu/</a> ̃ongaro/ thesis.pdf.</li>
<li>[32] ONGARO, D., AND OUSTERHOUT, J. In search of an understandable consensus algorithm. In Proc ATC’14, USENIX Annual Technical Conference (2014), USENIX.</li>
<li>[33] OUSTERHOUT, J., AGRAWAL, P., ERICKSON, D., KOZYRAKIS, C., LEVERICH, J., MAZIE`RES, D., MI- TRA, S., NARAYANAN, A., ONGARO, D., PARULKAR, G., ROSENBLUM, M., RUMBLE, S. M., STRATMANN, E., AND STUTSMAN, R. The case for RAMCloud. Com- munications of the ACM 54 (July 2011), 121–130.</li>
<li>[34] Raft consensus algorithm website. <a href="http://raftconsensus.github.io" target="_blank" rel="external">http://raftconsensus.github.io</a>.</li>
<li>[35] REED, B. Personal communications, May 17, 2013.</li>
<li>[36] ROSENBLUM, M., AND OUSTERHOUT, J. K. The design and implementation of a log-structured file system. ACM Trans. Comput. Syst. 10 (February 1992), 26–52.</li>
<li>[37] SCHNEIDER, F. B. Implementing fault-tolerant services using the state machine approach: a tutorial. ACM Com- puting Surveys 22, 4 (Dec. 1990), 299–319.</li>
<li>[38] SHVACHKO, K., KUANG, H., RADIA, S., AND CHANSLER, R. The Hadoop distributed file system. In Proc. MSST’10, Symposium on Mass Storage Sys- tems and Technologies (2010), IEEE Computer Society, pp. 1–10.</li>
<li>[39] VAN RENESSE, R. Paxos made moderately complex. Tech. rep., Cornell University, 2012.</li>
</ul>
<p><a href="https://raft.github.io/" target="_blank" rel="external">Raft 网站</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式一致性算法 </category>
            
            <category> Raft </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 论文翻译 </tag>
            
            <tag> 分布式系统 </tag>
            
            <tag> 分布式一致性算法 </tag>
            
            <tag> Raft </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员资料大全]]></title>
      <url>http://linbingdong.com/2017/02/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>活到老，学到老。</p>
<a id="more"></a>
<p>本文由<a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="external">stanzhai</a>整理。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<ul>
<li><a href="#%E8%B5%84%E6%96%99%E7%AF%87">资料篇</a><ul>
<li><a href="#%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9">技术站点</a></li>
<li><a href="#%E5%BF%85%E7%9C%8B%E4%B9%A6%E7%B1%8D">必看书籍</a></li>
<li><a href="#%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2">大牛博客</a></li>
<li><a href="#github%E7%AF%87">GitHub篇</a></li>
</ul>
</li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%AF%87">工具篇</a><ul>
<li><a href="#%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7">平台工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1">第三方服务</a></li>
<li><a href="#%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B7%A5%E5%85%B7">爬虫相关(好玩的工具)</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3">安全相关</a></li>
<li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">Web服务器性能/压力测试工具/负载均衡器</a></li>
</ul>
</li>
<li><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E5%85%B7">大数据处理/数据分析/分布式工具</a></li>
<li><a href="#web%E5%89%8D%E7%AB%AF">Web前端</a></li>
<li><a href="#%E8%AF%AD%E8%A8%80%E7%AF%87">语言篇</a><ul>
<li><a href="#scala">Scala</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#c--c">C &amp; C++</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>
<li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">游戏开发相关</a></li>
<li><a href="#%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">日志聚合，分布式日志收集</a></li>
<li><a href="#rtp%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%9F%B3%E8%A7%86%E9%A2%91">RTP,实时传输协议与音视频</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a>技术站点</h3><ul>
<li>在线学习：<a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a>、<a href="https://www.edx.org/" target="_blank" rel="external">edX</a>、<a href="https://cn.udacity.com/" target="_blank" rel="external">Udacity</a>、<a href="https://ocw.mit.edu/index.htm" target="_blank" rel="external">MIT公开课</a>、<a href="http://mooc.guokr.com/course/" target="_blank" rel="external">MOOC学院</a>、<a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a></li>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>：非常棒的针对编程的链接聚合网站</li>
<li><a href="https://www.techmeme.com/" target="_blank" rel="external">Techmeme</a>：美国知名科技新闻和博客聚集网站，类似的还有（Panda, Hacker &amp; Designer News）</li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank" rel="external">Reddit - Programming板块</a>：同上</li>
<li>Java牛人必备：<a href="http://www.programcreek.com/" target="_blank" rel="external">Program Creek</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>：IT技术问答网站</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a>：中文的技术问答社区</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a>：全球最大的源代码管理平台，很多知名开源项目都在上面，如<a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux内核</a>，<a href="https://github.com/openstack/openstack" target="_blank" rel="external">OpenStack</a>等</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>：支持中文可免费创建私有项目的代码托管平台，可作为备选</li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a>：来做做这些题吧，看看自己的算法水平如何？这可比什么面试宝典强多了。</li>
<li><a href="http://www.lintcode.com/zh-cn/" target="_blank" rel="external">LintCode</a>：支持中文的编程题在线训练平台，可作为备选</li>
<li><a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>,<a href="https://www.topcoder.com/" target="_blank" rel="external">Topcoder</a>: 机器学习、大数据竞赛</li>
<li><a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a>：高质量的技术社区</li>
<li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn" target="_blank" rel="external">InfoQ</a>：企业级应用，关注软件开发领域</li>
<li><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX: way to explore</a></li>
<li>国内老牌技术社区：<a href="https://www.oschina.net/" target="_blank" rel="external">OSChina</a>、<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>、<a href="http://www.51cto.com/" target="_blank" rel="external">51CTO</a></li>
<li>免费的it电子书：<a href="http://it-ebooks.info/" target="_blank" rel="external">http://it-ebooks.info/</a></li>
<li>在线学习：<a href="http://www.udemy.com/" target="_blank" rel="external">http://www.udemy.com/</a></li>
<li>优质学习资源：<a href="http://plus.mojiax.com/" target="_blank" rel="external">http://plus.mojiax.com/</a></li>
<li>代码练习：<a href="http://exercism.io/" target="_blank" rel="external">http://exercism.io/</a>   and  <a href="https://www.codingame.com" target="_blank" rel="external">https://www.codingame.com</a></li>
<li><a href="http://www.devstore.cn/" target="_blank" rel="external">DevStore</a>:开发者服务商店</li>
<li><a href="https://msdn.microsoft.com/zh-cn" target="_blank" rel="external">MSDN</a>：微软相关的官方技术集中地，主要是文档类</li>
<li><a href="https://developers.google.cn/" target="_blank" rel="external">谷歌开发者</a></li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="external">码库</a> - 收录了实用的开源项目及资源</li>
</ul>
<h3 id="必看书籍"><a href="#必看书籍" class="headerlink" title="必看书籍"></a>必看书籍</h3><ul>
<li>SICP(<a href="https://mitpress.mit.edu/sicp/" target="_blank" rel="external">Structure and Interpretation of Computer Programs</a>)</li>
<li>深入理解计算机系统</li>
<li>代码大全2</li>
<li>人件</li>
<li>人月神话</li>
<li>软件随想录</li>
<li>算法导论（麻省理工学院出版社）</li>
<li>离散数学及其应用</li>
<li>设计模式</li>
<li>编程之美</li>
<li>黑客与画家</li>
<li>编程珠玑</li>
<li>The Little Schemer</li>
<li>Simply Scheme_Introducing_Computer_Science</li>
<li>C++ Prime</li>
<li>Effective C++</li>
<li>TCP/IP详解</li>
<li>Unix 编程艺术</li>
<li>技术的本质</li>
<li>软件随想录</li>
<li>计算机程序设计艺术</li>
<li>职业篇：程序员的自我修养,程序员修炼之道,高效能程序员的修炼</li>
<li>《精神分析引论》弗洛伊德</li>
<li>《失控》《科技想要什么》《技术元素》凯文凯利</li>
<li>程序开发心理学</li>
<li>天地一沙鸥</li>
<li>搞定：无压力工作的艺术</li>
</ul>
<h3 id="大牛博客"><a href="#大牛博客" class="headerlink" title="大牛博客"></a>大牛博客</h3><ul>
<li>云风（游戏界大牛）: <a href="http://blog.codingnow.com/" target="_blank" rel="external">http://blog.codingnow.com/</a></li>
<li>王垠（不少文章喷到蛮有道理）：<a href="http://www.yinwang.org/" target="_blank" rel="external">http://www.yinwang.org/</a></li>
<li>冰河-伞哥(Lisp大牛)：<a href="http://tianchunbinghe.blog.163.com/" target="_blank" rel="external">http://tianchunbinghe.blog.163.com/</a></li>
<li>R大<a href="https://zhuanlan.zhihu.com/p/25042028" target="_blank" rel="external">【干货满满】RednaxelaFX写的文章/回答的导航帖</a></li>
<li>陈皓-左耳朵耗子：<a href="http://coolshell.cn/" target="_blank" rel="external">http://coolshell.cn/</a></li>
<li>Jeff Atwood（国外知名博主）: <a href="https://blog.codinghorror.com/" target="_blank" rel="external">https://blog.codinghorror.com/</a></li>
<li>阮一峰（黑客与画家译者，Web）：<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">http://www.ruanyifeng.com/</a></li>
<li>廖雪峰（他的Python、Git教程不少人都看过）：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>道哥的黑板报（安全）：<a href="https://zhuanlan.zhihu.com/taosay" target="_blank" rel="external">https://zhuanlan.zhihu.com/taosay</a></li>
<li><a href="https://github.com/search?l=&amp;o=desc&amp;p=1&amp;q=location%3AChina&amp;ref=advsearch&amp;s=followers&amp;type=Users&amp;utf8=%E2%9C%93" target="_blank" rel="external">国内GitHub上关注度较高的开发者</a></li>
</ul>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p><strong> Awesome </strong></p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome</a>: 这是个Awesome合集，常见的资料这里面都能找到</li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome2</a>: 类似第一个Awesome</li>
<li><a href="https://github.com/jnv/lists" target="_blank" rel="external">杂七杂八、有用没用的Awesome合集</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">非常不错的语言类学习资料集合：Awesomeness</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">awesome-ios-ui</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="external">awesome-public-datasets</a></li>
<li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">awesome-AppSec(系统安全)</a></li>
<li><a href="https://github.com/okulbilisim/awesome-datascience" target="_blank" rel="external">awesome-datascience</a></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="external">awesome-dataviz</a> - 数据可视化库及资料</li>
</ul>
<p><strong> 书籍资料 </strong></p>
<ul>
<li><a href="https://github.com/bingwen/free-programming-books/blob/master/free-programming-books-ch.md" target="_blank" rel="external">free-programming-books</a> <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文版</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="external">《程序员编程艺术 — 面试和算法心得》</a></li>
<li><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">GoBooks</a></li>
<li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="external">Papers we love</a></li>
<li><a href="https://github.com/JustFollowUs/Natural-Language-Processing" target="_blank" rel="external">自然语言处理NLP推荐学习路线及参考资料</a></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">超级棒的机器学习资料（框架，库，软件）</a>, <a href="http://www.oschina.net/news/53818/awesome-machine-learning" target="_blank" rel="external">中文翻译版</a></li>
<li><a href="http://news.cnblogs.com/n/504467/" target="_blank" rel="external">机器学习(Machine Learning)&amp;深入学习(Deep Learning)资料</a></li>
<li><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">Docker资料合集</a></li>
<li><a href="https://github.com/apache/incubator-storm/tree/master/examples/storm-starter" target="_blank" rel="external">学习使用Strom</a></li>
<li><a href="http://ercoppa.github.io/HadoopInternals/" target="_blank" rel="external">Hadoop Internals</a></li>
<li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="external">Spark Internals</a></li>
<li><a href="http://hadoop.readthedocs.org/en/latest/" target="_blank" rel="external">大数据时代的数据分析与数据挖掘 – 基于Hadoop实现</a></li>
<li><a href="http://samypesse.gitbooks.io/how-to-create-an-operating-system/index.html" target="_blank" rel="external">如何制作操作系统</a></li>
<li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="external">借助开源项目学习软件开发</a></li>
<li><a href="http://code.csdn.net/news/2821842" target="_blank" rel="external">几个不错的开源游戏引擎</a></li>
<li><a href="https://github.com/hit9/PyZh" target="_blank" rel="external">一起写Python文章，一起看Python文章</a></li>
<li><a href="http://blog.fens.me/series-r/" target="_blank" rel="external">R的极客理想系列文章</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP接口设计指南</a></li>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="external">分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a></li>
<li><a href="https://github.com/rxin/db-readings" target="_blank" rel="external">Readings in Databases</a></li>
<li><a href="https://github.com/rushter/data-science-blogs" target="_blank" rel="external">Data Science blogs</a></li>
<li><a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="external">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">Android Code Path</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">Android Learn Notes</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="external">PHP 类库框架，资料集合</a></li>
</ul>
<p><strong> 优秀项目 </strong></p>
<ul>
<li><a href="http://news.cnblogs.com/n/506775/" target="_blank" rel="external">最值得关注的10个C语言开源项目</a></li>
<li><a href="http://code.csdn.net/news/2822568" target="_blank" rel="external">15款值得学习的小型开源项目</a></li>
<li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">iOS-100个开源组件</a></li>
<li><a href="http://code.csdn.net/news/2822753" target="_blank" rel="external">十大Material Design开源项目</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android开源项目分类汇总</a></li>
</ul>
<p><strong> 前端 &amp; Node.js </strong></p>
<ul>
<li><a href="https://github.com/moklick/frontend-stuff" target="_blank" rel="external">前端资源</a></li>
<li><a href="https://github.com/w3crange/Front-End-Develop-Guide" target="_blank" rel="external">前端开发指南</a></li>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">前端技能汇总</a></li>
<li><a href="http://www.daqianduan.com/nav" target="_blank" rel="external">前端资源大导航</a></li>
<li><a href="https://github.com/lisposter/frontend-books" target="_blank" rel="external">收集前端方面的书籍</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="external">2014年最新前端开发面试题</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">简单清晰的JavaScript语言教程，代码示例</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">JavaScript编程规范</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JavaScript必看视频</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript标准参考教程（阮一峰的，整理的不错）</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JS必看</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning/blob/master/ZH-CN.md" target="_blank" rel="external">AngularJS Guide的中文分支</a></li>
<li><a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="external">Angular2学习资料</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS应用的最佳实践和风格指南</a></li>
<li><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">React-Native学习指南</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/sergtitov/NodeJS-Learning/blob/master/cn_resource.md" target="_blank" rel="external">node.js中文资料导航</a></li>
<li><a href="http://blog.fens.me/nodejs-roadmap/" target="_blank" rel="external">Nodejs学习路线图</a></li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/9629682#9629682" target="_blank" rel="external">如何学习nodejs</a></li>
</ul>
<p><strong> 工作，工具 </strong></p>
<ul>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="external">系统管理员工具集合</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://github.com/taobao/nginx-book" target="_blank" rel="external">Nginx开发从入门到精通</a></li>
<li><a href="https://github.com/justjavac/Google-IPs.git" target="_blank" rel="external">Google 全球 IP 地址库</a></li>
<li><a href="https://github.com/greatghoul/remote-working" target="_blank" rel="external">收集整理远程工作相关的资料</a></li>
<li><a href="https://github.com/chriskempson/base16" target="_blank" rel="external">Color schemes for hackers</a></li>
<li><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="external">游戏开发工具集，MagicTools</a></li>
<li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="external">开发者工具箱， free-for-dev</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="external">Git风格指南</a></li>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Bast-App</a></li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a>平台工具</h3><ul>
<li>Phabricator: 软件开发平台，Facebook出品，现已开源，CodeReview神器（从这个往下一直到GitLab之间的工具统统可以忽略了）</li>
<li>Redmine/Trac：项目管理平台</li>
<li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究）</li>
<li>git，svn：源代码版本控制系统</li>
<li>GitLab/Gitorious：构建自己的GitHub服务器</li>
<li>Postman:RESTful，api测试工具，HTTP接口开发必备神器</li>
<li><a href="http://airbnb.design/lottie/" target="_blank" rel="external">Lottie</a>: AE动画变原生代码，设计师必备</li>
<li>Sonar：代码质量管理平台</li>
<li>Nessus: 系统漏洞扫描器</li>
<li>gitbook：<a href="https://www.gitbook.io/" target="_blank" rel="external">https://www.gitbook.io/</a>写书的好东西，当然用来写文档也很不错的（发现不少产品的文档就是用的它）</li>
<li>Travis-ci：开源项目持续集成必备，和GitHub相结合，<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>Trello：简单高效的项目管理平台，注重看板管理</li>
<li>日志聚合：graylog、ELK（推荐新一代的graylog，基本上算作是开源的Splunk了）</li>
<li>开源测试工具、社区（Selenium、OpenQA.org）</li>
<li>Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。其他类似工具：CFEngine、SaltStack、Ansible</li>
<li>Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li>
<li>Ganglia：分布式监控系统</li>
<li>fleet：分布式init系统</li>
<li>Ansible：能够大大简化Unix管理员的自动化配置管理与流程控制方式。</li>
<li>GeoLite免费数据库</li>
<li>jsHint:js代码验证工具</li>
<li>haproxy: 高可用负载均衡（此外类似的系统还有nginx，lvs）</li>
<li>linux OS性能分析工具：dstat，iostat，iotop，nmon</li>
<li>kimono：将网页信息转换为api接口的工具</li>
<li>集群管理工具：pdsh，ClusterSSH，mussh（可以用它快速管理Hadoop集群）ipa-server做统一的认证管理</li>
<li>influxdb: 分布式时序数据库，结合Grafana可以进行实时数据分析</li>
<li>dot: 程序员绘图利器（是种语言，也是个工具）</li>
<li>Graph::Easy: （Ascii Art工具）字符流程图绘制，实乃程序员装逼神器。其他类似的工具Asciiflow, vi插件：drawit!</li>
<li>spf13-vim: 让你的vim飞起来！</li>
<li>Kubernetes: 容器集群管理系统</li>
<li>Gatling: 服务器性能压力测试工具</li>
<li>systemtap: Linux内核探测工具、内核调试神器</li>
<li>Cygwin：Windows下的类UNIX模拟环境</li>
<li>MinGW：Windows下的GNU工具集</li>
</ul>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Mac下的神兵利器</a></li>
<li><a href="https://asciinema.org/" target="_blank" rel="external">asciinema</a>: 终端录屏神器</li>
<li>Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理</li>
<li>Charles: Mac上的Web代理调试工具，类似Fiddler</li>
<li><a href="https://fir.im/" target="_blank" rel="external">fir.im</a>免费的移动App内测托管平台</li>
<li>wireshark：知名的网络数据包分析工具</li>
<li>PowerCmd:替代Windows Cmd的利器</li>
<li>RegexBuddy:强大的正则表达式测试工具</li>
<li>Soure Insight：源代码阅读神器</li>
<li>SublimeText：程序员最爱的编辑器</li>
<li>Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的</li>
<li>Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。</li>
<li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li>
<li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li>
<li>Radmin: 远程控制工具，用了一段时间的DameWare，还要破解，对Win7支持的不好，还是发现这个好用</li>
<li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li>
<li>Clover：给资源管理器加上多标签，我平时工作的时候就用它，像Chrome一样使用资源管理器，甚是方便啊（这是Windows平台的）</li>
<li>WinLaunch：模拟Mac OS的Launch工具</li>
<li>Fritzing：绘制电路图</li>
<li>LICEcap：gif教程制作</li>
<li>git，svn：版本控制系统</li>
<li>Enigma Virtual Box（将exe，dll等封装成一个可执行程序）</li>
<li>Open DBDiff(针对SqlServer)数据库同步</li>
<li>SymmetricDS：数据库同步</li>
<li>BIEE,Infomatica，SPSS，weka，R语言：数据分析</li>
<li>CodeSmith，LightSwitch：代码生成</li>
<li>Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。</li>
<li>Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能</li>
<li>log explorer：查看SqlServer日志</li>
<li>dependency walker：查询Windows应用程序dll依赖项</li>
<li>Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上</li>
<li>ngrok：内网穿透工具</li>
<li>Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错<a href="http://www.processon.com/" target="_blank" rel="external">http://www.processon.com/</a></li>
<li>Origami: 次世代交互设计神器</li>
<li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="external">http://naotu.baidu.com/</a></li>
<li>tinyproxy:（Linux）小型的代理服务器支持http和https协议</li>
<li>EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。</li>
<li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢）</li>
<li>ApkIDE:Android反编译神器</li>
<li>翻、墙工具（自|由|门、天行浏览器，免费的VPN：<a href="http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）" target="_blank" rel="external">http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）</a></li>
<li>设计工具：Sketch、OmniGraffle</li>
<li>MindManger：思维导图</li>
<li>MagicDraw:Uml图工具</li>
<li>innotop：MySql状态监测工具</li>
<li>墨刀：比Axure更为简单的原型工具，可以快速制作原型</li>
<li>Karabiner: Mac专用，修改键盘键位的神器，机械键盘必备</li>
<li>Timing：Mac专用，统计你的时间都花在哪了</li>
<li>f.lux: 护眼神器，过滤蓝光，程序员护眼必备良品</li>
<li>LaTeX: 基于ΤΕΧ的排版系统, 让写论文更方便</li>
<li>Antlr：开源的语法分析器，可以让你毫无压力的写个小parser</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li>DnsPod：一个不错的智能DNS服务解析提供商</li>
<li>DigitalOcean：海外的云主机提供商，价格便宜，磁盘是SSD的，用过一段时间整体上还可以，不过毕竟是海外的，网速比较慢。国内的就是阿里云了。还有个比较知名的是：Linode，据说速度上比DigitalOcean好很多</li>
<li>移动端推送服务：个推、JPush、云巴</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>：移动应用开发服务，包括:数据存储、用户管理、消息推送、应用统计、社交分享、实时聊天等服务</li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">Color Hunt</a>: 漂亮炫酷的配色网站，程序员的福音</li>
<li><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku: PaaS平台</a></li>
</ul>
<h3 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a>爬虫相关(好玩的工具)</h3><ul>
<li>Phantomjs(Web自动化测试，服务端渲染等)</li>
<li>berserkJS(基于Phantomjs的改进版本)</li>
<li>SlimerJS</li>
<li>CasperJS</li>
<li>selenium</li>
<li>HtmlUnit（开源的java 页面分析工具，也是个Headless的浏览器）</li>
</ul>
<h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul>
<li>sql注入检测：sqlmap、haviji</li>
<li>端口扫描：nmap</li>
<li>渗透测试：BurpLoader</li>
<li>sqltools: sql漏洞利用工具</li>
<li>snort: 入侵检测</li>
</ul>
<h3 id="Web服务器性能-压力测试工具-负载均衡器"><a href="#Web服务器性能-压力测试工具-负载均衡器" class="headerlink" title="Web服务器性能/压力测试工具/负载均衡器"></a>Web服务器性能/压力测试工具/负载均衡器</h3><ul>
<li>ab: ab是apache自带的一款功能强大的测试工具</li>
<li>curl-loader: 真实模拟、测试Web负载</li>
<li>http_load: 程序非常小，解压后也不到100K</li>
<li>webbench: 是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。</li>
<li>Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li>
<li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li>
<li>Piwik：开源网站访问量统计系统</li>
<li>ClickHeat：开源的网站点击情况热力图</li>
<li>HAProxy：高性能TCP /HTTP负载均衡器</li>
<li>ElasticSearch：搜索引擎基于Lucene</li>
<li>Page Speed SDK和YSLOW</li>
<li>HAR Viewer: HAR分析工具</li>
<li>protractor：E2E（end to end）自动化测试工具</li>
</ul>
<h2 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a>大数据处理/数据分析/分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Spark：大规模数据处理框架（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>除了Spark，其他几个不错的计算框架还有：Kylin，Flink，Drill</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Druid: 实时数据分析存储系统</li>
<li>Ambari: 大数据平台搭建、监控利器；类似的还有CDH</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享</li>
<li>Impala：新一代开源大数据分析引擎，提供Sql语义，比Hive强在速度上</li>
<li>presto: facebook的开源工具，大数据分布式sql查询引擎</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍</li>
<li>开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
<li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li>
<li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li>
<li>NoSql：ScyllaDB（宣称是世界上最快的NoSql）、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</li>
<li>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum </li>
<li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、Tinkerpop</li>
<li>NLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li>
<li>机器学习：TensorFlow（Google出品），WEKA、Mahout、scikits.learn、SkyTree</li>
<li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</li>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎，类似的还有：Azkaban</li>
<li>开源的数据分析可视化工具：Weka、Orange、KNIME</li>
<li>Cobar：阿里巴巴的MySql分布式中间件</li>
<li>数据清洗：data wrangler， Google Refine</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li><a href="https://material.io/" target="_blank" rel="external">Material Design</a>: 谷歌出品，必属精品</li>
<li>Vue.js: 借鉴了Angular及React的JS框架，设计理念较为先进</li>
<li>GRUNT: js task runner</li>
<li>Sea.js: js模块化</li>
<li>knockout.js：MVVM开发前台，绑定技术</li>
<li>Angular.js: 使用超动感HTML &amp; JS开发WEB应用！</li>
<li>Highcharts.js，Flot:常用的Web图表插件</li>
<li>NVD3: 基于d3.js的图表库</li>
<li>Raw：非常不错的一款高级数据可视化工具</li>
<li>Rickshaw:时序图标库，可用于构建实时图表</li>
<li>JavaScript InfoVis Toolkit：另一款Web数据可视化插件</li>
<li>Pdf.js，在html中展现pdf</li>
<li>ACE，CodeMirror：Html代码编辑器（ACE甚好啊）</li>
<li>NProcess：绚丽的加载进度条</li>
<li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal)</li>
<li>Threejs：3DWeb库</li>
<li>Hightopo：基于Html5的2D、3D可视化UI库</li>
<li>jQuery.dataTables.js:高度灵活的表格插件</li>
<li>Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的</li>
<li>director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用</li>
<li>pace.js：页面加载进度条</li>
<li>bower：Web包管理器</li>
<li>jsnice：有趣的js反编译工具，猜压缩后的变量名，<a href="http://www.jsnice.org/" target="_blank" rel="external">http://www.jsnice.org/</a></li>
<li>D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js）</li>
<li>Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile.</li>
<li>UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li>
<li>前段UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li>
<li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">https://developer.mozilla.org/en-US/</a></li>
<li>图标资源：IcoMoon（我的最爱），Font Awesome, Themify Icons，FreePik，Glyphicons</li>
<li>artDialog:非常漂亮的对话框</li>
<li>AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架</li>
<li>Respond.js：让不懂爱的IE6-8支持响应式设计</li>
<li>require.js: js模块加载库</li>
<li>select2：比chosen具有更多特性的选择框替代库</li>
<li>AngularUI：集成angular.js的UI库</li>
<li>normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库</li>
<li>CreateJS：Html5游戏引擎</li>
<li>Less,Compass:简化CSS开发</li>
<li>emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像</li>
<li>simditor:一个不错的开源的html编辑器，简洁高效</li>
<li>Sencha:  基于html5的移动端开发框架</li>
<li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li>
<li>jquery-smooth-scroll:同上，平滑滚动插件</li>
<li>Animate.css:实现了各种动画效果的css库</li>
<li>Emmet:前端工程师必备，前身为 Zen Coding</li>
<li>React: facebook出品的js UI库</li>
<li>highlight.js：专门用来做语法高亮的库</li>
<li>GoJS: Html5交互式图表库，看demo更适合层次结构的图表。</li>
<li>10 Pure CSS (Mostly) Flat Mobile Devices: <a href="http://marvelapp.github.io/devices.css/" target="_blank" rel="external">http://marvelapp.github.io/devices.css/</a></li>
<li>CodePen: <a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a></li>
<li>jsfiddle: <a href="http://jsfiddle.net/" target="_blank" rel="external">http://jsfiddle.net/</a> 前端js，html，css测试利器</li>
</ul>
<h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><p>折腾中：Scala、Python、Lua、JavaScript、Go</p>
<p>待折腾：</p>
<ul>
<li><a href="http://racket-lang.org/" target="_blank" rel="external">Racket</a></li>
<li><a href="http://ocaml.org/" target="_blank" rel="external">OCaml</a></li>
<li><a href="https://www.rust-lang.org" target="_blank" rel="external">Rust</a></li>
<li><a href="http://julialang.org/" target="_blank" rel="external">Julia</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://www.scala-lang.org/api/current/" target="_blank" rel="external">Scala Standard Library API</a></li>
<li><a href="http://twitter.github.io/scala_school/" target="_blank" rel="external">Scala School!</a>: A Scala tutorial by Twitter</li>
<li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html" target="_blank" rel="external">A Tour of Scala</a>: Tutorial introducing the main concepts of Scala</li>
<li><a href="http://stackoverflow.com/tags/scala/info" target="_blank" rel="external">Scala Overview on StackOverflow</a>: A list of useful questions sorted by topic</li>
<li><a href="http://www.artima.com/pins1ed/" target="_blank" rel="external">Programming in Scala</a>，最新的第3版，还没有电子版，电子版是第一版</li>
<li>《Scala for the Impatient》</li>
<li>《Scala in Depth》</li>
<li>《Programming Scala》Dean Wampler and Alex Payne. O’Reilly 2009</li>
<li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf" target="_blank" rel="external">Scala By Example</a></li>
<li><a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="external">Scala Cheatsheet</a>学习模式匹配的好资料</li>
<li><a href="http://docs.scala-lang.org/glossary/" target="_blank" rel="external">Glossary of Scala and FP terms</a></li>
<li><a href="https://github.com/lihaoyi/Metascala" target="_blank" rel="external">Metascala: A JVM written in Scala</a></li>
<li><a href="https://scala-lms.github.io/" target="_blank" rel="external">LMS: Program Generation and Embedded Compilers in Scala</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li>常用的IDE：IntelliJ IDEA(强烈推荐)，Eclipse，Netbeans</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="external">fastutil</a>: 性能更好的Java集合框架</li>
<li>Guava: 谷歌的Java工具包，应用广泛</li>
<li>Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程，现在已经是apache下的一个独立项目了。Spark的HA也用的这货。</li>
<li>Rx(Reactive Extensions)框架：Vert.x, RxJava(Android中用的比较多),  Quasar</li>
<li>FindBugs: 代码静态分析工具，找出代码缺陷</li>
<li>Java反编译工具：Luyten，JD-Gui</li>
<li>Drools: 规则引擎</li>
<li>Jersey: Java RESTful 框架</li>
<li>canal: 阿里巴巴出品，binlog增量订阅&amp;消费组件</li>
<li>Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring，Hibernate</li>
<li>Netty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架，spark 1.2.0就用netty替代了nio）</li>
<li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的</li>
<li>jOOQ：java Orm框架</li>
<li>Janino: 超级小又快的Java编译器，Spark的Tungsten引起用的它</li>
<li>Activiti:工作流引擎，类似的还有jBPM、Snaker</li>
<li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li>
<li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li>
<li>Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的</li>
<li>web-harvest：Web数据提取工具</li>
<li>POM工具：Maven+Artifactory</li>
<li>Akka:一款基于actor模型实现的 并发处理框架</li>
<li>EclEmma：覆盖测试工具</li>
<li>Shiro:安全框架</li>
<li>joda-time:简化时间处理</li>
<li>parboiled:表达式解析</li>
<li>dozer: 深拷贝神器</li>
<li>dubbo: 阿里巴巴出品的分布式服务框架</li>
<li>jackson databind: json序列化工具(fastjson,simplejson)</li>
<li>Atomikos: 分布式事务管理</li>
<li>BoneCP：性能很赞的数据库连接池组件，据说比c3p0快好多</li>
<li>ProGuard: obconfuscation tool, 强大的混淆工具</li>
<li>S-99：Scala相关的99个问题</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li>PyCharm：最佳Python IDE</li>
<li>Eric,Eclipse+pydev,比较不错的Python IDE</li>
<li>PyWin:Win32 api编程包</li>
<li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib</li>
<li>GUI相关：PyQt，PyQwt</li>
<li>supervisor:进程监控工具</li>
<li>PyGame: 基于Python的多媒体开发和游戏软件开发模块</li>
<li>Web框架: Django 开源web开发框架，它鼓励快速开发,并遵循MVC设计</li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">Swift精选资料</a></li>
<li><a href="http://www.csdn.net/article/2015-01-09/2823502-swift-open-source-libs" target="_blank" rel="external">43个优秀的开源项目</a></li>
</ul>
<p><strong>客户端</strong></p>
<ul>
<li><a href="https://github.com/YANGReal/JokeClient-Swift" target="_blank" rel="external">糗事百科 Swift</a></li>
<li><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="external">HackerNews Swift</a></li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="external">知乎日报app</a></li>
</ul>
<p><strong>Framework</strong></p>
<ul>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="external">Twitter框架</a></li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="external">Mac下简单HTTP Server Swifter</a></li>
</ul>
<p><strong>小工具</strong></p>
<ul>
<li><a href="https://github.com/ChrisChares/swift-alarm" target="_blank" rel="external">Swift Alarm</a></li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="external">Swift Note</a></li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="external">Swift RSS Reader</a></li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="external">Swift-PM2.5查询app</a></li>
</ul>
<p><strong>游戏</strong></p>
<ul>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">Flappy Swift</a></li>
<li><a href="https://github.com/geek5nan/FanFanSwift" target="_blank" rel="external">FanFan Swift</a></li>
</ul>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><ul>
<li>Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器</li>
<li>CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单</li>
<li>netz:免费的 .NET 可执行文件压缩工具</li>
<li>SmartAssembly:变态的.net代码优化混淆工具</li>
<li>NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的)</li>
<li>ILMerge：将所有引用的DLL和exe文件打成一个exe文件</li>
<li>ILSpy:开源.net程序反编译工具</li>
<li>Javascript.NET：很不错的js执行引擎，对v8做了封装</li>
<li>NPOI: Excel操作</li>
<li>DotRAS:远程访问服务的模块</li>
<li>WinHtmlEditor: Winform下的html编辑器</li>
<li>SmartThreadPool:使用C#实现的，带高级特性的线程池</li>
<li>Snoop: WPF Spy Utility</li>
<li>Autofac: 轻量级IoC框架</li>
<li>HtmlAgilityPack：Html解析利器</li>
<li>Quartz.NET：Job调度</li>
<li>HttpLib：@CodePlex，简化http请求</li>
<li>SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了</li>
<li>DocX：未安装Office的情况下操作Word文件</li>
<li>Dapper：轻量级的ORM类，性能不错</li>
<li>HubbleDotNet：支持接入数据库的全文搜索系统</li>
<li>fastJSON：@CodeProject，高性能的json序列化类</li>
<li>ZXing.NET：@CodePlex，QR，条形码相关</li>
<li>Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎)</li>
<li>AntiXSS：微软的XSS防御库Microsoft Web Protection Library</li>
<li>Jint：JavaScript解释器</li>
<li>CS-Script：将C#代码文件作为脚本执行</li>
<li>Jexus：Linux下 高性能、易用、免费的ASP.NET服务器</li>
<li>Clay：将dynamic发挥的更加灵活，像写js一样写C#</li>
<li>DynamicJSON：不必定义数据模型获取json数据</li>
<li>SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析）</li>
<li>Roslyn：C#，VB编译器</li>
<li>ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便</li>
<li>UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF）</li>
<li>NetSparkle：应用自动更新组件</li>
<li>ConfuserEx: 开源.net混淆工具</li>
<li>ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务</li>
<li>Expression Evaluator：Eval for C#,处理字符串表达式</li>
<li><a href="http://nugetmusthaves.com/" target="_blank" rel="external">http://nugetmusthaves.com/</a></li>
<li>Reactive Extensions (Rx):异步，事件驱动编程包， Rx = Observables + LINQ + Schedulers</li>
</ul>
<h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul>
<li>Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。</li>
<li>libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢）</li>
<li>Boost:不多说了，准C++标准库</li>
<li>Valgrind\Ptmalloc\Purify: 调试工具</li>
<li>NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦)</li>
<li><a href="https://pocoproject.org/" target="_blank" rel="external">POCO</a> - 开源的C++类库及应用程序框架的集合,它主要提供简单的、快速的网络和可移植应用程序</li>
<li>breakpad:崩溃转储和分析模块，很多crashreport会用到</li>
<li>UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏开发相关"><a href="#游戏开发相关" class="headerlink" title="游戏开发相关"></a>游戏开发相关</h3><ul>
<li>MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的)</li>
<li>HP-Socket：见有有些页游服务器使用这个构建的</li>
<li>Unreal: 虚幻引擎，C++，基于这个引擎的游戏很多</li>
<li>OGRE：大名鼎鼎的3D图形渲染引擎，天龙八部OL、火炬之光等不少游戏都用了这个引擎</li>
<li>OpenVDB：梦工厂C++的特效库，开源的</li>
<li>cocos2d：跨平台2D游戏引擎</li>
<li>unity3d：跨平台3D游戏引擎，很火的哦</li>
<li>Nodejs：也有不少使用它来开发手游和也有服务器（网易的Pomelo）</li>
</ul>
<h3 id="日志聚合，分布式日志收集"><a href="#日志聚合，分布式日志收集" class="headerlink" title="日志聚合，分布式日志收集"></a>日志聚合，分布式日志收集</h3><ul>
<li>Scribe：Facebook的（nodejs + scribe + inotify 同步日志）</li>
<li>logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台</li>
<li>log.io: nodejs开发的实时日志收集系统</li>
</ul>
<h3 id="RTP-实时传输协议与音视频"><a href="#RTP-实时传输协议与音视频" class="headerlink" title="RTP,实时传输协议与音视频"></a>RTP,实时传输协议与音视频</h3><ul>
<li>RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准)</li>
<li>环形缓冲区，实时数据传输用</li>
<li>SDL,ffmpeg,live555,Speex</li>
<li>Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 好文转载 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[145] Binary Tree Postorder Traversal]]></title>
      <url>http://linbingdong.com/2017/02/14/LeetCode%5B145%5D%20Binary%20Tree%20Postorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<a id="more"></a>
<p>For example:<br>Given binary tree {1,null,2,3},</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return [3,2,1].</p>
<p><strong>分析:</strong></p>
<p>两种种方法：</p>
<ol>
<li><p>递归法</p>
<p> 递归是最简单的。</p>
</li>
<li><p>迭代法</p>
</li>
</ol>
<p><strong>代码:</strong></p>
<p>递归法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">            result.addAll(inorderTraversal(root.left));</div><div class="line">            result.addAll(inorderTraversal(root.right));</div><div class="line">            result.add(root.val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        LinkedList&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> result;</div><div class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        TreeNode n = root;</div><div class="line">        stack.push(n);</div><div class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</div><div class="line">            n = stack.pop();</div><div class="line">            result.addFirst(n.val);</div><div class="line">            <span class="keyword">if</span> (n.left != <span class="keyword">null</span>) stack.push(n.left);</div><div class="line">            <span class="keyword">if</span> (n.right != <span class="keyword">null</span>) stack.push(n.right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZeroMQ初探]]></title>
      <url>http://linbingdong.com/2017/02/14/ZeroMQ%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>ZeroMQ介绍、三种模式讲解及代码示例(Java &amp;&amp; Python)。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ZeroMQ（也称为 ØMQ，0MQ 或 zmq）是一个可嵌入的网络通讯库（对 Socket 进行了封装）。 它提供了携带跨越多种传输协议（如：进程内，进程间，TCP 和多播）的原子消息的 sockets 。 有了ZeroMQ，我们可以通过发布-订阅、任务分发、和请求-回复等模式来建立 N-N 的 socket 连接。 ZeroMQ 的异步 I / O 模型为我们提供可扩展的基于异步消息处理任务的多核应用程序。 它有一系列语言API（几乎囊括所有编程语言），并能够在大多数操作系统上运行。</p>
<p>传统的 TCP Socket 的连接是1对1的，可以认为“1个 socket = 1个连接”，每一个线程独立维护一个 socket 。但是 ZMQ 摒弃了这种1对1的模式，ZMQ的 Socket 可以很轻松地实现1对N和N对N的连接模式，一个 ZMQ 的 socket 可以自动地维护一组连接，用户无法操作这些连接，用户只能操作套接字而不是连接本身。所以说在 ZMQ 的世界里，连接是私有的。</p>
<h2 id="三种基本模型"><a href="#三种基本模型" class="headerlink" title="三种基本模型"></a>三种基本模型</h2><p>ZMQ 提供了三种基本的通信模型，分别是 Request-Reply 、Publish-Subscribe 和 Parallel Pipeline ，接下来举例说明三种模型并给出相应的代码实现。</p>
<h3 id="Request-Reply（请求-回复）"><a href="#Request-Reply（请求-回复）" class="headerlink" title="Request-Reply（请求-回复）"></a>Request-Reply（请求-回复）</h3><p>以 “Hello World” 为例。客户端发起请求，并等待服务端回应请求。客户端发送一个简单的 “Hello”，服务端则回应一个 “World”。可以有 N 个客户端，一个服务端，因此是 1-N 连接。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-bdc5fcaa6a2fa8c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Request-Reply"></p>
<p>服务端代码如下：</p>
<ul>
<li>hwserver.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hwserver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket responder = context.socket(ZMQ.REP);</div><div class="line">        responder.bind(<span class="string">"tcp://*:5555"</span>);</div><div class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class="line">            <span class="keyword">byte</span>[] request = responder.recv(<span class="number">0</span>);</div><div class="line">            System.out.println(<span class="string">"Received"</span> + <span class="keyword">new</span> String(request));</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            String reply = <span class="string">"World"</span>;</div><div class="line">            responder.send(reply.getBytes(),<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        responder.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>hwserver.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> zmq</div><div class="line">context = zmq.Context()</div><div class="line">socket = context.socket(zmq.REP)</div><div class="line">socket.bind(<span class="string">"tcp://*:5555"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    message = socket.recv()</div><div class="line">    print(<span class="string">"Received request: %s"</span> % message)</div><div class="line">    <span class="comment"># Do some 'work'</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    socket.send(<span class="string">b"World"</span>)</div></pre></td></tr></table></figure>
<p>客户端代码如下：</p>
<ul>
<li>hwclient.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hwclient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket requester = context.socket(ZMQ.REQ);</div><div class="line">        requester.connect(<span class="string">"tcp://localhost:5555"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> requestNbr = <span class="number">0</span>; requestNbr != <span class="number">10</span>; requestNbr++) &#123;</div><div class="line">            String request = <span class="string">"Hello"</span>;</div><div class="line">            System.out.println(<span class="string">"Sending Hello"</span> + requestNbr);</div><div class="line">            requester.send(request.getBytes(),<span class="number">0</span>);</div><div class="line">            <span class="keyword">byte</span>[] reply = requester.recv(<span class="number">0</span>);</div><div class="line">            System.out.println(<span class="string">"Reveived "</span> + <span class="keyword">new</span> String(reply) + <span class="string">" "</span> + requestNbr);</div><div class="line">        &#125;</div><div class="line">        requester.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>hwclient.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zmq</div><div class="line">context = zmq.Context()</div><div class="line">print(<span class="string">"Connecting to hello world server..."</span>)</div><div class="line">socket = context.socket(zmq.REQ)</div><div class="line">socket.connect(<span class="string">"tcp://localhost:5555"</span>)</div><div class="line"><span class="keyword">for</span> request <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    print(<span class="string">"Sending request %s ..."</span> % request)</div><div class="line">    socket.send(<span class="string">b"Hello"</span>)</div><div class="line">    message = socket.recv()</div><div class="line">    print(<span class="string">"Received reply %s [ %s ]"</span> % (request,message))</div></pre></td></tr></table></figure>
<p>从以上的过程，我们可以了解到使用 ZMQ 写基本的程序的方法，需要注意的是：</p>
<ol>
<li>服务端和客户端无论谁先启动，效果是相同的，这点不同于 Socket。</li>
<li>在服务端收到信息以前，程序是阻塞的，会一直等待客户端连接上来。</li>
<li>服务端收到信息后，会发送一个 “World” 给客户端。值得注意的是一定是客户端连接上来以后，发消息给服务端，服务端接受消息然后响应客户端，这样一问一答。</li>
<li>ZMQ 的通信单元是消息，它只知道消息的长度，并不关心消息格式。因此，你可以使用任何你觉得好用的数据格式，如 Xml、Protocol Buffers、Thrift、json 等等。</li>
</ol>
<h3 id="Publish-Subscribe（发布-订阅）"><a href="#Publish-Subscribe（发布-订阅）" class="headerlink" title="Publish-Subscribe（发布-订阅）"></a>Publish-Subscribe（发布-订阅）</h3><p>下面以一个天气预报的例子来介绍该模式。</p>
<p>服务端不断地更新各个城市的天气，客户端可以订阅自己感兴趣（通过一个过滤器）的城市的天气信息。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3faf1defd6c84b82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Publish-Subscribe"></p>
<p>服务端代码如下：</p>
<ul>
<li>wuserver.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wuserver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket publisher = context.socket(ZMQ.PUB);</div><div class="line">        publisher.bind(<span class="string">"tcp://*:5556"</span>);</div><div class="line">        publisher.bind(<span class="string">"icp://weather"</span>);</div><div class="line">        Random srandom = <span class="keyword">new</span> Random(System.currentTimeMillis());</div><div class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class="line">            <span class="keyword">int</span> zipcode, temperature, relhumidity;</div><div class="line">            zipcode = <span class="number">10000</span> + srandom.nextInt(<span class="number">10000</span>);</div><div class="line">            temperature = srandom.nextInt(<span class="number">215</span>) - <span class="number">80</span> + <span class="number">1</span>;</div><div class="line">            relhumidity = srandom.nextInt(<span class="number">50</span>) + <span class="number">10</span> + <span class="number">1</span>;</div><div class="line">            String update = String.format(<span class="string">"%05d %d %d"</span>, zipcode, temperature, relhumidity);</div><div class="line">        &#125;</div><div class="line">        publisher.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>wuserver.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</div><div class="line"><span class="keyword">import</span> zmq</div><div class="line">context = zmq.Context()</div><div class="line">socket = context.socket(zmq.PUB)</div><div class="line">socket.bind(<span class="string">"tcp://*:5556"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    zipcode = randrange(<span class="number">1</span>, <span class="number">100000</span>)</div><div class="line">    temperature = randrange(<span class="number">-80</span>, <span class="number">135</span>)</div><div class="line">    relhumidity = randrange(<span class="number">10</span>, <span class="number">60</span>)</div><div class="line">    socket.send_string(<span class="string">"%i %i %i"</span> % (zipcode, temperature, relhumidity))</div></pre></td></tr></table></figure>
<p>客户端代码如下：</p>
<ul>
<li>wuclient.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wuclient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket suscriber = context.socket(ZMQ.SUB);</div><div class="line">        suscriber.connect(<span class="string">"tcp://localhost:5556"</span>);</div><div class="line">        String filter = (args.length &gt; <span class="number">0</span>) ? args[<span class="number">0</span>] : <span class="string">"10001"</span>;</div><div class="line">        suscriber.suscribe(filter.getBytes());  <span class="comment">//过滤条件</span></div><div class="line">        <span class="keyword">int</span> update_nbr;</div><div class="line">        <span class="keyword">long</span> total_temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (update_nbr = <span class="number">0</span>; update_nbr &lt; <span class="number">100</span>; update_nbr++) &#123;</div><div class="line">            String string = suscriber.recvStr(<span class="number">0</span>).trim();</div><div class="line">            StringTokenizer sscanf = <span class="keyword">new</span> StringTokenizer(string, <span class="string">" "</span>);</div><div class="line">            <span class="keyword">int</span> zipcode = Integer.valueOf(sscanf.nextToken());</div><div class="line">            <span class="keyword">int</span> temperature = Integer.valueOf(sscanf.nextToken());</div><div class="line">            <span class="keyword">int</span> relhumidity = Integer.valueOf(sscanf.nextToken());</div><div class="line">            total_temp += temperature;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Average temperature for zipcode '"</span> + filter + <span class="string">"' was "</span> + (<span class="keyword">int</span>) (total_temp / update_nbr));</div><div class="line">        suscriber.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>wuclient.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> zmq</div><div class="line">context = zmq.Context()</div><div class="line">socket = context.socket(zmq.SUB)</div><div class="line">print(<span class="string">"Collecting updates from weather server..."</span>)</div><div class="line">socket.connect(<span class="string">"tcp://localhost:5556"</span>)</div><div class="line">zip_filter = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">"10001"</span></div><div class="line"><span class="keyword">if</span> isinstance(zip_filter, bytes):</div><div class="line">    zip_filter = zip_filter.decode(<span class="string">'ascii'</span>)</div><div class="line">socket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)</div><div class="line">total_temp = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> update_nbr <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    string = socket.recv_string()</div><div class="line">    zipcode, temperature, relhumidity = string.split()</div><div class="line">    total_temp += int(temperature)</div><div class="line">print(<span class="string">"Average temperature for zipcode '%s' was %dF"</span> % (zip_filter, total_temp / (update_nbr + <span class="number">1</span>)))</div></pre></td></tr></table></figure>
<p>服务器端生成随机数 zipcode、temperature、relhumidity 分别代表城市代码、温度值和湿度值，然后不断地广播信息。而客户端通过设置过滤参数，接受特定城市代码的信息，最终将收集到的温度求平均值。</p>
<p>需要注意的是：</p>
<ol>
<li>与 “Hello World” 例子不同的是，Socket 的类型变成 ZMQ.PUB 和 ZMQ.SUB 。</li>
<li>客户端需要设置一个过滤条件，接收自己感兴趣的消息。</li>
<li>发布者一直不断地发布新消息，如果中途有订阅者退出，其他均不受影响。当订阅者再连接上来的时候，收到的就是后来发送的消息了。这样比较晚加入的或者是中途离开的订阅者必然会丢失掉一部分信息。这是该模式的一个问题，即所谓的 “Slow joiner” 。</li>
</ol>
<h3 id="Parallel-Pipeline"><a href="#Parallel-Pipeline" class="headerlink" title="Parallel Pipeline"></a>Parallel Pipeline</h3><p>Parallel Pipeline 处理模式如下：</p>
<ul>
<li>ventilator 分发任务到各个 worker</li>
<li>每个 worker 执行分配到的任务</li>
<li>最后由 sink 收集从 worker 发来的结果</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b407a578492a4ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Parallel Pipeline"></p>
<ul>
<li>taskvent.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.StringTokenizer;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taskvent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        ZMQ.Context context = <span class="keyword">new</span> ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket sender = context.socket(ZMQ.PUSH);</div><div class="line">        sender.bind(<span class="string">"tcp://*:5557"</span>);</div><div class="line">        ZMQ.Socket sink = context.socket(ZMQ.PUSH);</div><div class="line">        sink.connect(<span class="string">"tcp://localhost:5558"</span>);</div><div class="line">        System.out.println(<span class="string">"Please enter when the workers are ready: "</span>);</div><div class="line">        System.in.read();</div><div class="line">        System.out.println(<span class="string">"Sending task to workes\n"</span>);</div><div class="line">        sink.send(<span class="string">"0"</span>,<span class="number">0</span>);</div><div class="line">        Random srandom = <span class="keyword">new</span> Random(System.currentTimeMillis());</div><div class="line">        <span class="keyword">int</span> task_nbr;</div><div class="line">        <span class="keyword">int</span> total_msec = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (task_nbr = <span class="number">0</span>; task_nbr &lt; <span class="number">100</span>; task_nbr++) &#123;</div><div class="line">            <span class="keyword">int</span> workload;</div><div class="line">            workload = srandom.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</div><div class="line">            total_msec += workload;</div><div class="line">            System.out.print(workload + <span class="string">"."</span>);</div><div class="line">            String string = String.format(<span class="string">"%d"</span>, workload);</div><div class="line">            sender.send(string, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Total expected cost: "</span> + total_msec + <span class="string">" msec"</span>);</div><div class="line">        sink.close();</div><div class="line">        sender.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>taskvent.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zmq</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    raw_input</div><div class="line"><span class="keyword">except</span> NameError:</div><div class="line">    raw_input = input</div><div class="line">context = zmq.Context()</div><div class="line">sender = context.socket(zmq.PUSH)</div><div class="line">sender.bind(<span class="string">"tcp://*:5557"</span>)</div><div class="line">sink = context.socket(zmq.PUSH)</div><div class="line">sink.connect(<span class="string">"tcp://localhost:5558"</span>)</div><div class="line">print(<span class="string">"Please enter when workers are ready: "</span>)</div><div class="line">_ = raw_input()</div><div class="line">print(<span class="string">"Sending tasks to workers..."</span>)</div><div class="line">sink.send(<span class="string">b'0'</span>)</div><div class="line">random.seed()</div><div class="line">total_msec = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> task_nbr <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">    workload = random.randint(<span class="number">1</span>, <span class="number">100</span>)</div><div class="line">    total_msec += workload</div><div class="line">    sender.send_string(<span class="string">u'%i'</span> % workload)</div><div class="line">print(<span class="string">"Total expected cost: %s msec"</span> % total_msec)</div><div class="line">time.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>taskwork.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">taskwork</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket receiver = context.socket(ZMQ.PULL);</div><div class="line">        receiver.connect(<span class="string">"tcp://localhost:5557"</span>);</div><div class="line">        ZMQ.Socket sender = context.socket(ZMQ.PUSH);</div><div class="line">        sender.connect(<span class="string">"tcp://localhost:5558"</span>);</div><div class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</div><div class="line">            String string = receiver.recv(<span class="number">0</span>).trim();</div><div class="line">            Long mesc = Long.parseLong(string);</div><div class="line">            System.out.flush();</div><div class="line">            System.out.print(string + <span class="string">"."</span>);</div><div class="line">            Sleep(mesc);</div><div class="line">            sender.send(<span class="string">""</span>.getBytes(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        sender.close();</div><div class="line">        receiver.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>taskwork.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zmq</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">context = zmq.Context()</div><div class="line">receiver = context.socket(zmq.PULL)</div><div class="line">receiver.connect(<span class="string">"tcp://localhost:5557"</span>)</div><div class="line">sender = context.socket(zmq.PUSH)</div><div class="line">sender.connect(<span class="string">"tcp://localhost:5558"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = receiver.recv()</div><div class="line">    sys.stdout.write(<span class="string">'.'</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line">    time.sleep(int(s) * <span class="number">0.001</span>)</div><div class="line">    sender.send(<span class="string">b''</span>)</div></pre></td></tr></table></figure>
<ul>
<li>tasksink.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.zeromq.ZMQ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tasksink</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ZMQ.Context context = ZMQ.context(<span class="number">1</span>);</div><div class="line">        ZMQ.Socket receiver = context.socket(ZMQ.PULL);</div><div class="line">        receiver.bind(<span class="string">"tcp://*:5558"</span>);</div><div class="line">        String string = <span class="keyword">new</span> String(receiver.recv(<span class="number">0</span>));</div><div class="line">        <span class="keyword">long</span> tstart = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> task_nbr;</div><div class="line">        <span class="keyword">int</span> total_mesc = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (task_nbr = <span class="number">0</span>; task_nbr &lt; <span class="number">100</span>; task_nbr++) &#123;</div><div class="line">            string = <span class="keyword">new</span> String(receiver.recv(<span class="number">0</span>).trim());</div><div class="line">            <span class="keyword">if</span> ((task_nbr / <span class="number">10</span>) * <span class="number">10</span> == task_nbr) &#123;</div><div class="line">                System.out.print(<span class="string">":"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.print(<span class="string">"."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> tend = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"\nTotal elapsed time: "</span> + (tend - tstart) + <span class="string">"msec"</span>);</div><div class="line">        receiver.close();</div><div class="line">        context.term();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>tasksink.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> zmq</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">context = zmq.Context()</div><div class="line">receiver = context.socket(zmq.PULL)</div><div class="line">receiver.bind(<span class="string">"tcp://*:5558"</span>)</div><div class="line">s = receiver.recv()</div><div class="line">tstart = time.time()</div><div class="line"><span class="keyword">for</span> task_nbr <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</div><div class="line">    s = receiver.recv()</div><div class="line">    <span class="keyword">if</span> task_nbr % <span class="number">10</span> == <span class="number">0</span>:</div><div class="line">        sys.stdout.write(<span class="string">':'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        sys.stdout.write(<span class="string">'.'</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line">tend = time.time()</div><div class="line">print(<span class="string">"Total elapsed time: %d msec"</span> % ((tend - tstart) * <span class="number">1000</span>))</div></pre></td></tr></table></figure>
<p>以下两点需要注意：</p>
<ol>
<li>ventilator 使用 ZMQ.PUSH 来分发任务；worker 用 ZMQ.PULL 来接收任务，用 ZMQ.PUSH 来发送结果；sink 用 ZMQ.PULL 来接收 worker 发来的结果。</li>
<li>ventilator 既是服务端，也是客户端（此时服务端是 sink）；worker 在两个过程中都是客户端；sink 也一直都是服务端。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://zguide.zeromq.org/page:all#advanced-request-reply" target="_blank" rel="external">ZeroMQ官方用户指南</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ZeroMQ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> Socket编程 </tag>
            
            <tag> ZeroMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[94] Binary Tree Inorder Traversal!]]></title>
      <url>http://linbingdong.com/2017/02/13/LeetCode%5B94%5D%20Binary%20Tree%20Inorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<a id="more"></a>
<p>For example:<br>Given binary tree {1,null,2,3},</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return [1,3,2].</p>
<p><strong>分析:</strong></p>
<p>两种种方法：</p>
<ol>
<li><p>递归法</p>
<p> 递归是最简单的。</p>
</li>
<li><p>迭代法</p>
<p> 迭代法比先序遍历难想一些，读者自己体会。</p>
</li>
</ol>
<p><strong>代码:</strong></p>
<p>递归法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">            result.addAll(inorderTraversal(root.left));</div><div class="line">            result.add(root.val);</div><div class="line">            result.addAll(inorderTraversal(root.right));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        TreeNode n = root;</div><div class="line">        <span class="keyword">while</span> (n != <span class="keyword">null</span> || !stack.empty()) &#123;</div><div class="line">            <span class="keyword">while</span> (n != <span class="keyword">null</span>) &#123;</div><div class="line">                stack.push(n);</div><div class="line">                n = n.left;</div><div class="line">            &#125;</div><div class="line">            n = stack.pop();</div><div class="line">            result.add(n.val);</div><div class="line">            n = n.right;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[144] Binary Tree Preorder Traversal]]></title>
      <url>http://linbingdong.com/2017/02/13/LeetCode%5B144%5D%20Binary%20Tree%20Preorder%20Traversal/</url>
      <content type="html"><![CDATA[<p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<a id="more"></a>
<p>For example:<br>Given binary tree {1,#,2,3},</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"> \</div><div class="line">  2</div><div class="line"> /</div><div class="line">3</div></pre></td></tr></table></figure>
<p>return [1,2,3].</p>
<p><strong>分析:</strong></p>
<p>两种种方法：</p>
<ol>
<li><p>递归法</p>
<p> 递归是最简单的。</p>
</li>
<li><p>迭代法</p>
<p> 迭代法使用一个栈来保存每个节点的右节点。列表 result 用来保存最后的结果。每次将节点值放入 relust 列表中，并将其右节点入栈，然后令该节点等于它的左节点，如果左节点为空，就令该节点等于栈顶元素，并让栈顶元素出栈。当节点为 null 时结束。</p>
</li>
</ol>
<p><strong>代码:</strong></p>
<p>递归法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</div><div class="line">            result.add(root.val);</div><div class="line">            result.addAll(preorderTraversal(root.left));</div><div class="line">            result.addAll(preorderTraversal(root.right));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">        Stack&lt;TreeNode&gt; rightNodes = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        TreeNode n = root;</div><div class="line">        <span class="keyword">while</span> (n != <span class="keyword">null</span>) &#123;</div><div class="line">            result.add(n.val);</div><div class="line">            <span class="keyword">if</span> (n.right != <span class="keyword">null</span>) &#123;</div><div class="line">                rightNodes.push(n.right);</div><div class="line">            &#125;</div><div class="line">            n = n.left;</div><div class="line">            <span class="keyword">if</span> (n == <span class="keyword">null</span> &amp;&amp; !rightNodes.empty()) &#123;</div><div class="line">                n = rightNodes.pop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> result;</div><div class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</div><div class="line">        TreeNode n = root;</div><div class="line">        stack.push(n);</div><div class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</div><div class="line">            n = stack.pop();</div><div class="line">            result.add(n.val);</div><div class="line">            <span class="keyword">if</span> (n.right != <span class="keyword">null</span>) stack.push(n.right);</div><div class="line">            <span class="keyword">if</span> (n.left != <span class="keyword">null</span>) stack.push(n.left);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[232] Implement Queue using Stacks]]></title>
      <url>http://linbingdong.com/2017/02/13/LeetCode%5B232%5D%20Implement%20Queue%20using%20Stacks/</url>
      <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<ul>
<li>push(x) – Push element x to the back of queue.</li>
<li>pop() – Removes the element from in front of queue.</li>
<li>peek() – Get the front element.</li>
<li>empty() – Return whether the queue is empty.</li>
</ul>
<a id="more"></a>
<p><strong>Notes:</strong></p>
<p>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</p>
<p>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</p>
<p>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<p><strong>分析:</strong></p>
<p>这题跟<a href="http://linbingdong.com/2017/02/10/LeetCode[225]%20Implement%20Stack%20using%20Queues/">LeetCode[225] Implement Stack using Queues</a>相反。</p>
<p><strong>两种方案：</strong></p>
<p>方案 A ：</p>
<p>可以用两个栈 a 和 b 来实现队列。其中，push（）都在栈 a 中进行，pop（）和 peek（）都在栈 b 中进行。如果b中没有元素可以 pop（）或 peek（），则依次从 a 中 pop（）出来并 push（）到 b 中。</p>
<p>若 a 和 b 均为空则该队列为空。</p>
<p>方案 B ：</p>
<p>也是用两个栈。其中栈 temp 是用来辅助使栈 queue 维持与入栈时相反的顺序。如入栈顺序为 1、2、3、4、5 ，最终栈 queue 维持的顺序为 5、4、3、2、1 。这样就可以在栈 queue 上直接 pop（）和 peek（）了。</p>
<p><strong>代码:</strong></p>
<p>方案 A ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</div><div class="line">    Stack&lt;Integer&gt; a = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    Stack&lt;Integer&gt; b = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x to the back of queue. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        a.push(x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (b.empty()) &#123;</div><div class="line">            <span class="keyword">while</span> (!a.empty()) &#123;</div><div class="line">                b.push(a.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b.pop();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the front element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (b.empty()) &#123;</div><div class="line">            <span class="keyword">while</span> (!a.empty()) &#123;</div><div class="line">                b.push(a.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a.empty() &amp;&amp; b.empty() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方案 B ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</div><div class="line">    Stack&lt;Integer&gt; queue = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    Stack&lt;Integer&gt; temp = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Push element x to the back of queue. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">       <span class="keyword">while</span> (!queue.empty()) &#123;</div><div class="line">           temp.push(queue.pop());</div><div class="line">       &#125;</div><div class="line">       queue.push(x);</div><div class="line">       <span class="keyword">while</span> (!temp.empty()) &#123;</div><div class="line">           queue.push(temp.pop());</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> queue.pop();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the front element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> queue.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> queue.empty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[程序员必读书单]]></title>
      <url>http://linbingdong.com/2017/02/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<p><a href="http://zh.lucida.me/" target="_blank" rel="external">Lucida</a>大神这篇文章写得非常详细，<a href="http://zh.lucida.me/blog/developer-reading-list/#cracking_the_coding_interview" target="_blank" rel="external">点此查看</a>。</p>
]]></content>
      
        <categories>
            
            <category> 学习资料 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 好文转载 </tag>
            
            <tag> 必读书单 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[225] Implement Stack using Queues]]></title>
      <url>http://linbingdong.com/2017/02/10/LeetCode%5B225%5D%20Implement%20Stack%20using%20Queues/</url>
      <content type="html"><![CDATA[<p>Implement the following operations of a stack using queues.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>empty() – Return whether the stack is empty.</li>
</ul>
<a id="more"></a>
<p><strong>Notes:</strong></p>
<p>You must use only standard operations of a queue – which means only push to back, peek/pop from front, size, and is empty operations are valid.</p>
<p>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</p>
<p>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</p>
<p><strong>分析:</strong></p>
<p>可以用Queue实现，也可以用Deque实现。</p>
<p><strong>代码:</strong></p>
<p>使用Queue：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</div><div class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/** Push element x onto stack. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        q.offer(x);</div><div class="line">        <span class="keyword">int</span> n = q.size();</div><div class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">1</span>) &#123;</div><div class="line">            q.offer(q.poll());</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> q.poll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the top element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> q.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> q.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Deque：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</div><div class="line">    Deque&lt;Integer&gt; dq = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/** Push element x onto stack. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        dq.offerLast(x);            </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dq.pollLast();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Get the top element. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dq.peekLast();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dq.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全球分布式数据库：Google Spanner（论文翻译）]]></title>
      <url>http://linbingdong.com/2017/02/10/%E5%85%A8%E7%90%83%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9AGoogle%20Spanner%EF%BC%88%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文由厦门大学计算机系教师林子雨翻译，翻译质量很高，本人只对极少数翻译得不太恰当的地方进行了修改。</p>
<p>【摘要】Spanner 是谷歌公司研发的、可扩展的、多版本、全球分布式、同步复制数据库。它是第一个把数据分布在全球范围内的系统，并且支持外部一致性的分布式事务。本文描述了 Spanner 的架构、特性、不同设计决策的背后机理和一个新的时间 API，这个 API 可以暴露时钟的不确定性。这个 API 及其实现，对于支持外部一致性和许多强大特性而言，是非常重要的，这些强大特性包括:非阻塞的读、不采用锁机制的只读事务、原子模式变更。</p>
<a id="more"></a>
<p>【关键词】Google Spanner, Bigtable, distributed database</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>Spanner 是一个可扩展的、全球分布式的数据库，是在谷歌公司设计、开发和部署的。</p>
<p>在最高抽象层面，Spanner 就是一个数据库，把数据分片存储在许多 Paxos[21]状态机上，这些机器位于遍布全球的数据中心内。复制技术可以用来服务于全球可用性和地理局部性。客户端会自动在副本之间进行失败恢复。随着数据的变化和服务器的变化，Spanner 会自动把数据进行重新分片，从而有效应对负载变化和处理失败。Spanner 被设计成可以扩展到几百万个机器节点，跨越成百上千个数据中心，具备几万亿数据库行的规模。</p>
<p>应用可以借助于 Spanner 来实现高可用性，通过在一个洲的内部和跨越不同的洲之间复制数据，保证即使面对大范围的自然灾害时数据依然可用。我们最初的客户是 F1[35]，一个谷歌广告后台的重新编程实现。F1 使用了跨越美国的 5 个副本。绝大多数其他应用很可能会在属于同一个地理范围内的 3-5 个数据中心内放置数据副本，采用相对独立的失败模式。也就是说，许多应用都会首先选择低延迟，而不是高可用性，只要系统能够从 1-2 个数据中心失败中恢复过来。</p>
<p>Spanner 的主要工作，就是管理跨越多个数据中心的数据副本，但是，在我们的分布式系统体系架构之上设计和实现重要的数据库特性方面，我们也花费了大量的时间。尽管有许多项目可以很好地使用 BigTable[9]，我们也不断收到来自客户的抱怨，客户反映 BigTable 无法应用到一些特定类型的应用上面，比如具备复杂可变的模式，或者对于在大范围内分布的多个副本数据具有较高的一致性要求。其他研究人员也提出了类似的抱怨[37]。谷歌的许多应用已经选择使用 Megastore[5]，主要是因为它的半关系数据模型和对同步复制的支持，尽管 Megastore 具备较差的写操作吞吐量。由于上述多个方面的因素，Spanner 已经从一个类似 BigTable 的单一版本的键值存储，演化成为一个具有时间属性的多版本的数据库。数据被存储到模式化的、半关系的表中，数据被版本化，每个版本都会自动以提交时间作为时间戳，旧版本的数据会更容易被垃圾回收。应用可以读取旧版本的数据。Spanner 支持通用的事务，提供了基于 SQL 的查询语言。</p>
<p>作为一个全球分布式数据库，Spanner 提供了几个有趣的特性:第一，在数据的副本配置方面，应用可以在一个很细的粒度上进行动态控制。应用可以详细规定，哪些数据中心包含哪些数据，数据距离用户有多远(控制用户读取数据的延迟)，不同数据副本之间距离有多远(控制写操作的延迟)，以及需要维护多少个副本(控制可用性和读操作性能)。数据也可以被动态和透明地在数据中心之间进行移动，从而平衡不同数据中心内资源的使用。第二， Spanner 有两个重要的特性，很难在一个分布式数据库上实现，即 Spanner 提供了读和写操作的外部一致性，以及在一个时间戳下面的跨越数据库的全球一致性的读操作。这些特性使得 Spanner 可以支持一致的备份、一致的 MapReduce 执行[12]和原子模式变更，所有都是在全球范围内实现，即使存在正在处理中的事务也可以。</p>
<p>之所以可以支持这些特性，是因为 Spanner 可以为事务分配全球范围内有意义的提交时间戳，即使事务可能是分布式的。这些时间戳反映了事务序列化的顺序。除此以外，这些序列化的顺序满足了外部一致性的要求:如果一个事务 T1 在另一个事务 T2 开始之前就已经提交了，那么，T1 的时间戳就要比 T2 的时间戳小。Spanner 是第一个可以在全球范围内提供这种保证的系统。</p>
<p>实现这种特性的关键技术就是一个新的 TrueTime API 及其实现。这个 API 可以直接暴露时钟不确定性，Spanner 时间戳的保证就是取决于这个 API 实现的界限。如果这个不确定性很大，Spanner 就降低速度来等待这个大的不确定性结束。谷歌的簇管理器软件提供了一个 TrueTime API 的实现。这种实现可以保持较小的不确定性(通常小于 10ms)，主要是借助于现代时钟参考值(比如 GPS 和原子钟)。</p>
<p>第 2 部分描述了 Spanner 实现的结构、特性集和工程方面的决策;第 3 部分介绍我们的新的 TrueTime API，并且描述了它的实现;第 4 部分描述了 Spanner 如何使用 TrueTime 来实现外部一致性的分布式事务、不用锁机制的只读事务和原子模式更新。第 5 部分提供了测试 Spanner 性能和 TrueTime 行为的测试基准，并讨论了 F1 的经验。第 6、7 和 8 部分讨论了相关工作，并给出总结。</p>
<h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h2><p>本部分内容描述了 Spanner 的结构和背后的实现机理，然后描述了目录抽象，它被用来管理副本和局部性，并介绍了数据的转移单位。最后，将讨论我们的数据模型，从而说明为什么 Spanner 看起来更加像一个关系数据库，而不是一个键值数据库;还会讨论应用如何可以控制数据的局部性。</p>
<p>一个 Spanner 部署称为一个 universe。假设 Spanner 在全球范围内管理数据，那么，将会只有可数的、运行中的 universe。我们当前正在运行一个测试用的 universe，一个部署/线上用的 universe 和一个只用于线上应用的 universe。</p>
<p>Spanner 被组织成许多个 zone 的集合，每个 zone 都大概像一个 BigTable 服务器的部署。 zone 是管理部署的基本单元。zone 的集合也是数据可以被复制到的位置的集合。当新的数据中心加入服务，或者老的数据中心被关闭时，zone 可以被加入到一个运行的系统中，或者从中移除。zone 也是物理隔离的单元，在一个数据中心中，可能有一个或者多个 zone， 例如，当属于不同应用的数据必须被分区存储到同一个数据中心的不同服务器集合中时，一个数据中心就会有多个 zone 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8d4d85a54036697f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<p>图 1 显示了在一个 Spanner 的 universe 中的服务器。一个 zone 包括一个 zonemaster， 和一百至几千个 spanserver。Zonemaster 把数据分配给 spanserver，spanserver 把数据提供给客户端。客户端使用每个 zone 上面的 location proxy 来定位可以为自己提供数据的 spanserver。Universe master 和 placement driver，当前都只有一个。Universe master 主要是一个控制台，它显示了关于 zone 的各种状态信息，可以用于相互之间的调试。Placement driver 会周期性地与 spanserver 进行交互，来发现那些需要被转移的数据，或者是为了满足新的副本约束条件，或者是为了进行负载均衡。</p>
<h3 id="2-1-Spanserver-软件栈"><a href="#2-1-Spanserver-软件栈" class="headerlink" title="2.1 Spanserver 软件栈"></a>2.1 Spanserver 软件栈</h3><p>本部分内容主要关注 spanserver 实现，来解释复制和分布式事务是如何被架构到我们的基于 BigTable 的实现之上的。图 2 显示了软件栈。在底部，每个 spanserver 负载管理 100-1000 个称为 tablet 的数据结构的实例。一个 tablet 就类似于 BigTable 中的 tablet，也实现了下面的映射: (key:string, timestamp:int64)-&gt;string</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b99c0dffe8361eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p>与 BigTable 不同的是，Spanner 会把时间戳分配给数据，这种非常重要的方式，使得 Spanner 更像一个多版本数据库，而不是一个键值存储。一个 tablet 的状态是存储在类似于 B-树的文件集合和写前(write-ahead)的日志中，所有这些都会被保存到一个分布式的文件系统中，这个分布式文件系统被称为 Colossus，它继承自 Google File System。</p>
<p>为了支持复制，每个 spanserver 会在每个 tablet 上面实现一个单个的 Paxos 状态机。一个之前实现的Spanner 可以支持在每个 tablet 上面实现多个 Paxos 状态机器，它可以允许更加灵活的复制配置，但是，这种设计过于复杂，被我们舍弃了。每个状态机器都会在相应的 tablet 中保存自己的元数据和日志。我们的 Paxos 实现支持长寿命的领导者（采用基于时间的领导者租约），时间通常在 0 到 10 秒之间。当前的 Spanner 实现中，会对每个 Paxos 写操作进行两次记录:一次是写入到 tablet 日志中，一次是写入到 Paxos 日志中。这种做法只是权宜之计，我们以后会进行完善。我们在 Paxos 实现上采用了管道化的方式，从而可以在存在广域网延迟时改进 Spanner 的吞吐量，但是，Paxos 会把写操作按照顺序的方式执行。</p>
<p>Paxos 状态机是用来实现一系列被一致性复制的映射。每个副本的键值映射状态，都会被保存到相应的 tablet 中。写操作必须在领导者上初始化 Paxos 协议，读操作可以直接从底层的任何副本的 tablet 中访问状态信息，只要这个副本足够新。副本的集合被称为一个 Paxos group。</p>
<p>对于每个是领导者的副本而言，每个 spanserver 会实现一个锁表来实现并发控制。这个锁表包含了两阶段锁机制的状态:它把键的值域映射到锁状态上面。注意，采用一个长寿命的 Paxos 领导者，对于有效管理锁表而言是非常关键的。在 BigTable 和 Spanner 中，我们都专门为长事务做了设计，比如，对于报表操作，可能要持续几分钟，当存在冲突时，采用乐观并发控制机制会表现出很差的性能。对于那些需要同步的操作，比如事务型的读操作，需要获得锁表中的锁，而其他类型的操作则可以不理会锁表。</p>
<p>对于每个扮演领导者角色的副本，每个 spanserver 也会实施一个事务管理器来支持分布式事务。这个事务管理器被用来实现一个 participant leader，该组内的其他副本则是作为 participant slaves。如果一个事务只包含一个 Paxos 组(对于许多事务而言都是如此)，它就可以绕过事务管理器，因为锁表和 Paxos 二者一起可以保证事务性。如果一个事务包含了多 于一个 Paxos 组，那些组的领导者之间会彼此协调合作完成两阶段提交。其中一个参与者组，会被选为协调者，该组的 participant leader 被称为 coordinator leader，该组的 participant slaves 被称为 coordinator slaves。每个事务管理器的状态，会被保存到底层的 Paxos 组。</p>
<h3 id="2-2-目录和放置"><a href="#2-2-目录和放置" class="headerlink" title="2.2 目录和放置"></a>2.2 目录和放置</h3><p>在一系列键值映射的上层，Spanner 实现支持一个被称为“目录”的桶抽象，也就是包含公共前缀的连续键的集合。(选择“目录”作为名称，主要是由于历史沿袭的考虑，实际 上更好的名称应该是“桶”)。我们会在第 2.3 节解释前缀的源头。对目录的支持，可以让应用通过选择合适的键来控制数据的局部性。</p>
<p>一个目录是数据放置的基本单元。属于一个目录的所有数据，都具有相同的副本配置。 当数据在不同的 Paxos 组之间进行移动时，会一个目录一个目录地转移，如图 3 所示。Spanner 可能会移动一个目录从而减轻一个 Paxos 组的负担，也可能会把那些被频繁地一起访问的目录都放置到同一个组中，或者会把一个目录转移到距离访问者更近的地方。当客户端操作正在进行时，也可以进行目录的转移。我们可以预期在几秒内转移 50MB 的目录。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-192ba58099b34f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p>
<p>一个 Paxos 组可以包含多个目录，这意味着一个 Spanner tablet 是不同于一个 BigTable tablet 的。一个 Spanner tablet 没有必要是一个行空间内按照词典顺序连续的分区，相反，它可以是行空间内的多个分区。我们做出这个决定，是因为这样做可以让多个被频繁一起访问的目录被整合到一起。</p>
<p>Movedir 是一个后台任务，用来在不同的 Paxos 组之间转移目录[14]。Movedir 也用来为 Paxos 组增加和删除副本[25]，因为 Spanner 目前还不支持在一个 Paxos 内部进行配置的变更。 Movedir 并不是作为一个事务来实现，这样可以避免在一个块数据转移过程中阻塞正在进行的读操作和写操作。相反，Movedir 会注册一个事实(fact)，表明它要转移数据，然后在后台运行转移数据。当它几乎快要转移完指定数量的数据时，就会启动一个事务来自动转移那部分数据，并且为两个 Paxos 组更新元数据。</p>
<p>一个目录也是一个应用可以指定的地理复制属性(即放置策略)的最小单元。我们的放置规范语言的设计，把管理复制的配置这个任务单独分离出来。管理员需要控制两个维度: 副本的数量和类型，以及这些副本的地理放置属性。他们在这两个维度里面创建了一个命名 选项的菜单。通过为每个数据库或单独的目录增加这些命名选项的组合，一个应用就可以控制数据的复制。例如，一个应用可能会在自己的目录里存储每个终端用户的数据，这就有可能使得用户 A 的数据在欧洲有三个副本，用户 B 的数据在北美有 5 个副本。</p>
<p>为了表达的清晰性，我们已经做了尽量简化。事实上，当一个目录变得太大时，Spanner 会把它分片存储。每个分片可能会被保存到不同的 Paxos 组上(因此就意味着来自不同的服 务器)。Movedir 在不同组之间转移的是分片，而不是转移整个目录。</p>
<h3 id="2-3-数据模型"><a href="#2-3-数据模型" class="headerlink" title="2.3 数据模型"></a>2.3 数据模型</h3><p>Spanner 会把下面的数据特性集合暴露给应用:基于模式化的半关系表的数据模型，查询语言和通用事务。支持这些特性的动机，是受到许多因素驱动的。需要支持模式化的半关系表是由 Megastore[5]的普及来支持的。在谷歌内部至少有 300 个应用使用 Megastore(尽 管它具有相对低的性能)，因为它的数据模型要比 BigTable 简单，更易于管理，并且支持在跨数据中心层面进行同步复制。BigTable 只可以支持跨数据中心的最终事务一致性。使用 Megastore 的著名的谷歌应用是 Gmail,Picasa,Calendar,Android Market, AppEngine。在 Spanner 中需要支持 SQL 类型的查询语言，也很显然是非常必要的，因为 Dremel[28]作为交互式分析工具已经非常普及。最后，在 BigTable 中跨行事务的缺乏来导致了用户频繁的抱怨; Percolator[32]的开发就是用来部分解决这个问题的。一些作者都在抱怨，通用的两阶段提交的代价过于昂贵，因为它会带来可用性问题和性能问题[9][10][19]。我们认为，最好让应用 程序开发人员来处理由于过度使用事务引起的性能问题，而不是总是围绕着“缺少事务”进 行编程。在 Paxos 上运行两阶段提交弱化了可用性问题。</p>
<p>应用的数据模型是架构在被目录桶装的键值映射层之上。一个应用会在一个 universe 中创建一个或者多个数据库。每个数据库可以包含无限数量的模式化的表。每个表都和关系数据库表类似，具备行、列和版本值。我们不会详细介绍 Spanner 的查询语言，它看起来很像 SQL，只是做了一些扩展。</p>
<p>Spanner 的数据模型不是纯粹关系型的，它的行必须有名称。更准确地说，每个表都需 要有包含一个或多个主键列的排序集合。这种需求，让 Spanner 看起来仍然有点像键值存储: 主键形成了一个行的名称，每个表都定义了从主键列到非主键列的映射。当一个行存在时，必须要求已经给行的一些键定义了一些值(即使是 NULL)。采用这种结构是很有用的，因为这可以让应用通过选择键来控制数据的局部性。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c784a00321761682.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p>
<p>图 4 包含了一个 Spanner 模式的实例，它是以每个用户和每个相册为基础存储图片元数据。这个模式语言和 Megastore 的类似，同时增加了额外的要求，即每个 Spanner 数据库必 须被客户端分割成一个或多个表的层次结构(hierarchy)。客户端应用会使用 INTERLEAVE IN 语句在数据库模式中声明这个层次结构。这个层次结构上面的表，是一个目录表。目录表中的每行都具有键 K，和子孙表中的所有以 K 开始(以字典顺序排序)的行一起，构成了一个目录。ON DELETE CASCADE 意味着，如果删除目录中的一个行，也会级联删除所有相关的子孙行。这个图也解释了这个实例数据库的交织层次(interleaved layout)，例如 Albums(2,1) 代表了来自 Albums 表的、对应于 user_id=2 和 album_id=1 的行。这种表的交织层次形成目录，是非常重要的，因为它允许客户端来描述存在于多个表之间的位置关系，这对于一个分片的分布式数据库的性能而言是很重要的。没有它的话，Spanner 就无法知道最重要的位置关系。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-d1557f77c3323255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表1"></p>
<p>本部分内容描述 TrueTime API，并大概给出它的实现方法。我们把大量细节内容放在另一篇论文中，我们的目标是展示这种 API 的力量。表 1 列出了 API 的方法。TrueTime 会显式地把时间表达成 TTinterval，这是一个时间区间，具有有界限的时间不确定性(不像其他 的标准时间接口，没有为客户端提供―不确定性‖这种概念)。TTinterval 区间的端点是 TTstamp 类型。TT.now()方法会返回一个 TTinterval，它可以保证包含 TT.now()方法在调用时的绝对 时间。这个时间和具备闰秒涂抹(leap-second smearing)的 UNIX 时间一样。把即时误差边 界定义为 ε,平均误差边界为ε。TT.after()和 TT.before()方法是针对 TT.now()的便捷的包装器。</p>
<p>表示一个事件 e 的绝对时间，可以利用函数 tabs(e)。如果用更加形式化的术语，TrueTime 可以保证，对于一个调用 tt=TT.now()，有 tt.earliest≤tabs(enow)≤tt.latest，其中， enow 是调用的事件。</p>
<p>在底层，TrueTime 使用的时间是 GPS 和原子钟。TrueTime 使用两种类型的时间，是因为它们有不同的失败模式。GPS 参考时间的弱点是天线和接收器失效、局部电磁干扰和相关失败(比如设计上的缺陷导致无法正确处理闰秒和电子欺骗)，以及 GPS 系统运行中断。原子钟也会失效，不过失效的方式和 GPS 无关，不同原子钟之间的失效也没有彼此关联。 由于存在频率误差，在经过很长的时间以后，原子钟都会产生明显误差。</p>
<p>TrueTime 是由每个数据中心上面的许多 time master 机器和每台机器上的一个 timeslave daemon 来共同实现的。大多数 master 都有具备专用天线的 GPS 接收器，这些 master 在物理上是相互隔离的，这样可以减少天线失效、电磁干扰和电子欺骗的影响。剩余的 master (我们称为 Armageddon master)则配备了原子钟。一个原子钟并不是很昂贵:一个 Armageddon master 的花费和一个 GPS master 的花费是同一个数量级的。所有 master 的时间 参考值都会进行彼此校对。每个 master 也会交叉检查时间参考值和本地时间的比值，如果二者差别太大，就会把自己驱逐出去。在同步期间，Armageddon master 会表现出一个逐渐增加的时间不确定性，这是由保守应用的最差时钟漂移引起的。GPS master 表现出的时间不确定性几乎接近于 0。</p>
<p>每个 daemon 会从许多 master[29]中收集投票，获得时间参考值，从而减少误差。被选中的 master 中，有些 master 是 GPS master，是从附近的数据中心获得的，剩余的 GPS master 是从远处的数据中心获得的;还有一些是 Armageddon master。Daemon 会使用一个 Marzullo 算法[27]的变种，来探测和拒绝欺骗，并且把本地时钟同步到非撒谎 master 的时间参考值。 为了免受较差的本地时钟的影响，我们会根据组件规范和运行环境确定一个界限，如果机器的本地时钟误差频繁超出这个界限，这个机器就会被驱逐出去。</p>
<p>在同步期间，一个 daemon 会表现出逐渐增加的时间不确定性。ε 是从保守应用的最差 时钟漂移中得到的。ε 也取决于 time master 的不确定性，以及与 time master 之间的通讯延迟。在我们的线上应用环境中，ε 通常是一个关于时间的锯齿形函数。在每个投票间隔中， ε 会在 1 到 7ms 之间变化。因此，在大多数情况下，ε的值是 4ms。Daemon 的投票间隔，在当前是 30 秒，当前使用的时钟漂移比率是 200 微秒/秒，二者一起意味着 0 到 6ms 的锯齿形边界。剩余的 1ms 主要来自到 time master 的通讯延迟。在失败的时候，超过这个锯齿形边界也是有可能的。例如，偶尔的 time master 不确定性，可能会引起整个数据中心范围内的 ε 值的增加。类似的，过载的机器或者网络连接，都会导致 ε 值偶尔地局部增大。</p>
<h2 id="4-并发控制"><a href="#4-并发控制" class="headerlink" title="4 并发控制"></a>4 并发控制</h2><p>本部分内容描述 TrueTime 如何可以用来保证并发控制的正确性，以及这些属性如何用来实现一些关键特性，比如外部一致性的事务、无锁机制的只读事务、针对历史数据的非阻塞读。这些特性可以保证，在时间戳为 t 的时刻的数据库读操作，一定只能看到在 t 时刻之 前已经提交的事务。</p>
<p>进一步说，把 Spanner 客户端的写操作和 Paxos 看到的写操作这二者进行区分，是非常重要的，我们把 Paxos 看到的写操作称为 Paxos 写操作。例如，两阶段提交会为准备提交阶段生成一个 Paxos 写操作，这时不会有相应的客户端写操作。</p>
<h3 id="4-1-时间戳管理"><a href="#4-1-时间戳管理" class="headerlink" title="4.1 时间戳管理"></a>4.1 时间戳管理</h3><p>表 2 列出了 Spanner 支持的操作的类型。Spanner 可以支持读写事务、只读事务(预先声明的快照隔离事务)和快照读。独立写操作，会被当成读写事务来执行。非快照独立读操作，会被当成只读事务来执行。二者都是在内部进行 retry，客户端不用进行这种 retry loop。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-91fa02b85deaedff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表2"></p>
<p>一个只读事务具备快照隔离的性能优势[6]。一个只读事务必须事先被声明不会包含任何写操作，它并不是一个简单的不包含写操作的读写事务。在一个只读事务中的读操作，在执行时会采用一个系统选择的时间戳，不包含锁机制，因此，后面到达的写操作不会被阻塞。 在一个只读事务中的读操作，可以到任何足够新的副本上去执行(见第 4.1.3 节)。</p>
<p>一个快照读操作，是针对历史数据的读取，执行过程中，不需要锁机制。一个客户端可以为快照读确定一个时间戳，或者提供一个时间范围让 Spanner 来自动选择时间戳。不管是 哪种情况，快照读操作都可以在任何具有足够新的副本上执行。</p>
<p>对于只读事务和快照读而言，一旦已经选定一个时间戳，那么，提交就是不可避免的，除非在那个时间点的数据已经被垃圾回收了。因此，客户端不必在 retry loop 中缓存结果。 当一个服务器失效的时候，客户端就可以使用同样的时间戳和当前的读位置，在另外一个服务器上继续执行读操作。</p>
<h4 id="4-1-1-Paxos-领导者租约"><a href="#4-1-1-Paxos-领导者租约" class="headerlink" title="4.1.1 Paxos 领导者租约"></a>4.1.1 Paxos 领导者租约</h4><p>Spanner 的 Paxos 实现中使用了时间化的租约，来实现长时间的领导者地位(默认是 10秒)。一个潜在的领导者会发起请求，请求时间化的租约投票，在收到指定数量的投票后，这个领导者就可以确定自己拥有了一个租约。一个副本在成功完成一个写操作后，会隐式地延期自己的租约。对于一个领导者而言，如果它的租约快要到期了，就要显示地请求租约延期。另一个领导者的租约有个时间区间，这个时间区间的起点就是这个领导者获得指定数量的投票那一刻，时间区间的终点就是这个领导者失去指定数量的投票的那一刻(因为有些投 票已经过期了)。Spanner 依赖于下面这些“不连贯性”:对于每个 Paxos 组，每个 Paxos 领 导者的租约时间区间，是和其他领导者的时间区间完全隔离的。附录 A 显示了如何强制实现这些不连贯性。</p>
<p>Spanner 实现允许一个 Paxos 领导者通过把 slave 从租约投票中释放出来这种方式，实现领导者的退位。为了保持这种彼此隔离的不连贯性，Spanner 会对什么时候退位做出限制。把 smax 定义为一个领导者可以使用的最大的时间戳。在退位之前，一个领导者必须等到 TT.after(smax)是真。</p>
<h4 id="4-1-2-为读写事务分配时间戳"><a href="#4-1-2-为读写事务分配时间戳" class="headerlink" title="4.1.2 为读写事务分配时间戳"></a>4.1.2 为读写事务分配时间戳</h4><p>事务读和写采用两段锁协议。当所有的锁都已经获得以后，在任何锁被释放之前，就可以给事务分配时间戳。对于一个给定的事务，Spanner 会为事务分配时间戳，这个时间戳是 Paxos 分配给 Paxos 写操作的，它代表了事务提交的时间。</p>
<p>Spanner 依赖下面这些单调性:在每个 Paxos 组内，Spanner 会以单调增加的顺序给每个 Paxos 写操作分配时间戳，即使在跨越多个领导者时也是如此。一个单个的领导者副本，可以很容易地以单调增加的方式分配时间戳。在多个领导者之间就会强制实现彼此隔离的不连 贯:一个领导者必须只能分配属于它自己租约时间区间内的时间戳。要注意到，一旦一个时间戳 s 被分配，smax 就会被增加到 s，从而保证彼此隔离性(不连贯性)。</p>
<p>Spanner 也会实现下面的外部一致性:如果一个事务 T2 在事务 T1 提交以后开始执行， 那么，事务 T2 的时间戳一定比事务 T1 的时间戳大。对于一个事务 Ti 而言，定义开始和提交事件eistart和eicommit，事务提交时间为si。对外部一致性的要求就变成了:<br>tabs(e1commit )&lt;tabs(e2start ) s1&lt;s2。执行事务的协议和分配时间戳的协议，遵守两条规则，二者一起保证外部一致性。对于一个写操作 Ti 而言，担任协调者的领导者发出的提交请求的事件为eiserver 。</p>
<p><strong>Start.</strong> 为一个事务 Ti 担任协调者的领导者分配一个提交时间戳 si，不会小于 TT.now().latest 的值，TT.now().latest的值是在esierver事件之后计算得到的。要注意，担任参与者的领导者， 在这里不起作用。第 4.2.1 节描述了这些担任参与者的领导者是如何参与下一条规则的实现的。</p>
<p><strong>Commit Wait.</strong> 担任协调者的领导者，必须确保客户端不能看到任何被 Ti 提交的数据，直到 TT.after(si)为真。提交等待，就是要确保 si 会比 Ti 的绝对提交时间小。提交等待的实现在 4.2.1 节中描述。证明如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fff83c4dbdc512f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="证明"></p>
<h4 id="4-1-3-在某个时间戳下的读操作"><a href="#4-1-3-在某个时间戳下的读操作" class="headerlink" title="4.1.3 在某个时间戳下的读操作"></a>4.1.3 在某个时间戳下的读操作</h4><p>第 4.1.2 节中描述的单调性，使得 Spanner 可以正确地确定一个副本是否足够新，从而能够满足一个读操作的要求。每个副本都会跟踪记录一个值，这个值被称为安全时间 tsafe，它是一个副本最近更新后的最大时间戳。如果一个读操作的时间戳是 t，当满足 t&lt;=tsafe 时， 这个副本就可以被这个读操作读取。</p>
<p>。。。</p>
<h4 id="4-1-4-为只读事务分配时间戳"><a href="#4-1-4-为只读事务分配时间戳" class="headerlink" title="4.1.4 为只读事务分配时间戳"></a>4.1.4 为只读事务分配时间戳</h4><p>一个只读事务分成两个阶段执行:分配一个时间戳 sread[8]，然后当成 sread 时刻的快照读来执行事务读操作。快照读可以在任何足够新的副本上面执行。 </p>
<p>在一个事务开始后的任意时刻，可以简单地分配 sread=TT.now().latest，通过第 4.1.2 节中描述过的类似的方式来维护外部一致性。但是，对于时间戳 sread 而言，如果 tsafe 没有增加到足够大，可能需要对 sread 时刻的读操作进行阻塞。除此以外还要注意，选择一个 sread 的值可 能也会增加 smax 的值，从而保证不连贯性。为了减少阻塞的概率，Spanner 应该分配可以保持外部一致性的最老的时间戳。第 4.2.2 节描述了如何选择这种时间戳。</p>
<h3 id="4-2-细节"><a href="#4-2-细节" class="headerlink" title="4.2 细节"></a>4.2 细节</h3><p>这部分内容介绍一些读写操作和只读操作的实践细节，以及用来实现原子模式变更的特定事务的实现方法。然后，描述一些基本模式的细化。</p>
<h4 id="4-2-1-读写事务"><a href="#4-2-1-读写事务" class="headerlink" title="4.2.1 读写事务"></a>4.2.1 读写事务</h4><p>就像 Bigtable 一样，发生在一个事务中的写操作会在客户端进行缓存，直到提交。由此导致的结果是，在一个事务中的读操作，不会看到这个事务的写操作的结果。这种设计在 Spanner 中可以很好地工作，因为一个读操作可以返回任何数据读的时间戳，未提交的写操作还没有被分配时间戳。</p>
<p>在读写事务内部的读操作，使用伤停等待(wound-wait)[33]来避免死锁。客户端对位于合适组内的领导者副本发起读操作，需要首先获得读锁，然后读取最新的数据。当一个客户端事务保持活跃的时候，它会发送“保持活跃”信息，防止那些参与的领导者让该事务过时。当一个客户端已经完成了所有的读操作，并且缓冲了所有的写操作，它就开始两阶段提交。客户端选择一个协调者组，并且发送一个提交信息给每个参与的、具有协调者标识的领导者，并发送提交信息给任何缓冲的写操作。让客户端发起两阶段提交操作，可以避免在大范围连接内发送两次数据。</p>
<p>一个参与其中的、扮演非协调者角色的领导者，首先需要获得写锁。然后，它会选择一 个预备时间戳，这个时间戳应该比之前分配给其他事务的任何时间戳都要大(这样可以保持 单调性)，并且通过 Paxos 把准备提交记录写入日志。然后，每个参与者就把自己的准备时 间戳通知给协调者。</p>
<p>扮演协调者的领导者，也会首先获得写锁，但是，会跳过准备阶段。在从所有其他的、扮演参与者的领导者那里获得信息后，它就会为整个事务选择一个时间戳。这个提交时间戳 s 必须大于或等于所有的准备时间戳(这是为了满足第 4.1.3 节讨论的限制条件)，在协调者收到它的提交信息时，s 应该大于 TT.now().latest，并且 s 应该大于这个领导者为之前的其他 所有事务分配的时间戳(再次指出，这样做是为了满足单调性)。这个扮演协调者的领导者，就会通过 Paxos 在日志中写入一个提交记录(或者当等待其他参与者发生超时就在日志中写 入终止记录)。</p>
<p>在允许任何协调者副本去提交记录之前，扮演协调者的领导者会一直等待到 TT.after(s)， 从而可以保证遵循第 4.1.2 节中描述的提交等待规则。因为，扮演协调者的领导者会根据 TT.now().latest 来选择 s，而且必须等待直到那个时间戳可以确保成为过去，预期的等待时间 至少是 2*ε。这种等待时间通常会和 Paxos 通信时间发生重叠。在提交等待之后，协调者就会发送一个提交时间戳给客户端和所有其他参与的领导者。每个参与的领导者会通过 Paxos 把事务结果写入日志。所有的参与者会在同一个时间戳进行提交，然后释放锁。</p>
<h4 id="4-2-2-只读事务"><a href="#4-2-2-只读事务" class="headerlink" title="4.2.2 只读事务"></a>4.2.2 只读事务</h4><p>分配一个时间戳需要一个协商阶段，这个协商发生在所有参与到该读操作中的 Paxos 组之间。由此导致的结果是，Spanner 需要为每个只读事务提供一个 scope 表达式，它可以指出整个事务需要读取哪些键。对于单独的查询，Spanner 可以自动计算出 scope。</p>
<p>如果 scope 的值是由单个 Paxos 组来提供的，那么，客户端就会给那个组的领导者发起一个只读事务(当前的 Spanner 实现中，只会为 Paxos leader 中的只读事务选择一个时间戳)， 为那个领导者分配 sread 并且执行读操作。对于一个单个位置的读操作，Spanner 通常会比 TT.now().latest 做得更好。我们把 LastTS()定义为在 Paxos 组中最后提交的写操作的时间戳。如果没有准备提交的事务，这个分配到的时间戳 sread=LastTS()就很容易满足外部一致性要求: 这个事务将可以看见最后一个写操作的结果，然后排队排在它之后。</p>
<p>如果 scope 的值是由多个 Paxos 组来提供的，就会有几种选择。最复杂的选择就是，和所有组的领导者进行一轮沟通，大家根据 LastTS()进行协商得到 sread。Spanner 当前实现了一个更加简单的选择。这个选择可以避免一轮协商，让读操作在 sread=TT.now().latest 时刻去 执行(这可能会等待安全时间的增加)。这个事务中的所有读操作，可以被发送到任何足够 新的副本上执行。</p>
<h4 id="4-2-3-模式变更事务"><a href="#4-2-3-模式变更事务" class="headerlink" title="4.2.3 模式变更事务"></a>4.2.3 模式变更事务</h4><p>TrueTime 允许 Spanner 支持原子模式变更。使用一个标准的事务是不可行的，因为参与者的数量(即数据库中组的数量)可能达到几百万个。Bigtable 可以支持在一个数据中心内进行原子模式变更，但是，这个操作会阻塞所有其他操作。</p>
<p>一个 Spanner 模式变更事务通常是一个标准事务的、非阻塞的变种。首先，它会显式地分配一个未来的时间戳，这个时间戳会在准备阶段进行注册。由此，跨越几千个服务器的模式变更，可以在不打扰其他并发活动的前提下完成。其次，读操作和写操作，它们都是隐式地依赖于模式，它们都会和任何注册的模式变更时间戳t保持同步:当它们的时间戳小于 t 时， 读写操作就执行到时刻 t;当它们的时间戳大于时刻 t 时，读写操作就必须阻塞，在模式变更事务后面进行等待。如果没有 TrueTime，那么定义模式变更发生在 t 时刻，就变得毫无意义。</p>
<h2 id="5-实验分析"><a href="#5-实验分析" class="headerlink" title="5. 实验分析"></a>5. 实验分析</h2><p>我们对 Spanner 性能进行了测试，包括复制、事务和可用性。然后，我们提供了一些关于 TrueTime 的实验数据，并且提供了我们的第一个用例——F1。</p>
<h3 id="5-1-微测试基准"><a href="#5-1-微测试基准" class="headerlink" title="5.1 微测试基准"></a>5.1 微测试基准</h3><p>表 3 给出了一用于 Spanner 的微测试基准(microbenchmark)。这些测试是在分时机器上实现的:每个 spanserver 采用 4GB 内存和四核 CPU(AMD Barcelona 2200MHz)。客户端运行在单独的机器上。每个 zone 都包含一个 spanserver。客户端和 zone 都放在一个数据中心集合内，它们之间的网络距离不会超过 1ms。这种布局是很普通的，许多数据并不需要把数 据分散存储到全球各地)。测试数据库具有 50 个 Paxos 组和 2500 个目录。操作都是独立的 4KB 大小的读和写。All reads were served out of memory after a compaction，从而使得我们只需要衡量 Spanner 调用栈的开销。此外，还会进行一轮读操作，来预热任何位置的缓存。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-33a9fed361528086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表3"></p>
<p>对于延迟实验而言，客户端会发起足够少量的操作，从而避免在服务器中发生排队。从 1 个副本的实验中，提交等待大约是 5ms，Paxos 延迟大约是 9ms。随着副本数量的增加， 延迟大约保持不变，只具有很少的标准差，因为在一个组的副本内，Paxos 会并行执行。随着副本数量的增加，获得指定投票数量的延迟对一个 slave 副本的慢速度不会很敏感。</p>
<p>对于吞吐量的实验而言，客户端发起足够数量的操作，从而使得 CPU 处理能力达到饱和。快照读操作可以在任何足够新的副本上进行，因此，快照读的吞吐量会随着副本的数量增加而线性增加。单个读的只读事务，只会在领导者上执行，因为，时间戳分配必须发生在领导者上。只读事务吞吐量会随着副本数量的增加而增加，因为有效的 spanserver 的数量会增加:在这个实验的设置中，spanserver 的数量和副本的数量相同，领导者会被随机分配到不同的 zone。写操作的吞吐量也会从这种实验设置中获得收益(副本从 3 变到 5 时写操作吞吐量增加了，就能够说明这点)，但是，随着副本数量的增加，每个写操作执行时需要完 成的工作量也会线性增加，这就会抵消前面的收益。</p>
<p>表 4 显示了两阶段提交可以扩展到合理数量的参与者:它是对一系列实验的总结，这些实验运行在 3 个 zone 上，每个 zone 具有 25 个 spanserver。扩展到 50 个参与者，无论在平均值还是第 99 个百分位方面，都是合理的。在 100 个参与者的情形下，延迟开发明显增加。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-af28b8aae8f19b90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表4"></p>
<h3 id="5-2-可用性"><a href="#5-2-可用性" class="headerlink" title="5.2 可用性"></a>5.2 可用性</h3><p>图 5 显示了在多个数据中心运行 Spanner 时的可用性方面的收益。它显示了三个吞吐量实验的结果，并且存在数据中心失败的情形，所有三个实验结果都被重叠放置到一个时间轴 上。测试用的 universe 包含 5 个 zone Zi，每个 zone 都拥有 25 个 spanserver。测试数据库被 分片成 1250 个 Paxos 组，100 个客户端不断地发送非快照读操作，累积速率是每秒 50K 个读操作。所有领导者都会被显式地放置到 Z1。每个测试进行 5 秒钟以后，一个 zone 中的所有服务器都会被“杀死”:non-leader 杀掉 Z2，leader-hard 杀掉 Z1，leader-soft 杀掉 Z1，但是，它会首先通知所有服务器它们将要交出领导权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-dd9e29a622ba99b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p>
<p>杀掉 Z2 对于读操作吞吐量没有影响。杀掉 Z1，给领导者一些时间来把领导权交给另一个 zone 时，会产生一个小的影响:吞吐量会下降，不是很明显，大概下降 3-4%。另一方面，没有预警就杀掉 Z1 有一个明显的影响:完成率几乎下降到 0。随着领导者被重新选择，系统的吞吐量会增加到大约每秒 100K 个读操作，主要是由于我们的实验设置:系统中有额外的能力，当找不到领导者时操作会排队。由此导致的结果是，系统的吞吐量会增加直到到达 系统恒定的速率。</p>
<p>我们可以看看把 Paxos 领导者租约设置为 10ms 的效果。当我们杀掉这个 zone，对于这 个组的领导者租约的过期时间，会均匀地分布到接下来的 10 秒钟内。来自一个死亡的领导者的每个租约一旦过期，就会选择一个新的领导者。大约在杀死时间过去 10 秒钟以后，所有的组都会有领导者，吞吐量就恢复了。短的租约时间会降低服务器死亡对于可用性的影响， 但是，需要更多的更新租约的网络通讯开销。我们正在设计和实现一种机制，它可以在领导者失效的时候，让 slave 释放 Paxos 领导者租约。</p>
<h3 id="5-3-TrueTime"><a href="#5-3-TrueTime" class="headerlink" title="5.3 TrueTime"></a>5.3 TrueTime</h3><p>关于 TrueTime，必须回答两个问题: ε 是否就是时钟不确定性的边界? ε 会变得多糟糕? 对于第一个问题，最严峻的问题就是，如果一个局部的时钟漂移大于 200us/sec，那就会破坏 TrueTime 的假设。我们的机器统计数据显示，坏的 CPU 的出现概率要比坏的时钟出现概率大 6 倍。也就是说，与更加严峻的硬件问题相比，时钟问题是很少见的。由此，我们也相信，TrueTime 的实现和 Spanner 其他软件组件一样，具有很好的可靠性，值得信任。</p>
<p>图 6 显示了 TrueTime 数据，是从几千个 spanserver 中收集的，这些 spanserver 跨越了多 个数据中心，距离 2200 公里以上。图中描述了 ε 的第 90 个、99 个和 99.9 个百分位的情况， 是在对 timemaster 进行投票后立即对 timeslave daemon 进行样本抽样的。这些抽样数据没有考虑由于时钟不确定性带来的 ε 值的锯齿，因此测量的是 timemaster 不确定性(通常是 0) 再加上通讯延迟。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-49c27db6c77575a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p>
<p>图 6 中的数据显示了，在决定 ε 的基本值方面的上述两个问题，通常都不会是个问题。 但是，可能会存在明显的拖尾延迟问题，那会引起更高的 ε 值。图中，3 月 30 日拖尾延迟的降低，是因为网络的改进，减少了瞬间网络连接的拥堵。在 4 月 13 日 ε 的值增加了，持续了大约 1 个小时，主要是因为例行维护时关闭了两个 time master。我们会继续调研并且消除引起 TrueTime 突变的因素。</p>
<h3 id="5-4-F1"><a href="#5-4-F1" class="headerlink" title="5.4 F1"></a>5.4 F1</h3><p>Spanner 在 2011 年早期开始进行在线负载测试，它是作为谷歌广告后台 F1[35]的重新实现的一部分。这个后台最开始是基于 MySQL 数据库，在许多方面都采用手工数据分区。未 经压缩的数据可以达到几十 TB，虽然这对于许多 NoSQL 实例而言数据量是很小的，但是， 对于采用数据分区的 MySQL 而言，数据量是非常大的。MySQL 的数据分片机制，会把每个客户和所有相关的数据分配给一个固定的分区。这种布局方式，可以支持针对单个客户的 索引构建和复杂查询处理，但是，需要了解一些商业知识来设计分区。随着客户数量的增长， 对数据进行重新分区，代价是很大的。最近一次的重新分区，花费了两年的时间，为了降低风险，在多个团队之间进行了大量的合作和测试。这种操作太复杂了，无法常常执行，由此导致的结果是，团队必须限制 MySQL 数据库的增长，方法是，把一些数据存储在外部的 Bigtable 中，这就会牺牲事务和查询所有数据的能力。</p>
<p>F1 团队选择使用 Spanner 有几个方面的原因。首先，Spanner 不需要手工分区。其次， Spanner 提供了同步复制和自动失败恢复。在采用 MySQL 的 master-slave 复制方法时，很难进行失败恢复，会有数据丢失和当机的风险。再次，F1 需要强壮的事务语义，这使得使用 其他 NoSQL 系统是不实际的。应用语义需要跨越任意数据的事务和一致性读。F1 团队也需要在他们的数据上构建二级索引(因为 Spanner 没有提供对二级索引的自动支持)，也有能力使用 Spanner 事务来实现他们自己的一致性全球索引。</p>
<p>所有应用写操作，现在都是默认从 F1 发送到 Spanner。而不是发送到基于 MySQL 的应 用栈。F1 在美国的西岸有两个副本，在东岸有三个副本。这种副本位置的选择，是为了避免发生自然灾害时出现服务停止问题，也是出于前端应用的位置的考虑。实际上，Spanner 的失败自动恢复，几乎是不可见的。在过去的几个月中，尽管有不在计划内的机群失效，但是，F1 团队最需要做的工作仍然是更新他们的数据库模式，来告诉 Spanner 在哪里放置 Paxos 领导者，从而使得它们尽量靠近应用前端。</p>
<p>Spanner 时间戳语义，使得它对于 F1 而言，可以高效地维护从数据库状态计算得到的、放在内存中的数据结构。F1 会为所有变更都维护一个逻辑历史日志，它会作为每个事务的 一部分写入到 Spanner。F1 会得到某个时间戳下的数据的完整快照，来初始化它的数据结构， 然后根据数据的增量变化来更新这个数据结构。</p>
<p>表 5 显示了 F1 中每个目录的分片数量的分布情况。每个目录通常对应于 F1 上的应用栈中的一个用户。绝大多数目录(同时意味着绝大多数用户)都只会包含一个分片，这就意味着，对于这些用户数据的读和写操作只会发生在一个服务器上。多于 100 个分片的目录，是那些包含 F1 二级索引的表:对这些表的多个分片进行写操作，是极其不寻常的。F1 团队也只是在以事务的方式进行未经优化的批量数据加载时，才会碰到这种情形。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-62166c5ae9be1b27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表5"></p>
<p>表 6 显示了从 F1 服务器来测量的 Spanner 操作的延迟。在东海岸数据中心的副本，在 选择 Paxos 领导者方面会获得更高的优先级。表 6 中的数据是从这些数据中心的 F1 服务器 上测量得到的。写操作延迟分布上存在较大的标准差，是由于锁冲突引起的肥尾效应(fat tail)。在读操作延迟分布上存在更大的标准差，部分是因为 Paxos 领导者跨越了两个数据中心，只有其中的一个是采用了固态盘的机器。此外，测试内容还包括系统中的每个针对两个 数据中心的读操作:字节读操作的平均值和标准差分别是 1.6KB 和 119KB。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-36bcff0bc7b0fbc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表6"></p>
<h2 id="6-相关工作"><a href="#6-相关工作" class="headerlink" title="6. 相关工作"></a>6. 相关工作</h2><p>Megastore[5]和 DynamoDB[3]已经提供了跨越多个数据中心的一致性复制。DynamoDB 提供了键值存储接口，只能在一个 region 内部进行复制。Spanner 和 Megastore 一样，都提供了半关系数据模型，甚至采用了类似的模式语言。Megastore 无法活动高性能。Megastore 是架构在 Bigtable 之上，这带来了很高的通讯代价。Megastore 也不支持长寿命的领导者， 多个副本可能会发起写操作。来自不同副本的写操作，在 Paxos 协议下一定会发生冲突，即使他们不会发生逻辑冲突:会严重影响吞吐量，在一个 Paxos 组内每秒钟只能执行几个写操作。Spanner 提供了更高的性能，通用的事务和外部一致性。</p>
<p>Pavlo 等人[31]对数据库和 MapReduce[12]的性能进行了比较。他们指出了几个努力的方向，可以在分布式键值存储之上充分利用数据库的功能[1][4][7][41]，二者可以实现充分的融合。我们比较赞同这个结论，并且认为集成多个层是具有优势的:把复制和并发控制集成起来，可以减少 Spanner 中的提交等待代价。</p>
<p>在一个采用了复制的存储上面实现事务，可以至少追述到 Gifford 的论文[16]。Scatter[17] 是一个最近的基于 DHT 的键值存储，可以在一致性复制上面实现事务。Spanner 则要比 Scatter 在更高的层次上提供接口。Gray 和 Lamport[18]描述了一个基于 Paxos 的非阻塞的提交协议，他们的协议会比两阶段提交协议带来更多的代价，而两阶段提交协议在大范围分布 式的组中的代价会进一步恶化。Walter[36]提供了一个快照隔离的变种，但是无法跨越数据中心。相反，我们的只读事务提供了一个更加自然的语义，因为我们对于所有的操作都支持外部语义。</p>
<p>最近，在减少或者消除锁开销方面已经有大量的研究工作。Calvin[40]消除了并发控制: 它会重新分配时间戳，然后以时间戳的顺序执行事务。HStore[39]和 Granola[11]都支持自己的事务类型划分方法，有些事务类型可以避免锁机制。但是，这些系统都无法提供外部一致性。Spanner 通过提供快照隔离，解决了冲突问题。</p>
<p>VoltDB[42]是一个分片的内存数据库，可以支持在大范围区域内进行主从复制，支持灾难恢复，但是没有提供通用的复制配置方法。它是一个被称为 NewSQL 的实例，这是实现 可扩展的 SQL[38]的强大的市场推动力。许多商业化的数据库都可以支持历史数据读取，比如 Marklogic[26]和 Oracle’ Total Recall[30]。Lomet 和 Li[24]对于这种时间数据库描述了一种 实现策略。</p>
<p>Faresite 给出了与一个受信任的时钟参考值相关的时钟不确定性的边界<a href="要比 TrueTime 更加宽松">13</a>:Farsite 中的服务器租约的方式，和 Spanner 中维护 Paxos 租约的方式 相同。在之前的工作中[2][23]，宽松同步时钟已经被用来进行并发控制。我们已经展示了 TrueTime 可以从 Paxos 状态机集合中推导出全球时间。</p>
<h2 id="7-未来的工作"><a href="#7-未来的工作" class="headerlink" title="7. 未来的工作"></a>7. 未来的工作</h2><p>在过去一年的大部分时间里，我们都是 F1 团队一起工作，把谷歌的广告后台从 MySQL 迁移到 Spanner。我们正在积极改进它的监控和支撑工具，同时在优化性能。此外，我们已经开展了大量工作来改进备份恢复系统的功能和性能。我们当前正在实现 Spanner 模式语言，自动维护二级索引和自动基于负载的分区。在未来，我们会调研更多的特性。以最优化的方式并行执行读操作，是我们追求的有价值的策略，但是，初级阶段的实验表明，实现这个目标比较艰难。此外，我们计划最终可以支持直接变更 Paxos 配置[22]34]。</p>
<p>我们希望许多应用都可以跨越数据中心进行复制，并且这些数据中心彼此靠近。 TrueTime ε 可能会明显影响性能。把 ε 值降低到 1ms 以内，并不存在不可克服的障碍。 Time-master-query 间隔可以继续减少，Time-master-query 延迟应该随着网络的改进而减少， 或者通过采用分时技术来避免延迟。</p>
<p>最后，还有许多有待改进的方面。尽管 Spanner 在节点数量上是可扩展的，但是与节点相关的数据结构在复杂的 SQL 查询上的性能相对较差，因为，它们是被设计成服务于简单的键值访问的。来自数据库文献的算法和数据结构，可以极大改进单个节点的性能。另外，根据客户端负载的变化，在数据中心之间自动转移数据，已经成为我们的一个目标，但是，为了有效实现这个目标，我们必须具备在数据中心之间自动、协调地转移客户端应用进程的能力。转移进程会带来更加困难的问题——如何在数据中心之间管理和分配资源。</p>
<h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>总的来说，Spanner 对来自两个研究群体的概念进行了结合和扩充:一个是数据库研究群体，包括熟悉易用的半关系接口，事务和基于 SQL 的查询语言;另一个是系统研究群体，包括可扩展性，自动分区，容错，一致性复制，外部一致性和大范围分布。自从 Spanner 概念成形，我们花费了 5 年以上的时间来完成当前版本的设计和实现。花费这么长的时间，一部分原因在于我们慢慢意识到，Spanner 不应该仅仅解决全球复制的命名空间问题，而且也应该关注 Bigtable 中所丢失的数据库特性。</p>
<p>我们的设计中一个亮点特性就是 TrueTime。我们已经表明，在时间 API 中明确给出时钟不确定性，可以以更加强壮的时间语义来构建分布式系统。此外，因为底层的系统在时钟不确定性上采用更加严格的边界，实现更强壮的时间语义的代价就会减少。作为一个研究群体，我们在设计分布式算法时，不再依赖于弱同步的时钟和较弱的时间 API。</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>许多人帮助改进了这篇论文:Jon Howell，Atul Adya, Fay Chang, Frank Dabek, Sean Dorward, Bob Gruber, David Held, Nick Kline, Alex Thomson, and Joel Wein. 我们的管理层对于我们的工作和论文发表都非常支持:Aristotle Balogh, Bill Coughran, Urs H ̈olzle, Doron Meyer, Cos Nicolaou, Kathy Polizzi, Sridhar Ramaswany, and Shivakumar Venkataraman.</p>
<p>我们的工作是在Bigtable和Megastore团队的工作基础之上开展的。F1团队，尤其是Jeff Shute ，和我们一起工作，开发了数据模型，跟踪性能和纠正漏洞。Platforms团队，尤其是Luiz Barroso 和Bob Felderman，帮助我们一起实现了TrueTime。最后，许多谷歌员工都曾经在我们的团队工作过，包括Ken Ashcraft, Paul Cychosz, Krzysztof Ostrowski, Amir Voskoboynik, Matthew Weaver, Theo Vassilakis, and Eric Veach; or have joined our team recently: Nathan Bales, Adam Beberg, Vadim Borisov, Ken Chen, Brian Cooper, Cian Cullinan, Robert-Jan Huijsman, Milind Joshi, Andrey Khorlin, Dawid Kuroczko, Laramie Leavitt, Eric Li, Mike Mammarella, Sunil Mushran, Simon Nielsen, Ovidiu Platon, Ananth Shrinivas, Vadim Suvorov, and Marcel van der Holst.</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Azza Abouzeid et al. ―HadoopDB: an architectural hybrid of MapReduce and DBMS technologies for analytical workloads‖. Proc. of VLDB. 2009, pp. 922–933.</p>
<p>[2] A. Adya et al. ―Efficient optimistic concurrency control using loosely synchronized clocks‖. Proc. of SIGMOD. 1995, pp. 23–34.</p>
<p>[3] Amazon. Amazon DynamoDB. 2012.</p>
<p>[4] Michael Armbrust et al. ―PIQL: Success-Tolerant Query Processing in the Cloud‖. Proc. of VLDB. 2011, pp. 181–192.</p>
<p>[5] Jason Baker et al. ―Megastore: Providing Scalable, Highly Available Storage for Interactive Services‖. Proc. of CIDR. 2011, pp. 223–234.</p>
<p>[6] Hal Berenson et al. ―A critique of ANSI SQL isolation levels‖. Proc. of SIGMOD. 1995, pp. 1–10. [7] Matthias Brantner et al. ―Building a database on S3‖. Proc. of SIGMOD. 2008, pp. 251–264.</p>
<p>[7] Matthias Brantner et al. ―Building a database on S3‖. Proc. of SIGMOD. 2008, pp. 251–264.</p>
<p>[8] A. Chan and R. Gray. ―Implementing Distributed Read-Only Transactions‖. IEEE TOSE SE-11.2 (Feb. 1985), pp. 205–212.</p>
<p>[9] Fay Chang et al. ―Bigtable: A Distributed Storage System for Structured Data‖. ACM TOCS 26.2 (June 2008), 4:1–4:26.</p>
<p>[10] Brian F. Cooper et al. ―PNUTS: Yahoo!’s hosted data serving platform‖. Proc. of VLDB. 2008, pp. 1277–1288.</p>
<p>[11] James Cowling and Barbara Liskov. ―Granola: Low-Overhead Distributed Transaction Coordination‖. Proc. of USENIX ATC. 2012, pp. 223–236.</p>
<p>[12] Jeffrey Dean and Sanjay Ghemawat. ―MapReduce: a flexible data processing tool‖. CACM 53.1 (Jan. 2010), pp. 72–77.</p>
<p>[13] John Douceur and Jon Howell. Scalable Byzantine-Fault-Quantifying Clock Synchronization. Tech. rep. MSR-TR-2003-67. MS Research, 2003.</p>
<p>[14] John R. Douceur and Jon Howell. ―Distributed directory service in the Farsite file system‖. Proc. of OSDI. 2006, pp. 321–334.</p>
<p>[15] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung. ―The Google file system‖. Proc. of SOSP. Dec. 2003, pp. 29–43.</p>
<p>[16] David K. Gifford. Information Storage in a Decentralized Computer System. Tech. rep. CSL-81-8. PhD dissertation. Xerox PARC, July 1982.</p>
<p>[17] Lisa Glendenning et al. ―Scalable consistency in Scatter‖. Proc. of SOSP. 2011.</p>
<p>[18] Jim Gray and Leslie Lamport. ―Consensus on transaction commit‖. ACM TODS 31.1 (Mar. 2006), pp. 133–160.</p>
<p>[19] Pat Helland. ―Life beyond Distributed Transactions: an Apostate’s Opinion‖. Proc. of CIDR. 2007, pp. 132–141.</p>
<p>[20] Maurice P. Herlihy and Jeannette M. Wing. ―Linearizability: a correctness condition for<br>concurrent objects‖. ACM TOPLAS 12.3 (July 1990), pp. 463–492.</p>
<p>[21] Leslie Lamport. ―The part-time parliament‖. ACM TOCS 16.2 (May 1998), pp. 133–169.</p>
<p>[22] Leslie Lamport, Dahlia Malkhi, and Lidong Zhou. ―Reconfiguring a state machine‖. SIGACT News 41.1 (Mar. 2010), pp. 63–73.</p>
<p>[23] Barbara Liskov. ―Practical uses of synchronized clocks in distributed systems‖. Distrib. Comput. 6.4 (July 1993), pp. 211–219.</p>
<p>[24] David B. Lomet and Feifei Li. ―Improving Transaction-Time DBMS Performance and Functionality‖. Proc. of ICDE (2009), pp. 581–591.</p>
<p>[25] Jacob R. Lorch et al. ―The SMART way to migrate replicated stateful services‖. Proc. of EuroSys. 2006, pp. 103–115.</p>
<p>[26] MarkLogic. MarkLogic 5 Product Documentation. 2012.</p>
<p>[27] Keith Marzullo and Susan Owicki. ―Maintaining the time in a distributed system‖. Proc. of PODC. 1983, pp. 295–305.</p>
<p>[28] Sergey Melnik et al. ―Dremel: Interactive Analysis of Web-Scale Datasets‖. Proc. of VLDB. 2010, pp. 330–339.</p>
<p>[29] D.L. Mills. Time synchronization in DCNET hosts. Internet Project Report IEN–173. COMSAT Laboratories, Feb. 1981.</p>
<p>[30] Oracle. Oracle Total Recall. 2012.</p>
<p>[31] Andrew Pavlo et al. ―A comparison of approaches to large-scale data analysis‖. Proc. of SIGMOD. 2009, pp. 165–178.</p>
<p>[32] Daniel Peng and Frank Dabek. ―Large-scale incremental processing using distributed transactions and notifications‖. Proc. of OSDI. 2010, pp. 1–15.</p>
<p>[33] Daniel J. Rosenkrantz, Richard E. Stearns, and Philip M. Lewis II. ―System level concurrency control for distributed database systems‖. ACM TODS 3.2 (June 1978), pp. 178–198.</p>
<p>[34] Alexander Shraer et al. ―Dynamic Reconfiguration of Primary/Backup Clusters‖. Proc. of<br>SENIX ATC. 2012, pp. 425–438.</p>
<p>[35] Jeff Shute et al. ―F1—The Fault-Tolerant Distributed RDBMS Supporting Google’s Ad Business‖. Proc. of SIGMOD. May 2012, pp. 777–778.</p>
<p>[36] Yair Sovran et al. ―Transactional storage for geo-replicated systems‖. Proc. of SOSP. 2011, pp. 385–400.</p>
<p>[37] Michael Stonebraker. Why Enterprises Are Uninterested in NoSQL. 2010.</p>
<p>[38] Michael Stonebraker. Six SQL Urban Myths. 2010.</p>
<p>[39] Michael Stonebraker et al. ―The end of an architectural era: (it’s time for a complete rewrite)‖. Proc. of VLDB. 2007, pp. 1150–1160.</p>
<p>[40] Alexander Thomson et al. ―Calvin: Fast Distributed Transactions for Partitioned Database Systems‖. Proc. of SIGMOD.2012, pp. 1–12.</p>
<p>[41] Ashish Thusoo et al. ―Hive — A Petabyte Scale Data Warehouse Using Hadoop‖. Proc. of ICDE. 2010, pp. 996–1005.</p>
<p>[42] VoltDB. VoltDB Resources. 2012.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式数据库 </category>
            
            <category> Google Spanner </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式数据库 </tag>
            
            <tag> Spanner </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[84] Largest Rectangle in Histogram!]]></title>
      <url>http://linbingdong.com/2017/02/10/LeetCode%5B84%5D%20Largest%20Rectangle%20in%20Histogram!/</url>
      <content type="html"><![CDATA[<p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-81fc3e4208735b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="histogram.png"></p>
<p>Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-5c86b14733f95436.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="histogram_area.png"></p>
<p>The largest rectangle is shown in the shaded area, which has area = 10 unit.</p>
<p>For example,<br>Given heights = [2,1,5,6,2,3],<br>return 10.</p>
<p><strong>分析:</strong></p>
<p>本题比较经典，解法也十分巧妙。</p>
<p>首先：最大矩形的高度必然和某一个立柱的高度相等，或者说，最大矩形必然包含了某一个立柱的全部。<br>所以我们要依次计算包含完整立柱 i 的最大矩形面积。</p>
<p>以图中 i = 2（即立柱的高为5）为例。包含完整该立柱的最大矩形的面积为 5 * 2 = 10。5为该立柱的高度，那么2是怎么来的呢？</p>
<p>方法是：分别找出该立柱左右两边离它最近的高度小于它的立柱。两个下标相减再减一即可。例如，图中立柱 i = 2(高为5）左右两边离它最近且高度小于它的立柱分别是立柱 i = 1(高为1）和立柱 i = 4（高为2），4 - 1 - 1 = 2，所以包含完整立柱 i = 2 的最大矩形面积为 5  * （4 - 1 - 1）= 10。</p>
<p>同理，包含完整立柱 i = 3(高为6）的最大矩形面积为 6 * (4 - 2 - 1) = 6。</p>
<p>使用栈可以巧妙地实现该思路。</p>
<p><strong>代码:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> maxArea = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> h = (i == heights.length ? <span class="number">0</span> : heights[i]);</div><div class="line">            <span class="keyword">if</span> (stack.isEmpty() || h &gt;= heights[stack.peek()]) &#123;</div><div class="line">                stack.push(i);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> temp = stack.pop();</div><div class="line">                maxArea = Math.max(maxArea, heights[temp] * (stack.isEmpty() ? i : i - <span class="number">1</span> - stack.peek()));</div><div class="line">                i--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxArea;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[150] Evaluate Reverse Polish Notation]]></title>
      <url>http://linbingdong.com/2017/02/09/LeetCode%5B150%5D%20Evaluate%20Reverse%20Polish%20Notation/</url>
      <content type="html"><![CDATA[<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>
<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>
<p>Some examples:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9</div><div class="line">[&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6</div></pre></td></tr></table></figure>
<p><strong>分析:</strong></p>
<p>使用栈，很简单。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span> (String s : tokens)&#123;</div><div class="line">            <span class="keyword">switch</span> (s)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">                    stack.push(stack.pop() + stack.pop());</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">                    stack.push(-(stack.pop() - stack.pop()));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">                    stack.push(stack.pop() * stack.pop());</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">                    <span class="keyword">int</span> a = stack.pop();</div><div class="line">                    <span class="keyword">int</span> b = stack.pop();</div><div class="line">                    stack.push(b / a);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    stack.push(Integer.parseInt(s));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[32] Longest Valid Parentheses!]]></title>
      <url>http://linbingdong.com/2017/02/09/LeetCode%5B32%5D%20Longest%20Valid%20Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>
<p>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</p>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
<p><strong>分析:</strong></p>
<p>还是使用栈。不过因为要求的是长度，所以这次入栈的是字符的下标。需要注意的是，”()((()))”的length = 8。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> left = -<span class="number">1</span>;</div><div class="line">       Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">           <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span>)&#123;</div><div class="line">               stack.push(i);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">if</span> (stack.isEmpty()) &#123;</div><div class="line">                   left = i;</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   stack.pop();</div><div class="line">                   <span class="keyword">if</span> (stack.isEmpty()) &#123;</div><div class="line">                       maxLen = Math.max(maxLen, i - left);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       maxLen = Math.max(maxLen, i - stack.peek());</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[20] Valid Parentheses]]></title>
      <url>http://linbingdong.com/2017/02/08/LeetCode%5B20%5D%20Valid%20Parentheses/</url>
      <content type="html"><![CDATA[<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
<p><strong>分析:</strong></p>
<p>使用栈。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</div><div class="line">                stack.push(<span class="string">')'</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</div><div class="line">                stack.push(<span class="string">']'</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</div><div class="line">                stack.push(<span class="string">'&#125;'</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || stack.pop() != c) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack.isEmpty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[155] Min Stack]]></title>
      <url>http://linbingdong.com/2017/02/08/LeetCode%5B155%5D%20Min%20Stack/</url>
      <content type="html"><![CDATA[<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p>Example:</p>
<p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; Returns -3.<br>minStack.pop();<br>minStack.top();      –&gt; Returns 0.<br>minStack.getMin();   –&gt; Returns -2.</p>
<p><strong>分析:</strong></p>
<p>Java中本来就有Stack。本题跟普通Stack的区别是需要记住最小值，关键在于push和pop方法。在push时，若x比当前的min更小，则先push值min，再push值x，并令min = x。在pop时，若该值为min值，需要pop两次，并且让第二次pop的值为min值。push和pop相呼应。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</div><div class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="comment">/** initialize your data structure here. */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (x &lt;= min) &#123;</div><div class="line">            stack.push(min);</div><div class="line">            min = x;</div><div class="line">        &#125;</div><div class="line">        stack.push(x);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (stack.pop() == min) &#123;</div><div class="line">            min = stack.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stack.peek();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Your MinStack object will be instantiated and called as such:</div><div class="line"> * MinStack obj = new MinStack();</div><div class="line"> * obj.push(x);</div><div class="line"> * obj.pop();</div><div class="line"> * int param_3 = obj.top();</div><div class="line"> * int param_4 = obj.getMin();</div><div class="line"> */</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[和为S的两个数字]]></title>
      <url>http://linbingdong.com/2017/01/19/%E5%92%8C%E4%B8%BAS%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。 </p>
<p><strong>分析</strong></p>
<p>数组本来就排序好了，很简单。两个指针，刚开始i在最左边，j在最右边。如果两数想加小于S，i++;如果两数想加大于S，j–;</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span> [] array,<span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = array.length - <span class="number">1</span>;</div><div class="line">        ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</div><div class="line">            <span class="keyword">if</span> (array[i] + array[j] == sum)&#123;</div><div class="line">                al.add(array[i]);</div><div class="line">                al.add(array[j]);</div><div class="line">                <span class="keyword">return</span> al;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (array[i] + array[j] &lt; sum)&#123;</div><div class="line">                i++;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> al;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[翻转单词顺序列]]></title>
      <url>http://linbingdong.com/2017/01/19/%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p>
<p><strong>分析</strong></p>
<p>先用String.split()将字符串按空格切分成一个String数组,然后创建一个StringBuilder将该数组从后往前拼接。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(str.trim().equals(<span class="string">""</span>))</div><div class="line">            <span class="keyword">return</span> str;</div><div class="line">        String[] normal = str.split(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">int</span> len = normal.length;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</div><div class="line">                sb.append(normal[<span class="number">0</span>]);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                sb.append(normal[i]);</div><div class="line">                sb.append(<span class="string">" "</span>);               </div><div class="line">            &#125; </div><div class="line">        &#125;       </div><div class="line">        <span class="keyword">return</span> sb.toString();      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[整数中1出现的次数（从1到n整数中1出现的次数）]]></title>
      <url>http://linbingdong.com/2017/01/19/%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%88%E4%BB%8E1%E5%88%B0n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。</p>
<p><strong>分析</strong></p>
<p>将每个数组转成字符串，算出每个字符串里的“1”的个数。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1Between1AndN_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            String s = String.valueOf(i);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++)&#123;</div><div class="line">                <span class="keyword">if</span>(s.charAt(j) == <span class="string">'1'</span>)</div><div class="line">                   count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[调整数组顺序使奇数在偶数前面（相对位置不变）]]></title>
      <url>http://linbingdong.com/2017/01/19/%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E5%9C%A8%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2%EF%BC%88%E7%9B%B8%E5%AF%B9%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<p><strong>分析</strong></p>
<p>新建一个数组，对原数组做两个for循环。第一次将奇数写入新数组，第二次将偶数写入新数组。最后将新数组拷贝到原数组。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = array.length;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(array[i] % <span class="number">2</span> == <span class="number">1</span>)&#123;</div><div class="line">                arr[j++] = array[i];</div><div class="line">            &#125;                </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(array[i] % <span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">                arr[j++] = array[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.arraycopy(arr,<span class="number">0</span>,array,<span class="number">0</span>,len);        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[205] Isomorphic Strings]]></title>
      <url>http://linbingdong.com/2017/01/17/LeetCode%5B205%5D%20Isomorphic%20Strings/</url>
      <content type="html"><![CDATA[<p>Given two strings s and t, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<p>For example,<br>Given “egg”, “add”, return true.</p>
<p>Given “foo”, “bar”, return false.</p>
<p>Given “paper”, “title”, return true.</p>
<p>Note:<br>You may assume both s and t have the same length.</p>
<p><strong>分析：</strong></p>
<p>这道题思路跟 <code>LeetCode[290] Word Pattern</code> 一模一样。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> a,b;</div><div class="line">        HashMap&lt;Character,Character&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Character&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">            a = s.charAt(i);</div><div class="line">            b = t.charAt(i);</div><div class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</div><div class="line">                <span class="keyword">if</span>(map.get(a) != b)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map.containsValue(b))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                map.put(a,b);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[290] Word Pattern]]></title>
      <url>http://linbingdong.com/2017/01/17/LeetCode%5B290%5D%20Word%20Pattern/</url>
      <content type="html"><![CDATA[<p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>Examples:</p>
<p>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.</p>
<p>Notes:</p>
<p>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.</p>
<p><strong>分析：</strong></p>
<p>用一个HashMap，建立字母和单词的对应关系。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</div><div class="line">        String[] words = str.split(<span class="string">" "</span>);</div><div class="line">        HashMap&lt;Character,String&gt; map = <span class="keyword">new</span> HashMap&lt;Character,String&gt;();</div><div class="line">        <span class="keyword">if</span>(pattern.length() != words.length)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; pattern.length(); i++)&#123;</div><div class="line">            Character p = pattern.charAt(i);</div><div class="line">            <span class="keyword">if</span>(map.containsKey(p))&#123; </div><div class="line">                <span class="keyword">if</span>(!map.get(p).equals(words[i]))   </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map.containsValue(words[i]))</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">             <span class="keyword">else</span></div><div class="line">                 map.put(p,words[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表示数值的字符串]]></title>
      <url>http://linbingdong.com/2017/01/16/%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>
<p><strong>分析</strong></p>
<p>用正则表达式,一行搞定。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(<span class="keyword">char</span>[] str)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(str).matches(<span class="string">"[\\+-]?\\d*(\\.\\d+)?([eE][\\+-]?\\d+)?"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[构建乘积数组]]></title>
      <url>http://linbingdong.com/2017/01/16/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法。</p>
<p><strong>分析</strong></p>
<p>既然不能用除法，那就用乘法吧。把B[i]分成i左边的左半部分和i右边的右半部分。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] multiply(<span class="keyword">int</span>[] A) &#123;</div><div class="line">        <span class="keyword">int</span> len = A.length;</div><div class="line">        <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        B[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</div><div class="line">            B[i] = B[i-<span class="number">1</span>] * A[i-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            temp *= A[i+<span class="number">1</span>];</div><div class="line">            B[i] *= temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> B;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组中重复的数字]]></title>
      <url>http://linbingdong.com/2017/01/16/%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p>
<p><strong>分析</strong></p>
<p>新建一个boolean数组arr，遍历numbers数组，并令arr[numbers[i]] = true。如果arr[numbers[i]] == true，说明numbers[i]重复了。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// Parameters:</span></div><div class="line">    <span class="comment">//    numbers:     an array of integers</span></div><div class="line">    <span class="comment">//    length:      the length of array numbers</span></div><div class="line">    <span class="comment">//    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;</span></div><div class="line">    <span class="comment">//                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</span></div><div class="line">    <span class="comment">//    这里要特别注意~返回任意重复的一个，赋值duplication[0]</span></div><div class="line">    <span class="comment">// Return value:       true if the input is valid, and there are some duplications in the array number</span></div><div class="line">    <span class="comment">//                     otherwise false</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length,<span class="keyword">int</span> [] duplication)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span>[] arr = <span class="keyword">new</span> <span class="keyword">boolean</span>[length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[numbers[i]] == <span class="keyword">true</span>)&#123;</div><div class="line">                duplication[<span class="number">0</span>] = numbers[i];</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            arr[numbers[i]] = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[纠删码（Erasure Code）浅析]]></title>
      <url>http://linbingdong.com/2017/01/16/%E7%BA%A0%E5%88%A0%E7%A0%81%EF%BC%88Erasure%20Code%EF%BC%89%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>【摘要】：副本策略和纠删码是存储领域常见的两种数据冗余技术。相比于副本策略，纠删码具有更高的磁盘利用率。 Reed-Solomon码是一种常见的纠删码。</p>
<a id="more"></a>
<p>多副本策略即将数据存储多个副本（一般是三副本，比如HDFS），当某个副本丢失时，可以通过其他副本复制回来。三副本的磁盘利用率为1/3。</p>
<p>纠删码技术主要是通过纠删码算法将原始的数据进行编码得到冗余，并将数据和冗余一并存储起来，以达到容错的目的。其基本思想是将n块原始的数据元素通过一定的计算，得到m块冗余元素（校验块）。对于这n+m块的元素，当其中任意的m块元素出错（包括原始数据和冗余数据）时，均可以通过对应的重构算法恢复出原来的n块数据。生成校验的过程被成为编码（encoding），恢复丢失数据块的过程被称为解码（decoding）。磁盘利用率为n/(n+m)。基于纠删码的方法与多副本方法相比具有冗余度低、磁盘利用率高等优点。</p>
<p>两种冗余技术对比如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">两种技术</th>
<th style="text-align:center">磁盘利用率</th>
<th style="text-align:center">计算开销</th>
<th style="text-align:center">网络消耗</th>
<th style="text-align:center">恢复效率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">多副本(3副本)</td>
<td style="text-align:center">1/3</td>
<td style="text-align:center">几乎没有</td>
<td style="text-align:center">较低</td>
<td style="text-align:center">较高</td>
</tr>
<tr>
<td style="text-align:center">纠删码(n+m)</td>
<td style="text-align:center">n/(n+m)</td>
<td style="text-align:center">高</td>
<td style="text-align:center">较高</td>
<td style="text-align:center">较低</td>
</tr>
</tbody>
</table>
<h2 id="Reed-Solomon-RS-码"><a href="#Reed-Solomon-RS-码" class="headerlink" title="Reed-Solomon(RS)码"></a>Reed-Solomon(RS)码</h2><p>Reed-Solomon（RS）码是存储系统较为常用的一种纠删码，它有两个参数n和m，记为RS(n,m)。n代表原始数据块个数。m代表校验块个数。接下来介绍RS码的原理。</p>
<h2 id="RS码原理"><a href="#RS码原理" class="headerlink" title="RS码原理"></a>RS码原理</h2><p>以n=5，m=3为例。即5个原始数据块，乘上一个(n+m)*n的矩阵，然后得出一个(n+m)*1的矩阵。根据矩阵特点可以得知结果矩阵中前面5个值与原来的5个数据块的值相等，而最后3个则是计算出来的校验块。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-cc930e9d848ee224.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>以上过程为编码过程。D是原始数据块，得到的C为校验块。</p>
<p>假设丢失了m块数据。如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-feb8c76af3c7bab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="丢失m块"></p>
<p>那我们如何从剩余的n个数据块（注意，这里剩余的n块可能包含几个原始数据块+几个校验块）恢复出来原始的n个数据块呢，就需要通过下面的decoding（解码）过程来实现。</p>
<p>第一步：从编码矩阵中删去丢失数据块和丢失编码块对应行。 将删掉m个块的(n+m)*1个矩阵变形为n*1矩阵，同时B矩阵也需要删掉对应的m个行得出一个B’的变形矩阵，这个B’就是n*n矩阵。如下：假设D1、D4、C2丢失，我们得到如下B’矩阵及等式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7ddc3f3071489be9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vandermode矩阵"></p>
<p>第二步：求出B’的逆矩阵。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b5d966cd6cb3866c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B’逆矩阵"></p>
<p>第三步：等式两边分别乘上B’的逆矩阵。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-03509dcf17c0a358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两边乘上B’逆矩阵"></p>
<p>B’和它的逆矩阵相乘得到单位矩阵I，如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-565e7d41f929107c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单位矩阵"></p>
<p>左边只剩下原始数据矩阵D：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-225afb1b2353ae9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>至此完成解码过程。</p>
<p>注：图中黄色部分为范德蒙矩阵。至于如何生成B矩阵，以及如何求B’的逆矩阵，请查看其他相关文献，这里不再赘述。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>RS的特点：</p>
<ul>
<li>低冗余度，高磁盘利用率。</li>
<li>数据恢复代价高。 丢失数据块或者编码块时， RS需要读取n个数据块和校验块才能恢复数据， 数据恢复效率也在一定程度上制约了RS的可靠性。</li>
<li>数据更新代价高。 数据更新相当于重新编码， 代价很高， 因此常常针对只读数据，或者冷数据。</li>
</ul>
<p>工程实践中，一般对于热数据还是会使用多副本策略来冗余，冷数据使用纠删码。</p>
<p>值得期待的是，纠删码技术也即将在Hadoop 3.0中发布。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>论文《Erasure Codes for Storage Applications》</li>
<li>论文《存储系统中纠删码研究综述》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 纠删码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> 数据冗余 </tag>
            
            <tag> 纠删码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop YARN介绍]]></title>
      <url>http://linbingdong.com/2017/01/15/Hadoop%20YARN%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>YARN是Hadoop集群的资源管理系统。Hadoop2.0对MapReduce框架做了彻底的设计重构。YARN的基本设计思想是将MRv1中的JobTracker拆分成了两个独立的服务：一个<strong>全局的资源管理器ResourceManager</strong>和<strong>每个应用程序特有的ApplicationMaster</strong>。其中ResourceManager负责整个系统的<strong>资源管理和分配</strong>，而ApplicationMaster负责<strong>单个应用程序的管理</strong>。</p>
<a id="more"></a>
<h2 id="YARN产生背景"><a href="#YARN产生背景" class="headerlink" title="YARN产生背景"></a>YARN产生背景</h2><h3 id="MRv1的局限"><a href="#MRv1的局限" class="headerlink" title="MRv1的局限"></a>MRv1的局限</h3><p>YARN是在MRv1基础上演化而来的，它克服了MRv1中的各种局限性。在正式介绍YARN之前，先了解下MRv1的一些局限性，主要有以下几个方面：</p>
<ul>
<li><strong>扩展性差</strong>。在MRv1中，<strong>JobTracker</strong>同时兼备了<strong>资源管理</strong>和<strong>作业控制</strong>两个功能，这成为系统的一个最大瓶颈，严重制约了Hadoop集群扩展性。</li>
<li><strong>可靠性差</strong>。MRv1采用了<strong>master/slave</strong>结构，其中，master存在<strong>单点故障</strong>问题，一旦它出现故障将导致整个集群不可用。</li>
<li><strong>资源利用率低</strong>。MRv1采用了<strong>基于槽位</strong>的资源分配模型，槽位是一种<strong>粗粒度</strong>的资源划分单位，通常一个任务不会用完槽位对应的资源，且其他任务也无法使用这些空闲资源。此外，Hadoop将槽位分为Map Slot和Reduce Slot两种，且不允许它们之间共享，常常会导致一种槽位资源紧张而另外一种闲置（比如一个作业刚刚提交时，只会运行Map Task，此时Reduce Slot闲置）。</li>
<li><strong>无法支持多种计算框架</strong>。随着互联网高速发展，MapReduce这种基于磁盘的离线计算框架已经不能满足应用要求，从而出现了一些新的计算框架，包括<strong>内存计算框架、流式计算框架和迭代式计算框架等</strong>，而MRv1不能支持多种计算框架并存。</li>
</ul>
<p>为了克服以上几个缺点，Apache开始尝试对Hadoop进行升级改造，进而诞生了更加先进的下一代MapReduce计算框架MRv2。正是由于MRv2将<strong>资源管理功能</strong>抽象成了一个独立的通用系统YARN，直接导致下一代MapReduce的核心从单一的计算框架MapReduce转移为通用的资源管理系统YARN。</p>
<h3 id="集群资源统一管理"><a href="#集群资源统一管理" class="headerlink" title="集群资源统一管理"></a>集群资源统一管理</h3><p>随着互联网的高速发展，新的计算框架不断出现，从支持离线处理的MapReduce，到支持在线处理的Storm，从迭代式计算框架Spark到流式处理框架S4，各种框架各有所长，各自解决了某一类应用问题。这时候就需要一个组件对同一个集群上的不同计算框架进行资源的统一管理。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a895d67381e80a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN"></p>
<p>相比于“一种计算框架一个集群”的模式，共享集群的模式存在多种好处：</p>
<ul>
<li><strong>资源利用率高</strong>。如果每个框架一个集群，可能在某段时间内，有些计算框架的集群资源紧张，而另外一些集群资源空闲。共享集群模式则通过多种框架共享资源，使得集群中的资源得到更加充分的利用。</li>
<li><strong>运维成本低</strong>。如果采用“一个框架一个集群”的模式，则可能需要多个管理员管理这些集群，进而增加运维成本，而共享模式通常需要少数管理员即可完成多个框架的统一管理。</li>
<li><strong>数据共享</strong>。随着数据量的暴增，跨集群间的数据移动不仅需花费更长的时间，且硬件成本也会大大增加，而共享集群模式可让多种框架共享数据和硬件资源，将大大减小数据移动带来的成本。</li>
</ul>
<h2 id="YARN基本设计思想"><a href="#YARN基本设计思想" class="headerlink" title="YARN基本设计思想"></a>YARN基本设计思想</h2><p>MRv1主要由<strong>编程模型、数据处理引擎（由Map Task和Reduce Task组成）和运行时环境</strong>三部分组成。为了保证编程模型的向后兼容性，MRv2重用了MRv1中的编程模型和数据处理引擎，但运行时环境被完全重写。</p>
<p>MRv1的运行时环境主要由两类服务组成，分别是JobTracker和TaskTracker。其中，JobTracker负责<strong>资源管理</strong>和<strong>作业控制</strong>。TaskTracker负责<strong>单个节点</strong>的<strong>资源管理和任务执行</strong>。</p>
<p>MRv1将资源管理和应用程序管理两部分混杂在一起，使得它在扩展性、容错性和多框架支持等方面存在明显缺陷。</p>
<p>而MRv2则通过将资源管理和应用程序管理两部分剥离开，分别由ResourceManager和ApplicationMaster负责，其中ResourceManager专管资源管理和调度，而ApplicationMaster则负责与具体应用程序相关的任务切分、任务调度和容错等，具体如下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3bb6aa683a1c3f29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="YARN基本架构"><a href="#YARN基本架构" class="headerlink" title="YARN基本架构"></a>YARN基本架构</h2><p>YARN是Hadoop 2.0中的资源管理系统，它的基本设计思想是将MRv1中的JobTracker拆分成了两个独立的服务：一个<strong>全局的资源管理器ResourceManager</strong>和<strong>每个应用程序特有的ApplicationMaster</strong>。其中ResourceManager负责整个系统的<strong>资源管理和分配</strong>，而ApplicationMaster负责<strong>单个应用程序的管理</strong>。</p>
<p>YARN总体上仍然是Master/Slave结构，在整个资源管理框架中，ResourceManager为Master，NodeManager为Slave，ResourceManager负责对各个NodeManager上的资源进行统一管理和调度。当用户提交一个应用程序时，需要提供一个用以跟踪和管理这个程序的ApplicationMaster，它负责向ResourceManager申请资源，并要求NodeManger启动可以占用一定资源的任务。由于不同的ApplicationMaster被分布到不同的节点上，因此它们之间不会相互影响。</p>
<p>下图描述了YARN的基本组成结构，YARN主要由ResourceManager、NodeManager、ApplicationMaster（图中给出了MapReduce和MPI两种计算框架的ApplicationMaster，分别为MR AppMstr和MPI AppMstr）和Container等几个组件构成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e8cca9823e3db77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN基本架构"></p>
<p>接下来对YARN里几个重要的组件一一介绍。</p>
<h3 id="1-ResourceManager-RM"><a href="#1-ResourceManager-RM" class="headerlink" title="1. ResourceManager(RM)"></a>1. ResourceManager(RM)</h3><p>RM是一个全局的资源管理器,负责整个系统的资源管理和分配。它主要由两个组件构成：<strong>调度器</strong>（Scheduler）和<strong>应用程序管理器</strong>（Applications Manager，ASM）。</p>
<p>（1）调度器（分配Container）</p>
<p>调度器根据容量、队列等限制条件（如每个队列分配一定的资源，最多执行一定数量的作业等），将系统中的资源分配给各个正在运行的应用程序。需要注意的是，该调度器是一个“纯调度器”，它不再从事任何与具体应用程序相关的工作，比如不负责监控或者跟踪应用的执行状态等，也不负责重新启动因应用执行失败或者硬件故障而产生的失败任务，这些均交由应用程序相关的ApplicationMaster完成。调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位用一个抽象概念“资源容器”（Resource Container，简称Container）表示，Container是一个动态资源分配单位，它将内存、CPU、磁盘、网络等资源封装在一起，从而限定每个任务使用的资源量。此外，该调度器是一个可插拔的组件，用户可根据自己的需要设计新的调度器，YARN提供了多种直接可用的调度器，比如Fair Scheduler和Capacity Scheduler等。</p>
<p>（2）应用程序管理器</p>
<p>应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重新启动它等。</p>
<h3 id="2-ApplicationMaster（AM）"><a href="#2-ApplicationMaster（AM）" class="headerlink" title="2. ApplicationMaster（AM）"></a>2. ApplicationMaster（AM）</h3><p>用户提交的每个应用程序均包含一个AM，主要功能包括：</p>
<ul>
<li>与RM调度器协商以获取资源（以Container表示）</li>
<li>将得到的任务进一步分配给内部的任务</li>
<li>与NM通信以启动/停止任务</li>
<li>监控所有任务运行状态，并在任务失败时重新为任务申请资源以重启任务</li>
</ul>
<h3 id="3-NodeManager（NM）"><a href="#3-NodeManager（NM）" class="headerlink" title="3. NodeManager（NM）"></a>3. NodeManager（NM）</h3><p>NM是每个节点上的资源和任务管理器。一方面，它定时地向RM汇报本节点的资源使用情况和Container运行状态；另一方面，它接受并处理来自AM的Container启动/停止等各种请求。</p>
<h3 id="4-Container"><a href="#4-Container" class="headerlink" title="4. Container"></a>4. Container</h3><p>Container是YARN中的资源抽象，它封装了某个节点上的多维资源，如CPU、内存、磁盘、网络等。当AM向RM申请资源时，RM向AM返回的资源便是用Container表示的。YARN会为每个任务分配一个Container，且该任务只能使用该Container中描述的资源。Container是一个动态资源划分单位，是根据应用程序的需求自动生成的。目前，YARN仅支持CPU和内存两种资源。</p>
<h2 id="YARN工作流程"><a href="#YARN工作流程" class="headerlink" title="YARN工作流程"></a>YARN工作流程</h2><p>运行在YARN上的应用程序主要分为两类：短应用程序和长应用程序。其中，短应用程序是指一定时间内可运行完成并正常退出的应用程序，如MapReduce作业、Spark DAG作业等。长应用程序是指不出意外，永不终止运行的应用程序，通常是一些服务，比如Storm Service（包括Nimbus和Supervisor两类服务），HBase Service（包括HMaster和RegionServer两类服务）等，而它们本身作为一种框架提供编程接口供用户使用。尽管这两类应用程序作业不同，一类直接运行数据处理程序，一类用于部署服务（服务之上再运行数据处理程序），但运行在YARN上的流程是相同的。</p>
<p>当用户向YARN中提交一个应用程序后，YARN将分两个阶段运行该应用程序：第一阶段是启动ApplicationMaster。第二阶段是由ApplicationMaster创建应用程序，为它申请资源，并监控它的整个运行过程，直到运行完成。具体如下：</p>
<ol>
<li>用户向YARN中提交应用程序，其中包括ApplicationMaster程序、启动ApplicationMaster的命令、用户程序等。</li>
<li>ResourceManager为该应用程序分配第一个Container，并与对应的NodeManager通信，要求它在这个Container中启动应用程序的ApplicationMaster。</li>
<li>ApplicationMaster首先向ResourceManager注册，这样用户就可以直接通过ResourceManager查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运行状态，直到运行结束，即重复步骤4~7。</li>
<li>ApplicationMaster采用轮询的方式通过RPC协议向ResourceManager申请和领取资源。</li>
<li>一旦ApplicationMaster申请到资源后，便与对应的NodeManager通信，要求它启动任务。</li>
<li>NodeManager为任务设置好运行环境（包括环境变量、JAR包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li>
<li>各个任务通过某个RPC协议向ApplicationMaster汇报自己的状态和进度，以让ApplicationMaster随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。</li>
<li>应用程序运行完成后，ApplicationMaster向ResourceManager注销并关闭自己。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fdc8b62896158e92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN工作流程"></p>
]]></content>
      
        <categories>
            
            <category> YARN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> YARN </tag>
            
            <tag> Hadoop </tag>
            
            <tag> 资源管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java I/O 操作示例]]></title>
      <url>http://linbingdong.com/2017/01/13/Java%20I:O%20%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>给出几个Java I/O 操作的示例代码。</p>
<a id="more"></a>
<h3 id="创建文件或目录"><a href="#创建文件或目录" class="headerlink" title="创建文件或目录"></a>创建文件或目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"dir1"</span>);</div><div class="line">        dir.mkdir();  <span class="comment">//创建目录</span></div><div class="line">        File file = <span class="keyword">new</span> File(dir,<span class="string">"file1"</span>);  <span class="comment">//目录加文件名</span></div><div class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"dir1/file2"</span>);  <span class="comment">//完整路径</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            file.createNewFile();  <span class="comment">//创建文件,若存在同名文件,不会覆盖</span></div><div class="line">            file2.createNewFile();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        File file = <span class="keyword">new</span> File(<span class="string">"dir1/file2"</span>);</div><div class="line">        <span class="keyword">if</span> (file.delete())&#123;</div><div class="line">            System.out.println(file.getName() + <span class="string">" is deleted!"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"File is not deleted!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="向文件逐行写入内容-覆盖写）"><a href="#向文件逐行写入内容-覆盖写）" class="headerlink" title="向文件逐行写入内容(覆盖写）"></a>向文件逐行写入内容(覆盖写）</h3><ol>
<li><p>FileOutputStream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</div><div class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(fos));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            bw.write(<span class="string">"something"</span>);</div><div class="line">            bw.newLine();</div><div class="line">        &#125;</div><div class="line">        bw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>FileWriter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            fw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</div><div class="line">        &#125;</div><div class="line">        fw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>PrintWriter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(fout));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            pw.println(<span class="string">"something"</span>);</div><div class="line">        &#125;</div><div class="line">        pw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>OutputStreamWriter</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout);</div><div class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            osw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</div><div class="line">        &#125;</div><div class="line">        osw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注：<br>往文本文件里写内容用FileWriter即可，比较方便。但是如果要自己定义字符编号和byte-buffer大小的话就要用FileOutputStream。</p>
<p>PrintWriter跟FileWriter的主要区别是PrintWriter可以格式化输出。该类实现了PrintStream的所有print方法。</p>
<h3 id="追加写"><a href="#追加写" class="headerlink" title="追加写"></a>追加写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(fout,<span class="keyword">true</span>);  <span class="comment">//跟覆盖写唯一的区别是这里加了个true参数。</span></div><div class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            osw.write(<span class="string">"something"</span> + System.getProperty(<span class="string">"line.separator"</span>));</div><div class="line">        &#125;</div><div class="line">        osw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Path;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Path sour = Paths.get(<span class="string">"dir1/file1"</span>);</div><div class="line">        Path des = Paths.get(<span class="string">"dir1/file2"</span>);</div><div class="line">        Files.copy(sour,des);   <span class="comment">//Files.copy(a,b)。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="合并多个文件"><a href="#合并多个文件" class="headerlink" title="合并多个文件"></a>合并多个文件</h3><p>读取多个文件的内容，写入一个文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2017/1/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeFiles</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String sourceFile1Path = <span class="string">"dir1/file1"</span>;</div><div class="line">        String sourceFile2Path = <span class="string">"dir1/file2"</span>;</div><div class="line">        String mergedFilePath = <span class="string">"dir1/mergedFile.txt"</span>;</div><div class="line">        File[] files = <span class="keyword">new</span> File[<span class="number">2</span>];</div><div class="line">        files[<span class="number">0</span>] = <span class="keyword">new</span> File(sourceFile1Path);</div><div class="line">        files[<span class="number">1</span>] = <span class="keyword">new</span> File(sourceFile2Path);</div><div class="line">        File mergedFile = <span class="keyword">new</span> File(mergedFilePath);</div><div class="line">        mergeFiles(files,mergedFile);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeFiles</span><span class="params">(File[] files,File mergedFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(mergedFile,<span class="keyword">true</span>);</div><div class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">        <span class="keyword">for</span> (File f : files)&#123;</div><div class="line">            System.out.println(<span class="string">"merging: "</span> + f.getName());</div><div class="line">            FileReader fr = <span class="keyword">new</span> FileReader(f);</div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">            String aLine;</div><div class="line">            <span class="keyword">while</span> ((aLine = br.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">                bw.write(aLine);</div><div class="line">                bw.newLine();</div><div class="line">            &#125;</div><div class="line">            br.close();</div><div class="line">        &#125;</div><div class="line">        bw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>调用的是File.renameTo()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoveFile</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">"dir1/file1"</span>);</div><div class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"dir1/dir2/file3"</span>);  <span class="comment">//dir2目录必须存在,否则无法移动成功</span></div><div class="line">        f1.renameTo(f2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对文件内容排序"><a href="#对文件内容排序" class="headerlink" title="对文件内容排序"></a>对文件内容排序</h3><p>file1内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dog </div><div class="line">cat</div><div class="line">--windows</div><div class="line">--kankan</div><div class="line">pps</div><div class="line">game</div><div class="line">--annot be guaranteed </div><div class="line">as it is, generally speaking, </div><div class="line">--impossible to make any hard gu</div><div class="line">arantees in the p</div><div class="line">--resence of unsynchr</div></pre></td></tr></table></figure>
<p>对行进行排序，以上面的文本为例，排序后<code>arantees in the p</code>应该在第一行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2017/1/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJavaIO</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        File fin = <span class="keyword">new</span> File(<span class="string">"file1"</span>);</div><div class="line">        File fout = <span class="keyword">new</span> File(<span class="string">"file2"</span>);</div><div class="line">        String s;</div><div class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</div><div class="line">        FileReader fr = <span class="keyword">new</span> FileReader(fin);</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</div><div class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</div><div class="line">        ArrayList&lt;String&gt; al = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span> )&#123;</div><div class="line">            <span class="keyword">if</span> (!s.trim().startsWith(<span class="string">"-"</span>) &amp;&amp; s.trim().length() &gt; <span class="number">0</span>)&#123;</div><div class="line">                al.add(s);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Collections.sort(al);</div><div class="line">        <span class="keyword">for</span> (String line : al)&#123;</div><div class="line">            bw.write(line);</div><div class="line">            bw.newLine();</div><div class="line">            bw.write(<span class="string">"------------------------------"</span>);</div><div class="line">            bw.newLine();</div><div class="line">        &#125;</div><div class="line">        br.close();</div><div class="line">        bw.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>file2内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arantees in the p</div><div class="line">------------------------------</div><div class="line">as it is, generally speaking, </div><div class="line">------------------------------</div><div class="line">cat</div><div class="line">------------------------------</div><div class="line">dog </div><div class="line">------------------------------</div><div class="line">game</div><div class="line">------------------------------</div><div class="line">pps</div><div class="line">------------------------------</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java I/O 总结]]></title>
      <url>http://linbingdong.com/2017/01/11/Java%20I:O%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Java中I/O操作主要是指使用Java进行输入，输出操作. Java所有的I/O机制都是基于数据流进行输入输出，这些数据流表示了字符或者字节数据的流动序列。</p>
<a id="more"></a>
<p>数据流是一串连续不断的数据的集合，就象水管里的水流，在水管的一端一点一点地供水，而在水管的另一端看到的是一股连续不断的水流。数据写入程序可以是一段、一段地向数据流管道中写入数据，这些数据段会按先后顺序形成一个长的数据流。对数据读取程序来说，看不到数据流在写入时的分段情况，每次可以读取其中的任意长度的数据，但只能先读取前面的数据后，再读取后面的数据（不能随机读取）。不管写入时是将数据分多次写入，还是作为一个整体一次写入，读取时的效果都是完全一样的。</p>
<p>简而言之：数据流是一组有序，有起点和终点的字节的数据序列。包括输入流和输出流。</p>
<p>当程序需要读取数据的时候，就会建立一个通向数据源的连接，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会建立一个通向目的地的连接。</p>
<p>数据流分类：</p>
<p>流序列中的数据既可以是未经加工的原始二进制数据，也可以是经一定编码处理后符合某种格式规定的特定数据。因此Java中的流分为两种：<strong> 1)  字节流：</strong>数据流中最小的数据单元是字节<strong> 2)  字符流：</strong>数据流中最小的数据单元是字符， Java中的字符是Unicode编码，一个字符占用两个字节。</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Java.io包中最重要的就是5个类和一个接口。5个类指的是File、OutputStream、InputStream、Writer、Reader；一个接口指的是Serializable。掌握了这些就掌握了Java I/O的精髓了。</p>
<p>Java I/O主要包括如下3层次：</p>
<ol>
<li>流式部分——最主要的部分。如：OutputStream、InputStream、Writer、Reader等</li>
<li>非流式部分——如：File类、RandomAccessFile类和FileDescriptor等类</li>
<li>其他——文件读取部分的与安全相关的类，如：SerializablePermission类，以及与本地操作系统相关的文件系统的类，如：FileSystem类和Win32FileSystem类和WinNTFileSystem类。</li>
</ol>
<p>主要类如下：</p>
<ol>
<li>File（文件特征与管理）：用于文件或者目录的描述信息，例如生成新目录，修改文件名，删除文件，判断文件所在路径等。</li>
<li>InputStream（字节流，二进制格式操作）：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。</li>
<li>OutputStream（字节流，二进制格式操作）：抽象类。基于字节的输出操作。是所有输出流的父类。定义了所有输出流都具有的共同特征。</li>
<li>Reader（字符流，文本格式操作）：抽象类，基于字符的输入操作。</li>
<li>Writer（字符流，文本格式操作）：抽象类，基于字符的输出操作。</li>
<li>RandomAccessFile（随机文件操作）：它的功能丰富，<strong>可以从文件的任意位置进行存取（输入输出）操作</strong>。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-adc85fb95f884363.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="I:O体系.png"></p>
<h2 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h2><p>java.io包里有4个基本类：InputStream、OutputStream及Reader、Writer类，它们分别处理字节流和字符流。</p>
<p>其他各种各样的流都是由这4个派生出来的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ee60b12bd1f9a3dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="I/O流"></p>
<p><strong>按来源/去向分类：</strong></p>
<ol>
<li>File（文件）： FileInputStream, FileOutputStream, FileReader, FileWriter </li>
<li>byte[]：ByteArrayInputStream, ByteArrayOutputStream </li>
<li>Char[]: CharArrayReader, CharArrayWriter </li>
<li>String: StringBufferInputStream, StringReader, StringWriter </li>
<li>网络数据流：InputStream, OutputStream, Reader, Writer </li>
</ol>
<h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>InputStream 为字节输入流，它本身为一个抽象类，必须依靠其子类实现各种功能，此抽象类是表示字节输入流的所有类的超类。 继承自InputStream  的流都是向程序中输入数据的，且数据单位为字节（8bit）；</p>
<p>InputStream是输入字节数据用的类，所以InputStream类提供了3种重载的read方法.Inputstream类中的常用方法： </p>
<ul>
<li>public abstract int read( )：读取一个byte的数据，返回值是高位补0的int类型值。若返回值=-1说明没有读取到任何字节读取工作结束。</li>
<li>public int read(byte b[ ])：读取b.length个字节的数据放到b数组中。返回值是读取的字节数。该方法实际上是调用下一个方法实现的 </li>
<li>public int read(byte b[ ], int off, int len)：从输入流中最多读取len个字节的数据，存放到偏移量为off的b数组中。 </li>
<li>public int available( )：返回输入流中可以读取的字节数。注意：若输入阻塞，当前线程将被挂起，如果InputStream对象调用这个方法的话，它只会返回0，这个方法必须由继承InputStream类的子类对象调用才有用， </li>
<li>public long skip(long n)：忽略输入流中的n个字节，返回值是实际忽略的字节数, 跳过一些字节来读取 </li>
<li>public int close( ) ：使用完后，必须对我们打开的流进行关闭。</li>
</ul>
<p>来看看几种不同的InputStream：</p>
<ol>
<li>FileInputStream把一个文件作为InputStream，实现对文件的读取操作     </li>
<li>ByteArrayInputStream：把内存中的一个缓冲区作为InputStream使用 </li>
<li>StringBufferInputStream：把一个String对象作为InputStream </li>
<li>PipedInputStream：实现了pipe的概念，主要在线程中使用 </li>
<li>SequenceInputStream：把多个InputStream合并为一个InputStream </li>
</ol>
<h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>OutputStream提供了3个write方法来做数据的输出，这个是和InputStream是相对应的。 
　　</p>
<ul>
<li>public void write(byte b[ ])：将参数b中的字节写到输出流。 </li>
<li>public void write(byte b[ ], int off, int len) ：将参数b的从偏移量off开始的len个字节写到输出流。 </li>
<li>public abstract void write(int b) ：先将int转换为byte类型，把低字节写入到输出流中。 </li>
<li>public void flush( ) : 将数据缓冲区中数据全部输出，并清空缓冲区。 </li>
<li>public void close( ) : 关闭输出流并释放与流相关的系统资源。 </li>
</ul>
<p>几种不同的OutputStream：</p>
<ol>
<li>ByteArrayOutputStream：把信息存入内存中的一个缓冲区中 </li>
<li>FileOutputStream：把信息存入文件中 </li>
<li>PipedOutputStream：实现了pipe的概念，主要在线程中使用 </li>
<li>SequenceOutputStream：把多个OutStream合并为一个OutStream </li>
</ol>
<p>Reader和InputStream类似；Writer和OutputStream类似。</p>
<p>有两个需要注意的：</p>
<ol>
<li><strong>InputStreamReader </strong>： 从输入流读取字节，在将它们转换成字符。</li>
<li><strong>BufferReader :</strong>接受Reader对象作为参数，并对其添加字符缓冲器，使用readline()方法可以读取一行。</li>
</ol>
<h2 id="如何选择I-O流"><a href="#如何选择I-O流" class="headerlink" title="如何选择I/O流"></a>如何选择I/O流</h2><ol>
<li>确定是输入还是输出<br>输入:输入流 InputStream Reader<br>输出:输出流 OutputStream Writer</li>
<li>明确操作的数据对象是否是纯文本<br>是:字符流 Reader，Writer<br>否:字节流 InputStream，OutputStream</li>
<li>明确具体的设备。<ul>
<li>文件：<br> 读：FileInputStream,, FileReader,<br> 写：FileOutputStream，FileWriter</li>
<li>数组：<br> byte[ ]：ByteArrayInputStream, ByteArrayOutputStream<br> char[ ]：CharArrayReader, CharArrayWriter</li>
<li>String：<br> StringBufferInputStream(已过时，因为其只能用于String的每个字符都是8位的字符串), StringReader,     StringWriter</li>
<li>Socket流<br> 键盘：用System.in（是一个InputStream对象）读取，用System.out（是一个OutoutStream对象）打印</li>
</ul>
</li>
<li>是否需要转换流<br>是，就使用转换流，从Stream转化为Reader、Writer：InputStreamReader，OutputStreamWriter </li>
<li>是否需要缓冲提高效率<br>是就加上Buffered：BufferedInputStream, BufferedOuputStream, BufferedReader, BufferedWriter</li>
<li>是否需要格式化输出</li>
</ol>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><ul>
<li>将标准输入（键盘输入）显示到标准输出（显示器），支持字符。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> ch;</div><div class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  <span class="comment">//将字节流转为字符流，带缓冲</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span> ((ch = (<span class="keyword">char</span>) in.read()) != -<span class="number">1</span>)&#123;</div><div class="line">        System.out.print(ch);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将AtomicityTest.java的内容打印到显示器</li>
</ul>
<p>方法一：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"AtomicityTest.java"</span>));</div><div class="line">String s;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span> ((s = in.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">        System.out.println(s);</div><div class="line">    &#125;</div><div class="line">    in.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法二：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FileReader in = <span class="keyword">new</span> FileReader(<span class="string">"AtomicityTest.java"</span>);</div><div class="line"><span class="keyword">int</span> b;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>)&#123;</div><div class="line">        System.out.print((<span class="keyword">char</span>)b);</div><div class="line">    &#125;</div><div class="line">    in.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法三：(有可能出现乱码）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"AtomicityTest.java"</span>);</div><div class="line"><span class="keyword">int</span> n = <span class="number">50</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[n];</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">while</span> ((in.read(buffer,<span class="number">0</span>,n) != -<span class="number">1</span> &amp;&amp; n &gt; <span class="number">0</span>))&#123;</div><div class="line">        System.out.print(<span class="keyword">new</span> String(buffer));</div><div class="line">    &#125;</div><div class="line">    in.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将文件A的内容拷贝到文件B</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"AtomicityTest.java"</span>);</div><div class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.txt"</span>);</div><div class="line"><span class="keyword">int</span> b;</div><div class="line"><span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>)&#123;</div><div class="line">    out.write(b);</div><div class="line">&#125;</div><div class="line">out.flush();</div><div class="line">in.close();</div><div class="line">out.close();</div></pre></td></tr></table></figure>
<ul>
<li>将标准输入的内容写入文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">FileWriter out = <span class="keyword">new</span> FileWriter(<span class="string">"systemIn.log"</span>);</div><div class="line">String s;</div><div class="line"><span class="keyword">while</span> (!(s = in.nextLine()).equals(<span class="string">"Q"</span>))&#123;</div><div class="line">    out.write(s + <span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">out.flush();</div><div class="line">out.close();</div><div class="line">in.close();</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 7新机制之自动关闭资源——try-with-resources]]></title>
      <url>http://linbingdong.com/2017/01/11/Java%207%E6%96%B0%E6%9C%BA%E5%88%B6%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90%E2%80%94%E2%80%94try-with-resources/</url>
      <content type="html"><![CDATA[<p>在Java 7之前，IO操作为了保证资源能被关闭，往往会在try代码块后加上finally代码块来处理资源的关闭。</p>
<a id="more"></a>
<p>如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> br.readLine();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (br != <span class="keyword">null</span>) br.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java 7新增了try-with-resources语法来保证资源的关闭。现在你可以这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));) &#123;</div><div class="line">  <span class="keyword">return</span> br.readLine();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码块里处理完后会自动关闭资源，不需要显示调用close()方法。也不需要finally。代码简洁了很多。</p>
<p>注意：</p>
<ul>
<li>被关闭的资源类需要实现AutoClosable接口或者是Closable接口。</li>
<li>需要自动关闭的资源在try后面的括号里声明。允许声明多个被关闭的资源，关闭的顺序是与创建资源的顺序相反。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO之内存映射文件——MappedByteBuffer]]></title>
      <url>http://linbingdong.com/2017/01/11/Java%20NIO%E4%B9%8B%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94MappedByteBuffer/</url>
      <content type="html"><![CDATA[<p>大多数操作系统都可以利用虚拟内存实现将一个文件或者文件的一部分”映射”到内存中。然后，这个文件就可以当作是内存数组来访问，这比传统的文件要快得多。</p>
<a id="more"></a>
<p>内存映射文件的一个关键优势是操作系统负责真正的读写，即使你的程序在刚刚写入内存后就挂了，操作系统仍然会将内存中的数据写入文件系统。另外一个更突出的优势是共享内存，内存映射文件可以被多个进程同时访问，起到一种低时延共享内存的作用。</p>
<p>那么，如何将一个文件映射到内存呢？</p>
<ol>
<li><p>从文件中获得一个通道（channel）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileChannel channel = FileChannel.open(path,options);</div></pre></td></tr></table></figure>
<p>这里options指定映射模式，支持的模式有三种：</p>
<ul>
<li>FileChannel.MapMode.READ_ONLY：所产生的缓冲区是只读的。</li>
<li>FileChannel.MapMode.READ_WRITE：所产生的缓冲区是可写的,任何修改都会在某个时刻写回到文件中。<br>注意，其他映射同一个文件的程序可能不能立即看到这些修改，多个程序同时进行文件映射的确切行为是依赖<br>于操作系统的。</li>
<li>FileChannel.MapMode.PRIVATE：所产生的缓冲区是可写的，但是任何修改对该缓冲区来说都是私有的，不<br>会传播到文件中。</li>
</ul>
</li>
<li><p>调用FileChannel的map方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,length);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>接下来通过计算一个40MB文件的CRC32校验和来比较传统的文件输入和内存映射文件的速度。</p>
<p>传统的文件输入包括：</p>
<ul>
<li>普通输入流（InputStream）</li>
<li>带缓冲的输入流（BufferedInputStream）</li>
<li>随机访问文件（RandomAccessFile）</li>
</ul>
<p>程序如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.nio.MappedByteBuffer;</div><div class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Path;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.zip.CRC32;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2017/1/11.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryMapTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumInputStream</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//普通输入流</span></div><div class="line">        <span class="keyword">try</span> (InputStream in = Files.newInputStream(filename)) &#123;</div><div class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</div><div class="line">            <span class="keyword">int</span> c;</div><div class="line">            <span class="keyword">while</span> ((c = in.read()) != -<span class="number">1</span>)</div><div class="line">                crc.update(c);</div><div class="line">            <span class="keyword">return</span> crc.getValue();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumBufferedInputStream</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//带缓冲的输入流</span></div><div class="line">        <span class="keyword">try</span> (BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(Files.newInputStream(filename)))&#123;</div><div class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</div><div class="line">            <span class="keyword">int</span> c;</div><div class="line">            <span class="keyword">while</span> ((c = in.read()) != -<span class="number">1</span>)</div><div class="line">                crc.update(c);</div><div class="line">            <span class="keyword">return</span> crc.getValue();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumRandomAccessFile</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//随机访问文件</span></div><div class="line">        <span class="keyword">try</span> (RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(filename.toFile(),<span class="string">"r"</span>))&#123;</div><div class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</div><div class="line">            <span class="keyword">long</span> length = file.length();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> p = <span class="number">0</span>; p &lt; length; p++)&#123;</div><div class="line">                file.seek(p);</div><div class="line">                <span class="keyword">int</span> c = file.readByte();</div><div class="line">                crc.update(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> crc.getValue();</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">checksumMappedFile</span><span class="params">(Path filename)</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//内存映射文件</span></div><div class="line">        <span class="keyword">try</span> (FileChannel channel = FileChannel.open(filename))&#123;</div><div class="line">            CRC32 crc = <span class="keyword">new</span> CRC32();</div><div class="line">            <span class="keyword">int</span> length = (<span class="keyword">int</span>)channel.size();</div><div class="line">            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,length);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; length; p++)&#123;</div><div class="line">                <span class="keyword">int</span> c = buffer.get(p);</div><div class="line">                crc.update(c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> crc.getValue();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Input Stream:"</span>);</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        Path filename = Paths.get(args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">long</span> crcValue = checksumInputStream(filename);</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(Long.toHexString(crcValue));</div><div class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Buffered Input Stream:"</span>);</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        crcValue = checksumBufferedInputStream(filename);</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        System.out.println(Long.toHexString(crcValue));</div><div class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Random Access File:"</span>);</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        crcValue = checksumRandomAccessFile(filename);</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        System.out.println(Long.toHexString(crcValue));</div><div class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</div><div class="line">        System.out.println();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Mapped File:"</span>);</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        crcValue = checksumMappedFile(filename);</div><div class="line">        end = System.currentTimeMillis();</div><div class="line">        System.out.println(Long.toHexString(crcValue));</div><div class="line">        System.out.println((end - start) + <span class="string">" milliseconds"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Input Stream:</div><div class="line">c644b1f1</div><div class="line">42317 milliseconds</div><div class="line"></div><div class="line">Buffered Input Stream:</div><div class="line">c644b1f1</div><div class="line">329 milliseconds</div><div class="line"></div><div class="line">Random Access File:</div><div class="line">c644b1f1</div><div class="line">57781 milliseconds</div><div class="line"></div><div class="line">Mapped File:</div><div class="line">c644b1f1</div><div class="line">207 milliseconds</div></pre></td></tr></table></figure>
<p>可以明显看出，内存映射文件速度比普通输入流和随机访问文件快得多，比带缓冲的输入流稍微快一些。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZooKeeper原理及其在Hadoop和HBase中的应用]]></title>
      <url>http://linbingdong.com/2017/01/10/ZooKeeper%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%9C%A8Hadoop%E5%92%8CHBase%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，由雅虎创建，是Google <strong>Chubby的开源实现</strong>。分布式应用程序可以基于ZooKeeper实现诸如<strong>数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列</strong>等功能。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个开源的<strong>分布式协调服务</strong>，由雅虎创建，是Google <strong>Chubby的开源实现</strong>。分布式应用程序可以基于ZooKeeper实现诸如<strong>数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列</strong>等功能。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>本节将介绍ZooKeeper的几个核心概念。这些概念贯穿于之后对ZooKeeper更深入的讲解，因此有必要预先了解这些概念。</p>
<h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><p>在ZooKeeper中，有三种角色：</p>
<ul>
<li>Leader</li>
<li>Follower</li>
<li>Observer</li>
</ul>
<p>一个ZooKeeper集群同一时刻只会有一个Leader，其他都是Follower或Observer。</p>
<p>ZooKeeper配置很简单，每个节点的配置文件(zoo.cfg)都是一样的，只有myid文件不一样。myid的值必须是zoo.cfg中server.{数值}的{数值}部分。</p>
<p>zoo.cfg文件内容示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">maxClientCnxns=0</div><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial</div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between</div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># the directory where the snapshot is stored.</div><div class="line">dataDir=/var/lib/zookeeper/data</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div><div class="line"># the directory where the transaction logs are stored.</div><div class="line">dataLogDir=/var/lib/zookeeper/logs</div><div class="line">server.1=192.168.20.101:2888:3888</div><div class="line">server.2=192.168.20.102:2888:3888</div><div class="line">server.3=192.168.20.103:2888:3888</div><div class="line">server.4=192.168.20.104:2888:3888</div><div class="line">server.5=192.168.20.105:2888:3888</div><div class="line">minSessionTimeout=4000</div><div class="line">maxSessionTimeout=100000</div></pre></td></tr></table></figure>
<p>在装有ZooKeeper的机器的终端执行 <code>zookeeper-server status</code> 可以看当前节点的ZooKeeper是什么角色（Leader or Follower）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node-20-103 ~]# zookeeper-server status</div><div class="line">JMX enabled by default</div><div class="line">Using config: /etc/zookeeper/conf/zoo.cfg</div><div class="line">Mode: follower</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node-20-104 ~]# zookeeper-server status</div><div class="line">JMX enabled by default</div><div class="line">Using config: /etc/zookeeper/conf/zoo.cfg</div><div class="line">Mode: leader</div></pre></td></tr></table></figure>
<p>如上，node-20-104是Leader，node-20-103是follower。</p>
<p>ZooKeeper默认只有Leader和Follower两种角色，没有Observer角色。</p>
<p>为了使用Observer模式，在任何想变成Observer的节点的配置文件中加入：<code>peerType=observer</code><br>并在所有server的配置文件中，配置成observer模式的server的那行配置追加:observer，例如：<br><code>server.1:localhost:2888:3888:observer</code></p>
<p>ZooKeeper集群的所有机器通过一个<strong>Leader选举过程</strong>来选定一台被称为<strong>『Leader』</strong>的机器，<strong>Leader服务器</strong>为客户端提供<strong>读</strong>和<strong>写</strong>服务。</p>
<p>Follower和Observer都<strong>能</strong>提供<strong>读</strong>服务，<strong>不能</strong>提供<strong>写</strong>服务。两者唯一的区别在于，<strong>Observer</strong>机器<strong>不参与Leader选举</strong>过程，也<strong>不参与写操作</strong>的『过半写成功』策略，因此Observer可以在<strong>不影响写性能</strong>的情况下<strong>提升</strong>集群的<strong>读性能</strong>。</p>
<h3 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h3><p>Session是指<strong>客户端会话</strong>，在讲解客户端会话之前，我们先来了解下<strong>客户端连接</strong>。在ZooKeeper中，一个客户端连接是指客户端和ZooKeeper服务器之间的<strong>TCP长连接</strong>。ZooKeeper对外的服务端口默认是<strong>2181</strong>，客户端启动时，首先会与服务器建立一个TCP连接，从第一次连接建立开始，客户端会话的生命周期也开始了，通过这个连接，客户端能够通过<strong>心跳检测</strong>和服务器保持有效的会话，也能够向ZooKeeper服务器<strong>发送请求</strong>并<strong>接受响应</strong>，同时还能通过该连接接收来自服务器的<strong>Watch事件通知</strong>。Session的<strong>SessionTimeout</strong>值用来设置一个客户端会话的<strong>超时时间</strong>。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在SessionTimeout规定的时间内能够<strong>重新连接上</strong>集群中<strong>任意一台</strong>服务器，那么之前创建的会话<strong>仍然有效</strong>。</p>
<h3 id="数据节点（ZNode）"><a href="#数据节点（ZNode）" class="headerlink" title="数据节点（ZNode）"></a>数据节点（ZNode）</h3><p>在谈到分布式的时候，<strong>一般</strong>『节点』指的是组成集群的每一台<strong>机器</strong>。而ZooKeeper中的数据节点是指<strong>数据模型</strong>中的<strong>数据单元</strong>，称为<strong>ZNode</strong>。ZooKeeper将所有数据存储在<strong>内存中</strong>，数据模型是一棵<strong>树（ZNode Tree）</strong>，由斜杠（/）进行分割的路径，就是一个ZNode，如/hbase/master,其中hbase和master<strong>都是</strong>ZNode。每个ZNode上都会保存<strong>自己的数据内容</strong>，同时会保存一系列<strong>属性信息</strong>。</p>
<p>注：<br>这里的ZNode可以理解成<strong>既是</strong>Unix里的<strong>文件</strong>，<strong>又是</strong>Unix里的<strong>目录</strong>。因为每个ZNode不仅本身可以<strong>写数据</strong>（相当于Unix里的文件），还可以有<strong>下一级文件或目录</strong>（相当于Unix里的目录）。</p>
<p>在ZooKeeper中，ZNode可以分为<strong>持久节点</strong>和<strong>临时节点</strong>两类。</p>
<p><strong>持久节点</strong></p>
<p> 所谓持久节点是指一旦这个ZNode被创建了，除非主动进行ZNode的移除操作，否则这个ZNode将一直保存在ZooKeeper上。</p>
<p><strong>临时节点</strong></p>
<p>临时节点的生命周期跟客户端会话绑定，一旦客户端会话失效，那么这个客户端创建的所有临时节点都会被移除。</p>
<p>另外，ZooKeeper还允许用户为每个节点添加一个特殊的属性：SEQUENTIAL。一旦节点被标记上这个属性，那么在这个节点被创建的时候，ZooKeeper就会自动在其节点后面追加上一个整型数字，这个整型数字是一个由父节点维护的自增数字。</p>
<h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>ZooKeeper的每个ZNode上都会存储数据，对应于每个ZNode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个ZNode的三个数据版本，分别是version（当前ZNode的版本）、cversion（当前ZNode子节点的版本）和aversion（当前ZNode的ACL版本）。</p>
<h3 id="状态信息"><a href="#状态信息" class="headerlink" title="状态信息"></a>状态信息</h3><p>每个ZNode除了存储数据内容之外，还存储了ZNode本身的一些状态信息。用 get 命令可以同时获得某个ZNode的内容和状态信息。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[zk: localhost:2181(CONNECTED) 23] get /yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</div><div class="line"></div><div class="line">appcluster-yarnrm1</div><div class="line">cZxid = 0x1b00133dc0    //Created ZXID,表示该ZNode被创建时的事务ID</div><div class="line">ctime = Tue Jan 03 15:44:42 CST 2017    //Created Time,表示该ZNode被创建的时间</div><div class="line">mZxid = 0x1d00000063    //Modified ZXID，表示该ZNode最后一次被更新时的事务ID</div><div class="line">mtime = Fri Jan 06 08:44:25 CST 2017    //Modified Time，表示该节点最后一次被更新的时间</div><div class="line">pZxid = 0x1b00133dc0    //表示该节点的子节点列表最后一次被修改时的事务ID。注意，只有子节点列表变更了才会变更pZxid，子节点内容变更不会影响pZxid。</div><div class="line">cversion = 0    //子节点的版本号</div><div class="line">dataVersion = 11    //数据节点的版本号</div><div class="line">aclVersion = 0    //ACL版本号</div><div class="line">ephemeralOwner = 0x0    //创建该节点的会话的seddionID。如果该节点是持久节点，那么这个属性值为0。</div><div class="line">dataLength = 22    //数据内容的长度</div><div class="line">numChildren = 0    //子节点的个数</div></pre></td></tr></table></figure>
<p>在ZooKeeper中，version属性是用来实现乐观锁机制中的『写入校验』的（保证分布式数据原子性操作）。</p>
<h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>在ZooKeeper中，能改变ZooKeeper服务器状态的操作称为事务操作。一般包括数据节点创建与删除、数据内容更新和客户端会话创建与失效等操作。对应每一个事务请求，ZooKeeper都会为其分配一个全局唯一的事务ID，用ZXID表示，通常是一个64位的数字。每一个ZXID对应一次更新操作，从这些ZXID中可以间接地识别出ZooKeeper处理这些事务操作请求的全局顺序。</p>
<h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>Watcher（事件监听器），是ZooKeeper中一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知到感兴趣的客户端上去。该机制是ZooKeeper实现分布式协调服务的重要特性。</p>
<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>ZooKeeper采用ACL（Access Control Lists）策略来进行权限控制。ZooKeeper定义了如下5种权限。</p>
<ul>
<li>CREATE: 创建子节点的权限。</li>
<li>READ: 获取节点数据和子节点列表的权限。</li>
<li>WRITE：更新节点数据的权限。</li>
<li>DELETE: 删除子节点的权限。</li>
<li>ADMIN: 设置节点ACL的权限。</li>
</ul>
<p>注意：CREATE 和 DELETE 都是针对子节点的权限控制。</p>
<h2 id="ZooKeeper典型应用场景"><a href="#ZooKeeper典型应用场景" class="headerlink" title="ZooKeeper典型应用场景"></a>ZooKeeper典型应用场景</h2><p>ZooKeeper是一个<strong>高可用</strong>的分布式<strong>数据管理与协调框架</strong>。基于对ZAB算法的实现，该框架能够很好地保证分布式环境中数据的<strong>一致性</strong>。也是基于这样的特性，使得ZooKeeper成为了解决分布式一致性问题的利器。</p>
<h3 id="数据发布与订阅（配置中心）"><a href="#数据发布与订阅（配置中心）" class="headerlink" title="数据发布与订阅（配置中心）"></a>数据发布与订阅（配置中心）</h3><p>数据发布与订阅，即所谓的<strong>配置中心</strong>，顾名思义就是发布者将数据发布到ZooKeeper节点上，供订阅者进行数据订阅，进而达到<strong>动态获取数据</strong>的目的，实现配置信息的<strong>集中式管理</strong>和<strong>动态更新</strong>。</p>
<p>在我们平常的应用系统开发中，经常会碰到这样的需求：系统中需要使用一些通用的配置信息，例如<strong>机器列表信息</strong>、<strong>数据库配置信息</strong>等。这些全局配置信息通常具备以下3个特性。</p>
<ul>
<li>数据量通常比较<strong>小。</strong></li>
<li>数据内容在运行时<strong>动态变化</strong>。</li>
<li>集群中各机器共享，<strong>配置一致</strong>。</li>
</ul>
<p>对于这样的全局配置信息就可以发布到ZooKeeper上，让客户端（集群的机器）去订阅该消息。</p>
<p>发布/订阅系统一般有两种设计模式，分别是<strong>推（Push）</strong>和<strong>拉（Pull）</strong>模式。</p>
<ul>
<li>推：<strong>服务端主动</strong>将数据更新发送给所有订阅的客户端。</li>
<li>拉：<strong>客户端主动</strong>发起请求来获取最新数据，通常客户端都采用<strong>定时轮询</strong>拉取的方式。</li>
</ul>
<p>ZooKeeper采用的是<strong>推拉相结合</strong>的方式。如下：</p>
<p>客户端想服务端<strong>注册</strong>自己需要关注的节点，一旦该节点的数据发生<strong>变更</strong>，那么服务端就会向相应的客户端发送Watcher事件<strong>通知</strong>，客户端接收到这个消息通知后，需要<strong>主动</strong>到服务端<strong>获取</strong>最新的数据（<strong>推拉结合</strong>）。</p>
<h3 id="命名服务-Naming-Service"><a href="#命名服务-Naming-Service" class="headerlink" title="命名服务(Naming Service)"></a>命名服务(Naming Service)</h3><p>命名服务也是分布式系统中比较常见的一类场景。在分布式系统中，通过使用命名服务，客户端应用能够根据指定<strong>名字</strong>来获取<strong>资源或服务的地址，提供者等信息</strong>。被命名的实体通常可以是<strong>集群中的机器，提供的服务，远程对象等等</strong>——这些我们都可以统称他们为<strong>名字（Name）</strong>。其中较为常见的就是一些分布式服务框架（如RPC、RMI）中的服务地址列表。通过在ZooKeepr里创建顺序节点，能够很容易创建一个<strong>全局唯一的路径</strong>，这个路径就可以作为一个<strong>名字</strong>。</p>
<p>ZooKeeper的命名服务即生成<strong>全局唯一的ID</strong>。</p>
<h3 id="分布式协调-通知"><a href="#分布式协调-通知" class="headerlink" title="分布式协调/通知"></a>分布式协调/通知</h3><p>ZooKeeper中特有<strong>Watcher注册</strong>与<strong>异步通知机制</strong>，能够很好的实现分布式环境下不同机器，甚至不同系统之间的<strong>通知与协调</strong>，从而实现<strong>对数据变更的实时处理</strong>。使用方法通常是不同的客户端都对ZK上同一个ZNode进行注册，监听ZNode的变化（包括ZNode本身内容及子节点的），如果ZNode发生了变化，那么所有订阅的客户端都能够接收到相应的Watcher通知，并做出相应的处理。</p>
<p><strong>ZK的分布式协调/通知，是一种通用的分布式系统机器间的通信方式</strong>。</p>
<h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h4><p>机器间的心跳检测机制是指在分布式环境中，不同机器（或进程）之间需要检测到彼此是否在正常运行，例如A机器需要知道B机器是否正常运行。在传统的开发中，我们通常是通过主机直接是否可以<strong>相互PING通</strong>来判断，更复杂一点的话，则会通过在机器之间建立长连接，通过<strong>TCP连接</strong>固有的心跳检测机制来实现上层机器的心跳检测，这些都是非常常见的心跳检测方法。</p>
<p>下面来看看如何使用ZK来实现分布式机器（进程）间的心跳检测。</p>
<p>基于ZK的<strong>临时节点</strong>的特性，可以让不同的进程都在ZK的一个<strong>指定节点</strong>下创建<strong>临时子节点</strong>，不同的进程直接可以根据这个临时子节点来判断对应的进程<strong>是否存活</strong>。通过这种方式，检测和被检测系统直接并不需要直接相关联，而是通过ZK上的某个节点进行关联，大大<strong>减少了系统耦合</strong>。</p>
<h4 id="工作进度汇报"><a href="#工作进度汇报" class="headerlink" title="工作进度汇报"></a>工作进度汇报</h4><p>在一个常见的<strong>任务分发系统</strong>中，通常任务被分发到不同的机器上执行后，需要实时地将自己的任务执行进度<strong>汇报</strong>给分发系统。这个时候就可以通过ZK来实现。在ZK上选择一个节点，每个任务客户端都在这个节点下面创建<strong>临时子节点</strong>，这样便可以实现两个功能：</p>
<ul>
<li>通过判断临时节点是否存在来确定任务机器<strong>是否存活</strong>。</li>
<li>各个任务机器会实时地将自己的<strong>任务执行进度写到这个临时节点上去</strong>，以便中心系统能够实时地获取到任务的<strong>执行进度</strong>。</li>
</ul>
<h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><p><strong>Master选举</strong>可以说是ZooKeeper<strong>最典型的应用场景</strong>了。比如HDFS中Active NameNode的选举、YARN中Active ResourceManager的选举和HBase中Active HMaster的选举等。</p>
<p>针对Master选举的需求，通常情况下，我们可以选择常见的<strong>关系型数据库</strong>中的<strong>主键特性</strong>来实现：希望成为Master的机器都向数据库中插入一条<strong>相同主键ID</strong>的记录，数据库会帮我们进行<strong>主键冲突检查</strong>，也就是说，<strong>只有一台</strong>机器能插入成功——那么，我们就认为向数据库中<strong>成功插入</strong>数据的客户端机器<strong>成为Master</strong>。</p>
<p>依靠关系型数据库的主键特性确实能够很好地保证在集群中选举出唯一的一个Master。但是，如果当前选举出的Master挂了，那么该如何处理？谁来告诉我Master挂了呢？显然，关系型数据库无法通知我们这个事件。但是，ZooKeeper可以做到！</p>
<p>利用ZooKeepr的强一致性，能够很好地保证在分布式高并发情况下节点的创建一定能够保证全局唯一性，即ZooKeeper将会保证客户端<strong>无法创建一个已经存在的ZNode</strong>。也就是说，如果同时有多个客户端请求创建<strong>同一个</strong>临时节点，那么最终一定<strong>只有一个</strong>客户端请求能够创建成功。利用这个特性，就能很容易地在分布式环境中进行Master选举了。</p>
<p>成功创建该节点的客户端所在的机器就成为了Master。同时，其他没有成功创建该节点的客户端，都会在该节点上<strong>注册</strong>一个子节点变更的<strong>Watcher</strong>，用于监控当前Master机器是否存活，一旦发现当前的Master挂了，那么其他客户端将会<strong>重新进行Master选举</strong>。</p>
<p>这样就实现了Master的<strong>动态选举</strong>。</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>分布式锁是控制<strong>分布式系统</strong>之间<strong>同步访问共享资源</strong>的一种方式。</p>
<p>分布式锁又分为<strong>排他锁</strong>和<strong>共享锁</strong>两种。</p>
<h4 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h4><p>排他锁（Exclusive Locks，简称X锁），又称为<strong>写锁</strong>或<strong>独占锁</strong>。</p>
<blockquote>
<p>如果事务T1对数据对象O1加上了排他锁，那么在整个加锁期间，只允许事务T1对O1进行<strong>读取和更新</strong>操作，其他任何事务都不能在对这个数据对象进行任何类型的操作（不能再对该对象加锁），直到T1释放了排他锁。</p>
</blockquote>
<p>可以看出，排他锁的核心是如何保证当前<strong>只有一个事务获得锁</strong>，并且锁<strong>被释放</strong>后，所有正在等待获取锁的事务都能够<strong>被通知到</strong>。</p>
<p>如何利用ZooKeeper实现排他锁？</p>
<p><strong>定义锁</strong></p>
<p>ZooKeeper上的<strong>一个ZNode可以表示一个锁</strong>。例如/exclusive_lock/lock节点就可以被定义为一个锁。</p>
<p><strong>获得锁</strong></p>
<p>如上所说，把ZooKeeper上的一个ZNode看作是一个锁，<strong>获得锁</strong>就通过<strong>创建ZNode</strong>的方式来实现。所有客户端都去/exclusive_lock节点下创建临时子节点/exclusive_lock/lock。ZooKeeper会保证在所有客户端中，最终只有一个客户端能够创建成功，那么就可以认为该客户端获得了锁。同时，所有没有获取到锁的客户端就需要到/exclusive_lock节点上注册一个子节点变更的Watcher监听，以便实时监听到lock节点的变更情况。</p>
<p><strong>释放锁</strong></p>
<p>因为/exclusive_lock/lock是一个<strong>临时节点</strong>，因此在以下两种情况下，都有可能释放锁。</p>
<ul>
<li>当前获得锁的客户端机器发生<strong>宕机</strong>或<strong>重启</strong>，那么该临时节点就会<strong>被删除，释放锁</strong>。</li>
<li>正常执行完业务逻辑后，客户端就会<strong>主动</strong>将自己创建的临时节点<strong>删除，释放锁</strong>。</li>
</ul>
<p>无论在什么情况下移除了lock节点，ZooKeeper都会<strong>通知</strong>所有在/exclusive_lock节点上注册了节点变更Watcher监听的客户端。这些客户端在接收到通知后，再次<strong>重新发起</strong>分布式锁获取，即重复『获取锁』过程。</p>
<h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><blockquote>
<p>共享锁（Shared Locks，简称S锁），又称为读锁。如果事务T1对数据对象O1加上了共享锁，那么T1只能对O1进行<strong>读操作</strong>，其他事务也能<strong>同时对O1加共享锁</strong>（不能是排他锁），直到O1上的所有共享锁都释放后O1才能被加排他锁。</p>
</blockquote>
<p>总结：可以<strong>多个事务同时获得</strong>一个对象的<strong>共享锁</strong>（同时读），有共享锁就不能再加排他锁（因为排他锁是写锁）</p>
<h2 id="ZooKeeper在大型分布式系统中的应用"><a href="#ZooKeeper在大型分布式系统中的应用" class="headerlink" title="ZooKeeper在大型分布式系统中的应用"></a>ZooKeeper在大型分布式系统中的应用</h2><p>前面已经介绍了ZooKeeper的典型应用场景。本节将以常见的大数据产品Hadoop和HBase为例来介绍ZooKeeper在其中的应用，帮助大家更好地理解ZooKeeper的分布式应用场景。</p>
<h3 id="ZooKeeper在Hadoop中的应用"><a href="#ZooKeeper在Hadoop中的应用" class="headerlink" title="ZooKeeper在Hadoop中的应用"></a>ZooKeeper在Hadoop中的应用</h3><p>在Hadoop中，ZooKeeper主要用于<strong>实现HA(Hive Availability）</strong>，包括<strong>HDFS的NamaNode和YARN的ResourceManager的HA</strong>。同时，在YARN中，ZooKeepr还用来<strong>存储应用的运行状态</strong>。HDFS的NamaNode和YARN的ResourceManager利用ZooKeepr实现HA的原理是一样的，所以本节以YARN为例来介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6326ec291ba11b95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YARN架构体系"></p>
<p>从上图可以看出，YARN主要由ResourceManager（RM）、NodeManager（NM）、ApplicationMaster（AM）和Container四部分组成。其中<strong>最核心</strong>的就是<strong>ResourceManager</strong>。</p>
<p>ResourceManager负责集群中<strong>所有资源的统一管理和分配</strong>，同时<strong>接收</strong>来自各个节点（NodeManager）的<strong>资源汇报信息</strong>，并把这些信息按照一定的策略分配给各个应用程序（Application Manager），其内部维护了各个应用程序的ApplicationMaster信息、NodeManager信息以及资源使用信息等。</p>
<p>为了实现HA，必须有<strong>多个ResourceManager并存</strong>（一般就两个），并且<strong>只有一个ResourceManager处于Active状态</strong>，其他的则处于Standby状态，当Active节点无法正常工作（如机器宕机或重启）时，处于Standby的就会通过<strong>竞争选举</strong>产生<strong>新的Active节点</strong>。</p>
<h4 id="主备切换"><a href="#主备切换" class="headerlink" title="主备切换"></a>主备切换</h4><p>下面我们就来看看YARN是如何实现多个ResourceManager之间的主备切换的。</p>
<ol>
<li><p>创建锁节点<br>在ZooKeeper上会有一个<code>/yarn-leader-election/appcluster-yarn</code>的锁节点，所有的ResourceManager在启动的时候，都会去竞争写一个Lock子节点：<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>，该节点是临时节点。ZooKeepr能够为我们保证最终<strong>只有一个</strong>ResourceManager能够<strong>创建成功</strong>。<strong>创建成功</strong>的那个ResourceManager就切换为<strong>Active状态</strong>，<strong>没有成功</strong>的那些ResourceManager则切换为<strong>Standby状态</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[zk: localhost:2181(CONNECTED) 16] get /yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</div><div class="line"></div><div class="line">appcluster-yarnrm2</div><div class="line">cZxid = 0x1b00133dc0</div><div class="line">ctime = Tue Jan 03 15:44:42 CST 2017</div><div class="line">mZxid = 0x1f00000540</div><div class="line">mtime = Sat Jan 07 00:50:20 CST 2017</div><div class="line">pZxid = 0x1b00133dc0</div><div class="line">cversion = 0</div><div class="line">dataVersion = 28</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 22</div><div class="line">numChildren = 0</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看到此时集群中ResourceManager2为Active。</p>
<ol>
<li><p>注册Watcher监听<br>所有Standby状态的ResourceManager都会向<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>节点注册一个节点变更的<strong>Watcher监听</strong>，利用<strong>临时节点的特性</strong>，能够快速感知到Active状态的ResourceManager的运行情况。</p>
</li>
<li><p>主备切换<br>当Active状态的ResourceManager出现诸如<strong>宕机或重启</strong>的异常情况时，其在ZooKeeper上连接的客户端<strong>会话就会失效</strong>，因此<code>/yarn-leader-election/appcluster-yarn/ActiveBreadCrumb</code>节点就会<strong>被删除</strong>。此时其余各个Standby状态的ResourceManager就都会<strong>接收到</strong>来自ZooKeeper服务端的<strong>Watcher事件通知</strong>，然后会<strong>重复进行步骤1的操作</strong>。</p>
</li>
</ol>
<p>以上就是利用ZooKeeper来实现ResourceManager的主备切换的过程，实现了ResourceManager的HA。</p>
<p>HDFS中NameNode的HA的实现原理跟YARN中ResourceManager的HA的实现原理相同。其锁节点为<code>/hadoop-ha/mycluster/ActiveBreadCrumb</code>。</p>
<h4 id="ResourceManager状态存储"><a href="#ResourceManager状态存储" class="headerlink" title="ResourceManager状态存储"></a>ResourceManager状态存储</h4><p>在 ResourceManager 中，<strong>RMStateStore</strong> 能够存储一些 RM 的<strong>内部状态信息</strong>，包括 Application 以及它们的 Attempts 信息、Delegation Token 及 Version Information 等。需要注意的是，RMStateStore 中的绝大多数状态信息都是<strong>不需要持久化存储</strong>的，因为<strong>很容易从上下文信息中将其重构出来</strong>，如资源的使用情况。在存储的设计方案中，提供了三种可能的实现，分别如下。</p>
<ul>
<li>基于内存实现，一般是用于日常开发测试。</li>
<li>基于文件系统的实现，如HDFS。</li>
<li>基于ZooKeeper实现。</li>
</ul>
<p>由于这些状态信息的<strong>数据量都不是很大</strong>，因此Hadoop<strong>官方建议基于ZooKeeper来实现状态信息的存储</strong>。在ZooKeepr上，ResourceManager 的状态信息都被存储在<code>/rmstore</code>这个根节点下面。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zk: localhost:<span class="number">2181</span>(CONNECTED) <span class="number">28</span>] ls /rmstore/ZKRMStateRoot</div><div class="line">[RMAppRoot, AMRMTokenSecretManagerRoot, EpochNode, RMDTSecretManagerRoot, RMVersionNode]</div></pre></td></tr></table></figure>
<p>RMAppRoot 节点下存储的是与各个 Application 相关的信息，RMDTSecretManagerRoot 存储的是与安全相关的 Token 等信息。每个 Active 状态的 ResourceManager 在<strong>初始化阶段</strong>都会从 ZooKeeper 上<strong>读取到这些状态信息</strong>，并根据这些状态信息继续进行相应的处理。</p>
<p>小结：</p>
<p>ZooKeepr在Hadoop中的应用主要有：</p>
<ol>
<li>HDFS中NameNode的HA和YARN中ResourceManager的HA。</li>
<li>存储RMStateStore状态信息</li>
</ol>
<h3 id="ZooKeeper在HBase中的应用"><a href="#ZooKeeper在HBase中的应用" class="headerlink" title="ZooKeeper在HBase中的应用"></a>ZooKeeper在HBase中的应用</h3><p>HBase主要用ZooKeeper来实现<strong>HMaster选举与主备切换、系统容错、RootRegion管理、Region状态管理和分布式SplitWAL任务管理</strong>等。</p>
<h4 id="HMaster选举与主备切换"><a href="#HMaster选举与主备切换" class="headerlink" title="HMaster选举与主备切换"></a>HMaster选举与主备切换</h4><p>HMaster选举与主备切换的原理和HDFS中NameNode及YARN中ResourceManager的HA原理相同。</p>
<h4 id="系统容错"><a href="#系统容错" class="headerlink" title="系统容错"></a>系统容错</h4><p>当HBase启动时，每个<strong>RegionServer</strong>都会到ZooKeeper的<code>/hbase/rs</code>节点下创建一个信息节点（下文中，我们称该节点为”rs状态节点”），例如<code>/hbase/rs/[Hostname]</code>，同时，<strong>HMaster</strong>会对这个节点<strong>注册监听</strong>。当某个 RegionServer 挂掉的时候，ZooKeeper会因为在一段时间内无法接受其心跳（即 Session 失效），而删除掉该 RegionServer 服务器对应的 rs 状态节点。与此同时，HMaster 则会接收到 ZooKeeper 的 NodeDelete 通知，从而感知到某个节点断开，并立即开始容错工作。</p>
<p>HBase为什么不直接让HMaster来负责RegionServer的监控呢？如果HMaster直接通过<strong>心跳机制</strong>等来管理RegionServer的状态，随着<strong>集群越来越大</strong>，HMaster的<strong>管理负担会越来越重</strong>，另外它自身也有挂掉的可能，因此数据还<strong>需要持久化</strong>。在这种情况下，ZooKeeper就成了理想的选择。</p>
<h4 id="RootRegion管理"><a href="#RootRegion管理" class="headerlink" title="RootRegion管理"></a>RootRegion管理</h4><p>对应HBase集群来说，数据存储的<strong>位置信息</strong>是记录在<strong>元数据region</strong>，也就是<strong>RootRegion</strong>上的。每次客户端发起新的请求，需要知道数据的位置，就会去查询RootRegion，而<strong>RootRegion自身位置则是记录在ZooKeeper上</strong>的（默认情况下，是记录在ZooKeeper的<code>/hbase/meta-region-server</code>节点中）。当RootRegion发生变化，比如Region的手工移动、重新负载均衡或RootRegion所在服务器发生了故障等是，就能够通过ZooKeeper来感知到这一变化并做出一系列相应的容灾措施，从而保证客户端总是能够拿到正确的RootRegion信息。</p>
<h4 id="Region管理"><a href="#Region管理" class="headerlink" title="Region管理"></a>Region管理</h4><p>HBase里的Region会经常发生变更，这些变更的原因来自于系统故障、负载均衡、配置修改、Region分裂与合并等。一旦Region发生移动，它就会经历<strong>下线（offline）和重新上线（online）</strong>的过程。</p>
<p>在<strong>下线期间</strong>数据是<strong>不能被访问</strong>的，并且Region的这个状态变化必须<strong>让全局知晓</strong>，否则可能会出现<strong>事务性的异常</strong>。对于大的HBase集群来说，Region的数量可能会多达十万级别，甚至更多，这样规模的Region状态管理交给ZooKeeper来做也是一个很好的选择。</p>
<h4 id="分布式SplitWAL任务管理"><a href="#分布式SplitWAL任务管理" class="headerlink" title="分布式SplitWAL任务管理"></a>分布式SplitWAL任务管理</h4><p>当某台<strong>RegionServer服务器挂掉</strong>时，由于总有一部分<strong>新写入的数据还没有持久化到HFile中</strong>，因此在迁移该RegionServer的服务时，一个重要的工作就是<strong>从WAL中恢复</strong>这部分还在内存中的数据，而这部分工作<strong>最关键的一步</strong>就是<strong>SplitWAL</strong>，即HMaster需要遍历该RegionServer服务器的WAL，并按Region切分成小块移动到新的地址下，并进行<strong>日志的回放（replay）</strong>。</p>
<p>由于单个RegionServer的日志量相对庞大（可能有上千个Region，上GB的日志），而用户又往往希望系统能够快速完成日志的恢复工作。因此一个可行的方案是将这个处理WAL的任务<strong>分给多台RegionServer服务器</strong>来共同处理，而这就又需要一个<strong>持久化组件来辅助HMaster完成任务的分配</strong>。当前的做法是，HMaster会在ZooKeeper上创建一个<strong>SplitWAL节点</strong>（默认情况下，是<code>/hbase/SplitWAL</code>节点），将<strong>“哪个RegionServer处理哪个Region”</strong>这样的信息以<strong>列表的形式</strong>存放到该节点上，然后由各个RegionServer服务器自行到该节点上去<strong>领取任务</strong>并在任务执行成功或失败后再<strong>更新该节点的信息</strong>，以通知HMaster继续进行后面的步骤。ZooKeeper在这里担负起了分布式集群中<strong>相互通知和信息持久化</strong>的角色。</p>
<p>小结：</p>
<p>以上就是一些HBase中依赖ZooKeeper完成分布式协调功能的典型场景。但事实上，HBase对ZooKeepr的依赖还不止这些，比如HMaster还依赖ZooKeeper来完成Table的enable/disable状态记录，以及HBase中<strong>几乎所有的元数据存储</strong>都是放在ZooKeeper上的。</p>
<p>由于ZooKeeper出色的分布式协调能力及良好的通知机制，HBase在各版本的演进过程中越来越多地增加了ZooKeeper的应用场景，从趋势上来看两者的交集越来越多。HBase中所有对ZooKeeper的操作都封装在了org.apache.hadoop.hbase.zookeeper这个包中，感兴趣的同学可以自行研究。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《从Paxos到Zookeeper》</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> ZooKeeper </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符流中第一个不重复的字符]]></title>
      <url>http://linbingdong.com/2017/01/09/%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。 </p>
<p><strong>分析</strong></p>
<p>创建一个长度为128的数组charArr[]。用字符的ASCII码作为数组的下标，字符在字符流中的位置作为值。刚开始数组初始化为-1。若该字符未出现过，即charArr[ch] == -1，则令charArr[ch] = index(字符在字符流中的位置)，否则令charArr[ch] = -2。最后只要扫描整个数组，并从中找出最小的大于等于0的值对应的字符即可。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] charArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span></span>&#123;</div><div class="line">        Arrays.fill(charArr,-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Insert one char from stringstream</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(charArr[ch] == -<span class="number">1</span>)</div><div class="line">            charArr[ch] = index;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            charArr[ch] = -<span class="number">2</span>;</div><div class="line">        index++;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//return the first appearence once char in current stringstream</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">FirstAppearingOnce</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">char</span> ch = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">int</span> minIndex = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(charArr[i] &gt;= <span class="number">0</span> &amp;&amp; charArr[i] &lt; minIndex)&#123;</div><div class="line">                ch = (<span class="keyword">char</span>)i;</div><div class="line">                minIndex = charArr[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ch == <span class="string">'\0'</span> ? <span class="string">'#'</span> : ch;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java Map的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/01/09/%E5%85%B3%E4%BA%8EJava%20Map%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java Map的常见问题并给出答案。</p>
<a id="more"></a>
<h3 id="1-将Map转化成List"><a href="#1-将Map转化成List" class="headerlink" title="1. 将Map转化成List"></a>1. 将Map转化成List</h3><p>Map接口提供了三种collection：key set,value set 和 key-value set，每一种都可以转成List。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//map</span></div><div class="line">HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">map.put(<span class="number">1</span>,<span class="number">10</span>);</div><div class="line">map.put(<span class="number">2</span>,<span class="number">20</span>);</div><div class="line">map.put(<span class="number">3</span>,<span class="number">30</span>);</div><div class="line"><span class="comment">//key list</span></div><div class="line">ArrayList&lt;Integer&gt; keyList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</div><div class="line"><span class="comment">//value list</span></div><div class="line">ArrayList&lt;Integer&gt; valueList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.values());</div><div class="line"><span class="comment">//key-value list</span></div><div class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</div></pre></td></tr></table></figure>
<h3 id="2-迭代Map"><a href="#2-迭代Map" class="headerlink" title="2. 迭代Map"></a>2. 迭代Map</h3><p>最高效的遍历map的每个entry的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet())&#123;</div><div class="line">    <span class="keyword">int</span> key = (<span class="keyword">int</span>) entry.getKey();</div><div class="line">    <span class="keyword">int</span> value = (<span class="keyword">int</span>) entry.getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以使用iterator，特别是JDK 1.5之前。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Iterator itr = map.entrySet().iterator();</div><div class="line"><span class="keyword">while</span>(itr.hasNext())&#123;</div><div class="line">  Map.Entry entry = itr.next();</div><div class="line">  <span class="keyword">int</span> key = (<span class="keyword">int</span>) entry.getKey();</div><div class="line">  <span class="keyword">int</span> value = (<span class="keyword">int</span>) entry.getValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-根据key对map进行排序"><a href="#3-根据key对map进行排序" class="headerlink" title="3. 根据key对map进行排序"></a>3. 根据key对map进行排序</h3><p>可以将Map.Entry放入一个list，然后自己实现Comparator来对list排序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; e1, Map.Entry&lt;Integer, Integer&gt; e2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> e1.getKey().compareTo(e2.getKey());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>可以使用SortedMap。SortedMap的一个实现类是TreeMap。TreeMap的构造器可以接受一个Comparator参数。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SortedMap&lt;Integer,Integer&gt; sortedMap = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer k1, Integer k2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> k1.compareTo(k2);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">sortedMap.putAll(map);</div></pre></td></tr></table></figure>
<p>注：TreeMap默认对key进行排序。</p>
<h3 id="4-根据value对map进行排序"><a href="#4-根据value对map进行排序" class="headerlink" title="4. 根据value对map进行排序"></a>4. 根据value对map进行排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Map.Entry&lt;Integer,Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</div><div class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; e1, Map.Entry&lt;Integer, Integer&gt; e2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> e1.getValue().compareTo(e2.getValue());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果map中的value不重复，可以通过反转key-value对为value-key对来用上面的3中的TreeMap方法对其排序。该方法不推荐。</p>
<h3 id="5-初始化一个不可变Map"><a href="#5-初始化一个不可变Map" class="headerlink" title="5. 初始化一个不可变Map"></a>5. 初始化一个不可变Map</h3><p>正确的做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    map1.put(<span class="number">8</span>,<span class="number">9</span>);</div><div class="line">    map1.put(<span class="number">88</span>,<span class="number">99</span>);</div><div class="line">    map1 = Collections.unmodifiableMap(map1);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>错误的做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer,Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    map1.put(<span class="number">8</span>,<span class="number">9</span>);</div><div class="line">    map1.put(<span class="number">88</span>,<span class="number">99</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加了final只能确保不能 map1 = new，但是可以修改map1中的元素。</p>
<h3 id="6-HashMap、TreeMap和HashTable的区别"><a href="#6-HashMap、TreeMap和HashTable的区别" class="headerlink" title="6. HashMap、TreeMap和HashTable的区别"></a>6. HashMap、TreeMap和HashTable的区别</h3><p>Map接口有三个比较重要的实现类，分别是HashMap、TreeMap和HashTable。</p>
<ol>
<li>TreeMap是有序的，HashMap和HashTable是无序的。</li>
<li><p>Hashtable的方法是同步的，HashMap的方法不是同步的。这是两者最主要的区别。</p>
<p>这就意味着Hashtable是线程安全的，HashMap不是线程安全的。HashMap效率较高，Hashtable效率较低。<br>如果对同步性或与遗留代码的兼容性没有任何要求，建议使用HashMap。<br>查看Hashtable的源代码就可以发现，除构造函数外，Hashtable的所有 public 方法声明中都有 synchronized关键字，而HashMap的源码中则没有。</p>
</li>
<li>Hashtable不允许null值，HashMap允许null值（key和value都允许）</li>
<li>父类不同：Hashtable的父类是Dictionary，HashMap的父类是AbstractMap</li>
<li>Hashtable中hash数组默认大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">                 | HashMap | Hashtable | TreeMap</div><div class="line">-------------------------------------------------------</div><div class="line">iteration order  | no      | no        | yes</div><div class="line">null key-value   | yes-yes | no-no   | no-yes</div><div class="line">synchronized     | no      | yes       | no</div><div class="line">time performance | O(1)    | O(1)      | O(log n)</div><div class="line">implementation   | buckets | buckets   | red-black tree</div></pre></td></tr></table></figure>
<h3 id="7-创建一个空的Map"><a href="#7-创建一个空的Map" class="headerlink" title="7. 创建一个空的Map"></a>7. 创建一个空的Map</h3><p>如果希望该map为不可变的，则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map = Collections.emptyMap();</div></pre></td></tr></table></figure>
<p>否则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map = <span class="keyword">new</span> HashMap();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java字符串的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/01/09/%E5%85%B3%E4%BA%8EJava%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java字符串的常见问题并给出答案。</p>
<a id="more"></a>
<h3 id="1-如何比较两个字符串？用”-”还是”equals”"><a href="#1-如何比较两个字符串？用”-”还是”equals”" class="headerlink" title="1. 如何比较两个字符串？用”==”还是”equals”?"></a>1. 如何比较两个字符串？用”==”还是”equals”?</h3><ul>
<li>“==”对比的是引用是否相同（是否同一个对象）</li>
<li>“equals”对比的是值是否相同</li>
</ul>
<p>除非想要比较两个字符串是否是同一个对象，否则应该一直使用”equals”。</p>
<h3 id="2-为什么对安全性敏感的信息更喜欢用char-而不是String来存储？"><a href="#2-为什么对安全性敏感的信息更喜欢用char-而不是String来存储？" class="headerlink" title="2. 为什么对安全性敏感的信息更喜欢用char[]而不是String来存储？"></a>2. 为什么对安全性敏感的信息更喜欢用char[]而不是String来存储？</h3><p>因为String是不可变对象，这就意味着只要String被创建，它们就会一直存在直到被垃圾回收器收集。因此，用String保存的信息安全性会降低。</p>
<h3 id="3-在switch语句中可以使用字符串吗？"><a href="#3-在switch语句中可以使用字符串吗？" class="headerlink" title="3. 在switch语句中可以使用字符串吗？"></a>3. 在switch语句中可以使用字符串吗？</h3><p>从Java7开始，可以在switch语句中使用字符串。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (aString) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">"a"</span>:</div><div class="line">           value = <span class="number">1</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">"b"</span>:</div><div class="line">           value = <span class="number">2</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-如何将字符串转为int？"><a href="#4-如何将字符串转为int？" class="headerlink" title="4. 如何将字符串转为int？"></a>4. 如何将字符串转为int？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = Integer.parseInt(<span class="string">"10"</span>);</div></pre></td></tr></table></figure>
<p>虽然很简单，但是使用频率很高。</p>
<h3 id="5-如何用空格切分字符串？"><a href="#5-如何用空格切分字符串？" class="headerlink" title="5. 如何用空格切分字符串？"></a>5. 如何用空格切分字符串？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String[] strArray = aString.split(<span class="string">"\\s+"</span>);</div></pre></td></tr></table></figure>
<h3 id="6-substring-方法会创建一个新字符串吗？"><a href="#6-substring-方法会创建一个新字符串吗？" class="headerlink" title="6. substring()方法会创建一个新字符串吗？"></a>6. substring()方法会创建一个新字符串吗？</h3><p>从Java7开始，substring()方法会创建一个新的char数组，而不是使用已经存在的。</p>
<p>在Java6中，substring()方法不会创建一个新的char数组，如果想创建新的，可以用以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str.substring(m,n) + <span class="string">""</span>;</div></pre></td></tr></table></figure>
<h3 id="7-String-vs-StringBuilder-vs-StringBuffer"><a href="#7-String-vs-StringBuilder-vs-StringBuffer" class="headerlink" title="7. String vs StringBuilder vs StringBuffer"></a>7. String vs StringBuilder vs StringBuffer</h3><p>String是不可变的，StringBuilder和StringBuffer都是可变的。</p>
<p>StringBuffer是同步的，线程安全的，效率低。</p>
<p>StringBuilder是非同步的，非线程安全，效率比StringBuffer高。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java Collections的几个常见问题]]></title>
      <url>http://linbingdong.com/2017/01/07/Stack%20Overflow%E4%B8%8A%E5%85%B3%E4%BA%8EJava%20Collections%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>列举几个关于Java Collections的常见问题并给出答案。</p>
<a id="more"></a>
<h3 id="1-什么时候用LinkedList，什么时候用ArrayList？"><a href="#1-什么时候用LinkedList，什么时候用ArrayList？" class="headerlink" title="1. 什么时候用LinkedList，什么时候用ArrayList？"></a>1. 什么时候用LinkedList，什么时候用ArrayList？</h3><p><code>ArrayList</code>是使用数组实现的list，本质上就是数组。ArrayList中的元素可以通过索引随机获取一个元素。但是如果该数组已满，当添加新元素时需要分配一个新的数组然后将原来数组的元素移动过去，需要O(n)的时间复杂度。添加或删除一个元素需要移动数组中的其他元素。这是ArrayList最大的缺点。</p>
<p><code>LinkedList</code>是一个双向链表。因此，当需要获取list中某个元素，需要从头到尾遍历list。另一方面，在链表中添加或删除元素很快，只需要O(1)的时间复杂度。从空间上来说，在链表中一个节点需要两个额外的指针来指向它的previous和next节点。</p>
<p>总结：</p>
<p>从<strong>时间复杂度</strong>来说，如果对list增加或删除操作较多，优先用LinkedList；如果查询操作较多，优先用ArrayList。</p>
<p>从<strong>空间复杂度</strong>来说，LinkedList会占用较多空间。</p>
<h3 id="2-如何边遍历边移除Collection中的元素"><a href="#2-如何边遍历边移除Collection中的元素" class="headerlink" title="2. 如何边遍历边移除Collection中的元素"></a>2. 如何边遍历边移除Collection中的元素</h3><p>边遍历边修改Collection的唯一正确方式是使用<code>Iterator.remove()</code>方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;Integer&gt; it = list.iterator();</div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">	<span class="comment">// do something</span></div><div class="line">	it.remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一种最常见的<strong>错误</strong>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Integer i : list)&#123;</div><div class="line">	list.remove(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行以上错误代码会报<code>ConcurrentModificationException</code>异常。这是因为当使用<code>foreach</code>(for(Integer i : list))语句时，会自动生成一个iterator来遍历该list，但同时该list正在被<code>Iterator.remove()</code>修改。在Java中，一般不允许一个线程在遍历collection时另一个线程在修改它。</p>
<h3 id="3-如何将List转化成int-？"><a href="#3-如何将List转化成int-？" class="headerlink" title="3. 如何将List转化成int[]？"></a>3. 如何将List转化成int[]？</h3><p>很多人可能认为只需用<code>List.toArray()</code>即可，其实不然。List.toArray()方法只可能得到Integer[]，无法得到int[]。</p>
<p>最简单的方法是使用<code>Apache Commons Lang</code>库中的<code>ArrayUtils</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array = ArrayUtils.toPrimitive(list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]));</div></pre></td></tr></table></figure>
<p>在JDK中，没有捷径。需要注意的是，不能直接使用<code>List.toArray()</code>,因为这样会将List转化成Integer[]而不是int[]。正确的做法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</div><div class="line">	array[i] = list.get(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-如何将int-转化成List？"><a href="#4-如何将int-转化成List？" class="headerlink" title="4. 如何将int[]转化成List？"></a>4. 如何将int[]转化成List？</h3><p>同上，很多人以为只需用<code>Arrays.asList()</code>即可，其实不然。因为不能以int[]作为该方法的参数，要的话也只能是Integer[]。</p>
<p>关于<code>Arrays.asList()</code>方法有如下特性：</p>
<ul>
<li>1.该方法对于基本数据类型的数组支持并不好,当数组是基本数据类型时不建议使用 </li>
<li>2.当使用asList()方法时，数组就和列表链接在一起了。当更新其中之一时，另一个将自动获得更新。因为asList获得的List实际引用的就是数组  注意:仅仅针对对象数组类型,基本数据类型数组不具备该特性。</li>
<li>3.asList得到的数组是的没有add和remove方法的。因为asList返回的List是Arrays中的内部类,而该类并没有定义add和remove方法。</li>
</ul>
<p>那么如何将int[]转化成List呢？</p>
<p>还是得自己实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i: array) &#123;</div><div class="line">  list.add(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-过滤一个Collection最好的方法是什么？"><a href="#5-过滤一个Collection最好的方法是什么？" class="headerlink" title="5. 过滤一个Collection最好的方法是什么？"></a>5. 过滤一个Collection最好的方法是什么？</h3><p>如过滤掉list中大于5的整数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;Integer&gt; it = list.iterator();</div><div class="line"><span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">	<span class="keyword">int</span> i = it.next();</div><div class="line">	<span class="keyword">if</span>(i &gt; <span class="number">5</span>) &#123;  <span class="comment">//过滤掉大于5的整数</span></div><div class="line">		it.remove(); </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-将List转化成Set最简单的方法？"><a href="#6-将List转化成Set最简单的方法？" class="headerlink" title="6. 将List转化成Set最简单的方法？"></a>6. 将List转化成Set最简单的方法？</h3><p>有两种方法，取决于你怎么要怎么定义两个元素相等。第一种方法是将list放入<code>HashSet</code>里，该方法元素是否相等是通过它们的hashCode()来比较的。如果需要自己定义比较的方法，需要用<code>TreeSet</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;(list);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt;(aComparator);</div><div class="line">set.addAll(list);</div></pre></td></tr></table></figure>
<h3 id="7-如何删除ArrayList中重复的元素？"><a href="#7-如何删除ArrayList中重复的元素？" class="headerlink" title="7. 如何删除ArrayList中重复的元素？"></a>7. 如何删除ArrayList中重复的元素？</h3><p>如果不关心元素在ArrayList中的顺序，可以将list放入set中来删除重复元素，然后在放回list。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;(list);</div><div class="line">list.clear();</div><div class="line">list.addAll(set);</div></pre></td></tr></table></figure>
<p>如果关心元素在ArrayList中的顺序，可以用<code>LinkedHashSet</code>。</p>
<h3 id="8-有序的collection"><a href="#8-有序的collection" class="headerlink" title="8. 有序的collection"></a>8. 有序的collection</h3><p>Java里有很多方法来维持一个collection有序。有的需要实现Comparable接口，有的需要自己指定Comparator。</p>
<ol>
<li><code>Collections.sort()</code>可以用来对list排序。该排序是稳定的，并且可以保证nlog(n)的性能。</li>
<li><code>PriorityQueue</code>提供排序的队列。<code>PriorityQueue</code>和<code>Collections.sort()</code>的区别是，<code>PriorityQueue</code>动态维护一个有序的队列（每添加或删除一个元素就会重新排序），但是只能获队列中的头元素。</li>
<li>如果collection中没有重复的元素，<code>TreeSet</code>是另一个选择。跟<code>PriorityQueue</code>一样的是，<code>TreeSet</code>也动态维护一个有序的集合。可以从<code>TreeSet</code>中获取最大和最小的元素。</li>
</ol>
<p>总结：<code>Collections.sort()</code>提供一个一次排序的list。<code>PriorityQueue</code>和<code>TreeSet</code>动态维护排序的collection。</p>
<h3 id="9-拷贝list"><a href="#9-拷贝list" class="headerlink" title="9. 拷贝list"></a>9. 拷贝list</h3><p>有两种方法可以用来拷贝list。一种是使用<code>ArrayList</code>构造器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Integer&gt; dstList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(srcList);</div></pre></td></tr></table></figure>
<p>另一种是使用<code>Collections.copy()</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Integer&gt; dstList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(srcList.size());</div><div class="line">Collections.copy(dstList, srcList);</div></pre></td></tr></table></figure>
<p>需要注意的是，使用该方法的话目标list至少跟源list长度一样长。否则会报<code>IndexOutOfBoundsException</code>异常。</p>
<p>另外有两点需要注意：</p>
<ol>
<li>两种方法都是浅拷贝</li>
<li><code>Collections.copy()</code>方法的两个参数必须都是list，而<code>ArrayList</code>方法参数只要是collection即可，因此<code>ArrayList</code>方法更通用。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链表中环的入口节点]]></title>
      <url>http://linbingdong.com/2017/01/07/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>一个链表中包含环，请找出该链表的环的入口节点。</p>
<p><strong>分析</strong></p>
<p>两种思路</p>
<p>思路一：创建一个set，依次往set里添加节点。第二次到环的入口节点时，由于重复了，无法添加成功，返回该节点。</p>
<p>思路二：两个指针。具体分析见代码注释。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<p>用HashSet（取巧）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode p = pHead;</div><div class="line">        HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</div><div class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!set.add(p))</div><div class="line">                <span class="keyword">return</span> p;</div><div class="line">            p = p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个指针（巧妙）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode p1 = pHead, p2 = pHead;</div><div class="line">        <span class="keyword">while</span> (p2 != <span class="keyword">null</span>)&#123;</div><div class="line">            p1 = p1.next;  <span class="comment">//p1每次走一步</span></div><div class="line">            p2 = p2.next.next; <span class="comment">//p2每次走两步</span></div><div class="line">            <span class="keyword">if</span> (p1 == p2)&#123;  <span class="comment">//第一次相遇，此时p2刚好比p1多走一个环的长度，又因为p2走的距离是p1的两倍，所以p1刚好走了一个环的距离</span></div><div class="line">                p1 = pHead;  <span class="comment">//p1回到头节点，p2不动。此时p1，p2刚好相差一个环的距离</span></div><div class="line">                <span class="keyword">while</span> (p1 != p2)&#123; <span class="comment">//p1、p2每次都只走一步，下次相遇必定在环的入口节点</span></div><div class="line">                    p1 = p1.next;</div><div class="line">                    p2 = p2.next;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> p1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反转链表]]></title>
      <url>http://linbingdong.com/2017/01/06/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入一个链表，反转链表后，输出链表的所有元素。</p>
<p><strong>分析</strong></p>
<p>用头插法。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode h = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">        h = head;</div><div class="line">	ListNode p = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">        p.val = h.val;</div><div class="line">        <span class="keyword">while</span> (h.next != <span class="keyword">null</span>)&#123;</div><div class="line">            h = h.next;</div><div class="line">            ListNode q = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">            q.val =  h.val;</div><div class="line">            q.next = p;</div><div class="line">            p = q;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[合并两个有序的链表]]></title>
      <url>http://linbingdong.com/2017/01/06/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
<p><strong>分析</strong></p>
<p>可以用递归，也可以不用递归</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<p>非递归版</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class="line">        ListNode head = <span class="keyword">new</span> ListNode(-<span class="number">1</span>); </div><div class="line">        ListNode head2 = head;</div><div class="line">        ListNode p = list1;</div><div class="line">        ListNode q = list2;</div><div class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)&#123;</div><div class="line">                head2.next = q;</div><div class="line">                <span class="keyword">return</span> head.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (q == <span class="keyword">null</span>)&#123;</div><div class="line">                head2.next = p;</div><div class="line">                <span class="keyword">return</span> head.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (p.val &lt; q.val)&#123;</div><div class="line">                head2.next = p;</div><div class="line">                p = p.next;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                head2.next = q;</div><div class="line">                q = q.next;</div><div class="line">            &#125;</div><div class="line">            head2 = head2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>递归版</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (list1 == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> list2;</div><div class="line">        <span class="keyword">if</span> (list2 == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> list1;</div><div class="line">        <span class="keyword">if</span> (list1.val &lt; list2.val)&#123;</div><div class="line">            list1.next = Merge(list1.next,list2);</div><div class="line">            <span class="keyword">return</span> list1;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            list2.next = Merge(list1,list2.next);</div><div class="line">            <span class="keyword">return</span> list2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[和为S的连续正数序列]]></title>
      <url>http://linbingdong.com/2017/01/06/%E5%92%8C%E4%B8%BAS%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck! </p>
<p>输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序。</p>
<p><strong>分析</strong></p>
<p>思路一：两个for循环即可。</p>
<p>思路二：用两个数字begin和end分别表示序列的最大值和最小值，首先将begin初始化为1，end初始化为2.<br>如果从begin到end的和大于s，我们就从序列中去掉较小的值(即增大begin),相反，只需要增大end。<br>终止条件为：begin &gt; sum / 2. </p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<p>最直接的思路</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sum / <span class="number">2</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= sum / <span class="number">2</span> + <span class="number">1</span>; j++)&#123;</div><div class="line">                temp += j;</div><div class="line">                <span class="keyword">if</span> (temp == sum)&#123;</div><div class="line">                    ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> x = i; x &lt;= j; x++)&#123;</div><div class="line">                        al.add(x);</div><div class="line">                    &#125;</div><div class="line">                    list.add(al);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (temp &gt; sum)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更巧妙的解法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; FindContinuousSequence(<span class="keyword">int</span> sum) &#123;</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</div><div class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">3</span>)</div><div class="line">            <span class="keyword">return</span> list;</div><div class="line">        <span class="keyword">int</span> begin = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> end = <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">3</span>;</div><div class="line">        <span class="keyword">while</span> (begin &lt;= sum /<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (temp &lt; sum)</div><div class="line">                temp += ++end;</div><div class="line">            <span class="keyword">if</span> (temp == sum)&#123;</div><div class="line">                ArrayList&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt;= end; i++)&#123;</div><div class="line">                    al.add(i);</div><div class="line">                &#125;</div><div class="line">                list.add(al);</div><div class="line">            &#125;</div><div class="line">            temp -= begin++;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数值的整数次方]]></title>
      <url>http://linbingdong.com/2017/01/06/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>
<p><strong>分析</strong></p>
<p>题目比较简单，主要注意指数是负数的情况。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = Math.abs(exponent);</div><div class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>)&#123;</div><div class="line">           result *= base;</div><div class="line">           x--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span> / result;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> result;        </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果调用Math.pow()方法，可以一行代码搞定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> exponent &lt; <span class="number">0</span> ? <span class="number">1</span> / Math.pow(base, -exponent) : Math.pow(base, exponent); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[链表中倒数第k个节点]]></title>
      <url>http://linbingdong.com/2017/01/05/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入一个链表，输出该链表中倒数第k个结点。</p>
<p><strong>分析</strong></p>
<p>两个节点p和q，刚开始都指向头结点。q先走k-1步，然后p、q一起走。当q走到尾节点时，p刚好在倒数第k个结点。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || k &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode p = head,q = head;</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (q.next != <span class="keyword">null</span>)&#123;</div><div class="line">            	q = q.next;</div><div class="line">            	k--;                </div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;     </div><div class="line">        &#125;          </div><div class="line">        <span class="keyword">while</span>(q.next != <span class="keyword">null</span>)&#123;</div><div class="line">            p = p.next;</div><div class="line">            q = q.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组中只出现一次的数字II]]></title>
      <url>http://linbingdong.com/2017/01/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97II/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p>
<p><strong>分析</strong></p>
<p>本题是有两个未知数，是”Single Number”这道题的扩展，直接做异或肯定是不行的。有没有办法把两个未知数分开，使得可以分别应用Single Number的解法呢?<br>设x,y是那两个未知数，那么如果对这个数组做异或的话，结果实质上等于x^y，因为其他数都出现了两次，被抵消了。<br>但是仅仅是通过最后异或出来的值，是没办法区分出x和y的，但是足以帮助我们把 x和y划分到不同的子数组中去。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//num1,num2分别为长度为1的数组。传出参数</span></div><div class="line"><span class="comment">//将num1[0],num2[0]设置为返回结果</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> num1[] , <span class="keyword">int</span> num2[])</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> xorresult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (Integer i : array)&#123;</div><div class="line">            xorresult ^= i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> ((xorresult &amp; flag) == <span class="number">0</span>)  </div><div class="line">            flag &lt;&lt;= <span class="number">1</span>;  <span class="comment">//找出x和y第一个不同的二进制位</span></div><div class="line">        <span class="keyword">for</span> (Integer i : array)&#123;  <span class="comment">//把x和y划分到不同的子数组中，然后分别用异或。</span></div><div class="line">            <span class="keyword">if</span> ((i &amp; flag) == <span class="number">0</span>)</div><div class="line">                num2[<span class="number">0</span>] ^= i;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                num1[<span class="number">0</span>] ^= i;</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一个只出现一次的字符]]></title>
      <url>http://linbingdong.com/2017/01/05/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由大小写字母组成)中找到第一个只出现一次的字符,并返回它的位置</p>
<p><strong>分析</strong></p>
<p>遍历一遍字符串，用counts数组存储每个字母出现的次数。<code>str.charAt[i] - &#39;A&#39;</code>作为该字母在counts数组中的下标。数组大小为58（’A’的ASCLL码为65 ‘a’为97 ‘z’为122  122-65+1=58）</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (str.length() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;</div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;</div><div class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">58</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</div><div class="line">            counts[str.charAt(i) - c]++; <span class="comment">//这里比较巧妙 </span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (counts[str.charAt(i) - c] == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java文件管理操作]]></title>
      <url>http://linbingdong.com/2017/01/05/Java%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>linux里有mkdir、rm、cp、mv、touch等对文件或目录进行操作的命令，Java中也有对应的方法。</p>
<p>Path和Files类封装了处理文件系统所需的所有功能。比如，可以用Files类删除或重命名文件，或者查询文件最后被修改的时间等。换句话说，流类关心的是文件的内容，而Files类关心的是对文件和目录的操作。</p>
<a id="more"></a> 
<p>Path和Files是在Java SE 7中新添加进来的类，比自JDK 1.0以来就一直使用的File类要方便得多。</p>
<h2 id="java-nio-file-Paths-7"><a href="#java-nio-file-Paths-7" class="headerlink" title="java.nio.file.Paths 7"></a>java.nio.file.Paths 7</h2><p><strong>Path</strong>表示的是文件或目录的路径。是一个字符串。</p>
<ul>
<li>java.nio.file.Paths<ul>
<li>static Path get(String first, String…more)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Path dir = Paths.get(<span class="string">"/Users/linbingdong"</span>,<span class="string">"Downloads"</span>,<span class="string">"xxx.txt"</span>);</div></pre></td></tr></table></figure>
<p> Paths.get方法通过给定的字符串<strong>创建一个路径</strong>。该方法可以接受<strong>一个或多个</strong>字符串，并自动将它们用默认文件系统的路径分隔符<strong>连接</strong>起来。</p>
<p>要操作文件或目录之前，都需要先用Paths.get方法生成相应的路径。</p>
<h2 id="java-nio-file-Files-7"><a href="#java-nio-file-Files-7" class="headerlink" title="java.nio.file.Files 7"></a>java.nio.file.Files 7</h2><p>Files类使得普通文件操作变得快捷。</p>
<ul>
<li>java.nio.file.Files<ul>
<li>static byte[] readAllBytes(Path path)</li>
<li>static Path write(Path path, byte[] contents, OpenOption…options)</li>
<li>static Path copy(Path from, Path to, CopyOption…options)</li>
<li>static Path move (Path from, Path to, CopyOption…options)</li>
<li>static void delete(Path path)</li>
<li>static Path createFile(Path path, FileAttribute&lt;?&gt;… attrs)</li>
<li>static Path createDirectory(Path path, FileAttribute&lt;?&gt;…attrs)</li>
<li>static Path createDirectories(Path path, FileAttribute&lt;?&gt;…attrs)</li>
<li>static boolean exists(Path path)</li>
<li>static boolean isReadable(Path path)</li>
<li>static boolean isDirectory(Path path)</li>
</ul>
</li>
</ul>
<p>要读入文件内容是，首先将文件内容以字节的方式读入字节数组，再将字节数组作为参数传入新建的String对象。</p>
<p>要将String写入文件，需要调用String.getBytes()。</p>
<p>具体各方法的用法见示例</p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"><span class="keyword">import</span> java.nio.file.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2017/1/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Path from = Paths.get(<span class="string">"/Users/linbingdong/hehe"</span>);</div><div class="line">        Path to = Paths.get(<span class="string">"/Users/linbingdong/hehe2"</span>);</div><div class="line">        Path newDir = Paths.get(<span class="string">"/Users/linbingdong/test"</span>,<span class="string">"hi"</span>,<span class="string">"hei"</span>,<span class="string">"oo"</span>);</div><div class="line">        <span class="comment">//Files.copy(from,to);</span></div><div class="line">        Files.createDirectories(newDir);</div><div class="line">        <span class="comment">//Files.copy(from,newDir, StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);</span></div><div class="line">        <span class="comment">//Files.move(from,to);</span></div><div class="line">        System.out.println(newDir.getParent());</div><div class="line">        System.out.println(newDir.getRoot());</div><div class="line">        System.out.println(newDir.getFileName());  <span class="comment">//获取路径中最后一个字段,不管是目录还是文件</span></div><div class="line">        System.out.println(newDir.getFileSystem());</div><div class="line">        System.out.println(newDir.getNameCount());   <span class="comment">//路径层级的个数</span></div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] bytes = Files.readAllBytes(to);   <span class="comment">//获取文本内容存入byte数组</span></div><div class="line">        String contents = <span class="keyword">new</span> String(bytes, Charset.defaultCharset());  <span class="comment">//将byte数组转化成String对象</span></div><div class="line">        System.out.println(contents);</div><div class="line">        Files.write(to,contents.getBytes());  <span class="comment">//覆盖写    获取String对象对应的byte数组</span></div><div class="line">        <span class="comment">//Files.write(to,contents.getBytes(), StandardOpenOption.APPEND);  //追加写</span></div><div class="line"></div><div class="line">        <span class="comment">//Files.delete(newDir);</span></div><div class="line">        Files.createDirectories(newDir);  <span class="comment">//创建路径中的所有中间目录 相当于mkdir -p</span></div><div class="line">        Path newFile = Paths.get(<span class="string">"/Users/linbingdong/test"</span>,<span class="string">"hi"</span>,<span class="string">"hei"</span>,<span class="string">"oo"</span>,<span class="string">"hhhh"</span>);</div><div class="line">        <span class="comment">//Files.createFile(newFile); //创建一个新文件 最后是文件名</span></div><div class="line"></div><div class="line">        System.out.println(Files.exists(newFile));  <span class="comment">//判断是否存在</span></div><div class="line">        System.out.println(Files.size(newFile)); <span class="comment">//返回文件的字节数</span></div><div class="line">        System.out.println(Files.isDirectory(newFile)); <span class="comment">//判断是否是文件夹</span></div><div class="line">        Path basePath = Paths.get(<span class="string">"/Users/linbingdong/test"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(basePath)) &#123; <span class="comment">//迭代目录中的文件</span></div><div class="line">            <span class="keyword">for</span> (Path entry: entries) &#123;</div><div class="line">                System.out.println(entry.getFileName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注：</strong><br>以上的方法适用于处理<strong>中等长度</strong>的<strong>文本文件</strong>，如果要处理的<strong>文件较大</strong>，或者是<strong>二进制文件</strong>，那么还是应该使用所熟知的<strong>流或者读入器、写出器</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">InputStream in = Files.newInputStream(Path);</div><div class="line">OutputStream out = Files.newOutputStream(Path);</div><div class="line">Reader in = Files.newBufferedReader(Path,charset);</div><div class="line">Writer out = Files.newBufferedWriter(path,charset);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java对象流与序列化]]></title>
      <url>http://linbingdong.com/2017/01/05/Java%E5%AF%B9%E8%B1%A1%E6%B5%81%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>Java语言支持一种称为<strong>对象序列化（object serialization）</strong>的非常通用的机制，它可以将任何对象写入到流中，并在之后将其读回。被序列化的每个对象都有一个序列号，唯一标识该对象，而不是通过该对象的内存地址来表示对象。这样就能将一个对象集合从一台集群传送到另一台机器，与对象在内存中的地址无关。</p>
<a id="more"></a> 
<p><strong>示例：</strong></p>
<p><code>ObjectStreamTest.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2017/1/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">        Employee harry = <span class="keyword">new</span> Employee(<span class="string">"Harry Hacker"</span>, <span class="number">50000</span>, <span class="number">1989</span>, <span class="number">10</span>, <span class="number">1</span>);</div><div class="line">        Manager carl = <span class="keyword">new</span> Manager(<span class="string">"Carl Cracker"</span>, <span class="number">80000</span>, <span class="number">1987</span>, <span class="number">12</span>, <span class="number">15</span>);</div><div class="line">        carl.setSecretary(harry);</div><div class="line">        Manager tony = <span class="keyword">new</span> Manager(<span class="string">"Tony Tester"</span>, <span class="number">40000</span>, <span class="number">1990</span>, <span class="number">3</span>, <span class="number">15</span>);</div><div class="line">        tony.setSecretary(harry);</div><div class="line"></div><div class="line"></div><div class="line">        Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</div><div class="line">        staff[<span class="number">0</span>] = carl;</div><div class="line">        staff[<span class="number">1</span>] = harry;</div><div class="line">        staff[<span class="number">2</span>] = tony;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>(ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee1.dat"</span>)))&#123;</div><div class="line">            out.writeObject(staff);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>(ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"employee1.dat"</span>)))&#123;</div><div class="line">            Employee[] newStaff = (Employee[]) in.readObject();</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (Employee e : newStaff)&#123;</div><div class="line">                System.out.println(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    String name;</div><div class="line">    <span class="keyword">double</span> salary;</div><div class="line">    <span class="keyword">int</span> year;</div><div class="line">    <span class="keyword">int</span> month;</div><div class="line">    <span class="keyword">int</span> day;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary,<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.salary = salary;</div><div class="line">        <span class="keyword">this</span>.year = year;</div><div class="line">        <span class="keyword">this</span>.month = month;</div><div class="line">        <span class="keyword">this</span>.day = day;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> salary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> year;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> month;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> day;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.salary + <span class="string">" "</span> + <span class="keyword">this</span>.year + <span class="string">" "</span> + <span class="keyword">this</span>.month + <span class="string">" "</span> + <span class="keyword">this</span>.day;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    Employee secretary;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, salary, year, month, day);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecretary</span><span class="params">(Employee e)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.secretary = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>Employee和Manager都必须实现Serializable接口才能被序列化!(Serializable接口没有任何方法)</li>
<li>对象流输出中包含所有对象的类型和数据域</li>
<li>每个对象都被赋予一个序列号</li>
<li>相同对象的重复出现将被存储为对这个对象的序列号的引用</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个链表的第一个公共节点]]></title>
      <url>http://linbingdong.com/2017/01/04/%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入两个链表，找出它们的第一个公共结点。</p>
<p><strong>分析</strong></p>
<p>先遍历一遍分别算出两个链表的长度。算出长度差mins。<br>较长的链表先走mins步，然后两个链表同时走。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;</div><div class="line">        ListNode ln1 = pHead1, ln2 = pHead2;</div><div class="line">        <span class="keyword">while</span> (ln1 != <span class="keyword">null</span>)&#123;</div><div class="line">            count1++;</div><div class="line">            ln1 = ln1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (ln2 != <span class="keyword">null</span>)&#123;</div><div class="line">            count2++;</div><div class="line">            ln2 = ln2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mins = count1 - count2;</div><div class="line">        </div><div class="line">        ln1 = pHead1;</div><div class="line">        ln2 = pHead2;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (mins &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (mins &gt; <span class="number">0</span>)&#123;</div><div class="line">                ln1 = ln1.next;</div><div class="line">                mins--;</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mins &lt; <span class="number">0</span>)&#123;</div><div class="line">            mins = -mins;</div><div class="line">            <span class="keyword">while</span> (mins &gt; <span class="number">0</span>)&#123;</div><div class="line">                ln2 = ln2.next;</div><div class="line">                mins--;</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(ln1 != <span class="keyword">null</span> &amp;&amp; ln1 != ln2)&#123;</div><div class="line">            ln1 = ln1.next;</div><div class="line">            ln2 = ln2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ln1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[左旋转字符串]]></title>
      <url>http://linbingdong.com/2017/01/04/%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>
<p><strong>分析</strong></p>
<p>确实很简单，一行代码搞定它！</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (str.length() &lt; n) ? str : (str.substring(n,str.length()) + str.substring(<span class="number">0</span>,n));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[删除链表中重复的节点!]]></title>
      <url>http://linbingdong.com/2017/01/04/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5；链表1-&gt;1-&gt;1-&gt;2-&gt;3 , 处理后为2-&gt;3。</p>
<p><strong>分析</strong></p>
<p>可以用递归，也可以用迭代法。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<p>递归版</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> pHead;</div><div class="line">        ListNode p = pHead.next;</div><div class="line">        <span class="keyword">if</span> (pHead.val == p.val)&#123;</div><div class="line">            <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; p.val == pHead.val)</div><div class="line">                p = p.next;</div><div class="line">            <span class="keyword">return</span> deleteDuplication(p);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            pHead.next = deleteDuplication(pHead.next);</div><div class="line">            <span class="keyword">return</span> pHead;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代版</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> public class ListNode &#123;</div><div class="line">    int val;</div><div class="line">    ListNode next = null;</div><div class="line"></div><div class="line">    ListNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span></span>&#123;</div><div class="line">		ListNode root = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">        root.next = pHead;</div><div class="line">        ListNode pre = root;</div><div class="line">        ListNode cur = pHead;</div><div class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (cur.val == cur.next.val)&#123;</div><div class="line">                <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.val == cur.next.val)&#123;</div><div class="line">                    cur = cur.next;</div><div class="line">                &#125;</div><div class="line">                pre.next = cur.next;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                pre.next = cur;</div><div class="line">                pre = pre.next;</div><div class="line">            &#125;</div><div class="line">            cur = cur.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[丑数]]></title>
      <url>http://linbingdong.com/2017/01/04/%E4%B8%91%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p>
<p><strong>分析</strong></p>
<p>这里的因子指的是质因子。</p>
<p>每个丑数等于某个比它小的丑数x2或x3或x5。<br>根据提示中的信息，我们知道丑数可以拆分成3个子序列:</p>
<ol>
<li>1x2, 2x2, 3x2, 4x2, 5x2, 6x2, 8x2… </li>
<li>1x3, 2x3, 3x3, 4x3, 5x3, 6x2, 8x2… </li>
<li>1x5, 2x5, 3x5, 4x5, 5x5, 6x2, 8x2…</li>
</ol>
<p>其中1，2，3，4，5，6，8（注意，没有7）是前几个丑数。7有因子7，所以不是丑数。</p>
<p>每次从三个子序列中取出当前最小的那个加入序列，直到第N个为止。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetUglyNumber_Solution</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] uglynum = <span class="keyword">new</span> <span class="keyword">int</span>[index];</div><div class="line">        uglynum[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">0</span>,index2 = <span class="number">0</span>,index3 = <span class="number">0</span>,index5 = <span class="number">0</span>,x2 = <span class="number">0</span>, x3 = <span class="number">0</span>, x5 = <span class="number">0</span>, min = <span class="number">0</span>; </div><div class="line">        <span class="keyword">while</span>( n + <span class="number">1</span> &lt; index)&#123;</div><div class="line">            x2 = uglynum[index2] * <span class="number">2</span>;</div><div class="line">            x3 = uglynum[index3] * <span class="number">3</span>;</div><div class="line">            x5 = uglynum[index5] * <span class="number">5</span>;</div><div class="line">            min = Math.min(x2,Math.min(x3,x5));</div><div class="line">            <span class="keyword">if</span>(min == x2) ++index2;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(min == x3) ++index3;</div><div class="line">                <span class="keyword">else</span> ++index5;</div><div class="line">            <span class="keyword">if</span>(min != uglynum[n])</div><div class="line">                uglynum[++n] = min;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> uglynum[index-<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[把数组排成最小的数]]></title>
      <url>http://linbingdong.com/2017/01/03/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>题目描述</strong></p>
<p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
<p><strong>分析</strong></p>
<p>先将整型数组转换成String数组，然后将String数组排序，最后将排好序的字符串数组拼接出来。关键就是制定排序规则。</p>
<p>排序规则如下：<br>若ab &gt; ba 则 a &gt; b，<br>若ab &lt; ba 则 a &lt; b，<br>若ab = ba 则 a = b；</p>
<p>解释说明：比如 “3” &lt; “31”但是 “331” &gt; “313”，所以要将二者拼接起来进行比较</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)</div><div class="line">            list.add(numbers[i]);</div><div class="line">        Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer str1,Integer str2)</span></span>&#123;  <span class="comment">//制定排序规则</span></div><div class="line">                String s1 = str1 + <span class="string">""</span> + str2;</div><div class="line">                String s2 = str2 + <span class="string">""</span> + str1;</div><div class="line">                <span class="keyword">return</span> s1.compareTo(s2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span>(Integer i : list)</div><div class="line">            result += i;  <span class="comment">//拼接</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组中出现次数超过一半的数字]]></title>
      <url>http://linbingdong.com/2017/01/03/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>
<p><strong>分析</strong></p>
<p>用HashMap，key为数组中的数字，value为该数字在数组中出现的次数。边put边计算当前该数字的次数，若超过数组长度的一半直接返回。最后返回0。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</div><div class="line">        HashMap&lt;Integer,Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</div><div class="line">            Integer value = hm.get(array[i]);</div><div class="line">            <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</div><div class="line">                hm.put(array[i],<span class="number">1</span>);</div><div class="line">                value = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                hm.put(array[i],value+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(value+<span class="number">1</span>&gt;array.length/<span class="number">2</span>)</div><div class="line">                <span class="keyword">return</span> array[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache Kylin综述]]></title>
      <url>http://linbingdong.com/2017/01/03/Apache%20Kylin%E7%BB%BC%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b24bc950f45d2666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<a id="more"></a>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="1-1-Kylin概览"><a href="#1-1-Kylin概览" class="headerlink" title="1.1 Kylin概览"></a>1.1 Kylin概览</h3><p>Apache Kylin是一个开源的<strong>分布式分析引擎</strong>，提供Hadoop之上的SQL查询接口及多维分析（OLAP）能力（可以把Kylin定义为<strong>OLAP on Hadoop</strong>）。Apache Kylin于2015年11月正式毕业成为Apache基金会(ASF) 顶级项目，是<strong>第一个由中国团队完整贡献到Apache的顶级项目</strong>。</p>
<p>Apache Kyiln构建在Hadoop等分布式计算平台之上，充分利用了<strong>MapReduce</strong>的并行处理能力和可扩展基础设施，高效地处理超大规模数据，可根据数据的规模实现架构的可伸缩。Apache Kylin作为OLAP引擎包含了从<strong>数据源（Hive／Kafka等）</strong>获取源数据，基于MapReduce<strong>构建多维立方体(Cube)</strong>，并充分利用<strong>HBase</strong>的列式特性来分布式的<strong>存储立方体数据</strong>，提供标准SQL解析与查询优化，以及ODBC／JDBC驱动及REST API等多个模块。<strong>可插拔</strong>的灵活架构，允许支持更多的数据源接入Kylin，也支持采用其它技术作为存储引擎。</p>
<p>大多数的Hadoop分析工具和SQL是友好的，所以Apache Kylin拥有SQL接口这一点就显得尤为重要。Kylin用的SQL解析器是开源的Apache Calcite，支持几乎所有的SQL标准。Hive用的也是Calcite。</p>
<p>Kylin和其它SQL ON Hadoop的主要区别是<strong>预计算（离线计算）</strong>。用户在使用之前先选择一个Hive Table的集合，然后在这个基础上做一个离线的Cube构建，Cube构建完了之后就可以做SQL查询了。</p>
<p>用离线计算来代替在线计算，在离线过程当中把复杂的、计算量很大的工作做完，在线计算量就会变小，就可以更快的返回查询结果。通过这种方式，Kylin可以有更少的计算量，更高的吞吐量。</p>
<p>Apache Kylin开源一年左右的时间，已经在国内国际多个公司被采用作为大数据分析平台的关键组成部分，包括eBay、Expedia、Exponential、百度、京东、美团、明略数据、网易、中国移动、唯品会、58同城等。</p>
<h3 id="1-2-Kylin架构"><a href="#1-2-Kylin架构" class="headerlink" title="1.2 Kylin架构"></a>1.2 Kylin架构</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-063ca7dea83ded85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kylin_arch1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-1e80e8a1417a6d0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kylin_arch2"></p>
<p>Apache Kylin包含以下核心组件：</p>
<blockquote>
<p><strong>元数据引擎</strong>：包含模型设计，Cube设计，表结构同步，数据采样分析等。支持层级维度、联合维度、可推导维度等维度降维优化技术，避免Cube数据膨胀。支持多种字典编码算法，实现数据高效压缩存储。</p>
<p><strong>Job引擎</strong>：用于向Hadoop平台提交Cube构建任务，支持全表构建、增量构建、流式构建等多种构建机制，支持Cube自动合并等IO优化手段，内置多种Cube预计算算法以及数十个Job性能调优参数，充分发挥MapReduce的计算能力。</p>
<p><strong>存储引擎</strong>：将关系型表的源数据，经过预计算，保存在支持高通量大并发快速读写的键值数据库HBase中，充分利用HBase高效的Fuzzy Key过滤技术和Coprocessor并行处理技术，以并行计算方式检索数据，支持查询逻辑下压存储节点，实现了数据检索问题由O(N)的计算复杂度降低为O(1)。</p>
<p><strong>查询引擎</strong>：构建在Apache Calcite语法解析器之上，支持JDBC／ODBC／REST等多种协议和接口，支持ANSI SQL，包含绝大多数SQL函数，提供自定义计算函数机制，与Tableau等主流BI工具完美对接。</p>
<p><strong>Web管理端</strong>：内置用户友好的交互界面，支持向导式的模型构建，直观的任务监控与告警，以及用户权限管理。</p>
</blockquote>
<h3 id="1-3-Kylin特点"><a href="#1-3-Kylin特点" class="headerlink" title="1.3 Kylin特点"></a>1.3 Kylin特点</h3><ul>
<li><p><strong>可扩展超快OLAP引擎: </strong><br>Kylin是为减少在Hadoop上百亿规模数据查询延迟而设计</p>
</li>
<li><p><strong>Hadoop ANSI SQL 接口: </strong><br>Kylin为Hadoop提供标准SQL支持大部分查询功能</p>
</li>
<li><p><strong>交互式查询能力: </strong><br>通过Kylin，用户可以与Hadoop数据进行亚秒级交互，在同样的数据集上提供比Hive更好的性能</p>
</li>
<li><p><strong>多维立方体（MOLAP Cube）:</strong><br>用户能够在Kylin里为百亿以上数据集定义数据模型并构建立方体</p>
</li>
<li><p><strong>与BI工具无缝整合:</strong><br>Kylin提供与BI工具，如Tableau，的整合能力，即将提供对其他工具的整合</p>
</li>
<li><p><strong>其他特性:</strong> </p>
<ul>
<li>Job管理与监控 </li>
<li>压缩与编码 </li>
<li>增量更新 </li>
<li>利用HBase Coprocessor</li>
<li>基于HyperLogLog的Dinstinc Count近似算法 - 友好的web界面以管理，监控和使用立方体 </li>
<li>项目及立方体级别的访问控制安全</li>
<li>支持LDAP</li>
</ul>
</li>
</ul>
<h3 id="1-4-Kylin生态圈"><a href="#1-4-Kylin生态圈" class="headerlink" title="1.4 Kylin生态圈"></a>1.4 Kylin生态圈</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-06ce55c3c869f24f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="core.png"></p>
<p><strong>Kylin 核心:</strong> Kylin OLAP引擎基础框架，包括元数据（Metadata）引擎，查询引擎，Job引擎及存储引擎等，同时包括REST服务器以响应客户端请求</p>
<p><strong>扩展:</strong> 支持额外功能和特性的插件</p>
<p><strong>整合:</strong> 与调度系统，ETL，监控等生命周期管理系统的整合</p>
<p><strong>用户界面:</strong> 在Kylin核心之上扩展的第三方用户界面</p>
<p><strong>驱动:</strong> ODBC 和 JDBC 驱动以支持不同的工具和产品，比如Tableau</p>
<h3 id="1-5-Kylin在各大公司的实践"><a href="#1-5-Kylin在各大公司的实践" class="headerlink" title="1.5 Kylin在各大公司的实践"></a>1.5 Kylin在各大公司的实践</h3><ul>
<li><a href="http://www.infoq.com/cn/articles/kylin-apache-in-meituan-olap-scenarios-practice" target="_blank" rel="external">Apache Kylin在美团数十亿数据OLAP场景下的实践
</a></li>
<li><a href="http://www.infoq.com/cn/articles/practis-of-apache-kylin-in-baidu-map" target="_blank" rel="external">Apache Kylin在百度地图的实践</a></li>
<li><a href="http://www.tuicool.com/articles/BFrQn2J" target="_blank" rel="external">Apache Kylin在京东云海的实践</a></li>
<li><a href="http://www.tuicool.com/articles/y6vEfyU" target="_blank" rel="external">Apache Kylin 在电信运营商的实践和案例分享</a></li>
<li><a href="http://kyligence.io/2016/12/2161/" target="_blank" rel="external">Apache Kylin在国美在线的应用</a></li>
<li><a href="http://kyligence.io/2016/12/2208/" target="_blank" rel="external">Apache Kylin在魅族的实践</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3ef68656c02dce96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="1-6-Kylin基础概念"><a href="#1-6-Kylin基础概念" class="headerlink" title="1.6 Kylin基础概念"></a>1.6 Kylin基础概念</h3><ul>
<li><strong>星型模型</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fdd4b9c3e735bc2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="star-schema"></p>
<ul>
<li><strong>Cube</strong><br><img src="http://upload-images.jianshu.io/upload_images/1752522-2b88a5bd73284efe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cube"></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-1e771d4d6cb92a32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Partial Cube"></p>
<ul>
<li><strong>在HBase中存储</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2d01c3338ea5556a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-12-22 下午1.55.04.png"></p>
<h4 id="1-6-1-CUBE"><a href="#1-6-1-CUBE" class="headerlink" title="1.6.1 CUBE"></a>1.6.1 CUBE</h4><ul>
<li><p><strong>Table</strong> - 表， 是Cube的数据源；在创建Cube之前，KAP需要从数据源（通常为Hive）同步表的元数据，包含表名、列名、列属性等。</p>
</li>
<li><p><strong>Data Model</strong> - 数据模型，定义了由若干张表的一个连接关系。Kylin支持<a href="https://en.wikipedia.org/wiki/Star_schema" target="_blank" rel="external">星型模型</a>的多维分析；在创建Cube之前，用户需定义这么一个数据模型（目前Kylin<strong>只支持星型模型</strong>，未来会支持雪花模型）。</p>
</li>
<li><p><strong>Cube</strong> - 数据立方体，是一种多维分析的技术，通过预计算，将计算结果存储在某多个维度值所映射的空间中；在运行时通过对Cube的再处理而快速获取结果。</p>
</li>
<li><p><strong>Partition</strong> - 分区，用户可以定义一个分区日期或时间列，随后对Cube的构建按此列的值范围而进行，从而将Cube分成多个Segment。</p>
</li>
<li><p><strong>Cube Segment</strong> - 每个Cube Segment是对特定时间范围的数据计算而成的Cube。每个Segment对应一张HBase表。</p>
</li>
<li><p><strong>Aggregation Group</strong> - 聚合组，每个聚合组是全部维度的一个子集；通过将很多个维度分组，并把常一起使用的维度放在一起，可以有效降低Cube的组合数。</p>
</li>
</ul>
<h4 id="1-6-2-维度-amp-度量"><a href="#1-6-2-维度-amp-度量" class="headerlink" title="1.6.2 维度 &amp; 度量"></a>1.6.2 维度 &amp; 度量</h4><ul>
<li><p><strong>Mandotary</strong> - 必需的维度：这种类型用于对Cube生成树做剪枝：如果一个维度被标记为“Mandatory”，会认为所有的查询都会包含此维度，故所有不含此维度的组合，在Cube构建时都会被剪枝（不计算）.</p>
</li>
<li><p><strong>Hierarchy</strong> - 层级维度：如果多个维度之间有层级（或包含）的关系，通过设置为“Hierarchy”，那些不满足层级的组合会被剪枝。如果A, B, C是层级，并且A&gt;B&gt;C，那么只需要计算组合A, AB, ABC; 其它组合如B, C, BC, AC将不做预计算。</p>
</li>
<li><p><strong>Derived</strong> - 衍生维度：维度表的列值，可以从它的主键值衍生而来，那么通过将这些列定义为衍生维度，可以仅将主键加入到Cube的预计算来，而在运行时通过使用维度表的快照，衍生出非PK列的值，从而起到降维的效果。</p>
</li>
<li><p><strong>Count Distinct(HyperLogLog)</strong> - 基于HyperLogLog的Count Distint：快速、精确的COUNT DISTINCT是较难计算的, 一个近似的轻量级算法 - <a href="https://en.wikipedia.org/wiki/HyperLogLog" target="_blank" rel="external">HyperLogLog</a> 为此而发明, 能够在大规模数据集上做去重并保持较低的误差率.</p>
</li>
<li><p><strong>Count Distinct(Bitmap)</strong> - 基于Bitmap的COUNT DISTINCT，可以精确去重，但是存储开销较大。目前只支持int的数据类型.</p>
</li>
<li><p><strong>Top N</strong> - 预计算最top的某些记录的度量，如交易量最大的1000个卖家。</p>
</li>
</ul>
<h4 id="1-6-3-CUBE-操作"><a href="#1-6-3-CUBE-操作" class="headerlink" title="1.6.3 CUBE 操作"></a>1.6.3 CUBE 操作</h4><ul>
<li><p><strong>BUILD</strong> - 构建：给定一个时间范围，将源数据通过运算而生成一个新的Cube Segment。</p>
</li>
<li><p><strong>REFRESH</strong> - 刷新：对某个已经构建过的Cube Segment，重新从数据源抽取数据并构建，从而获得更新。</p>
</li>
<li><p><strong>MERGE</strong> - 合并：将多个Cube Segment合并为一个Segment。这个操作可以减少Segment的数量，同时减少Cube的存储空间。</p>
</li>
<li><p><strong>PURGE</strong> - 清空：将Cube的所有Cube Segment删除。 </p>
</li>
</ul>
<h4 id="1-6-4-JOB状态"><a href="#1-6-4-JOB状态" class="headerlink" title="1.6.4 JOB状态"></a>1.6.4 JOB状态</h4><ul>
<li><p><strong>NEW</strong> - 新任务，刚刚创建。</p>
</li>
<li><p><strong>PENDING</strong> - 等待被调度执行的任务.</p>
</li>
<li><p><strong>RUNNING</strong> - 正在运行的任务。</p>
</li>
<li><p><strong>FINISHED</strong> - 正常完成的任务（终态）。</p>
</li>
<li><p><strong>ERROR</strong> - 执行出错的任务。</p>
</li>
<li><p><strong>DISCARDED</strong> - 丢弃的任务（终态）。</p>
</li>
</ul>
<h4 id="1-6-5-JOB-操作"><a href="#1-6-5-JOB-操作" class="headerlink" title="1.6.5 JOB 操作"></a>1.6.5 JOB 操作</h4><ul>
<li><p><strong>RESUME</strong> - 恢复：处于ERROR状态的任务，用户在排查或解决问题后，通过此操作来重试执行。</p>
</li>
<li><p><strong>DISCARD</strong> - 丢弃：放弃此任务，立即停止执行且不会再恢复。</p>
</li>
</ul>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="2-1-样例数据集"><a href="#2-1-样例数据集" class="headerlink" title="2.1 样例数据集"></a>2.1 样例数据集</h3><p>二进制包中包含了一份用于测试的样例数据集，总共大小仅1MB左右，共计3张表，其中事实表有10000条数据。</p>
<p>Kylin仅支持星型数据模型，这里用到的样例数据集就是一个规范的星型模型结构，它总共包含了3个数据表：</p>
<p><strong>KYLIN_SALES</strong>  该表是事实表，保存了销售订单的明细信息。每一列保存了卖家、商品分类、订单金额、商品数量等信息，每一行对应着一笔交易订单。</p>
<p><strong>KYLIN_CATEGORY_GROUPINGS</strong> 该表是维表，保存了商品分类的详细介绍，例如商品分类名称等。</p>
<p><strong>KYLIN_CAL_DT</strong> 该表是维表，保存了时间的扩展信息。如单个日期所在的年始、月始、周始、年份、月份等。这三张表一起构成了整个星型模型的结构，下图是实例-关系图（图中未列出表上的所有列）： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-1118eca4f5988933.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataset_1.png"></p>
<p><strong>数据表与关系</strong></p>
<table>
<thead>
<tr>
<th>表</th>
<th>字段</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>KYLIN_SALES</td>
<td>PART_DT</td>
<td>订单日期</td>
</tr>
<tr>
<td>KYLIN_SALES</td>
<td>LEAF_CATEG_ID</td>
<td>商品分类ID</td>
</tr>
<tr>
<td>KYLIN_SALES</td>
<td>SELLER_ID</td>
<td>卖家ID</td>
</tr>
<tr>
<td>KYLIN_SALES</td>
<td>PRICE</td>
<td>订单金额</td>
</tr>
<tr>
<td>KYLIN_SALES</td>
<td>ITEM_COUNT</td>
<td>购买商品个数</td>
</tr>
<tr>
<td>KYLIN_SALES</td>
<td>LSTG_FORMAT_NAME</td>
<td>订单交易类型</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>USER_DEFINED_FIELD1</td>
<td>用户定义字段1</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>USER_DEFINED_FIELD3</td>
<td>用户定义字段3</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>UPD_DATE</td>
<td>更新日期</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>UPD_USER</td>
<td>更新负责人</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>META_CATEG_NAME</td>
<td>一级分类</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>CATEG_LVL2_NAME</td>
<td>二级分类</td>
</tr>
<tr>
<td>KYLIN_CATEGORY_GROUPINGS</td>
<td>CATEG_LVL3_NAME</td>
<td>三级分类</td>
</tr>
<tr>
<td>KYLIN_CAL_DT</td>
<td>CAL_DT</td>
<td>日期</td>
</tr>
<tr>
<td>KYLIN_CAL_DT</td>
<td>WEEK_BEG_DT</td>
<td>周始日期</td>
</tr>
</tbody>
</table>
<h3 id="2-2-数据导入"><a href="#2-2-数据导入" class="headerlink" title="2.2 数据导入"></a>2.2 数据导入</h3><h4 id="2-2-1-导入Hive数据源"><a href="#2-2-1-导入Hive数据源" class="headerlink" title="2.2.1 导入Hive数据源"></a>2.2.1 导入Hive数据源</h4><p>目前，Kylin支持Hive作为默认的输入数据源。为了使用Kylin中自带的样例数据，需要把数据表导入Hive中。在Kylin安装目录的bin文件夹中，有一个可执行脚本，可以把样例数据导入Hive：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$KYLIN_HOME</span>/bin/sample.sh</div></pre></td></tr></table></figure>
<p>脚本执行成功之后，进入Hive CLI，确认这些数据已经导入成功，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">hive</div><div class="line">hive&gt; show tables;</div><div class="line">OK</div><div class="line">kylin_cal_dt</div><div class="line">kylin_category_groupings</div><div class="line">kylin_sales</div><div class="line">Time taken: 0.127 seconds, Fetched: 3 row(s)</div><div class="line">hive&gt; select count(*) from kylin_sales;</div><div class="line">Query ID = root_20160707221515_b040318d-1f08-44ab-b337-d1f858c46d7d</div><div class="line">Total jobs = 1</div><div class="line">Launching Job 1 out of 1</div><div class="line">Number of reduce tasks determined at compile time: 1</div><div class="line">In order to change the average load for a reducer (in bytes):</div><div class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</div><div class="line">In order to limit the maximum number of reducers:</div><div class="line">  set hive.exec.reducers.max=&lt;number&gt;</div><div class="line">In order to set a constant number of reducers:</div><div class="line">  set mapreduce.job.reduces=&lt;number&gt;</div><div class="line">Starting Job = job_1467288198207_0129, Tracking URL = http://sandbox.hortonworks.com:8088/proxy/application_1467288198207_0129/</div><div class="line">Kill Command = /usr/hdp/2.2.4.2-2/hadoop/bin/hadoop job  -kill job_1467288198207_0129</div><div class="line">Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 1</div><div class="line">2016-07-07 22:15:11,897 Stage-1 map = 0%,  reduce = 0%</div><div class="line">2016-07-07 22:15:17,502 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 1.64 sec</div><div class="line">2016-07-07 22:15:25,039 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 3.37 sec</div><div class="line">MapReduce Total cumulative CPU time: 3 seconds 370 msec</div><div class="line">Ended Job = job_1467288198207_0129</div><div class="line">MapReduce Jobs Launched:</div><div class="line">Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 3.37 sec   HDFS Read: 505033 HDFS Write: 6 SUCCESS</div><div class="line">Total MapReduce CPU Time Spent: 3 seconds 370 msec</div><div class="line">OK</div><div class="line">10000</div><div class="line">Time taken: 24.966 seconds, Fetched: 1 row(s)</div></pre></td></tr></table></figure>
<h4 id="2-2-2-创建项目"><a href="#2-2-2-创建项目" class="headerlink" title="2.2.2 创建项目"></a>2.2.2 创建项目</h4><p>打开Kylin的Web UI（<ip>:7070/kylin），如下图所示的操作创建一个新的项目（Project），并命名为KAP_Sample_1。</ip></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-5068797db1e9470f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataimport_1.png"></p>
<p>在Web UI的左上角选择刚刚创建的项目，表示我们接下来的全部操作都在这个项目中，在当前项目的操作不会对其他项目产生影响。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6fca7a6cc0e11ce4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataimport_2.png"></p>
<h4 id="2-2-3-同步Hive表"><a href="#2-2-3-同步Hive表" class="headerlink" title="2.2.3 同步Hive表"></a>2.2.3 同步Hive表</h4><p>需要把Hive数据表同步到Kylin当中才能使用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-94e857406c491ae5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataimport_3.png"></p>
<p>在弹出的对话框中展开default数据库，并选择需要的三张表，如图所示 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7b7339f8f56be4d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataimport_4.png"></p>
<p>导入后系统会自动计算各表各列的维数，以掌握数据的基本情况。稍等几分钟后，我们可以通过数据源表的详情页查看这些信息。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e276d255006fe654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dataimport_5.png"></p>
<h3 id="2-3-创建数据模型（model）"><a href="#2-3-创建数据模型（model）" class="headerlink" title="2.3 创建数据模型（model）"></a>2.3 创建数据模型（model）</h3><p>在数据源就绪的基础之上，我们开始创建数据模型。以Kylin自带的数据集为例，该数据集的数据模型包含1个事实表和2个维表，表间通过外键进行关联。实际上，并不是表上所有的字段都有被分析的需要，因此我们可以有目的地仅选择所需字段添加到数据模型中；然后，根据具体的分析场景，把这些字段设置为维度或度量。</p>
<p>打开Kylin的Web UI，在左上角项目列表中选择刚刚创建的<strong>KAP_Sample_1</strong>项目，然后进入“模型”页面，并创建一个模型。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7c5019c7e84cddb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_1.png"></p>
<p>第一步，在基本信息页，输入模型名称为Sample_Model_1，然后单击下一步。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-546162bcaa06d6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_2.png"></p>
<p>第二步，为模型选择事实表（<em>Fact Table</em>）和查找表（<em>Lookup Table</em>）。根据星型模型结构，选择KYLIN_SALES为事实表，然后添加KYLIN_CAL_DT和KYLIN_CATEGORY_GROUPINGS作为查找表，并设置好连接条件：</p>
<p>KYLIN_CAL_DT 连接类型：Inner 连接条件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEFAULT.KYLIN_SALES.PART_DT = DEFAULT.KYLIN_CAL_DT.CAL_DT</div></pre></td></tr></table></figure>
<p>KYLIN_CATEGORY_GROUPINGS 连接类型：Inner 连接条件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KYLIN_SALES.LEAF_CATEG_ID = KYLIN_CATEGORY_GROUPINGS.LEAF_CATEG_ID</div><div class="line">KYLIN_SALES.LSTG_SITE_ID = KYLIN_CATEGORY_GROUPINGS.SITE_ID</div></pre></td></tr></table></figure>
<p>下图是设置好之后的界面： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ef4a4bd304401b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_3.png"></p>
<p>第三步，从上一步添加的事实表和查找表中选择需要作为维度的字段。一般的，时间经常用来作为过滤条件，所以我们首先添加时间字段。此外，我们再添加商品分类、卖家ID等字段为维度，具体情况如下图所示： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-086d01240e72f0cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_4.png"></p>
<p>第四步，根据业务需要，从事实表上选择衡量指标的字段作为度量。例如，PRICE字段用来衡量销售额，ITEM_COUNT字段用来衡量商品销量，SELLER_ID用来衡量卖家的销售能力。最终结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3942e07573e7cf1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_5.png"></p>
<p>第五步，设置根据时间分段。一般来说，销售数据都是与日俱增的，每天都会有新数据通过ETL到达Hive中，需要选择增量构建方式构建Cube，所以需要选择用于分段的时间字段DEFAULT.KYLIN_SALES.PART_DT。根据样例数据可以看到，这一列时间的格式是yyyy-MM-dd，所以选择对应的日期格式。此外，我们既不需要设置单独的分区时间列，也不需要添加固定的过滤条件。设置效果如下图所示。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-dfbc366e565347b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="datamodel_6.png"></p>
<p>最终，单击“保存”按钮，到此数据模型就创建成功了。</p>
<h3 id="2-4-创建Cube"><a href="#2-4-创建Cube" class="headerlink" title="2.4 创建Cube"></a>2.4 创建Cube</h3><p>在创建好数据模型的基础上，我们还需要根据查询需求定义度量的预计算类型、维度的组合等，这个过程就是Cube设计的过程。本文将以Kylin自带的样例数据为例，介绍Cube的创建过程。</p>
<p>打开Kylin的Web UI，首先选择KAP_Sample_1项目，跳转到模型页面，然后按照下图所示创建一个Cube。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-95d11c3255835a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_1.png"></p>
<p>第一步，在“模型名称”中选择Sample_Model_1，输入新建Cube的名称Sample_Cube_1，其余字段保持默认，然后单击“下一步”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b9610e117aa519da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_2.png"></p>
<p>第二步，从数据模型的维度中选择一些列作为Cube的维度。这里的设置会影响到生成的Cuboid数量，进而影响Cube的数据量大小。 在KYLIN_CATEGORY_GROUPINGS表里，和商品分类相关的三个字段（META_CATEG_NAME、CATEG_LVL2_NAME、CATEG_LVL3_NAME）都可能出现在过滤条件中，我们先把他们添加为普通类型维度。因为从查询表上添加普通维度不能通过自动生成器（Auto Generator）生成，因此采用手动添加方式，过程如下：</p>
<ol>
<li><p>单击“添加维度”按钮，然后选择“普通维度”。</p>
</li>
<li><p>针对每一个维度字段，首先在Name输入框中输入维度名称，在Table Name中选择KYLIN_CATEGORY_GROUPINGS表，然后在Column Name中选择相应的列名。</p>
</li>
</ol>
<p>此外，在查询中还经常把时间作为过滤或聚合的条件，如按周过滤、按周聚合等。这里我们以按周为例，需要用到KYLIN_CAL_DT中的WEEK_BEG_DT字段，但是该字段实际上可以由PART_DT字段决定，即根据每一个PART_DT值可以对应出一个WEEK_BEG_DT字段，因此，我们添加WEEK_BEG_DT字段为可推倒维度。 同样的，KYLIN_CATEGORY_GROUPINGS表中还有一些可作为可推到维度的字段，如USER_DEFINED_FIELD1、USER_DEFINED_FIELD3、UPD_DATE、UPD_USER等。</p>
<p>在事实表上，表征交易类型的LSTG_FORMAT_NAME字段也会用于过滤或聚合条件，因此，我们再添加LSTG_FORMAT_NAME字段作为普通维度。 最终，维度的设置结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-0b63232b1ea37c37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_3.png"></p>
<p>第三步，根据数据分析中的聚合需求，我们需要为Cube定义度量的聚合形式。默认的，根据数据类型，系统会自动创建好一些COUNT()聚合和SUM()聚合，用于考量交易订单的数量或者卖出商品的总量。默认建好的聚合仍然可以手动修改或删除。在这个案例中，我们还需要通过PRICE的不同聚合形式考量销售额，如总销售额为SUM(PRICE)、最高订单金额为MAX(PRICE)、最低订单金额为MIN(PRICE)。因此，我们手动创建三个度量，分别选择聚合表达式为SUM、MIN、MAX，并选择PRICE列作为目标列。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7ddf65cb11784072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_4.png"></p>
<p>其次，我们还需要通过COUNT(DISTINCT SELLER_ID)考量卖家个数。根据前面章节的介绍，Kylin默认使用HyperLogLog算法进行COUNT_DISTINCT的计算，该算法是个近似算法，在创建度量时需要选择一个近似度，本案例对精确性要求不高，为了提升查询性能，我们选择精度较低的“Error Rate &lt; 9.75%”。同样的，我们再创建一个COUNT(DISTINCT LSTG_FORMAT_NAME)的度量考量不同条件下的交易类型。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a138c2bc9fd67644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_5.png"></p>
<p>在销售业务分析的场景中，往往需要挑选出销售业绩最好的商家，这时候就需要TOP-N的度量了。在这个例子中，我们会选出SUM(PRICE)最高的一些SELLER_ID，实际上就是执行如下的SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT SELLER_ID, SUM(PRICE) FROM KYLIN_SALES GROUP BY SELLER_ID ORDER BY SUM(PRICE)</div></pre></td></tr></table></figure>
<p>因此，我们创建一个TOP-N的度量，选择PRICE字段作为SUM/OPDER BY字段，选择SELLER_ID字段作为GROUP BY字段，并选择TOPN(100)作为度量的精度。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-79cbf2f5f97188d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_6.png"></p>
<p>最终添加的度量如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-eacdf1f9d1722d0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_7.png"></p>
<p>第四步，我们对Cube的构建和维护进行配置。一般的，一个销售统计的SQL查询往往会按月、周进行过滤和聚合，所以我们可以设置Cube自动按周、月进行自动合并，即每7天进行一次合并，每4周（28天）进行一次合并，设置“触发自动合并的时间阈值”如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-22be16b2121f50c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_8.png"></p>
<p>因为存在对于历史订单的查询需求，我们在此不对Cube做自动清理，所以需要设置“保留时间阈值”为0。</p>
<p>在创建数据模型的时候我们提到，我们希望采用增量构建方式对Cube进行构建，并选择了PART_DT字段作为分区时间列。在创建Cube时，我们需要指定Cube构建的起始时间，在这个例子中，根据样例数据中的时间条件，我们选择2012-01-01 00:00:00作为分区起始时间。</p>
<p>第五步，通过对Cube进行高级设置优化Cube的存储大小和查询速度，主要包括聚合组和Rowkey。在前文我们提到，添加聚合组可以利用字段间的层级关系和包含关系有效地降低Cuboid的数量。在这个案例当中，与商品分类相关的三个字段（META_CATEG_NAME、CATEG_LVL2_NAME、CATEG_LVL3_NAME）实际上具有层级关系，如一级类别（META_CATEG_NAME）包含多个二级类别（CATEG_LVL2_NAME），二级类别又包含多个三级类别（CATEG_LVL3_NAME），所以，我们可以为它们创建层级结构的组合（Hierarchy Dimensions）。最终，聚合组的设计如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-71849088c33324a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_9.png"></p>
<p>由于参与Cuboid生成的维度都会作为Rowkey，因此我们需要把这些列添加为Rowkey当中。在这个案例中，总共需要添加7个Rowkey。在每个Rowkey上，还需要为列值设置编码方法。在这个案例中，我们除了把LSTG_FORMAT_NAME设置为fixed_length类型（长度为12）外，将其余的Rowkey都设置为dict编码。 Rowkey的顺序对于查询性能来说至关重要，如第六章所讲，一般把最经常出现在过滤条件中的列放置在Rowkey的前面，在这个案例中，我们首先把PART_DT放在Rowkey的第一位。接下来，按照层级把商品分类的字段跟随其后。最终，Rowkey的设置如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-87a6469b386f9318.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_10.png"></p>
<blockquote>
<p><strong>对Plus版本</strong>：Raw Table是Plus版本的特有功能。如果启用，Kylin将在构建Cube之外也保存所有的原始记录，支持高速的明细查询。Raw Table还处于beta测试阶段，仅支持最简单的启用或者不启用。其他的Raw Table配置参数暂时不起作用。</p>
</blockquote>
<p>第六步，设置Cube的配置覆盖。在这里添加的配置项可以在Cube级别覆盖从kylin.properties配置文件读取出来的全局配置。在这个案例中，我们可以直接采用默认配置，在此不做任何修改。 ​第七步，对Cube的信息进行概览。请读者仔细确认这些基本信息，包括数据模型名称、事实表以及维度和度量个数。确认无误后单击“保存”按钮，并在弹出的确认提示框中选择“Yes”。 ​最终，Cube的创建就完成了。我们可以刷新Model页面，在Cube列表中就可以看到新创建的Cube了。因为新创建的Cube没有被构建过，是不能被查询的，所以状态仍然是“禁用”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-76862da06fef99b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="createcube_11.png"></p>
<h3 id="2-5-构建Cube"><a href="#2-5-构建Cube" class="headerlink" title="2.5 构建Cube"></a>2.5 构建Cube</h3><p>在创建好Cube之后，只有对Cube进行构建，才能利用它执行SQL查询。本文以Kylin样例数据为例，介绍Cube构建的过程。</p>
<p><strong>初次构建</strong></p>
<p>首先打开Kylin的Web UI，并选择Kylin_Sample_1项目，然后跳转到模型页面，找到Cube列表。 第一步，在Cube列表中找到Kylin_Sample_Cube_1。单击右侧的Action按钮，在弹出的菜单中选择“构建”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a99c1fd6b184f610.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="buildcube_0.png"></p>
<p>第二步，在弹出的Cube构建确认对话框中确认Cube的分段时间列（Partition Date Column）是DEFAULT.KYLIN_SALES.PART_DT，以及起始时间是2012-01-01 00:00:00。在KAP中，一次构建会为Cube产生一个新的Segment，每次的SQL查询都会访问一个或多个符合条件的Segment；我们需要尽可能地让一个Segment更好地适用于查询条件，因此我们可以按年构建，即每个年份构建一个Segment。在这个例子中，我们输入结束日期（End Date）为2013-01-01 00:00:00。设置完成后单击Submit按钮。</p>
<blockquote>
<p>注意：增量构建是具体按年构建还是按月构建应该根据实际的业务需求、ETL时效及数据量大小而定。如果一次构建的数据量过大，可能导致构建时间过长，或出现内存溢出等异常。在当前的样例数据中，数据量较小，按年构建是可以顺利完成的。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-aa6a2267fc5259cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="buildcube_1.png"></p>
<p>当任务成功提交之后，切换到Monitor页面，这里会列出所有的任务列表。我们找到列表最上面的一个任务（名称是：Kylin_Sample_Cube_1 - 20120101000000_20130101000000），这就是我们刚刚提交的任务。在这一行双击或单击右侧的箭头图标，页面右侧会显示当前任务的详细信息。 待构建任务完成，可以在Monitor页面看到该任务状态已被置为完成（Finished）。这时候，第一个Segment就构建完成了。前往Cube列表中查看，会发现该Cube的状态已被置为“就绪（Ready）”了。</p>
<p><strong>增量构建</strong></p>
<p>在第一个Segment构建完成之后，我们开始构建第二个Segment。首先在Model页面的Cube列表中找到该Cube，单击右侧的Actions按钮，然后选择“Build”，打开Cube构建确认对话框。 在这个对话框中，首先确认起始时间（Start Date）是2013-01-01 00:00:00，因为这是上次构建的结束日期，为保障所构建数据的连续性，Apache Kylin自动为新一次构建的起始时间更新为上次构建的结束日期。同样的，在结束时间（End Date）里输入2014-01-01 00:00:00，然后单击Submit按钮，开始构建下一年的Segment。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7f9d17cfa65272bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="buildcube_2.png"></p>
<p>待构建完成，我们可以在Cube的详情页中查看，发现Cube的两个Segment都已就绪。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a46c1e5ff55cea0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="buildcube_3.png"></p>
<h2 id="3-参考资料"><a href="#3-参考资料" class="headerlink" title="3. 参考资料"></a>3. 参考资料</h2><ul>
<li><a href="http://kylin.apache.org/cn/" target="_blank" rel="external">http://kylin.apache.org/cn/</a></li>
<li><a href="https://kyligence.gitbooks.io/kap-manual/content/zh-cn/introduction/concepts.cn.html" target="_blank" rel="external">https://kyligence.gitbooks.io/kap-manual/content/zh-cn/introduction/concepts.cn.html</a></li>
<li><a href="http://webdataanalysis.net/web-data-warehouse/multidimensional-data-model/" target="_blank" rel="external">http://webdataanalysis.net/web-data-warehouse/multidimensional-data-model/</a></li>
<li><a href="http://www.cnblogs.com/mq0036/p/4155832.html" target="_blank" rel="external">http://www.cnblogs.com/mq0036/p/4155832.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Kylin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Kylin </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——Paxos算法原理与推导]]></title>
      <url>http://linbingdong.com/2016/12/30/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<p>Paxos算法在分布式领域具有非常重要的地位。但是Paxos算法有两个比较明显的缺点：1.难以理解 2.工程实现更难。</p>
<p>网上有很多讲解Paxos算法的文章，但是质量参差不齐。看了很多关于Paxos的资料后发现，学习Paxos最好的资料是论文《Paxos Made Simple》，其次是中、英文版维基百科对Paxos的介绍。本文试图带大家一步步揭开Paxos神秘的面纱。</p>
<a id="more"></a>
<h2 id="Paxos是什么"><a href="#Paxos是什么" class="headerlink" title="Paxos是什么"></a>Paxos是什么</h2><blockquote>
<p>Paxos算法是基于<strong>消息传递</strong>且具有<strong>高度容错特性</strong>的<strong>一致性算法</strong>，是目前公认的解决<strong>分布式一致性</strong>问题<strong>最有效</strong>的算法之一。</p>
</blockquote>
<p>Google Chubby的作者Mike Burrows说过这个世界上<strong>只有一种</strong>一致性算法，那就是Paxos，其它的算法都是<strong>残次品</strong>。</p>
<p>虽然Mike Burrows说得有点夸张，但是至少说明了Paxos算法的地位。然而，Paxos算法也因为晦涩难懂而臭名昭著。本文的目的就是带领大家深入浅出理解Paxos算法，不仅理解它的执行流程，还要理解算法的推导过程，作者是怎么一步步想到最终的方案的。只有理解了推导过程，才能深刻掌握该算法的精髓。而且理解推导过程对于我们的思维也是非常有帮助的，可能会给我们带来一些解决问题的思路，对我们有所启发。</p>
<h2 id="问题产生的背景"><a href="#问题产生的背景" class="headerlink" title="问题产生的背景"></a>问题产生的背景</h2><p>在常见的分布式系统中，总会发生诸如<strong>机器宕机</strong>或<strong>网络异常</strong>（包括消息的延迟、丢失、重复、乱序，还有网络分区）等情况。Paxos算法需要解决的问题就是如何在一个可能发生上述异常的分布式系统中，快速且正确地在集群内部对<strong>某个数据的值</strong>达成<strong>一致</strong>，并且保证不论发生以上任何异常，都不会破坏整个系统的一致性。</p>
<p>注：这里<strong>某个数据的值</strong>并不只是狭义上的某个数，它可以是一条日志，也可以是一条命令（command）。。。根据应用场景不同，<strong>某个数据的值</strong>有不同的含义。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-d2136179b456e13e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题产生的背景"></p>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>在Paxos算法中，有三种角色：</p>
<ul>
<li><strong>Proposer</strong></li>
<li><strong>Acceptor</strong></li>
<li><strong>Learners</strong></li>
</ul>
<p>在具体的实现中，一个进程可能<strong>同时充当多种角色</strong>。比如一个进程可能<strong>既是Proposer又是Acceptor又是Learner</strong>。</p>
<p>还有一个很重要的概念叫<strong>提案（Proposal）</strong>。最终要达成一致的value就在提案里。</p>
<p><strong>注：</strong></p>
<ul>
<li><strong>暂且</strong>认为『<strong>提案=value</strong>』，即提案只包含value。在我们接下来的推导过程中会发现如果提案只包含value，会有问题，于是我们再对提案<strong>重新设计</strong>。</li>
<li><strong>暂且</strong>认为『<strong>Proposer可以直接提出提案</strong>』。在我们接下来的推导过程中会发现如果Proposer直接提出提案会有问题，需要增加一个学习提案的过程。</li>
</ul>
<p>Proposer可以提出（propose）提案；Acceptor可以接受（accept）提案；如果某个提案被选定（chosen），那么该提案里的value就被选定了。</p>
<p>回到刚刚说的『对某个数据的值达成一致』，指的是Proposer、Acceptor、Learner都认为同一个value被选定（chosen）。那么，Proposer、Acceptor、Learner分别在什么情况下才能认为某个value被选定呢？</p>
<ul>
<li>Proposer：只要Proposer发的提案被Acceptor接受（刚开始先认为只需要一个Acceptor接受即可，在推导过程中会发现需要半数以上的Acceptor同意才行），Proposer就认为该提案里的value被选定了。</li>
<li>Acceptor：只要Acceptor接受了某个提案，Acceptor就认为该提案里的value被选定了。</li>
<li>Learner：Acceptor告诉Learner哪个value被选定，Learner就认为那个value被选定。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6980ffa6b43c16d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相关概念"></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设有一组可以<strong>提出（propose）value</strong>（value在提案Proposal里）的<strong>进程集合</strong>。一个一致性算法需要保证提出的这么多value中，<strong>只有一个</strong>value被选定（chosen）。如果没有value被提出，就不应该有value被选定。如果一个value被选定，那么所有进程都应该能<strong>学习（learn）</strong>到这个被选定的value。对于一致性算法，<strong>安全性（safaty）</strong>要求如下：</p>
<ul>
<li>只有被提出的value才能被选定。</li>
<li>只有一个value被选定，并且</li>
<li>如果某个进程认为某个value被选定了，那么这个value必须是真的被选定的那个。</li>
</ul>
<p>我们不去精确地定义其<strong>活性（liveness）</strong>要求。我们的目标是保证<strong>最终有一个提出的value被选定</strong>。当一个value被选定后，进程最终也能学习到这个value。</p>
<blockquote>
<p>Paxos的目标：保证最终有一个value会被选定，当value被选定后，进程最终也能获取到被选定的value。</p>
</blockquote>
<p>假设不同角色之间可以通过发送消息来进行通信，那么：</p>
<ul>
<li>每个角色以任意的速度执行，可能因出错而停止，也可能会重启。一个value被选定后，所有的角色可能失败然后重启，除非那些失败后重启的角色能记录某些信息，否则等他们重启后无法确定被选定的值。</li>
<li>消息在传递过程中可能出现任意时长的延迟，可能会重复，也可能丢失。但是消息不会被损坏，即消息内容不会被篡改（拜占庭将军问题）。</li>
</ul>
<h2 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h2><h3 id="最简单的方案——只有一个Acceptor"><a href="#最简单的方案——只有一个Acceptor" class="headerlink" title="最简单的方案——只有一个Acceptor"></a>最简单的方案——只有一个Acceptor</h3><p>假设只有一个Acceptor（可以有多个Proposer），只要Acceptor接受它收到的第一个提案，则该提案被选定，该提案里的value就是被选定的value。这样就保证只有一个value会被选定。</p>
<p>但是，如果这个唯一的Acceptor宕机了，那么整个系统就<strong>无法工作</strong>了！</p>
<p>因此，必须要有<strong>多个Acceptor</strong>！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a902b09159405eab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="只有一个Acceptor"></p>
<h3 id="多个Acceptor"><a href="#多个Acceptor" class="headerlink" title="多个Acceptor"></a>多个Acceptor</h3><p>多个Acceptor的情况如下图。那么，如何保证在多个Proposer和多个Acceptor的情况下选定一个value呢？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a85c9965be9d1671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多个Acceptor"></p>
<p>下面开始寻找解决方案。</p>
<p>如果我们希望即使只有一个Proposer提出了一个value，该value也最终被选定。</p>
<p>那么，就得到下面的约束：</p>
<blockquote>
<p>P1：一个Acceptor必须接受它收到的第一个提案。</p>
</blockquote>
<p>但是，这又会引出另一个问题：如果每个Proposer分别提出不同的value，发给不同的Acceptor。根据P1，Acceptor分别接受自己收到的value，就导致不同的value被选定。出现了不一致。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a2449c74a784bd87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片08.png"></p>
<p>刚刚是因为『一个提案只要被一个Acceptor接受，则该提案的value就被选定了』才导致了出现上面不一致的问题。因此，我们需要加一个规定：</p>
<blockquote>
<p>规定：一个提案被选定需要被<strong>半数以上</strong>的Acceptor接受</p>
</blockquote>
<p>这个规定又暗示了：『一个Acceptor必须能够接受不止一个提案！』不然可能导致最终没有value被选定。比如上图的情况。v1、v2、v3都没有被选定，因为它们都只被一个Acceptor的接受。</p>
<p>最开始讲的『<strong>提案=value</strong>』已经不能满足需求了，于是重新设计提案，给每个提案加上一个提案编号，表示提案被提出的顺序。令『<strong>提案=提案编号+value</strong>』。</p>
<p>虽然允许多个提案被选定，但必须保证所有被选定的提案都具有相同的value值。否则又会出现不一致。</p>
<p>于是有了下面的约束：</p>
<blockquote>
<p>P2：如果某个value为v的提案被选定了，那么每个编号更高的被选定提案的value必须也是v。</p>
</blockquote>
<p>一个提案只有被Acceptor接受才可能被选定，因此我们可以把P2约束改写成对Acceptor接受的提案的约束P2a。</p>
<blockquote>
<p>P2a：如果某个value为v的提案被选定了，那么每个编号更高的被Acceptor接受的提案的value必须也是v。</p>
</blockquote>
<p>只要满足了P2a，就能满足P2。</p>
<p>但是，考虑如下的情况：假设总的有5个Acceptor。Proposer2提出[M1,V1]的提案，Acceptor2~5（半数以上）均接受了该提案，于是对于Acceptor2~5和Proposer2来讲，它们都认为V1被选定。Acceptor1刚刚从宕机状态恢复过来（之前Acceptor1没有收到过任何提案），此时Proposer1向Acceptor1发送了[M2,V2]的提案（V2≠V1且M2&gt;M1），对于Acceptor1来讲，这是它收到的第一个提案。根据P1（一个Acceptor必须接受它收到的第一个提案。）,Acceptor1必须接受该提案！同时Acceptor1认为V2被选定。这就出现了两个问题：</p>
<ol>
<li>Acceptor1认为V2被选定，Acceptor2~5和Proposer2认为V1被选定。出现了不一致。 </li>
<li>V1被选定了，但是编号更高的被Acceptor1接受的提案[M2,V2]的value为V2，且V2≠V1。这就跟P2a（如果某个value为v的提案被选定了，那么每个编号更高的被Acceptor接受的提案的value必须也是v）矛盾了。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e517a6fd3d55e2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片10.png"></p>
<p>所以我们要对P2a约束进行强化！</p>
<p>P2a是对Acceptor接受的提案约束，但其实提案是Proposer提出来的，所有我们可以对Proposer提出的提案进行约束。得到P2b：</p>
<blockquote>
<p>P2b：如果某个value为v的提案被选定了，那么之后任何Proposer提出的编号更高的提案的value必须也是v。</p>
</blockquote>
<p>由P2b可以推出P2a进而推出P2。</p>
<p>那么，如何确保在某个value为v的提案被选定后，Proposer提出的编号更高的提案的value都是v呢？</p>
<p>只要满足P2c即可：</p>
<blockquote>
<p>P2c：对于任意的N和V，如果提案[N, V]被提出，那么存在一个半数以上的Acceptor组成的集合S，满足以下两个条件中的任意一个：</p>
<ul>
<li>S中每个Acceptor都没有接受过编号小于N的提案。</li>
<li>S中Acceptor接受过的最大编号的提案的value为V。</li>
</ul>
</blockquote>
<h3 id="Proposer生成提案"><a href="#Proposer生成提案" class="headerlink" title="Proposer生成提案"></a>Proposer生成提案</h3><p>为了满足P2b，这里有个比较重要的思想：Proposer生成提案之前，应该先去<strong>『学习』</strong>已经被选定或者可能被选定的value，然后以该value作为自己提出的提案的value。如果没有value被选定，Proposer才可以自己决定value的值。这样才能达成一致。这个学习的阶段是通过一个<strong>『Prepare请求』</strong>实现的。</p>
<p>于是我们得到了如下的<strong>提案生成算法</strong>：</p>
<ol>
<li><p>Proposer选择一个<strong>新的提案编号N</strong>，然后向<strong>某个Acceptor集合</strong>（半数以上）发送请求，要求该集合中的每个Acceptor做出如下响应（response）。<br>(a) 向Proposer承诺保证<strong>不再接受</strong>任何编号<strong>小于N的提案</strong>。<br>(b) 如果Acceptor已经接受过提案，那么就向Proposer响应<strong>已经接受过</strong>的编号小于N的<strong>最大编号的提案</strong>。</p>
<p>我们将该请求称为<strong>编号为N</strong>的<strong>Prepare请求</strong>。</p>
</li>
<li><p>如果Proposer收到了<strong>半数以上</strong>的Acceptor的<strong>响应</strong>，那么它就可以生成编号为N，Value为V的<strong>提案[N,V]</strong>。这里的V是所有的响应中<strong>编号最大的提案的Value</strong>。如果所有的响应中<strong>都没有提案</strong>，那 么此时V就可以由Proposer<strong>自己选择</strong>。<br>生成提案后，Proposer将该<strong>提案</strong>发送给<strong>半数以上</strong>的Acceptor集合，并期望这些Acceptor能接受该提案。我们称该请求为<strong>Accept请求</strong>。（注意：此时接受Accept请求的Acceptor集合<strong>不一定</strong>是之前响应Prepare请求的Acceptor集合）</p>
</li>
</ol>
<h3 id="Acceptor接受提案"><a href="#Acceptor接受提案" class="headerlink" title="Acceptor接受提案"></a>Acceptor接受提案</h3><p>Acceptor<strong>可以忽略任何请求</strong>（包括Prepare请求和Accept请求）而不用担心破坏算法的<strong>安全性</strong>。因此，我们这里要讨论的是什么时候Acceptor可以响应一个请求。</p>
<p>我们对Acceptor接受提案给出如下约束：</p>
<blockquote>
<p>P1a：一个Acceptor只要尚<strong>未响应过</strong>任何<strong>编号大于N</strong>的<strong>Prepare请求</strong>，那么他就可以<strong>接受</strong>这个<strong>编号为N的提案</strong>。</p>
</blockquote>
<p>如果Acceptor收到一个编号为N的Prepare请求，在此之前它已经响应过编号大于N的Prepare请求。根据P1a，该Acceptor不可能接受编号为N的提案。因此，该Acceptor可以忽略编号为N的Prepare请求。当然，也可以回复一个error，让Proposer尽早知道自己的提案不会被接受。</p>
<p>因此，一个Acceptor<strong>只需记住</strong>：1. 已接受的编号最大的提案 2. 已响应的请求的最大编号。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-09a81e90de7f722b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="小优化"></p>
<h3 id="Paxos算法描述"><a href="#Paxos算法描述" class="headerlink" title="Paxos算法描述"></a>Paxos算法描述</h3><p>经过上面的推导，我们总结下Paxos算法的流程。</p>
<p>Paxos算法分为<strong>两个阶段</strong>。具体如下：</p>
<ul>
<li><p><strong>阶段一：</strong></p>
<p>(a) Proposer选择一个<strong>提案编号N</strong>，然后向<strong>半数以上</strong>的Acceptor发送编号为N的<strong>Prepare请求</strong>。</p>
<p>(b) 如果一个Acceptor收到一个编号为N的Prepare请求，且N<strong>大于</strong>该Acceptor已经<strong>响应过的</strong>所有<strong>Prepare请求</strong>的编号，那么它就会将它已经<strong>接受过的编号最大的提案（如果有的话）</strong>作为响应反馈给Proposer，同时该Acceptor承诺<strong>不再接受</strong>任何<strong>编号小于N的提案</strong>。</p>
</li>
<li><p><strong>阶段二：</strong></p>
<p>(a) 如果Proposer收到<strong>半数以上</strong>Acceptor对其发出的编号为N的Prepare请求的<strong>响应</strong>，那么它就会发送一个针对<strong>[N,V]提案</strong>的<strong>Accept请求</strong>给<strong>半数以上</strong>的Acceptor。注意：V就是收到的<strong>响应</strong>中<strong>编号最大的提案的value</strong>，如果响应中<strong>不包含任何提案</strong>，那么V就由Proposer<strong>自己决定</strong>。</p>
<p>(b) 如果Acceptor收到一个针对编号为N的提案的Accept请求，只要该Acceptor<strong>没有</strong>对编号<strong>大于N</strong>的<strong>Prepare请求</strong>做出过<strong>响应</strong>，它就<strong>接受该提案</strong>。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-44c5a422f917bfc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paxos算法流程"></p>
<h2 id="Learner学习被选定的value"><a href="#Learner学习被选定的value" class="headerlink" title="Learner学习被选定的value"></a>Learner学习被选定的value</h2><p>Learner学习（获取）被选定的value有如下三种方案：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-0fab48ed2bdf358a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片17.png"></p>
<h2 id="如何保证Paxos算法的活性"><a href="#如何保证Paxos算法的活性" class="headerlink" title="如何保证Paxos算法的活性"></a>如何保证Paxos算法的活性</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-28b18dd606777074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片18.png"></p>
<p>通过选取<strong>主Proposer</strong>，就可以保证Paxos算法的活性。至此，我们得到一个<strong>既能保证安全性，又能保证活性</strong>的<strong>分布式一致性算法</strong>——<strong>Paxos算法</strong>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>论文《Paxos Made Simple》</li>
<li>论文《The Part-Time Parliament》</li>
<li>英文版维基百科的Paxos</li>
<li>中文版维基百科的Paxos</li>
<li>书籍《从Paxos到ZooKeeper》</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2e4b0e5141927479.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎关注公众号: FullStackPlan 获取更多干货"></p>
]]></content>
      
        <categories>
            
            <category> 分布式一致性算法 </category>
            
            <category> Paxos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> Paxos </tag>
            
            <tag> 分布式一致性算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——Paxos算法原理与推导(PPT)]]></title>
      <url>http://linbingdong.com/2016/12/29/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94Paxos%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A8%E5%AF%BC(PPT)/</url>
      <content type="html"><![CDATA[<p>之前在公司内部分享了Paxos算法的原理和推导过程，现将PPT分享给大家，有疑问欢迎随时交流讨论。</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-d110e4fa4fb0833a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片01.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ccee68f9ad0a4232.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片02.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-fc834aae082c880b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片03.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-76e2dc603afb41a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片04.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-bcd5f793a99909bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片05.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-52bfab72009a460c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片06.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8320dad992bd2eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片07.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-bb05c9c96b57b752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片08.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-1a5a3cf47ec8d193.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片09.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-74539d0b3969c801.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片10.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b821902a66c9a074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片11.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f54e9302ec427c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片12.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-1009ff703bde24ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片13.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2fb6efdc57adc1e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片14.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8798c8d383d88d7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片15.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-93fd5e4c0473ed26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片16.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f0b3751e4e649888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片17.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a03c11d91a4759b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片18.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8daa2037a8ef31c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="幻灯片19.png"></p>
]]></content>
      
        <categories>
            
            <category> 分布式一致性算法 </category>
            
            <category> Paxos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> Paxos </tag>
            
            <tag> 分布式一致性算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[疯狂跳台阶]]></title>
      <url>http://linbingdong.com/2016/12/27/%E7%96%AF%E7%8B%82%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<p><strong>分析</strong></p>
<p>分析前几级可得出规律：跳法为2的n次方。这里用左移运算符效率较高。只需要一行代码。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; --target;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跳台阶]]></title>
      <url>http://linbingdong.com/2016/12/27/%E8%B7%B3%E5%8F%B0%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
<p><strong>分析</strong></p>
<p>其实这题跟斐波那契数列那题一模一样。这里用递归搞定就好。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(target &lt;= <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> target;</div><div class="line">        <span class="keyword">return</span> JumpFloor(target - <span class="number">1</span>) + JumpFloor(target - <span class="number">2</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契数列]]></title>
      <url>http://linbingdong.com/2016/12/27/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p>大家都知道斐波那契数列(0,1,1,2,3,5….)，现在要求输入一个整数n，请你输出斐波那契数列的第n项。第一项下标为0。<br>n&lt;=39</p>
<p><strong>分析</strong></p>
<p>不要用递归！！！</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> first = <span class="number">0</span>,second = <span class="number">1</span>,result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++)&#123;</div><div class="line">            result = first + second;</div><div class="line">            first = second;</div><div class="line">            second = result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从尾到头打印链表]]></title>
      <url>http://linbingdong.com/2016/12/27/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>输入一个链表，从尾到头打印链表每个节点的值。</p>
<p><strong>分析</strong></p>
<p>将每个node的值一次放入栈中。新建一个list，将出栈元素依次加入该list中。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*    public class ListNode &#123;</div><div class="line">*        int val;</div><div class="line">*        ListNode next = null;</div><div class="line">*</div><div class="line">*        ListNode(int val) &#123;</div><div class="line">*            this.val = val;</div><div class="line">*        &#125;</div><div class="line">*    &#125;</div><div class="line">*</div><div class="line">*/</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">while</span>(listNode != <span class="keyword">null</span>)&#123;</div><div class="line">            stack.push(listNode.val);</div><div class="line">            listNode = listNode.next;</div><div class="line">        &#125;</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(!stack.isEmpty())</div><div class="line">            list.add(stack.pop());</div><div class="line">        <span class="keyword">return</span> list;     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[替换空格]]></title>
      <url>http://linbingdong.com/2016/12/27/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      <content type="html"><![CDATA[<p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<p><strong>分析</strong></p>
<p>这道题有很多种方法，最简单的是直接调用String的replace方法</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> str.toString().replace(<span class="string">" "</span>,<span class="string">"%20"</span>);     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二维数组中的查找]]></title>
      <url>http://linbingdong.com/2016/12/26/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>分析</strong></p>
<p>从左下角元素开始，若比target大，则上移；若比target小，则右移。如果移出边界还未找到，说明没有target。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> x = array.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(x &gt;= <span class="number">0</span> &amp;&amp; y &lt; array[<span class="number">0</span>].length)&#123;</div><div class="line">            <span class="keyword">if</span>(target &gt; array[x][y])</div><div class="line">                y++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[x][y])</div><div class="line">                    x--;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[50] Pow(x, n)]]></title>
      <url>http://linbingdong.com/2016/12/26/LeetCode%5B50%5D%20Pow(x,%20n)/</url>
      <content type="html"><![CDATA[<p>Implement pow(x, n).</p>
<p><strong>分析：</strong></p>
<p>直接用二分法。要考虑n为负数的情况。</p>
<p>x^n = x^{n/2} <em> x^{n/2} </em> x^{n%2}</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1.0</span> / power(x,-n);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> power(x,n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">double</span> v = power(x,n/<span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> v * v;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> x * v * v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[202] Happy Number]]></title>
      <url>http://linbingdong.com/2016/12/26/LeetCode%5B202%5D%20Happy%20Number/</url>
      <content type="html"><![CDATA[<p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>1^2 + 9^2 = 82</p>
<p>8^2 + 2^2 = 68</p>
<p>6^2 + 8^2 = 100</p>
<p>1^2 + 0^2 + 0^2 = 1</p>
<p><strong>分析：</strong></p>
<p>这题找到规律后就简单了。如果右边的出现了某个重复的数，但不是1，说明会无限循环下去，这个数就不是快乐数，如果是1，则是快乐数。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        Set&lt;Integer&gt; existed = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">int</span> digit = n % <span class="number">10</span>;</div><div class="line">                sum += digit * digit;</div><div class="line">                n /= <span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(existed.contains(sum))&#123;</div><div class="line">                <span class="keyword">return</span> sum == <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                existed.add(sum);</div><div class="line">            &#125;</div><div class="line">            n = sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[191] Number of 1 Bits]]></title>
      <url>http://linbingdong.com/2016/12/26/LeetCode%5B191%5D%20Number%20of%201%20Bits/</url>
      <content type="html"><![CDATA[<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>
<p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.</p>
<p><strong>分析：</strong></p>
<p>题目要求算出一个int数二进制表示中1的个数。</p>
<p>n和n-1按位与可以去掉n二进制表示中最右边一位1.</p>
<p>令   n =1101011000</p>
<p>则  n-1=1101010111</p>
<p>n&amp;(n-1)=1101010000</p>
<p>经过K次n&amp;n-1,n变为0.K即n的二进制表示中1的个数。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// you need to treat n as an unsigned value</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</div><div class="line">            n &amp;= n - <span class="number">1</span>;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[190] Reverse Bits]]></title>
      <url>http://linbingdong.com/2016/12/23/LeetCode%5B190%5D%20Reverse%20Bits/</url>
      <content type="html"><![CDATA[<p>Reverse bits of a given 32 bits unsigned integer.</p>
<p>For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).</p>
<p>Follow up:</p>
<p>If this function is called many times, how would you optimize it?</p>
<p><strong>分析：</strong></p>
<p>最简单直接的做法，从右向左把一位位取出来，添加到新生成的整数的最低位即<br>可。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// you need treat n as an unsigned value</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>;i++)&#123;</div><div class="line">           result &lt;&lt;= <span class="number">1</span>;</div><div class="line">           result += n &amp; <span class="number">1</span>;</div><div class="line">           n &gt;&gt;&gt;= <span class="number">1</span>; <span class="comment">//无符号右移</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中wait、sleep和yield的区别]]></title>
      <url>http://linbingdong.com/2016/12/15/Java%E4%B8%ADwait%E3%80%81sleep%E5%92%8Cyield%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Java中wait、sleep的区别或者Java中sleep、yield的区别是Java面试或者多线程面试中最常问的问题之一。首先，一个最明显的区别是：<strong>wait是Object类的方法，sleep和yield是Thread类的静态方法</strong>。</p>
<p>本质上，wait方法是用来让线程<strong>等待某个条件</strong>，进入该条件的等待集中。而sleep和yield方法是用来让线程<strong>让出CPU时间</strong>，把CPU交给线程调度器，使得其他线程能获得CPU时间。</p>
<p>接下来详细比较三个方法。</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>常用的wait方法有<strong>wait( )</strong>和<strong>wait(long timeout)</strong></p>
<p>wait( )方法导致当前线程进入等待状态直到它被通知（其他线程调用notify或notifyAll方法。notify/notifyAll方法解除等待线程的阻塞状态）。    </p>
<p>wait(long timeout) 方法导致当前线程进入等待状态直到它被通知或者经过指定的时间。</p>
<p> <strong>wait( )后，线程会释放掉它所占有的对象的锁</strong>，从而使线程所在对象中的其它synchronized数据可被别的线程使用。</p>
<p><strong>wait方法只能在一个同步方法中调用</strong>。如果当前线程不是对象锁的持有者，该方法抛出一个IllegalMonitorStateException异常。</p>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>Thread.sleep(long millis),<strong>必须带有一个时间参数</strong>。</p>
<p> sleep(long millis)使当前线程进入停滞状态，所以执行sleep()的线程<strong>在指定的时间内肯定不会被执行</strong>。</p>
<p> sleep(long millis)可能使<strong>任意优先级</strong>的其他线程得到执行机会。</p>
<p>sleep(long millis)<strong>不会释放锁</strong>。</p>
<p>调用sleep方法的线程在唤醒之后<strong>不保证</strong>能获取到CPU，它会先进入就绪态，与其他线程<strong>竞争CPU</strong>。</p>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>yield方法<strong>没有参数</strong>。</p>
<p>yield方法使当前线程<strong>让出CPU</strong>，但让出的<strong>时间是不可设定的</strong>。</p>
<p>yield方法也<strong>不会释放锁</strong>。</p>
<p>yield只能把CPU让给<strong>相同优先级</strong>的其他线程，而<strong>不会把CPU给更高或更低优先级</strong>的其他线程。若此时没有其他线程跟它在有一个优先级，则该线程继续获得CPU时间，因此可能某线程<strong>刚调用yield方法又马上被执行</strong>。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——从ACID到CAP/BASE]]></title>
      <url>http://linbingdong.com/2016/12/13/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E4%BB%8EACID%E5%88%B0CAP:BASE/</url>
      <content type="html"><![CDATA[<p>本文先介绍传统关系数据库中事务的ACID特性，再介绍分布式系统中的经典理论——CAP定理和BASE理论。</p>
<a id="more"></a>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务的定义：</strong></p>
<blockquote>
<p>事务（Transaction）是由一系列对系统中数据进行<strong>访问与更新</strong>的操作所组成的一个<strong>程序执行逻辑单元</strong>（Unit），狭义上的事务特指数据库事务。</p>
</blockquote>
<p><strong>事务的作用：</strong></p>
<ul>
<li><p>当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作相互干扰。</p>
</li>
<li><p>事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。</p>
</li>
</ul>
<p>事务具有四个特性，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）,简称为事务的ACID特性。</p>
<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>事务的原子性是指事务必须是一个<strong>原子的操作序列单元</strong>。事务中包含的各项操作在一次执行过程中，<strong>要么全部执行，要么全部不执行</strong>。</p>
<p>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚。只有所有的操作全部成功，整个事务才算是成功完成。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行前后，数据库都必须处于一致性状态。换句话说，事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。</p>
<p>举个例子</p>
<p>银行的转账操作就是一个事务。假设A和B原来账户都有100元。此时A转账给B50元，转账结束后，应该是A账户减去50元变成50元，B账户增加50元变成150元。A、B的账户总和还是200元。转账前后，数据库就是从一个一致性状态（A100元，B100元，A、B共200元）转变到另一个一致性状态（A50元，B150元，A、B共200元）。假设转账结束后只扣了A账户，没有增加B账户，这时数据库就处于不一致的状态。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>事务的隔离性是指在<strong>并发</strong>环境中，并发的事务是<strong>相互隔离</strong>的，事务之间<strong>互不干扰</strong>。</p>
<p>在标准的SQL规范中，定义的4个事务隔离级别，不同隔离级别对事务的处理不同。4个隔离级别分别是：未授权读取、授权读取、可重复读取和串行化。</p>
<p>下表展示了不同隔离级别下事务访问数据的差异</p>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未授权读取</td>
<td style="text-align:center">存在</td>
<td style="text-align:center">不可以</td>
<td style="text-align:center">存在</td>
</tr>
<tr>
<td style="text-align:center">授权读取</td>
<td style="text-align:center">不存在</td>
<td style="text-align:center">不可以</td>
<td style="text-align:center">存在</td>
</tr>
<tr>
<td style="text-align:center">可重复读取</td>
<td style="text-align:center">不存在</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">存在</td>
</tr>
<tr>
<td style="text-align:center">串行化</td>
<td style="text-align:center">不存在</td>
<td style="text-align:center">可以</td>
<td style="text-align:center">不存在</td>
</tr>
</tbody>
</table>
<p>以上4个级别的隔离性依次增强，分别解决不同的问题。<strong>事务隔离级别越高，就越能保证数据的完整性和一致性，但同时对并发性能的影响也越大</strong>。</p>
<p>通常，对于绝大多数的应用来说，可以优先考虑将数据库系统的隔离级别设置为<strong>授权读取</strong>，这能够在避免脏读的同时保证较好的并发性能。尽管这种事务隔离级别会导致不可重复读、幻读和第二类丢失更新等并发问题，但较为科学的做法是在可能出现这类问题的个别场合中，由应用程序主动采用悲观锁或乐观锁来进行事务控制。</p>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务的持久性又称为永久性，是指一个事务一旦提交，对数据库中对应数据的状态变更就应该是<strong>永久性</strong>的。即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其<strong>恢复</strong>到事务成功结束时的状态。</p>
<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>事务在分布式计算领域也得到了广泛的应用。在单机数据库中，我们很容易能够实现一套满足ACID特性的事务处理系统，但是在分布式数据库中，数据分散在各台不同的机器上，如何对这些数据进行分布式事务处理具有非常大的挑战。</p>
<blockquote>
<p>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于分布式系统的<strong>不同节点</strong>之上。通常一个分布式事务会涉及对<strong>多个数据源</strong>或<strong>业务系统</strong>的操作。</p>
</blockquote>
<p>举个例子来说明分布式事务。一个最典型的分布式事务场景是<strong>跨行的转账操作</strong>。该操作涉及调用两个异地的银行服务。其中一个是本地银行提供的取款服务，另一个是目标银行提供的存款服务，这两个服务本身是无状态且相互独立的，共同构成了一个完整的分布式事务。取款和存款两个步骤要么都执行，要么都不执行。否则，如果从本地银行取款成功，但是因为某种原因存款服务失败了，那么必须<strong>回滚</strong>到取款之前的状态，否则就会导致数据不一致。</p>
<p>从上面的例子可以看出，一个分布式事务可以看作是由<strong>多个分布式操作序列</strong>组成的，例如上面例子中的取款服务和存款服务，通常可以把这一系列分布式的操作序列称为<strong>子事务</strong>。由于分布式事务中，各个子事务的执行是分布式的，因此要实现一种能够保证ACID特性的分布式事务处理系统就显得格外复杂。</p>
<h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>CAP定理：</p>
<blockquote>
<p>一个分布式系统<strong>不可能</strong>同时满足<strong>一致性</strong>（C:Consistency）、<strong>可用性</strong>（A:Availability）和<strong>分区容错性</strong>（P:Partition tolerance）这三个基本要求，最多只能满足<strong>其中的两项</strong>。</p>
</blockquote>
<h3 id="一致性-1"><a href="#一致性-1" class="headerlink" title="一致性"></a>一致性</h3><p>在分布式环境中，一致性是指数据在<strong>多个副本之间</strong>是否能够<strong>保持一致</strong>的特性（这点跟ACID中的一致性含义不同）。</p>
<p>对于一个将数据副本分布在不同节点上的分布式系统来说，如果对第一个节点的数据进行了更新操作并且更新成功后，却没有使得第二个节点上的数据得到相应的更新，于是在对第二个节点的数据进行读取操作时，获取的依然是更新前的数据（称为<strong>脏数据</strong>），这就是典型的分布式数据不一致情况。在分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有的用户都能读取到最新的值，那么这样的系统就被认为具有<strong>强一致性</strong>（或严格的一致性）。</p>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>可用性是指系统提供的服务必须<strong>一直处于可用</strong>的状态，对于用户的每一个操作请求总是能够在<strong>有限的时间</strong>内<strong>返回结果</strong>，如果超过了这个时间范围，那么系统就被认为是不可用的。</p>
<p>『有限的时间内』是一个在系统设计之初就设定好的运行指标，<strong>不同的系统会有很大的差别</strong>。比如对于一个在线搜索引擎来说，通常在0.5秒内需要给出用户搜索关键词对应的检索结果。而对应Hive来说，一次正常的查询时间可能在20秒到30秒之间。</p>
<p>『返回结果』是可用性的另一个非常重要的指标，它要求系统在完成对用户请求的处理后，返回一个正常的响应结果。正常的响应结果通常能够<strong>明确</strong>地反映出对请求的处理结果，及成功或失败，而不是一个让用户感到困惑的返回结果。</p>
<p>让我们再来看看上面提到的在线搜索引擎的例子，如果用户输入指定的搜索关键词后，返回的结果是一个系统错误，比如”OutOfMemoryErroe”或”System Has Crashed”等提示语，那么我们认为此时系统是不可用的。</p>
<h3 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h3><p>分区容错性要求一个分布式系统需要具备如下特性：分布式系统在遇到任何网络分区故障的时候，仍然能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p>
<p>网络分区是指在分布式系统中，不同的节点分布在不同的<strong>子网络</strong>（机房或异地网络等）中，由于一些特殊的原因导致这些子网络之间出现网络<strong>不连通</strong>的状况，但各个子网络的<strong>内部网络是正常的</strong>，从而导致整个系统的网络环境被切分成了<strong>若干个孤立的区域</strong>。</p>
<p>以上就是对CAP定理中一致性、可用性和分区容错性的讲解。</p>
<p>既然一个分布式系统无法同时满足上述三个要求，而只能满足其中的两项，因此在对CAP定理应用时，我们就需要抛弃其中的一项，下表是抛弃CAP中任意一项特性的场景说明。</p>
<table>
<thead>
<tr>
<th style="text-align:center">CAP</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">放弃P</td>
<td style="text-align:center">如果希望能够避免系统出现分区容错性问题，一种较为简单的做法是将所有的数据（或者仅仅是哪些与事务相关的数据）都放在<strong>一个分布式节点上</strong>。这样做虽然无法100%保证系统不会出错，但至少不会碰到由于网络分区带来的负面影响。但同时需要注意的是，放弃P的同时也就意味着放弃了系统的可扩展性</td>
</tr>
<tr>
<td style="text-align:center">放弃A</td>
<td style="text-align:center">一旦系统遇到网络分区或其他故障或为了保证一致性时，放弃可用性，那么受到影响的服务需要等待一定的时间，因此在等待期间系统<strong>无法对外提供正常的服务</strong>，即<strong>不可用</strong></td>
</tr>
<tr>
<td style="text-align:center">放弃C</td>
<td style="text-align:center">这里所说的放弃一致性，实际上指的是放弃数据的<strong>强一致性</strong>，而保留数据的<strong>最终一致性</strong>。这样的系统无法保证数据保持实时的一致性，但是能够承诺的是，数据<strong>最终会达到一个一致的状态</strong>。</td>
</tr>
</tbody>
</table>
<p>需要明确的一点是：对于一个分布式系统而言，分区容错性可以说是一个<strong>最基本的要求</strong>。因为既然是一个分布式系统，那么分布式系统中的组件必然需要被部署到不同的节点，否则也就无所谓的分布式系统了，因此必然出现子网络。而对于分布式系统而言，网络问题又是一个必定会出现的异常情况，因此分区容错性也就成为了一个分布式系统必然需要面对和解决的问题。因此系统架构师往往需要把精力花在如何根据业务特点<strong>在C（一致性）和A（可用性）之间寻求平衡</strong>。</p>
<h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE是<strong>Basically Available(基本可用）</strong>、<strong>Soft state(软状态）</strong>和<strong>Eventually consistent(最终一致性）</strong>三个短语的简写。BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是<strong>基于CAP定理逐步演化</strong>而来的，其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方法来使系统达到<strong>最终一致性</strong>。接下来，我们着重对BASE中的三要素进行讲解。</p>
<h3 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a>基本可用</h3><p>基本可用是指分布式系统在出现不可预知故障的时候，允许<strong>损失部分可用性</strong>——但请注意，这绝不等价于系统不可用。一下就是两个”基本可用”的例子。</p>
<ul>
<li><p><strong>响应时间上的损失：</strong>正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</p>
</li>
<li><p><strong>功能上的损失：</strong>正常情况下，在一个电子商务网站（比如淘宝）上购物，消费者几乎能够顺利地完成每一笔订单。但在一些节日大促购物高峰的时候（比如双十一、双十二），由于消费者的购物行为激增，为了保护系统的稳定性（或者保证一致性），部分消费者可能会被引导到一个降级页面，如下：</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-37e6cda2c76b8cec.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基本可用"></p>
<h3 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h3><p>软状态是指允许系统中的数据存在<strong>中间状态</strong>，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同的数据副本之间进行数据同步的过程<strong>存在延时</strong>。</p>
<h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，<strong>最终能够达到一个一致的状态</strong>。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p>
<p>最终一致性是一种<strong>特殊的弱一致性</strong>：系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问都能够获取到最新的值。同时，在没有发生故障的前提下，数据到达一致状态的时间延迟，取决于网络延迟、系统负载和数据复制方案设计等因素。</p>
<p>在实际工程实践中，最终一致性存在一下五类主要变种。</p>
<ul>
<li>因果一致性(Causal consistency)</li>
<li>读己之所写(Read your writes)</li>
<li>会话一致性(Session consistency)</li>
<li>单调读一致性(Monotonic read consistency)</li>
<li>单调写一致性(Monotonic write consistency)</li>
</ul>
<p>以上就是最终一致性的五种常见的变种，在实际系统实践中，可以将其中的若干个变种互相结合起来，以构建一个具有最终一致性特性的分布式系统。事实上，最终一致性并不是只有那些大型分布式系统才涉及的特性，许多<strong>现代的关系型数据库</strong>都采用了最终一致性模型。在现代关系型数据库中（比如MySQL和PostgreSQL），大多都会采用<strong>同步或异步</strong>方式来实现<strong>主备数据复制</strong>技术。在同步方式中，数据的复制过程通常是更新事务的一部分，因此在事务完成后，主备数据库的数据就会达到一致。而在异步方式中，备库的更新往往会存在延时，这取决于事务日志在主备数据库之间传输的时间长短。如果传输时间过长或者甚至在日志传输过程中出现异常导致无法及时将事务应用到备库上，那么很显然，从备库中读取的数据将是旧的，因此就出现了数据不一致的情况。当然，无论是采用多次重试还是人为数据订正，关系型数据库还是能够保证最终数据达到一致，这就是系统提供最终一致性保证的经典案例。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>《从Paxos到ZooKeeper——分布式一致性原理与实践》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系列文章——分布式系统的特点及问题]]></title>
      <url>http://linbingdong.com/2016/12/12/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E7%82%B9%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>随着数据量越来越大，计算机需要处理的业务越来越复杂，单机已经无法满足需求。一个有效的解决方案是把众多廉价的计算机整合起来，共同提供服务，这就是分布式系统。接下来介绍分布式系统的定义、特点，以及分布式环境中存在的问题和挑战。</p>
<a id="more"></a>
<h2 id="分布式系统定义"><a href="#分布式系统定义" class="headerlink" title="分布式系统定义"></a>分布式系统定义</h2><p>在《分布式系统概念与设计》一书中，对分布式系统做了 如下定义：</p>
<blockquote>
<p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>
</blockquote>
<p>也就是说一个分布式系统中的计算机在空间部署上可以是<strong>随意分布</strong>的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。这些计算机之间<strong>通过网络来通信</strong>。</p>
<h2 id="分布式的特点"><a href="#分布式的特点" class="headerlink" title="分布式的特点"></a>分布式的特点</h2><p>分布式系统有如下体征：</p>
<h3 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h3><p>分布式系统中的多台计算机在空间上随意分步。当然，机器的分布情况也会随时变动。</p>
<h3 id="对等性"><a href="#对等性" class="headerlink" title="对等性"></a>对等性</h3><p>分布式系统中的计算机没有主/从之分，既没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是<strong>对等的</strong>。</p>
<h3 id="并发性"><a href="#并发性" class="headerlink" title="并发性"></a>并发性</h3><p>一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，比如数据库或分布式存储等。如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战。</p>
<h3 id="缺乏全局时钟"><a href="#缺乏全局时钟" class="headerlink" title="缺乏全局时钟"></a>缺乏全局时钟</h3><p>在分布式系统中，<strong>很难定义两个事件究竟谁先谁后</strong>，原因就是分布式系统缺乏一个全局的时钟控制序列。</p>
<h3 id="故障总是会发生"><a href="#故障总是会发生" class="headerlink" title="故障总是会发生"></a>故障总是会发生</h3><p>组成分布式系统的所有计算机，都有可能发生任何形式的故障。实践表明，在分布式系统中，计算机发生故障是比较常见的。因此，在分布式系统设计时，必须考虑到该问题。</p>
<h2 id="分布式环境的各种问题"><a href="#分布式环境的各种问题" class="headerlink" title="分布式环境的各种问题"></a>分布式环境的各种问题</h2><p>分布式系统体系结构从其出现之初就伴随着诸多的难题和挑战，本节介绍分布式系统中的一些典型的问题。</p>
<h3 id="通信异常"><a href="#通信异常" class="headerlink" title="通信异常"></a>通信异常</h3><p>分布式系统中个计算机之间是通过网络进行通信的。由于<strong>网络本身的不可靠性</strong>，每次网络通信都会伴随着网络不可用的风险。即使分布式系统各节点之间的网络通信能够正常进行，其延时也会远远大于单机操作。在分布式系统中，<strong>消息延时和消息丢失非常普遍</strong>。</p>
<h3 id="网络分区"><a href="#网络分区" class="headerlink" title="网络分区"></a>网络分区</h3><p>当网络发生异常情况，可能导致分布式系统中某些节点之间能够正常通信，而某些节点之间无法通信——该现象就是网络分区，就是俗称的『脑裂』。当网络分区出现时，分布式系统就会出现局部小集群，小集群内计算机可以相互通信，小集群之间计算机无法通信。这就对分布式一致性提出了非常大的挑战。</p>
<h3 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h3><p>因为在分布式系统中，网络可能会出现各式各样的问题，因此分布式系统的每一次请求和响应，存在特有的『三态』概念，即<strong>成功、失败与超时</strong>。在传统的单机系统中，应用程序在调用一个函数之后，能够得到一个非常明确的相应：成功或失败。而在分布式系统中，由于网络是不可靠的，当网络出现异常的情况下，就可能出现超时现象，发生消息丢失现象。</p>
<h3 id="节点故障"><a href="#节点故障" class="headerlink" title="节点故障"></a>节点故障</h3><p>节点故障是分布式环境下一个比较常见的问题，指的是组成分布式系统的服务器节点出现宕机或『僵死』现象。通常根据经验来说，每个节点都有可能出现故障，并且每天都在发生。</p>
]]></content>
      
        <categories>
            
            <category> 分布式系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL综合]]></title>
      <url>http://linbingdong.com/2016/12/08/%E5%AD%A6%E4%B9%A0PostgreSQL%E4%B8%8D%E5%8F%AF%E9%94%99%E8%BF%87%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>PostgreSQL是以加州大学伯克利分校计算机系开发的<a href="http://db.cs.berkeley.edu/postgres.html" target="_blank" rel="external"> POSTGRES, Version 4.2</a>为基础的对象关系型数据库管理系统(ORDBMS)。POSTGRES开创的许多概念在很久以后才出现在商业数据库中。</p>
<a id="more"></a>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostgreSQL是以加州大学伯克利分校计算机系开发的<a href="http://db.cs.berkeley.edu/postgres.html" target="_blank" rel="external"> POSTGRES, Version 4.2</a>为基础的对象关系型数据库管理系统(ORDBMS)。POSTGRES开创的许多概念在很久以后才出现在商业数据库中。</p>
<p>PostgreSQL支持大部分SQL标准并且提供了许多其它现代特性：</p>
<ul>
<li>复杂查询</li>
<li>外键</li>
<li>触发器</li>
<li>可更新的视图</li>
<li>事务完整性</li>
<li>多版本并发控制</li>
</ul>
<p>另外，PostgreSQL可以用许多方法进行扩展，比如通过增加新的：</p>
<ul>
<li>数据类型</li>
<li>函数</li>
<li>操作符</li>
<li>聚合函数</li>
<li>索引方法</li>
<li>过程语言</li>
</ul>
<p>经过二十几年的发展，PostgreSQL 是目前世界上最先进的开源数据库系统。</p>
<h2 id="2-体系基本概念"><a href="#2-体系基本概念" class="headerlink" title="2. 体系基本概念"></a>2. 体系基本概念</h2><p>PostgreSQL使用常见的客户端/服务器 的模式。一次PostgreSQL会话由下列相关的进程(程序)组成：</p>
<ul>
<li><p>服务器进程</p>
<p>它管理数据库文件，接受来自客户端应用与数据库的连接，并且代表客 户端在数据库上执行操作。数据库服务器程序叫postgres。</p>
</li>
<li><p>客户端应用</p>
<p>客户端应用可能本身就是多种多样的：它们可以是一个字符界面的工具，也可以是一个图形界面的应用， 或者是一个通过访问数据库来显示网页的 web 服务器，或者是一个特殊的数据库管理工具。一些客户端应用是和PostgreSQL发布一起提供的，但绝大部分是用户开发的。</p>
</li>
</ul>
<p>PostgreSQL服务器可以处理来自客户端的多个并发连接。 因此，它为每个连接启动(“forks”)一个新的进程。从这个时候开始，客户端和新服务器进程就不再经过最初的postgres进程进行通讯。因此，主服务器总是在运行，等待客户端连接，而客户端及其相关联的服务器进程则是起起停停。</p>
<h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3. 基本使用"></a>3. 基本使用</h2><h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">\l 列出所有数据库   或者： SELECT datname FROM pg_database;</div><div class="line">\du 列出所有角色/用户 或者： SELECT rolname FROM pg_roles;</div><div class="line">\q 退出数据库</div><div class="line">\d 列出当前数据库里的所有表</div><div class="line">\dt 列出当前数据库里的所有资料表</div><div class="line">\c dbname 切换数据库</div><div class="line">\dx 显示安装的插件</div><div class="line">\x 切换横向竖向显示</div><div class="line">show &lt;参数名&gt; 查看该参数的值</div></pre></td></tr></table></figure>
<h3 id="3-2-建表"><a href="#3-2-建表" class="headerlink" title="3.2 建表"></a>3.2 建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> weather (</div><div class="line">    city            <span class="built_in">varchar</span>(<span class="number">80</span>),</div><div class="line">    temp_lo         <span class="built_in">int</span>,           <span class="comment">-- low temperature</span></div><div class="line">    temp_hi         <span class="built_in">int</span>,           <span class="comment">-- high temperature</span></div><div class="line">    prcp            <span class="built_in">real</span>,          <span class="comment">-- precipitation</span></div><div class="line">    <span class="built_in">date</span>            <span class="built_in">date</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="3-3-从文本加载数据"><a href="#3-3-从文本加载数据" class="headerlink" title="3.3 从文本加载数据"></a>3.3 从文本加载数据</h3><p>先在/tmp下创建mydb.txt,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;shanghai&apos; 20 30 0.07 &apos;2011-11-11&apos;</div><div class="line">&apos;chengdu&apos; 2 45 0.9 &apos;2008-09-08&apos;</div><div class="line">&apos;shanghai&apos; 20 30 0.07 &apos;2011-11-11&apos;</div><div class="line">&apos;chengdu&apos; 2 45 0.9 &apos;2008-09-08&apos;</div></pre></td></tr></table></figure>
<p>将mydb.txt里的内容导入weather表中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">COPY weather FROM &apos;/tmp/mydb.txt&apos; delimiter &apos; &apos;;  --delimiter指定分隔符，txt文件默认分隔符是&apos;\t&apos;,CSV文件默认分隔符是&apos;,&apos;</div></pre></td></tr></table></figure>
<p>此时查看weather表中的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from weather;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mydb=# select * from weather;</div><div class="line">    city    | tmp_lo | tmp_hi | prcp |    date</div><div class="line">------------+--------+--------+------+------------</div><div class="line"> &apos;shanghai&apos; |     20 |     30 | 0.07 | 2011-11-11</div><div class="line"> &apos;chengdu&apos;  |      2 |     45 |  0.9 | 2008-09-08</div><div class="line"> &apos;shanghai&apos; |     20 |     30 | 0.07 | 2011-11-11</div><div class="line"> &apos;chengdu&apos;  |      2 |     45 |  0.9 | 2008-09-08</div><div class="line">(4 行记录)</div></pre></td></tr></table></figure>
<h2 id="4-单机部署"><a href="#4-单机部署" class="headerlink" title="4. 单机部署"></a>4. 单机部署</h2><p>在192.168.20.93和192.168.20.94上分别部署了单机版的PostgreSQL。</p>
<h3 id="4-1-安装PostgreSQL源"><a href="#4-1-安装PostgreSQL源" class="headerlink" title="4.1 安装PostgreSQL源"></a>4.1 安装PostgreSQL源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-1.noarch.rpm</div></pre></td></tr></table></figure>
<h3 id="4-2-执行安装命令"><a href="#4-2-执行安装命令" class="headerlink" title="4.2 执行安装命令"></a>4.2 执行安装命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line">yum install postgresql94-server postgresql94-contrib</div></pre></td></tr></table></figure>
<h3 id="4-3-验证是否安装成功"><a href="#4-3-验证是否安装成功" class="headerlink" title="4.3 验证是否安装成功"></a>4.3 验证是否安装成功</h3><p>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep postgres</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">postgresql94-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-server-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-libs-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-contrib-9.4.10-1PGDG.rhel7.x86_64</div></pre></td></tr></table></figure>
<p>说明安装成功</p>
<h3 id="4-4-初始化数据库"><a href="#4-4-初始化数据库" class="headerlink" title="4.4 初始化数据库"></a>4.4 初始化数据库</h3><p>先创建数据存放目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>赋予postgres用户该目录的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown postgres /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>切换到postgres用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su postgres</div></pre></td></tr></table></figure>
<p>执行初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">initdb -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>注：</p>
<p>-D 后面是数据库文件存放的目录，如果不指定则默认在/var/lib/pgsql/9.4/data下</p>
<p>初始化的日志如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">属于此数据库系统的文件宿主为用户 &quot;postgres&quot;.</div><div class="line">此用户也必须为服务器进程的宿主.</div><div class="line">数据库簇将使用本地化语言 &quot;zh_CN.UTF-8&quot;进行初始化.</div><div class="line">默认的数据库编码已经相应的设置为 &quot;UTF8&quot;.</div><div class="line">initdb: 无法为本地化语言环境&quot;zh_CN.UTF-8&quot;找到合适的文本搜索配置</div><div class="line">缺省的文本搜索配置将会被设置到&quot;simple&quot;</div><div class="line"></div><div class="line">禁止为数据页生成校验和.</div><div class="line"></div><div class="line">修复已存在目录 /opt/pgsql/data 的权限 ... 成功</div><div class="line">正在创建子目录 ... 成功</div><div class="line">选择默认最大联接数 (max_connections) ... 100</div><div class="line">选择默认共享缓冲区大小 (shared_buffers) ... 128MB</div><div class="line">选择动态共享内存实现 ......posix</div><div class="line">创建配置文件 ... 成功</div><div class="line">在 /opt/pgsql/data/base/1 中创建 template1 数据库 ... 成功</div><div class="line">初始化 pg_authid ...  成功</div><div class="line">初始化dependencies ... 成功</div><div class="line">创建系统视图 ... 成功</div><div class="line">正在加载系统对象描述 ...成功</div><div class="line">创建(字符集)校对规则 ... 成功</div><div class="line">创建字符集转换 ... 成功</div><div class="line">正在创建字典 ... 成功</div><div class="line">对内建对象设置权限 ... 成功</div><div class="line">创建信息模式 ... 成功</div><div class="line">正在装载PL/pgSQL服务器端编程语言...成功</div><div class="line">清理数据库 template1 ... 成功</div><div class="line">拷贝 template1 到 template0 ... 成功</div><div class="line">拷贝 template1 到 template0 ... 成功</div><div class="line">同步数据到磁盘...成功</div><div class="line"></div><div class="line">成功. 您现在可以用下面的命令运行数据库服务器:</div><div class="line"></div><div class="line">    /usr/pgsql-9.4/bin/postmaster -D /opt/pgsql/data/</div><div class="line">或者</div><div class="line">    /usr/pgsql-9.4/bin/pg_ctl -D /opt/pgsql/data/ -l logfile start</div></pre></td></tr></table></figure>
<h3 id="4-5-启动服务"><a href="#4-5-启动服务" class="headerlink" title="4.5 启动服务"></a>4.5 启动服务</h3><p>1.切换到postgres用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su postgres</div></pre></td></tr></table></figure>
<p>因为启动服务同样必须以PostgreSQL用户帐户登录来做。 </p>
<p>2.启动服务</p>
<p>没有-D选项，服务器将使用环境变量PGDATA命名的目录； 如果这个环境变量也没有，将导致失败。通常，最好在后台启动postgres，使用下面的 Unix shell 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pg_ctl -D /opt/pgsql/data/ -l logfile start</div></pre></td></tr></table></figure>
<p>3.设置开机自动启动</p>
<p>在Linux系统里，要么往/etc/rc.d/rc.local或 /etc/rc.local文件里加上下面几行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data</div></pre></td></tr></table></figure>
<h3 id="4-6-创建用户"><a href="#4-6-创建用户" class="headerlink" title="4.6 创建用户"></a>4.6 创建用户</h3><p>PostgreSQL使用<em>角色</em>的概念管理数据库访问权限。 根据角色自身的设置不同，一个角色可以看做是一个数据库用户，或者一组数据库用户。 角色可以拥有数据库对象(比如表)以及可以把这些对象上的权限赋予其它角色， 以控制谁拥有访问哪些对象的权限。另外，我们也可以把一个角色的<em>成员</em> 权限赋予其它角色，这样就允许成员角色使用分配给另一个角色的权限。<br>角色的概念替换了”用户”和”组”。在PostgreSQL 版本 8.1 之前，用户和组是独立类型的记录，但现在它们只是角色。 任何角色都可以是一个用户、一个组、或者两者。</p>
<p>数据库角色从概念上与操作系统用户是完全无关的。在实际使用中把它们对应起来可能比较方便， 但这不是必须的。数据库角色在整个数据库集群中是全局的(而不是每个库不同)。 要创建一个角色，使用 SQL 命令<a href="http://www.postgres.cn/docs/9.4/sql-createrole.html" target="_blank" rel="external">CREATE ROLE</a>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE ROLE name;</div></pre></td></tr></table></figure>
<p><em>name</em>遵循 SQL 标识的规则：要么完全没有特殊字符， 要么用双引号包围(实际上你通常会给命令增加额外的选项，比如LOGIN。 下面显示更多细节)。要删除一个现有角色，使用类似的<a href="http://www.postgres.cn/docs/9.4/sql-droprole.html" target="_blank" rel="external">DROP ROLE</a>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP ROLE name;</div></pre></td></tr></table></figure>
<p>为了方便，程序<a href="http://www.postgres.cn/docs/9.4/app-createuser.html" target="_blank" rel="external">createuser</a>和<a href="http://www.postgres.cn/docs/9.4/app-dropuser.html" target="_blank" rel="external">dropuser</a> 提供了对了这些 SQL 命令的封装。我们可以在 shell 命令上直接调用它们：</p>
<p>直接在shell里输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createuser lbd;</div></pre></td></tr></table></figure>
<p>这样就创建了lbd这个角色。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dropuser lbd;</div></pre></td></tr></table></figure>
<p>这样就创建了lbd这个角色。</p>
<p>要检查现有角色的集合，可以检查pg_roles系统表，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT rolname FROM pg_roles;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# SELECT rolname FROM pg_roles;</div><div class="line"> rolname</div><div class="line">----------</div><div class="line"> postgres</div><div class="line"> lbd</div><div class="line">(2 行记录)</div></pre></td></tr></table></figure>
<p><a href="http://www.postgres.cn/docs/9.4/app-psql.html" target="_blank" rel="external">psql</a>的元命令\du<br>也可以用于列出现有角色。</p>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# \du</div><div class="line">                        角色列表</div><div class="line"> 角色名称 |               属性                | 成员属于</div><div class="line">---------+----------------------------------+----------</div><div class="line"> lbd     |                                   | &#123;&#125;</div><div class="line"> postgres| 超级用户, 建立角色, 建立 DB, 复制     | &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="5-主从流复制部署"><a href="#5-主从流复制部署" class="headerlink" title="5. 主从流复制部署"></a>5. 主从流复制部署</h2><p>192.168.20.93上部署主服务器，192.168.20.94上部署从服务器。</p>
<h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>postgres在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<p>与基于文件日志传送相比，流复制允许保持从服务器更新。 从服务器连接主服务器，其产生的流WAL记录到从服务器， 而不需要等待主服务器写完WAL文件。</p>
<p>PostgreSQL流复制默认是异步的。在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。</p>
<p>同步复制必须等主服务器和从服务器都写完WAL后才能提交事务。这样在一定程度上会增加事务的响应时间。</p>
<p>配置同步复制仅需要一个额外的配置步骤： <a href="http://www.postgres.cn/docs/9.4/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES" target="_blank" rel="external">synchronous_standby_names</a>必须设置为一个非空值。synchronous_commit也必须设置为on。</p>
<p>这里部署的是异步的流复制。</p>
<p><strong>注:</strong><br>主从服务器所在节点的系统、环境等最好一致。PostgreSQL版本也最好一致，否则可能会有问题。</p>
<h3 id="5-2-安装部署"><a href="#5-2-安装部署" class="headerlink" title="5.2 安装部署"></a>5.2 安装部署</h3><p>先在192.168.20.93和192.168.20.94均安装PostgreSQL。</p>
<p>具体安装部署步骤见上一节：单机部署</p>
<h4 id="5-2-1-主服务器"><a href="#5-2-1-主服务器" class="headerlink" title="5.2.1 主服务器"></a>5.2.1 主服务器</h4><p>主服务器为192.168.20.93</p>
<p>先创建一个新目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/pgsql/pg_archive</div></pre></td></tr></table></figure>
<p>1.首先需要创建一个数据库用户进行主从同步。创建用户replica，并赋予登录和复制的权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres# CREATE ROLE replica login replication encrypted password &apos;replica&apos;</div></pre></td></tr></table></figure>
<p>2.修改pg_hba.conf，允许replica用户来同步。</p>
<p>在pg_hba.conf里增加两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host     all             all          192.168.20.94/32          trust   #允许94连接到主服务器</div><div class="line">host   replication      replica       192.168.20.94/32          md5   #允许94使用replica用户来复制</div></pre></td></tr></table></figure>
<p>这样，就设置了replica这个用户可以从192.168.20.93进行流复制请求。</p>
<p><strong>注：</strong><br>第二个字段必须要填replication</p>
<p>4.修改postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">listen_addresses = &apos;*&apos;   # 监听所有IP</div><div class="line">archive_mode = on  # 允许归档</div><div class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  # 用该命令来归档logfile segment</div><div class="line">wal_level = hot_standby </div><div class="line">max_wal_senders = 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个</div><div class="line">wal_keep_segments = 256 ＃ 设置流复制保留的最多的xlog数目</div><div class="line">wal_sender_timeout = 60s ＃ 设置流复制主机发送数据的超时时间</div><div class="line">max_connections = 100 # 这个设置要注意下，从库的max_connections必须要大于主库的</div></pre></td></tr></table></figure>
<p>配置完两个文件后重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pg_ctl stop -D /opt/pgsql/data</div><div class="line">pg_ctl start -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>3.测试94能否连接93数据库。在94上运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql -h 192.168.20.93 -U postgres</div></pre></td></tr></table></figure>
<p>看看是否能进入数据库。若可以，则正常。</p>
<h4 id="5-2-2-从服务器"><a href="#5-2-2-从服务器" class="headerlink" title="5.2.2 从服务器"></a>5.2.2 从服务器</h4><p>1.从主节点拷贝数据到从节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">su - postgres</div><div class="line">rm -rf /opt/pgsql/data/*   #先将data目录下的数据都清空</div><div class="line">pg_basebackup -h 192.168.20.93 -U replica -D /opt/pgsql/data -X stream -P  # 从93拷贝数据到94（基础备份）</div><div class="line">mkdir /opt/pgsql/pg_archive</div></pre></td></tr></table></figure>
<p>2.配置recovery.conf</p>
<p>复制/usr/pgsql-9.4/share/recovery.conf.sample 到 /opt/pgsql/data/recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /usr/pgsql-9.4/share/recovery.conf.sample /opt/pgsql/data/recovery.conf</div></pre></td></tr></table></figure>
<p>修改recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">standby_mode = on    # 说明该节点是从服务器</div><div class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  # 主服务器的信息以及连接的用户</div><div class="line">recovery_target_timeline = &apos;latest&apos;</div></pre></td></tr></table></figure>
<p>3.配置postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wal_level = hot_standby</div><div class="line">max_connections = 1000 ＃ 一般查多于写的应用从库的最大连接数要比较大</div><div class="line">hot_standby = on ＃ 说明这台机器不仅仅是用于数据归档，也用于数据查询</div><div class="line">max_standby_streaming_delay = 30s # 数据流备份的最大延迟时间</div><div class="line">wal_receiver_status_interval = 10s # 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</div><div class="line">hot_standby_feedback = on # 如果有错误的数据复制，是否向主进行反馈</div></pre></td></tr></table></figure>
<p>配置完后重启从服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pg_ctl stop -D /opt/pgsql/data</div><div class="line">pg_ctl start -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<h3 id="5-3-验证是否部署成功"><a href="#5-3-验证是否部署成功" class="headerlink" title="5.3 验证是否部署成功"></a>5.3 验证是否部署成功</h3><p>在主节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select client_addr,sync_state from pg_stat_replication;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</div><div class="line">  client_addr  | sync_state</div><div class="line">---------------+------------</div><div class="line"> 192.168.20.94 | async</div><div class="line">(1 行记录)</div></pre></td></tr></table></figure>
<p>说明94是从服务器，在接收流，而且是异步流复制。</p>
<p>此外，还可以分别在主、从节点上运行 ps aux | grep postgres 来查看进程：</p>
<p>主服务器（93）上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres 262270  0.0  0.0 337844  2832 ?        Ss   10:14   0:00 postgres: wal sender process replica 192.168.20.94(13059) streaming 0/A002A88</div></pre></td></tr></table></figure>
<p>可以看到有一个 wal sender 进程。</p>
<p>从服务器（94）上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres 569868  0.0  0.0 384604  2960 ?        Ss   10:14   0:02 postgres: wal receiver process   streaming 0/A002B60</div></pre></td></tr></table></figure>
<p>可以看到有一个 wal receiver 进程。</p>
<p>至此，PostgreSQL主从流复制安装部署完成。</p>
<p>在主服务器上插入数据或删除数据，在从服务器上能看到相应的变化。从服务器上只能查询，不能插入或删除。</p>
<h2 id="6-主要配置"><a href="#6-主要配置" class="headerlink" title="6. 主要配置"></a>6. 主要配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">1. 连接相关</div><div class="line"></div><div class="line">listen_addresses = &apos;*&apos;      数据库用来监听客户端连接的IP地址，*表示监听所有IP。</div><div class="line">port = 5432     数据库监听户端连接的TCP端口。默认值是5432。</div><div class="line">max_connections = 100   允许客户端的最大连接数，默认是100，足够了。</div><div class="line">superuser_reserved_connections = 3 为超级用户保留的连接数，默认为3。</div><div class="line"></div><div class="line"></div><div class="line">2. 资源使用</div><div class="line"></div><div class="line">shared_buffers = 128MB  可以被PostgreSQL用于缓存数据的内存大小。大的shared_buffers需要大的checkpoint_segments,同时需要申请更多的System V共享内存资源.这个值不需要设的太大, 因为PostgreSQL还依赖操作系统的cache来提高读性能。另外, 写操作频繁的数据库这个设太大反而会增加checkpoint压力(除非你使用了SSD或者IOPS能力很好的存储).</div><div class="line">work_mem = 4MB   内部排序和哈希操作可使用的工作内存大小。</div><div class="line">maintenance_work_mem = 64MB 这里定义的内存只是在CREATE INDEX, VACUUM等时用到。这个值越大, VACUUM, CREATE INDEX的操作越快, 当然大到一定程度瓶颈就不在内存了, 可能是CPU例如创建索引.这个值是一个操作的内存使用上限, 而不是一次性分配出去的. 并且需要注意如果开启了autovacuum, 最大可能有autovacuum_max_workers*maintenance_work_mem的内存被系统消耗掉.</div><div class="line"></div><div class="line"></div><div class="line">3. WAL</div><div class="line"></div><div class="line">wal_level = hot_standby  如果需要做数据库WAL日志备份的话至少需要设置成archive级别, 如果需要做hot_standby那么需要设置成hot_standby。hot_standby意味着WAL记录得更详细, 如果没有打算做hot_standby设置得越低性能越好。</div><div class="line">fsync = on  强制把数据同步更新到磁盘</div><div class="line">wal_buffers = -1  默认是-1 根据shared_buffers的设置自动调整shared_buffers*3% .最大限制是XLOG的segment_size.</div><div class="line">checkpoint_segments = 3  多少个xlog file产生后开始checkpoint操作。建议设置为shared_buffers除以单个XLOG文件的大小。</div><div class="line">checkpoint_timeout = 5min 这个和checkpoint_segments的效果是一样的, 只是触发的条件是时间条件。</div><div class="line">archive_mode = on 允许归档。</div><div class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  归档调用的命令。</div><div class="line"></div><div class="line"></div><div class="line">4. 主从复制</div><div class="line"></div><div class="line">## postgresql.conf</div><div class="line"></div><div class="line">max_wal_senders = 32 最大的wal sender进程数。</div><div class="line">hot_standby = on  在从服务器上设置为 on ，则该服务器也可用作查询。</div><div class="line">max_standby_streaming_delay = 30s  数据流备份的最大延迟时间。</div><div class="line">wal_receiver_status_interval = 10s  多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间。</div><div class="line">hot_standby_feedback = on  如果有错误的数据复制，是否向主进行反馈。</div><div class="line"></div><div class="line">## recovery.conf（只有从服务器需要配置）</div><div class="line"></div><div class="line">standby_mode = on  说明该节点是从服务器</div><div class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  主服务器的信息以及连接的用户</div><div class="line">recovery_target_timeline = &apos;latest&apos;</div><div class="line"></div><div class="line"></div><div class="line">5. 内核资源</div><div class="line"></div><div class="line">max_files_per_process = 1000 设定每个数据库进程能够打开的文件的数目。默认值是1000。</div><div class="line">shared_preload_libraries = &apos;&apos;  设置数据库在启动时要加载的操作系统共享库文件。如果有多个库文件，名字用逗号分开。如果数据库在启动时未找到shared_preload_libraries指定的某个库文件，数据库将无法启动。默认值为空串。</div><div class="line"></div><div class="line">6. AUTOVACUUM参数</div><div class="line"></div><div class="line">autovacuum = on  是否打开数据库的自动垃圾收集功能。默认值是on。如果autovacuum被设为on，参数track_counts也要被设为on，自动垃圾收集才能正常工作。注意，即使这个参数被设为off，如果事务ID回绕即将发生，数据库会自动启动一个垃圾收集操作。这个参数只能在文件postgresql.conf中被设置。</div><div class="line">log_autovacuum_min_duration = -1  单位是毫秒。如果它的值为0，所有的垃圾搜集操作都会被记录在数据库运行日志中，如果它的值是-1，所有的垃圾收集操作都不会被记录在数据库运行日志中。如果把它的值设为250毫秒，只要自动垃圾搜集发出的VACUUM和ANALYZE命令的执行时间超过250毫秒，VACUUM和ANALYZE命令的相关信息就会被记录在数据库运行日志中。默认值是-1。</div><div class="line">autovacuum_max_workers = 3  设置能同时运行的最大的自动垃圾收集工作进程的数目。默认值是3。</div><div class="line">autovacuum_naptime = 1min  设置自动垃圾收集控制进程的睡眠时间。</div><div class="line">autovacuum_vacuum_threshold = 50  设置触发垃圾收集操作的阈值。默认值是50。只有一个表上被删除或更新的记录的数目超过了autovacuum_vacuum_threshold的值，才会对这个表执行垃圾收集操作。</div><div class="line"></div><div class="line">7. 文件位置</div><div class="line"></div><div class="line">data_directory = &apos;/opt/pgsql/data&apos;           数据存放位置，初始化时可以指定，也可以在这里修改。</div><div class="line">hba_file = &apos;/opt/pgsql/data/pg_hba.conf&apos;     主从复制配置文件pg_hba.conf的路径</div><div class="line">ident_file = /opt/pgsql/data/pg_ident.conf&apos;   配置文件pg_ident.conf的路径</div><div class="line"></div><div class="line">8. 编码</div><div class="line"></div><div class="line">lc_messages = &apos;zh_CN.UTF-8&apos;                系统错误信息的语言环境</div><div class="line">lc_monetary = &apos;zh_CN.UTF-8&apos;                货币格式的语言环境</div><div class="line">lc_numeric = &apos;zh_CN.UTF-8&apos;                 数字的语言环境</div><div class="line">lc_time = &apos;zh_CN.UTF-8&apos;                    时间的语言环境</div></pre></td></tr></table></figure>
<h2 id="7-插件（扩展）"><a href="#7-插件（扩展）" class="headerlink" title="7. 插件（扩展）"></a>7. 插件（扩展）</h2><p>PostgreSQL的contrib/目录和extension/目录附带包含若干插件的源代码。 在<a href="http://www.postgres.cn/docs/9.4/contrib.html" target="_blank" rel="external">附录 F</a>中被描述。其它插件是独立开发的， 比如<a href="http://www.postgis.org/" target="_blank" rel="external">PostGIS</a>。 甚至PostgreSQL的复制方案也是在外部开发的。 比如 <a href="http://www.slony.info/" target="_blank" rel="external">Slony-I</a> 是一个流行的主/从复制方案，它就是独立在核心项目之外开发的。</p>
<p>PostgreSQL的插件主要用来提供新的用户自定义函数，操作符，或类型。 若要使用插件，需要在数据库系统中注册新的SQL对象。（如果该插件没有在contrib或extension目录下，需要先自己安装，或者在编译源码的时候指定。） 在PostgreSQL 9.1和以后版本，这是通过执行 <a href="http://www.postgres.cn/docs/9.4/sql-createextension.html" target="_blank" rel="external">CREATE EXTENSION</a>命令来实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE EXTENSION module_name</div></pre></td></tr></table></figure>
<p>此命令必须由数据库管理员运行。如想在某个数据库中使用该插件，则必须在该数据库中运行如上命令。另外， 在数据库template1中运行它，这样在随后创建的数据库中也可使用该插件。</p>
<p>具体插件的安装使用请参考下一节：PostGIS插件安装与使用</p>
<h2 id="8-PostGIS插件安装与使用"><a href="#8-PostGIS插件安装与使用" class="headerlink" title="8. PostGIS插件安装与使用"></a>8. PostGIS插件安装与使用</h2><h3 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h3><p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<p>PostGIS支持所有的空间数据类型，这些类型包括：点（POINT）、线（LINESTRING）、多边形（POLYGON）、多点 （MULTIPOINT）、多线（MULTILINESTRING）、多多边形（MULTIPOLYGON）和集合对象集 （GEOMETRYCOLLECTION）等。PostGIS支持所有的对象表达方法，比如WKT和WKB。</p>
<p>PostGIS支持所有的数据存取和构造方法，如GeomFromText()、AsBinary()，以及GeometryN()等。</p>
<p>PostGIS提供简单的空间分析函数（如Area和Length）同时也提供其他一些具有复杂分析功能的函数，比如Distance。</p>
<p>PostGIS提供了对于元数据的支持，如GEOMETRY_COLUMNS和SPATIAL_REF_SYS，同时，PostGIS也提供了相应的支持函数，如AddGeometryColumn和DropGeometryColumn。</p>
<p>PostGIS提供了一系列的二元谓词（如Contains、Within、Overlaps和Touches）用于检测空间对象之间的空间关系，同时返回布尔值来表征对象之间符合这个关系。</p>
<p>PostGIS提供了空间操作符（如Union和Difference）用于空间数据操作。比如，Union操作符融合多边形之间的边界。两个交迭的多边形通过Union运算就会形成一个新的多边形，这个新的多边形的边界为两个多边形中最大边界。</p>
<p>PostGIS还提供以下功能：</p>
<p><strong>数据库坐标变换</strong></p>
<p>数据库中的几何类型可以通过Transform函数从一种投影系变换到另一种投影系中。在OpenGIS中的几何类型都将SRID作为自身结构的一部分，但不知什么原因，在OpenGIS的SFSQL规范中，并没有引入Transform。</p>
<p><strong>球体长度运算</strong></p>
<p>存储在普通地理坐标系中的集合类型如果不进行坐标变换是无法进行程度运算的，OpenGIS所提供的坐标变换使得积累类型的程度计算变成可能。</p>
<p><strong>三维的几何类型</strong></p>
<p>SFSQL规范只是针对二维集合类型。OpenGIS提供了对三维集合类型的支持，具体是利用输入的集合类型维数来决定输出的表现方式。例如，即便 所有几何对象内部都以三维形式存储，纯粹的二维交叉点通常还是以二维的形式返回。此外，还提供几何对象在不同维度间转换的功能。</p>
<p><strong>空间聚集函数</strong></p>
<p>在数据库中，聚集函数是一个执行某一属性列所有数据操作的函数。比如Sum和Average，Sum是求某一关系属性列的数据总和，Average 则是求取某一关系属性列的数据平均值。与此对应，空间聚集函数也是执行相同的操作，不过操作的对象是空间数据。例如聚集函数Extent返回一系列要素中 的最大的包裹矩形框，如“SELECT EXTENT(GEOM) FROM ROADS”这条SQL语句的执行结果是返回ROADS这个数据表中所有的包裹矩形框。</p>
<p><strong>栅格数据类型</strong></p>
<p>PostGIS通过一种新的数据类型片，提供对于大的栅格数据对象的存储。片由以下几个部分组成：包裹矩形框、SRID、类型和一个字节序列。通过 将片的大小控制在数据库页值（32×32）以下，使得快速的随即访问变成可能。一般大的图片也是通过将其切成32×32像素的片然后再存储在数据库中的。</p>
<h3 id="8-2-部署"><a href="#8-2-部署" class="headerlink" title="8.2 部署"></a>8.2 部署</h3><h4 id="8-2-1-安装PostGIS"><a href="#8-2-1-安装PostGIS" class="headerlink" title="8.2.1 安装PostGIS"></a>8.2.1 安装PostGIS</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install postgis2_94   # 因为安装的PostgreSQL版本为9.4，所以是postgis2_94</div></pre></td></tr></table></figure>
<p>  <strong>注：</strong><br>  需要PostgreSQL9.1以上版本才支持PostGIS.</p>
<h4 id="8-2-2-使PostGIS可用"><a href="#8-2-2-使PostGIS可用" class="headerlink" title="8.2.2 使PostGIS可用"></a>8.2.2 使PostGIS可用</h4><p>想要在PostgreSQL中使用PostGIS插件，安装只是第一步。每个数据库想要使用PostGIS必须先在该数据库中使PostGIS可用。假设我们想在gisdb这个数据库中使用PostGIS,先进入gisdb数据库，执行以下步骤：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gisdb=# CREATE EXTENSION postgis;</div><div class="line">gisdb=# CREATE EXTENSION postgis_topology;</div></pre></td></tr></table></figure>
<h4 id="8-2-3-查看是否安装成功"><a href="#8-2-3-查看是否安装成功" class="headerlink" title="8.2.3 查看是否安装成功"></a>8.2.3 查看是否安装成功</h4><p>  在gisdb数据库中输入\du，查看已安装的插件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gisdb=# \dx</div><div class="line">                                               已安装扩展列表</div><div class="line">       名称       | 版本  |  架构模式  |                                描述</div><div class="line">------------------+-------+------------+---------------------------------------------------------------------</div><div class="line"> plpgsql          | 1.0   | pg_catalog | PL/pgSQL procedural language</div><div class="line"> postgis          | 2.1.8 | public     | PostGIS geometry, geography, and raster spatial types and functions</div><div class="line"> postgis_topology | 2.1.8 | topology   | PostGIS topology spatial types and functions</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>可以看到已经安装了postgis和postgis_topology。</p>
<h3 id="8-3-使用"><a href="#8-3-使用" class="headerlink" title="8.3 使用"></a>8.3 使用</h3><h4 id="8-3-1-创建空间数据表"><a href="#8-3-1-创建空间数据表" class="headerlink" title="8.3.1 创建空间数据表"></a>8.3.1 创建空间数据表</h4><p>首先建立一个常规的表格存储有关城市（cities）的信息。这个表格有两栏，一个是 ID 编号，一个是城市名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gisdb=# CREATE TABLE cities (id int4, name varchar(50));</div></pre></td></tr></table></figure>
<p>现在添加一个空间列用于存储城市的位置。习惯上这个列叫做 the_geom。它记录了数据为什么类型（点、线、面）、有几维（这里是二维）以及空间坐标系统。此处使用 EPSG:4326 坐标系统：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT AddGeometryColumn (&apos;cities&apos;, &apos;the_geom&apos;, 4326, &apos;POINT&apos;, 2);</div></pre></td></tr></table></figure>
<p>完成后，查询 cities 表单应当显示这个新栏目。同时页面将显示当前表达没有记录（0 rows）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gisdb=# select * from cities;</div><div class="line"> id |      name       |                      the_geom</div><div class="line">----+-----------------+----------------------------------------------------</div><div class="line">（0行记录）</div></pre></td></tr></table></figure>
<p>为添加记录，需要使用 SQL 命令。对于空间列，使用 PostGIS 的 ST_GeomFromText可以将文本转化为坐标与参考系号的记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (1,ST_GeomFromText(&apos;POINT(-0.1257 51.508)&apos;,4326),&apos;London, England&apos;);</div><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (2,ST_GeomFromText(&apos;POINT(-81.233 42.983)&apos;,4326),&apos;London, Ontario&apos;);</div><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (3,ST_GeomFromText(&apos;POINT(27.91162491 -33.01529)&apos;,4326),&apos;East London,SA&apos;);</div></pre></td></tr></table></figure>
<p>当然，这样的输入方式难以操作。其它方式可以更快的输入数据。就目前来说，表格内已经有了一些城市数据，可以先进行查询等操作。</p>
<h4 id="8-3-2-简单查询"><a href="#8-3-2-简单查询" class="headerlink" title="8.3.2 简单查询"></a>8.3.2 简单查询</h4><p>标准的 SQL 操作都可以用于 PostGIS 表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT * FROM cities;</div><div class="line"> id |      name       |                      the_geom</div><div class="line">----+-----------------+----------------------------------------------------</div><div class="line">  1 | London, England | 0101000020E6100000BBB88D06F016C0BF1B2FDD2406C14940</div><div class="line">  2 | London, Ontario | 0101000020E6100000F4FDD478E94E54C0E7FBA9F1D27D4540</div><div class="line">  3 | East London,SA  | 0101000020E610000040AB064060E93B4059FAD005F58140C0</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>这里的坐标是无法阅读的 16 进制格式。要以 WKT 文本显示，使用 ST_AsText(the_geom) 或ST_AsEwkt(the_geom) 函数。也可以使用 ST_X(the_geom) 和 ST_Y(the_geom) 显示一个维度的坐标：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=#  SELECT id, ST_AsText(the_geom), ST_AsEwkt(the_geom), ST_X(the_geom), ST_Y(the_geom) FROM cities;</div><div class="line"> id |          st_astext           |               st_asewkt                |    st_x     |   st_y</div><div class="line">----+------------------------------+----------------------------------------+-------------+-----------</div><div class="line">  1 | POINT(-0.1257 51.508)        | SRID=4326;POINT(-0.1257 51.508)        |     -0.1257 |    51.508</div><div class="line">  2 | POINT(-81.233 42.983)        | SRID=4326;POINT(-81.233 42.983)        |     -81.233 |    42.983</div><div class="line">  3 | POINT(27.91162491 -33.01529) | SRID=4326;POINT(27.91162491 -33.01529) | 27.91162491 | -33.01529</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<h4 id="8-3-3-空间查询"><a href="#8-3-3-空间查询" class="headerlink" title="8.3.3 空间查询"></a>8.3.3 空间查询</h4><p>PostGIS 为 PostgreSQL 扩展了许多空间操作功能。以上已经涉及了转换空间坐标格式的 ST_GeomFromText 。多数空间操作以 ST（spatial type）开头，在 PostGIS 文档相应章节有罗列。这里回答一个具体的问题：上面三个城市相互的距离是多少？查询语句怎么写？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT p1.name,p2.name,ST_Distance_Sphere(p1.the_geom,p2.the_geom) FROM cities AS p1, cities AS p2 WHERE p1.id &gt; p2.id;</div><div class="line">      name       |      name       | st_distance_sphere</div><div class="line">-----------------+-----------------+--------------------</div><div class="line"> London, Ontario | London, England |   5875787.03777356</div><div class="line"> East London,SA  | London, England |   9789680.59961472</div><div class="line"> East London,SA  | London, Ontario |   13892208.6782928</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>输出显示了距离数据。注意 ‘WHERE’ 部分防止了输出城市到自身的距离（0）或者两个城市不同排列的距离数据（London, England 到 London, Ontario 和 London, Ontario 到 London, England 的距离是一样的）。</p>
<h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul>
<li><a href="https://www.postgresql.org/" target="_blank" rel="external">https://www.postgresql.org/</a></li>
<li><a href="http://www.postgres.cn/docs/9.4/index.html" target="_blank" rel="external">http://www.postgres.cn/docs/9.4/index.html</a></li>
<li><a href="http://www.cnblogs.com/yjf512/p/4499547.html" target="_blank" rel="external">http://www.cnblogs.com/yjf512/p/4499547.html</a></li>
<li><a href="https://yq.aliyun.com/articles/63183?spm=5176.100240.searchblog.173.aJC9Fo" target="_blank" rel="external">https://yq.aliyun.com/articles/63183?spm=5176.100240.searchblog.173.aJC9Fo</a></li>
<li><a href="https://yq.aliyun.com/articles/214?spm=5176.100240.searchblog.66.iduww3" target="_blank" rel="external">https://yq.aliyun.com/articles/214?spm=5176.100240.searchblog.66.iduww3</a></li>
<li><a href="http://postgis.net/install/" target="_blank" rel="external">http://postgis.net/install/</a></li>
<li><a href="http://www.cnblogs.com/zhaowenzhong/p/5667434.html" target="_blank" rel="external">http://www.cnblogs.com/zhaowenzhong/p/5667434.html</a></li>
<li><a href="http://wiki.clusterlabs.org/wiki/PgSQL_Replicated_Cluster?spm=5176.100239.blogcont64841.22.H7WZ3U" target="_blank" rel="external">http://wiki.clusterlabs.org/wiki/PgSQL_Replicated_Cluster?spm=5176.100239.blogcont64841.22.H7WZ3U</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL安装PostGISC插件并使用]]></title>
      <url>http://linbingdong.com/2016/12/08/PostgreSQL%E5%AE%89%E8%A3%85PostGISC%E6%8F%92%E4%BB%B6%E5%B9%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<a id="more"></a>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostGIS是对象关系型数据库PostgreSQL的一个插件，PostGIS提供如下空间信息服务功能：空间对象、空间索引、空间操作函数和空间操作符。同时，PostGIS遵循OpenGIS的规范。</p>
<p>PostGIS支持所有的空间数据类型，这些类型包括：点（POINT）、线（LINESTRING）、多边形（POLYGON）、多点 （MULTIPOINT）、多线（MULTILINESTRING）、多多边形（MULTIPOLYGON）和集合对象集 （GEOMETRYCOLLECTION）等。PostGIS支持所有的对象表达方法，比如WKT和WKB。</p>
<p>PostGIS支持所有的数据存取和构造方法，如GeomFromText()、AsBinary()，以及GeometryN()等。</p>
<p>PostGIS提供简单的空间分析函数（如Area和Length）同时也提供其他一些具有复杂分析功能的函数，比如Distance。</p>
<p>PostGIS提供了对于元数据的支持，如GEOMETRY_COLUMNS和SPATIAL_REF_SYS，同时，PostGIS也提供了相应的支持函数，如AddGeometryColumn和DropGeometryColumn。</p>
<p>PostGIS提供了一系列的二元谓词（如Contains、Within、Overlaps和Touches）用于检测空间对象之间的空间关系，同时返回布尔值来表征对象之间符合这个关系。</p>
<p>PostGIS提供了空间操作符（如Union和Difference）用于空间数据操作。比如，Union操作符融合多边形之间的边界。两个交迭的多边形通过Union运算就会形成一个新的多边形，这个新的多边形的边界为两个多边形中最大边界。</p>
<p>PostGIS还提供以下功能：</p>
<p><strong>数据库坐标变换</strong></p>
<p>数据库中的几何类型可以通过Transform函数从一种投影系变换到另一种投影系中。在OpenGIS中的几何类型都将SRID作为自身结构的一部分，但不知什么原因，在OpenGIS的SFSQL规范中，并没有引入Transform。</p>
<p><strong>球体长度运算</strong></p>
<p>存储在普通地理坐标系中的集合类型如果不进行坐标变换是无法进行程度运算的，OpenGIS所提供的坐标变换使得积累类型的程度计算变成可能。</p>
<p><strong>三维的几何类型</strong></p>
<p>SFSQL规范只是针对二维集合类型。OpenGIS提供了对三维集合类型的支持，具体是利用输入的集合类型维数来决定输出的表现方式。例如，即便 所有几何对象内部都以三维形式存储，纯粹的二维交叉点通常还是以二维的形式返回。此外，还提供几何对象在不同维度间转换的功能。</p>
<p><strong>空间聚集函数</strong></p>
<p>在数据库中，聚集函数是一个执行某一属性列所有数据操作的函数。比如Sum和Average，Sum是求某一关系属性列的数据总和，Average 则是求取某一关系属性列的数据平均值。与此对应，空间聚集函数也是执行相同的操作，不过操作的对象是空间数据。例如聚集函数Extent返回一系列要素中 的最大的包裹矩形框，如“SELECT EXTENT(GEOM) FROM ROADS”这条SQL语句的执行结果是返回ROADS这个数据表中所有的包裹矩形框。</p>
<p><strong>栅格数据类型</strong></p>
<p>PostGIS通过一种新的数据类型片，提供对于大的栅格数据对象的存储。片由以下几个部分组成：包裹矩形框、SRID、类型和一个字节序列。通过 将片的大小控制在数据库页值（32×32）以下，使得快速的随即访问变成可能。一般大的图片也是通过将其切成32×32像素的片然后再存储在数据库中的。</p>
<h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h2><h3 id="2-1-安装PostGIS"><a href="#2-1-安装PostGIS" class="headerlink" title="2.1 安装PostGIS"></a>2.1 安装PostGIS</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install postgis2_94   # 因为安装的PostgreSQL版本为9.4，所以是postgis2_94</div></pre></td></tr></table></figure>
<p>  <strong>注：</strong><br>  需要PostgreSQL9.1以上版本才支持PostGIS.</p>
<h3 id="2-2-使PostGIS可用"><a href="#2-2-使PostGIS可用" class="headerlink" title="2.2 使PostGIS可用"></a>2.2 使PostGIS可用</h3><p>想要在PostgreSQL中使用PostGIS插件，安装只是第一步。每个数据库想要使用PostGIS必须先在该数据库中使PostGIS可用。假设我们想在gisdb这个数据库中使用PostGIS,先进入gisdb数据库，执行以下步骤：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gisdb=# CREATE EXTENSION postgis;</div><div class="line">gisdb=# CREATE EXTENSION postgis_topology;</div></pre></td></tr></table></figure>
<h3 id="2-3-查看是否安装成功"><a href="#2-3-查看是否安装成功" class="headerlink" title="2.3 查看是否安装成功"></a>2.3 查看是否安装成功</h3><p>  在gisdb数据库中输入\du，查看已安装的插件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gisdb=# \dx</div><div class="line">                                               已安装扩展列表</div><div class="line">       名称       | 版本  |  架构模式  |                                描述</div><div class="line">------------------+-------+------------+---------------------------------------------------------------------</div><div class="line"> plpgsql          | 1.0   | pg_catalog | PL/pgSQL procedural language</div><div class="line"> postgis          | 2.1.8 | public     | PostGIS geometry, geography, and raster spatial types and functions</div><div class="line"> postgis_topology | 2.1.8 | topology   | PostGIS topology spatial types and functions</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>可以看到已经安装了postgis和postgis_topology。</p>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="3-1-创建空间数据表"><a href="#3-1-创建空间数据表" class="headerlink" title="3.1 创建空间数据表"></a>3.1 创建空间数据表</h3><p>首先建立一个常规的表格存储有关城市（cities）的信息。这个表格有两栏，一个是 ID 编号，一个是城市名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gisdb=# CREATE TABLE cities (id int4, name varchar(50));</div></pre></td></tr></table></figure>
<p>现在添加一个空间列用于存储城市的位置。习惯上这个列叫做 the_geom。它记录了数据为什么类型（点、线、面）、有几维（这里是二维）以及空间坐标系统。此处使用 EPSG:4326 坐标系统：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT AddGeometryColumn (&apos;cities&apos;, &apos;the_geom&apos;, 4326, &apos;POINT&apos;, 2);</div></pre></td></tr></table></figure>
<p>完成后，查询 cities 表单应当显示这个新栏目。同时页面将显示当前表达没有记录（0 rows）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gisdb=# select * from cities;</div><div class="line"> id |      name       |                      the_geom</div><div class="line">----+-----------------+----------------------------------------------------</div><div class="line">（0行记录）</div></pre></td></tr></table></figure>
<p>为添加记录，需要使用 SQL 命令。对于空间列，使用 PostGIS 的 ST_GeomFromText可以将文本转化为坐标与参考系号的记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (1,ST_GeomFromText(&apos;POINT(-0.1257 51.508)&apos;,4326),&apos;London, England&apos;);</div><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (2,ST_GeomFromText(&apos;POINT(-81.233 42.983)&apos;,4326),&apos;London, Ontario&apos;);</div><div class="line">gisdb=# INSERT INTO cities (id, the_geom, name) VALUES (3,ST_GeomFromText(&apos;POINT(27.91162491 -33.01529)&apos;,4326),&apos;East London,SA&apos;);</div></pre></td></tr></table></figure>
<p>当然，这样的输入方式难以操作。其它方式可以更快的输入数据。就目前来说，表格内已经有了一些城市数据，可以先进行查询等操作。</p>
<h3 id="3-2-简单查询"><a href="#3-2-简单查询" class="headerlink" title="3.2 简单查询"></a>3.2 简单查询</h3><p>标准的 SQL 操作都可以用于 PostGIS 表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT * FROM cities;</div><div class="line"> id |      name       |                      the_geom</div><div class="line">----+-----------------+----------------------------------------------------</div><div class="line">  1 | London, England | 0101000020E6100000BBB88D06F016C0BF1B2FDD2406C14940</div><div class="line">  2 | London, Ontario | 0101000020E6100000F4FDD478E94E54C0E7FBA9F1D27D4540</div><div class="line">  3 | East London,SA  | 0101000020E610000040AB064060E93B4059FAD005F58140C0</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>这里的坐标是无法阅读的 16 进制格式。要以 WKT 文本显示，使用 ST_AsText(the_geom) 或ST_AsEwkt(the_geom) 函数。也可以使用 ST_X(the_geom) 和 ST_Y(the_geom) 显示一个维度的坐标：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=#  SELECT id, ST_AsText(the_geom), ST_AsEwkt(the_geom), ST_X(the_geom), ST_Y(the_geom) FROM cities;</div><div class="line"> id |          st_astext           |               st_asewkt                |    st_x     |   st_y</div><div class="line">----+------------------------------+----------------------------------------+-------------+-----------</div><div class="line">  1 | POINT(-0.1257 51.508)        | SRID=4326;POINT(-0.1257 51.508)        |     -0.1257 |    51.508</div><div class="line">  2 | POINT(-81.233 42.983)        | SRID=4326;POINT(-81.233 42.983)        |     -81.233 |    42.983</div><div class="line">  3 | POINT(27.91162491 -33.01529) | SRID=4326;POINT(27.91162491 -33.01529) | 27.91162491 | -33.01529</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<h3 id="3-3-空间查询"><a href="#3-3-空间查询" class="headerlink" title="3.3 空间查询"></a>3.3 空间查询</h3><p>PostGIS 为 PostgreSQL 扩展了许多空间操作功能。以上已经涉及了转换空间坐标格式的 ST_GeomFromText 。多数空间操作以 ST（spatial type）开头，在 PostGIS 文档相应章节有罗列。这里回答一个具体的问题：上面三个城市相互的距离是多少？查询语句怎么写？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gisdb=# SELECT p1.name,p2.name,ST_Distance_Sphere(p1.the_geom,p2.the_geom) FROM cities AS p1, cities AS p2 WHERE p1.id &gt; p2.id;</div><div class="line">      name       |      name       | st_distance_sphere</div><div class="line">-----------------+-----------------+--------------------</div><div class="line"> London, Ontario | London, England |   5875787.03777356</div><div class="line"> East London,SA  | London, England |   9789680.59961472</div><div class="line"> East London,SA  | London, Ontario |   13892208.6782928</div><div class="line">(3 行记录)</div></pre></td></tr></table></figure>
<p>输出显示了距离数据。注意 ‘WHERE’ 部分防止了输出城市到自身的距离（0）或者两个城市不同排列的距离数据（London, England 到 London, Ontario 和 London, Ontario 到 London, England 的距离是一样的）。</p>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL主从流复制部署]]></title>
      <url>http://linbingdong.com/2016/12/08/PostgreSQL%E4%B8%BB%E4%BB%8E%E6%B5%81%E5%A4%8D%E5%88%B6%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>PostgreSQL在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<a id="more"></a>
<p>192.168.20.93上部署主服务器，192.168.20.94上部署从服务器。</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>PostgreSQL在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。</p>
<p>与基于文件日志传送相比，流复制允许保持从服务器更新。 从服务器连接主服务器，其产生的流WAL记录到从服务器， 而不需要等待主服务器写完WAL文件。</p>
<p>PostgreSQL流复制默认是异步的。在主服务器上提交事务和从服务器上变化可见之间有一个小的延迟，这个延迟远小于基于文件日志传送，通常1秒能完成。如果主服务器突然崩溃，可能会有少量数据丢失。</p>
<p>同步复制必须等主服务器和从服务器都写完WAL后才能提交事务。这样在一定程度上会增加事务的响应时间。</p>
<p>配置同步复制仅需要一个额外的配置步骤： <a href="http://www.postgres.cn/docs/9.4/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES" target="_blank" rel="external">synchronous_standby_names</a>必须设置为一个非空值。synchronous_commit也必须设置为on。</p>
<p>这里部署的是异步的流复制。</p>
<p><strong>注:</strong><br>主从服务器所在节点的系统、环境等最好一致。PostgreSQL版本也最好一致，否则可能会有问题。</p>
<h2 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2. 安装部署"></a>2. 安装部署</h2><p>先在192.168.20.93和192.168.20.94均安装PostgreSQL。</p>
<p>具体安装部署步骤见：<a href="http://linbingdong.com/2016/12/08/PostgreSQL%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%EF%BC%88CentOS7%EF%BC%89/">PostgreSQL单机部署（CentOS7）</a></p>
<h3 id="2-1-主服务器"><a href="#2-1-主服务器" class="headerlink" title="2.1 主服务器"></a>2.1 主服务器</h3><p>主服务器为192.168.20.93</p>
<p>先创建一个新目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/pgsql/pg_archive</div></pre></td></tr></table></figure>
<p>1.首先需要创建一个数据库用户进行主从同步。创建用户replica，并赋予登录和复制的权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres# CREATE ROLE replica login replication encrypted password &apos;replica&apos;</div></pre></td></tr></table></figure>
<p>2.修改pg_hba.conf，允许replica用户来同步。</p>
<p>在pg_hba.conf里增加两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">host     all             all          192.168.20.94/32          trust   #允许94连接到主服务器</div><div class="line">host   replication      replica       192.168.20.94/32          md5   #允许94使用replica用户来复制</div></pre></td></tr></table></figure>
<p>这样，就设置了replica这个用户可以从192.168.20.93进行流复制请求。</p>
<p><strong>注：</strong><br>第二个字段必须要填replication</p>
<p>4.修改postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">listen_addresses = &apos;*&apos;   # 监听所有IP</div><div class="line">archive_mode = on  # 允许归档</div><div class="line">archive_command = &apos;cp %p /opt/pgsql/pg_archive/%f&apos;  # 用该命令来归档logfile segment</div><div class="line">wal_level = hot_standby </div><div class="line">max_wal_senders = 32 # 这个设置了可以最多有几个流复制连接，差不多有几个从，就设置几个wal_keep_segments = 256 ＃ 设置流复制保留的最多的xlog数目</div><div class="line">wal_sender_timeout = 60s ＃ 设置流复制主机发送数据的超时时间</div><div class="line">max_connections = 100 # 这个设置要注意下，从库的max_connections必须要大于主库的</div></pre></td></tr></table></figure>
<p>配置完两个文件后重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pg_ctl stop -D /opt/pgsql/data</div><div class="line">pg_ctl start -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>3.测试94能否连接93数据库。在94上运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql -h 192.168.20.93 -U postgres</div></pre></td></tr></table></figure>
<p>看看是否能进入数据库。若可以，则正常。</p>
<h3 id="2-2-从服务器"><a href="#2-2-从服务器" class="headerlink" title="2.2 从服务器"></a>2.2 从服务器</h3><p>1.从主节点拷贝数据到从节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">su - postgres</div><div class="line">rm -rf /opt/pgsql/data/*   #先将data目录下的数据都清空</div><div class="line">pg_basebackup -h 192.168.20.93 -U replica -D /opt/pgsql/data -X stream -P  # 从93拷贝数据到94（基础备份）</div><div class="line">mkdir /opt/pgsql/pg_archive</div></pre></td></tr></table></figure>
<p>2.配置recovery.conf</p>
<p>复制/usr/pgsql-9.4/share/recovery.conf.sample 到 /opt/pgsql/data/recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /usr/pgsql-9.4/share/recovery.conf.sample /opt/pgsql/data/recovery.conf</div></pre></td></tr></table></figure>
<p>修改recovery.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">standby_mode = on    # 说明该节点是从服务器</div><div class="line">primary_conninfo = &apos;host=192.168.20.93 port=5432 user=replica password=replica&apos;  # 主服务器的信息以及连接的用户</div><div class="line">recovery_target_timeline = &apos;latest&apos;</div></pre></td></tr></table></figure>
<p>3.配置postgresql.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wal_level = hot_standby</div><div class="line">max_connections = 1000 ＃ 一般查多于写的应用从库的最大连接数要比较大</div><div class="line">hot_standby = on ＃ 说明这台机器不仅仅是用于数据归档，也用于数据查询</div><div class="line">max_standby_streaming_delay = 30s # 数据流备份的最大延迟时间</div><div class="line">wal_receiver_status_interval = 10s # 多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，这里只是设置最长的间隔时间</div><div class="line">hot_standby_feedback = on # 如果有错误的数据复制，是否向主进行反馈</div></pre></td></tr></table></figure>
<p>配置完后重启从服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pg_ctl stop -D /opt/pgsql/data</div><div class="line">pg_ctl start -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<h2 id="3-验证是否部署成功"><a href="#3-验证是否部署成功" class="headerlink" title="3. 验证是否部署成功"></a>3. 验证是否部署成功</h2><p>在主节点上执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select client_addr,sync_state from pg_stat_replication;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</div><div class="line">  client_addr  | sync_state</div><div class="line">---------------+------------</div><div class="line"> 192.168.20.94 | async</div><div class="line">(1 行记录)</div></pre></td></tr></table></figure>
<p>说明94是从服务器，在接收流，而且是异步流复制。</p>
<p>此外，还可以分别在主、从节点上运行 ps aux | grep postgres 来查看进程：</p>
<p>主服务器（93）上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres 262270  0.0  0.0 337844  2832 ?        Ss   10:14   0:00 postgres: wal sender process replica 192.168.20.94(13059) streaming 0/A002A88</div></pre></td></tr></table></figure>
<p>可以看到有一个 wal sender 进程。</p>
<p>从服务器（94）上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres 569868  0.0  0.0 384604  2960 ?        Ss   10:14   0:02 postgres: wal receiver process   streaming 0/A002B60</div></pre></td></tr></table></figure>
<p>可以看到有一个 wal receiver 进程。</p>
<p>至此，PostgreSQL主从流复制安装部署完成。</p>
<p>在主服务器上插入数据或删除数据，在从服务器上能看到相应的变化。从服务器上只能查询，不能插入或删除。</p>
]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL单机部署（CentOS7）]]></title>
      <url>http://linbingdong.com/2016/12/08/PostgreSQL%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2%EF%BC%88CentOS7%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文介绍Contos7上用yum部署PostgreSQL9.4的过程。</p>
<a id="more"></a>
<h2 id="1-安装PostgreSQL源"><a href="#1-安装PostgreSQL源" class="headerlink" title="1. 安装PostgreSQL源"></a>1. 安装PostgreSQL源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-1.noarch.rpm</div></pre></td></tr></table></figure>
<h2 id="2-执行安装命令"><a href="#2-执行安装命令" class="headerlink" title="2. 执行安装命令"></a>2. 执行安装命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum update</div><div class="line">yum install postgresql94-server postgresql94-contrib</div></pre></td></tr></table></figure>
<h2 id="3-验证是否安装成功"><a href="#3-验证是否安装成功" class="headerlink" title="3. 验证是否安装成功"></a>3. 验证是否安装成功</h2><p>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep postgres</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">postgresql94-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-server-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-libs-9.4.10-1PGDG.rhel7.x86_64</div><div class="line">postgresql94-contrib-9.4.10-1PGDG.rhel7.x86_64</div></pre></td></tr></table></figure>
<p>说明安装成功</p>
<h2 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h2><p>先创建数据存放目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>赋予postgres用户该目录的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown postgres /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>切换到postgres用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su postgres</div></pre></td></tr></table></figure>
<p>执行初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">initdb -D /opt/pgsql/data</div></pre></td></tr></table></figure>
<p>注：</p>
<p>-D 后面是数据库文件存放的目录，如果不指定则默认在/var/lib/pgsql/9.4/data下</p>
<p>初始化的日志如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">属于此数据库系统的文件宿主为用户 &quot;postgres&quot;.</div><div class="line">此用户也必须为服务器进程的宿主.</div><div class="line">数据库簇将使用本地化语言 &quot;zh_CN.UTF-8&quot;进行初始化.</div><div class="line">默认的数据库编码已经相应的设置为 &quot;UTF8&quot;.</div><div class="line">initdb: 无法为本地化语言环境&quot;zh_CN.UTF-8&quot;找到合适的文本搜索配置</div><div class="line">缺省的文本搜索配置将会被设置到&quot;simple&quot;</div><div class="line"></div><div class="line">禁止为数据页生成校验和.</div><div class="line"></div><div class="line">修复已存在目录 /opt/pgsql/data 的权限 ... 成功</div><div class="line">正在创建子目录 ... 成功</div><div class="line">选择默认最大联接数 (max_connections) ... 100</div><div class="line">选择默认共享缓冲区大小 (shared_buffers) ... 128MB</div><div class="line">选择动态共享内存实现 ......posix</div><div class="line">创建配置文件 ... 成功</div><div class="line">在 /opt/pgsql/data/base/1 中创建 template1 数据库 ... 成功</div><div class="line">初始化 pg_authid ...  成功</div><div class="line">初始化dependencies ... 成功</div><div class="line">创建系统视图 ... 成功</div><div class="line">正在加载系统对象描述 ...成功</div><div class="line">创建(字符集)校对规则 ... 成功</div><div class="line">创建字符集转换 ... 成功</div><div class="line">正在创建字典 ... 成功</div><div class="line">对内建对象设置权限 ... 成功</div><div class="line">创建信息模式 ... 成功</div><div class="line">正在装载PL/pgSQL服务器端编程语言...成功</div><div class="line">清理数据库 template1 ... 成功</div><div class="line">拷贝 template1 到 template0 ... 成功</div><div class="line">拷贝 template1 到 template0 ... 成功</div><div class="line">同步数据到磁盘...成功</div><div class="line"></div><div class="line">成功. 您现在可以用下面的命令运行数据库服务器:</div><div class="line"></div><div class="line">    /usr/pgsql-9.4/bin/postmaster -D /opt/pgsql/data/</div><div class="line">或者</div><div class="line">    /usr/pgsql-9.4/bin/pg_ctl -D /opt/pgsql/data/ -l logfile start</div></pre></td></tr></table></figure>
<h2 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h2><p>1.切换到postgres用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su postgres</div></pre></td></tr></table></figure>
<p>这个步骤同样必须以PostgreSQL用户帐户登录来做。 </p>
<p>2.启动服务</p>
<p>没有-D选项，服务器将使用环境变量PGDATA命名的目录； 如果这个环境变量也没有，将导致失败。通常，最好在后台启动postgres，使用下面的 Unix shell 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pg_ctl -D /opt/pgsql/data/ -l logfile start</div></pre></td></tr></table></figure>
<p>3.设置开机自动启动</p>
<p>在Linux系统里，要么往/etc/rc.d/rc.local或 /etc/rc.local文件里加上下面几行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data</div></pre></td></tr></table></figure>
<h2 id="6-创建用户"><a href="#6-创建用户" class="headerlink" title="6. 创建用户"></a>6. 创建用户</h2><p>PostgreSQL使用<em>角色</em>的概念管理数据库访问权限。 根据角色自身的设置不同，一个角色可以看做是一个数据库用户，或者一组数据库用户。 角色可以拥有数据库对象(比如表)以及可以把这些对象上的权限赋予其它角色， 以控制谁拥有访问哪些对象的权限。另外，我们也可以把一个角色的<em>成员</em> 权限赋予其它角色，这样就允许成员角色使用分配给另一个角色的权限。<br>角色的概念替换了”用户”和”组”。在PostgreSQL 版本 8.1 之前，用户和组是独立类型的记录，但现在它们只是角色。 任何角色都可以是一个用户、一个组、或者两者。</p>
<p>数据库角色从概念上与操作系统用户是完全无关的。在实际使用中把它们对应起来可能比较方便， 但这不是必须的。数据库角色在整个数据库集群中是全局的(而不是每个库不同)。 要创建一个角色，使用 SQL 命令<a href="http://www.postgres.cn/docs/9.4/sql-createrole.html" target="_blank" rel="external">CREATE ROLE</a>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE ROLE name;</div></pre></td></tr></table></figure>
<p><em>name</em>遵循 SQL 标识的规则：要么完全没有特殊字符， 要么用双引号包围(实际上你通常会给命令增加额外的选项，比如LOGIN。 下面显示更多细节)。要删除一个现有角色，使用类似的<a href="http://www.postgres.cn/docs/9.4/sql-droprole.html" target="_blank" rel="external">DROP ROLE</a>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DROP ROLE name;</div></pre></td></tr></table></figure>
<p>为了方便，程序<a href="http://www.postgres.cn/docs/9.4/app-createuser.html" target="_blank" rel="external">createuser</a>和<a href="http://www.postgres.cn/docs/9.4/app-dropuser.html" target="_blank" rel="external">dropuser</a> 提供了对了这些 SQL 命令的封装。我们可以在 shell 命令上直接调用它们：</p>
<p>直接在shell里输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createuser lbd;</div></pre></td></tr></table></figure>
<p>这样就创建了lbd这个角色。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dropuser lbd;</div></pre></td></tr></table></figure>
<p>这样就创建了lbd这个角色。</p>
<p>要检查现有角色的集合，可以检查pg_roles系统表，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT rolname FROM pg_roles;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# SELECT rolname FROM pg_roles;</div><div class="line"> rolname</div><div class="line">----------</div><div class="line"> postgres</div><div class="line"> lbd</div><div class="line">(2 行记录)</div></pre></td></tr></table></figure>
<p><a href="http://www.postgres.cn/docs/9.4/app-psql.html" target="_blank" rel="external">psql</a>的元命令\du<br>也可以用于列出现有角色。</p>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">postgres=# \du</div><div class="line">                        角色列表</div><div class="line"> 角色名称 |               属性                | 成员属于</div><div class="line">---------+----------------------------------+----------</div><div class="line"> lbd     |                                   | &#123;&#125;</div><div class="line"> postgres| 超级用户, 建立角色, 建立 DB, 复制     | &#123;&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> PostgreSQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关系数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[215] Kth Largest Element in an Array]]></title>
      <url>http://linbingdong.com/2016/12/06/LeetCode%5B215%5D%20Kth%20Largest%20Element%20in%20an%20Array/</url>
      <content type="html"><![CDATA[<p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>For example,<br>Given [3,2,1,5,6,4] and k = 2, return 5.</p>
<p>Note:<br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p>
<p><strong>分析:</strong></p>
<p>PriorityQueue内部是由堆实现的。每次remove()都会将最小的元素删除。</p>
<p>建一个PriorityQueue，将数组元素都加入该队列。然后移出nums.length-k个，下一个出来的就是第K大的。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)</div><div class="line">            q.add(nums[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - k;i++)</div><div class="line">            q.remove();</div><div class="line">        <span class="keyword">return</span> q.peek();     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[137] Single Number II]]></title>
      <url>http://linbingdong.com/2016/12/05/LeetCode%5B137%5D%20Single%20Number%20II/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears three times except for one. Find that single one.</p>
<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>思路:</strong></p>
<p>创建一个sizeof(int)长度的数组，count[sizeof(int)],count[i]表示在i位出现的1的次数。如果count[i]是3的倍数，则忽略；否则取出来组成result。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> W = Integer.SIZE;</div><div class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[W];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; W; j++)&#123;</div><div class="line">                count[j] += (nums[i] &gt;&gt; j) &amp; <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W; i++)&#123;</div><div class="line">            count[i] %= <span class="number">3</span>;</div><div class="line">            result += count[i] &lt;&lt; i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[80] Remove Duplicates from Sorted Array II]]></title>
      <url>http://linbingdong.com/2016/12/04/LeetCode%5B80%5D%20Remove%20Duplicates%20from%20Sorted%20Array%20II/</url>
      <content type="html"><![CDATA[<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p>
<p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn’t matter what you leave beyond the new length.</p>
<p>Subscribe to see which companies asked this question</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nums.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> nums.length;</div><div class="line">        <span class="keyword">int</span> index=<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] != nums[index-<span class="number">2</span>])</div><div class="line">              nums[index++] = nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[26] Remove Duplicates from Sorted Array]]></title>
      <url>http://linbingdong.com/2016/12/04/LeetCode%5B26%5D%20Remove%20Duplicates%20from%20Sorted%20Array/</url>
      <content type="html"><![CDATA[<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; nums.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] != nums[index-<span class="number">1</span>])</div><div class="line">              nums[index++] = nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[136] Single Number]]></title>
      <url>http://linbingdong.com/2016/12/04/LeetCode%5B136%5D%20Single%20Number/</url>
      <content type="html"><![CDATA[<p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p><strong>Note:</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>思路:</strong></p>
<p>直接用异或搞定，简单粗暴效率高。</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)</div><div class="line">            result ^= nums[i];</div><div class="line">        <span class="keyword">return</span> result;        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洗牌]]></title>
      <url>http://linbingdong.com/2016/12/04/%E6%B4%97%E7%89%8C/</url>
      <content type="html"><![CDATA[<p>洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。 </p>
<p><strong>输入描述:</strong></p>
<p>第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,…,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。</p>
<p><strong>输出描述:</strong></p>
<p>对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。</p>
<p><strong>输入例子:</strong></p>
<p>3<br>3 1<br>1 2 3 4 5 6<br>3 2<br>1 2 3 4 5 6<br>2 2<br>1 1 1 1</p>
<p><strong>输出例子:</strong></p>
<p>1 4 2 5 3 6<br>1 5 4 3 2 6<br>1 1 1 1</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2016/10/31.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> group = sc.nextInt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; group;i++)&#123;</div><div class="line">            <span class="keyword">int</span> n = sc.nextInt();</div><div class="line">            <span class="keyword">int</span> k = sc.nextInt();</div><div class="line">            <span class="keyword">int</span>[] cards = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*n];</div><div class="line">            <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>*n];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">2</span>*n ; a++)&#123;</div><div class="line">                cards[a] = sc.nextInt();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>;b &lt; k;b++)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>;c &lt; <span class="number">2</span>*n;c += <span class="number">2</span>)&#123;</div><div class="line">                    temp[c] = cards[c/<span class="number">2</span>];</div><div class="line">                    temp[c+<span class="number">1</span>] = cards[c/<span class="number">2</span>+n];</div><div class="line">                &#125;</div><div class="line"> </div><div class="line">                cards = temp.clone();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>;d &lt; <span class="number">2</span>*n-<span class="number">1</span>;d++)&#123;</div><div class="line">                System.out.print(cards[d] + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(cards[<span class="number">2</span>*n-<span class="number">1</span>]);          </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优雅的点]]></title>
      <url>http://linbingdong.com/2016/12/04/%E4%BC%98%E9%9B%85%E7%9A%84%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>小易有一个圆心在坐标原点的圆，小易知道圆的半径的平方。小易认为在圆上的点而且横纵坐标都是整数的点是优雅的，小易现在想寻找一个算法计算出优雅的点的个数，请你来帮帮他。<br>例如：半径的平方如果为25<br>优雅的点就有：(+/-3, +/-4), (+/-4, +/-3), (0, +/-5) (+/-5, 0)，一共12个点。 </p>
<p><strong>输入描述:</strong></p>
<p>输入为一个整数，即为圆半径的平方,范围在32位int范围内。</p>
<p><strong>输出描述:</strong></p>
<p>输出为一个整数，即为优雅的点的个数</p>
<p><strong>输入例子:</strong></p>
<p>25</p>
<p><strong>输出例子:</strong></p>
<p>12</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2016/10/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> rSquare = sc.nextInt();</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">double</span> r = Math.sqrt(rSquare);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</div><div class="line">            <span class="keyword">double</span> j = Math.sqrt(rSquare - i*i);</div><div class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)j == j)&#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(count&lt;&lt;<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回文序列]]></title>
      <url>http://linbingdong.com/2016/12/04/%E5%9B%9E%E6%96%87%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>如果一个数字序列逆置之后跟原序列是一样的就称这样的数字序列为回文序列。例如：<br>{1, 2, 1}, {15, 78, 78, 15} , {112} 是回文序列,<br>{1, 2, 2}, {15, 78, 87, 51} ,{112, 2, 11} 不是回文序列。<br>现在给出一个数字序列，允许使用一种转换操作：<br>选择任意两个相邻的数，然后从序列移除这两个数，并用这两个数字的和插入到这两个数之前的位置(只插入一个和)。<br>现在对于所给序列要求出最少需要多少次操作可以将其变成回文序列。</p>
<p><strong>输入描述:</strong></p>
<p>输入为两行，第一行为序列长度n ( 1 ≤ n ≤ 50)<br>第二行为序列中的n个整数item[i]  (1 ≤ iteam[i] ≤ 1000)，以空格分隔。</p>
<p><strong>输出描述:</strong></p>
<p>输出一个数，表示最少需要的转换次数</p>
<p><strong>输入例子:</strong></p>
<p>4<br>1 1 1 3</p>
<p><strong>输出例子:</strong></p>
<p>2</p>
<p><strong>代码:</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2016/10/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> n = sc.nextInt();</div><div class="line">            <span class="keyword">int</span>[] inputArray = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">            <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</div><div class="line">                inputArray[i] = sc.nextInt();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> head = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> tail = n-<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (head &lt; tail)&#123;</div><div class="line">                <span class="keyword">if</span> (inputArray[head] &lt; inputArray[tail])&#123;</div><div class="line">                    inputArray[++head] += inputArray[head-<span class="number">1</span>];</div><div class="line">                    times++;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputArray[head] &gt; inputArray[tail])&#123;</div><div class="line">                    inputArray[--tail] += inputArray[tail+<span class="number">1</span>];</div><div class="line">                    times++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    head++;</div><div class="line">                    tail--;</div><div class="line">                &#125;</div><div class="line"> </div><div class="line">            &#125;</div><div class="line">            System.out.println(times);</div><div class="line">        &#125;</div><div class="line">        sc.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[买苹果]]></title>
      <url>http://linbingdong.com/2016/12/04/%E4%B9%B0%E8%8B%B9%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供6个每袋和8个每袋的包装(包装不可拆分)。 可是小易现在只想购买恰好n个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好n个苹果，小易将不会购买。 </p>
<a id="more"></a>
<p><strong>输入描述:</strong></p>
<p>输入一个整数n，表示小易想购买n(1 ≤ n ≤ 100)个苹果</p>
<p><strong>输出描述:</strong></p>
<p>输出一个整数表示最少需要购买的袋数，如果不能买恰好n个苹果则输出-1</p>
<p><strong>输入例子:</strong></p>
<p>20</p>
<p><strong>输出例子:</strong></p>
<p>3</p>
<p><strong>代码:</strong></p>
<!--more-->
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">float</span> n = sc.nextInt();</div><div class="line">        <span class="keyword">if</span> (n %<span class="number">2</span> == <span class="number">1</span> || (n &lt;= <span class="number">10</span> &amp;&amp; n != <span class="number">8</span> &amp;&amp; n!=<span class="number">6</span>))&#123;</div><div class="line">            System.out.println(-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            System.out.println((<span class="keyword">int</span>)Math.ceil(n/<span class="number">8</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算糖果]]></title>
      <url>http://linbingdong.com/2016/12/04/%E8%AE%A1%E7%AE%97%E7%B3%96%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>A,B,C三个人是好朋友,每个人手里都有一些糖果,我们不知道他们每个人手上具体有多少个糖果,但是我们知道以下的信息：<br>A - B, B - C, A + B, B + C. 这四个数值.每个字母代表每个人所拥有的糖果数.<br>现在需要通过这四个数值计算出每个人手里有多少个糖果,即A,B,C。这里保证最多只有一组整数A,B,C满足所有题设条件。 </p>
<a id="more"></a>
<p><strong>输入描述:</strong></p>
<p>输入为一行，一共4个整数，分别为A - B，B - C，A + B，B + C，用空格隔开。<br>范围均在-30到30之间(闭区间)。</p>
<p><strong>输出描述:</strong></p>
<p>输出为一行，如果存在满足的整数A，B，C则按顺序输出A，B，C，用空格隔开，行末无空格。<br>如果不存在这样的整数A，B，C，则输出No</p>
<p><strong>输入例子:</strong></p>
<p>1 -2 3 4</p>
<p><strong>输出例子:</strong></p>
<p>2 1 3</p>
<p><strong>代码:</strong></p>
<!--more-->
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by lbd on 2016/10/27.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> x1,x2,x3,x4;</div><div class="line">        <span class="keyword">float</span> a,b,c;</div><div class="line">        <span class="keyword">while</span> (sc.hasNext()) &#123;</div><div class="line">            x1 = sc.nextInt();</div><div class="line">            x2 = sc.nextInt();</div><div class="line">            x3 = sc.nextInt();</div><div class="line">            x4 = sc.nextInt();</div><div class="line">            a = (x3+x1)/<span class="number">2</span>;</div><div class="line">            b = (x3-x1)/<span class="number">2</span>;</div><div class="line">            c = (x4-x2)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (a - (x3+x1)/<span class="number">2</span> !=<span class="number">0</span> || b - (x3-x1)/<span class="number">2</span> !=<span class="number">0</span> || c - (x4-x2)/<span class="number">2</span> !=<span class="number">0</span> || b - (x4+x2)/<span class="number">2</span> !=<span class="number">0</span> )&#123;</div><div class="line">                System.out.println(<span class="string">"No"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println((<span class="keyword">int</span>)a + <span class="string">" "</span> + (<span class="keyword">int</span>)b + <span class="string">" "</span> + (<span class="keyword">int</span>)c);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix安装配置]]></title>
      <url>http://linbingdong.com/2016/11/30/Phoenix%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>介绍Phoenix安装配置的过程，记录在安装配置过程中遇到的问题及解决方案。</p>
<a id="more"></a>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Phoenix最早是saleforce的一个开源项目，后来成为Apache基金的顶级项目</p>
<p>Phoenix是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表、插入数据和对HBase数据进行查询</p>
<p>因此Phoenix跟HBase是离不开的，Phoenix的安装也是基于HBase的。在安装Phoenix之前，请确保集群上已经安装了Hadoop集群跟HBase集群</p>
<p>本集群上已部署CHD5.5.1版本的Hadooop（2.6.0）和HBase（1.0.0）</p>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">192.168.20.100 node-20-100 hdfs-master1 nn1     jn1 hmaster1</div><div class="line">192.168.20.101 node-20-101 hdfs-master2 nn2 zk1 jn2 hmaster2        Phoenix</div><div class="line">192.168.20.102 node-20-102 hdfs-slave1  dn1 zk2 jn3 hregionserver1</div><div class="line">192.168.20.103 node-20-103 hdfs-slave2  dn2 zk3 jn4 hregionserver2</div><div class="line">192.168.20.104 node-20-104 hdfs-slave3  dn3 zk4 jn5 hregionserver3</div><div class="line">192.168.20.105 node-20-105 hdfs-slave4  dn4 zk5     hregionserver4</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：Cloudera官方并不支持Phoenix，也就是说从Phoenix官网下的预编译的包在CDH安装的HBase上根本不能运行，Phoenix官网对此也没有任何说明！！！刚开始按照Phoenix官网给出的步骤安装完Phoenix后运行报错，幸好有StackOverflow，才找到了原因，并且找到解决方案。链接如下：<br><a href="http://stackoverflow.com/questions/31849454/using-phoenix-with-cloudera-hbase-installed-from-repo" target="_blank" rel="external">http://stackoverflow.com/questions/31849454/using-phoenix-with-cloudera-hbase-installed-from-repo</a></p>
<p>解决方案：<br>需要自己从Phoenix官网下载跟HBase版本对应的Phoenix版本（Phoenix 4.x版本均支持HBase 1.0.0）的源码来编译，得到编译后的两个相关jar包。具体安装步骤如下</p>
<h2 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2.安装配置"></a>2.安装配置</h2><p>Phoenix最新版本是4.8，4.x均支持HBase 1.0.0，这里选用Phoenix 4.6.0版本</p>
<h3 id="2-1下载并解压"><a href="#2-1下载并解压" class="headerlink" title="2.1下载并解压"></a>2.1下载并解压</h3><p>从Phoenix官网下载预编译的<code>phoenix-4.6.0-HBase-1.0-bin.tar.gz</code></p>
<p>Phoenix客户端所在的节点最好安装有ZooKeeper，方便后续操作</p>
<p>这里选择<code>192.168.20.101</code>节点作为Phoenix客户端</p>
<ul>
<li>切换到/opt目录下：<code>$ cd /opt</code></li>
<li>wget：<code>$ wget &#39;http://archive.apache.org/dist/phoenix/phoenix-4.6.0-HBase-1.0/bin/phoenix-4.6.0-HBase-1.0-bin.tar.gz&#39;</code></li>
<li>解压：<code>$ tar -xzvf phoenix-4.6.0-HBase-1.0-bin.tar.gz</code></li>
<li>建立软链接：<code>$ ln -s phoenix-4.6.0-HBase-1.0-bin phoenix</code></li>
</ul>
<h3 id="2-2编译源码"><a href="#2-2编译源码" class="headerlink" title="2.2编译源码"></a>2.2编译源码</h3><p>如果从Phoenix官网下载4.6.0的源码来编译，需要自己修改pom.xml文件，比较麻烦。Github上已经有人把修改过pom.xml文件的源码上传了，链接如下：<br><a href="https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.6-HBase-1.0-cdh5.5" target="_blank" rel="external">https://github.com/chiastic-security/phoenix-for-cloudera/tree/4.6-HBase-1.0-cdh5.5</a></p>
<p>下载该链接的源码，用maven进行编译</p>
<ul>
<li>进入<code>phoenix-for-cloudera-4.6-HBase-1.0-cdh5.5</code>目录</li>
<li>$ <code>mvn package -DskipTests</code></li>
</ul>
<p>编译成功后显示如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2b6ef1568b8a332d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="compile succeed"></p>
<h3 id="2-3替换"><a href="#2-3替换" class="headerlink" title="2.3替换"></a>2.3替换</h3><p>将编译后<code>`phoenix-for-cloudera-4.6-HBase-1.0-cdh5.5/phoenix-assembly/target</code>目录下的<code>phoenix-4.6.0-cdh5.5.1-client.jar</code>和<code>phoenix-4.6.0-cdh5.5.1-server.jar</code>分别替换<code>/opt/phoenix</code>目录下的<code>phoenix-4.6.0-HBase-1.0-client.jar</code>和<code>phoenix-4.6.0-HBase-1.0-server.jar</code></p>
<h3 id="2-4将相关jar拷贝到HBase的lib目录下"><a href="#2-4将相关jar拷贝到HBase的lib目录下" class="headerlink" title="2.4将相关jar拷贝到HBase的lib目录下"></a>2.4将相关jar拷贝到HBase的lib目录下</h3><p>拷贝<code>phoenix-4.6.0-cdh5.5.1-server.jar</code>到集群上每个HBase的lib目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ cp phoenix-4.6.0-cdh5.5.1-server.jar /usr/lib/hbase/lib</div><div class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-100:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</div><div class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-102:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</div><div class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-103:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</div><div class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-104:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</div><div class="line">$ scp phoenix-4.6.0-cdh5.5.1-server.jar node-20-105:/usr/lib/hbase/lib/phoenix-4.6.0-cdh5.5.1-server.jar</div></pre></td></tr></table></figure>
<h3 id="2-5配置Phoenix客户端的CLASSPATH"><a href="#2-5配置Phoenix客户端的CLASSPATH" class="headerlink" title="2.5配置Phoenix客户端的CLASSPATH"></a>2.5配置Phoenix客户端的CLASSPATH</h3><p>将<code>phoenix-4.6.0-cdh5.5.1-client.jar</code>添加到Phoenix客户端的CLASSPATH中，这里是192.168.20.101节点</p>
<p>在/etc/profile.d目录下新建phoenix.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=.:/opt/phoenix/phoenix-4.6.0-cdh5.5.1-client.jar</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source phoenix.sh</div></pre></td></tr></table></figure>
<h3 id="2-6配置hbase-site-xml"><a href="#2-6配置hbase-site-xml" class="headerlink" title="2.6配置hbase-site.xml"></a>2.6配置hbase-site.xml</h3><ul>
<li>Master的hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;     &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.master.loadbalancer.class&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.coprocessor.master.classes&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.phoenix.hbase.index.master.IndexMasterObserver&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</div><div class="line">  &lt;value&gt;300000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Region Server的hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.region.server.rpc.scheduler.factory.class&lt;/name&gt; </div><div class="line">&lt;value&gt;org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory&lt;/value&gt;</div><div class="line">&lt;description&gt;Factory to create the Phoenix RPC Scheduler that usesseparate queues for index and metadata updates&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;hbase.rpc.controllerfactory.class&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory&lt;/value&gt;</div><div class="line">&lt;description&gt;Factory to create the Phoenix RPCScheduler that uses separate queues for index and metadataupdates&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hbase.coprocessor.regionserver.classes&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.hadoop.hbase.regionserver.LocalIndexMerger&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</div><div class="line">  &lt;value&gt;300000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<p>至此，Phoenix安装配置完毕</p>
<h2 id="3-验证是否可用"><a href="#3-验证是否可用" class="headerlink" title="3.验证是否可用"></a>3.验证是否可用</h2><h3 id="3-1进入CLI"><a href="#3-1进入CLI" class="headerlink" title="3.1进入CLI"></a>3.1进入CLI</h3><p>切换到/opt/phoenix/bin目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chmod 777 sqlline.py</div><div class="line">$ chmod 777 psql.py</div></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./sqlline.py localhost</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6811f8b8fff76e7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="install success"></p>
<p>说明Phoenix安装成功</p>
<h3 id="3-2在终端执行SQL脚本"><a href="#3-2在终端执行SQL脚本" class="headerlink" title="3.2在终端执行SQL脚本"></a>3.2在终端执行SQL脚本</h3><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./sqlline.py localhost ../examples/STOCK_SYMBOL.sql</div></pre></td></tr></table></figure></p>
<p>报错：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a01d00372d5f552f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="null.png"></p>
<p>解决：</p>
<p>将<code>examples/STOCK_SYMBOL.sql</code>里第一行<code>-- creates stock table with single row</code>删掉</p>
<p>重新运行：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-65804dfefcc6bdbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="null.png"></p>
<h3 id="3-3加载数据"><a href="#3-3加载数据" class="headerlink" title="3.3加载数据"></a>3.3加载数据</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ psql.py localhost ../examples/web_stat.sql ../examples/web_stat.csv ../examples/web_stat_queries.sql</div></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8efc41108666544d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix查询经验总结]]></title>
      <url>http://linbingdong.com/2016/11/30/Phoenix%E6%9F%A5%E8%AF%A2%E6%B5%8B%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>适当的索引能够让极大提升查询速度，因此在Phoenix查询的测试用例中包括了对有索引跟无索引的查询性能的比较。测试过程中遇到一些问题，经过探索，得到一些结论，在此记录下来。</p>
<a id="more"></a>
<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>适当的索引能够让极大提升查询速度，因此在Phoenix查询的测试用例中包括了对有索引跟无索引的查询性能的比较。测试过程中遇到一些问题，在此记录下来。</p>
<h2 id="2-问题及解决"><a href="#2-问题及解决" class="headerlink" title="2. 问题及解决"></a>2. 问题及解决</h2><h3 id="2-1-创建索引时报错，报错如下："><a href="#2-1-创建索引时报错，报错如下：" class="headerlink" title="2.1. 创建索引时报错，报错如下："></a>2.1. 创建索引时报错，报错如下：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//创建索引语句：</div><div class="line">0: jdbc:phoenix:localhost&gt; CREATE INDEX ind_1 ON TESTINPUT(ff1);</div><div class="line">//报错：</div><div class="line">Error: ERROR 1029 (42Y88): Mutable secondary indexes must have the hbase.regionserver.wal.codec property set to org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec in the hbase-sites.xml of every region server tableName=IND_1 (state=42Y88,code=1029)</div><div class="line">java.sql.SQLException: ERROR 1029 (42Y88): Mutable secondary indexes must have the hbase.regionserver.wal.codec property set to org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec in the hbase-sites.xml of every region server tableName=IND_1</div><div class="line">	at org.apache.phoenix.exception.SQLExceptionCode$Factory$1.newException(SQLExceptionCode.java:396)</div><div class="line">	at org.apache.phoenix.exception.SQLExceptionInfo.buildException(SQLExceptionInfo.java:145)</div><div class="line">	at org.apache.phoenix.schema.MetaDataClient.createIndex(MetaDataClient.java:1162)</div><div class="line">	at org.apache.phoenix.compile.CreateIndexCompiler$1.execute(CreateIndexCompiler.java:95)</div><div class="line">	at org.apache.phoenix.jdbc.PhoenixStatement$2.call(PhoenixStatement.java:322)</div><div class="line">	at org.apache.phoenix.jdbc.PhoenixStatement$2.call(PhoenixStatement.java:314)</div><div class="line">	at org.apache.phoenix.call.CallRunner.run(CallRunner.java:53)</div><div class="line">	at org.apache.phoenix.jdbc.PhoenixStatement.executeMutation(PhoenixStatement.java:312)</div><div class="line">	at org.apache.phoenix.jdbc.PhoenixStatement.execute(PhoenixStatement.java:1435)</div><div class="line">	at sqlline.Commands.execute(Commands.java:822)</div><div class="line">	at sqlline.Commands.sql(Commands.java:732)</div><div class="line">	at sqlline.SqlLine.dispatch(SqlLine.java:808)</div><div class="line">	at sqlline.SqlLine.begin(SqlLine.java:681)</div><div class="line">	at sqlline.SqlLine.start(SqlLine.java:398)</div><div class="line">	at sqlline.SqlLine.main(SqlLine.java:292)</div></pre></td></tr></table></figure>
<ul>
<li><p>原因：Phoenix支持两种索引：可变索引跟不可变索引。在可变表上建的索引是可变索引，在不可变表上建的索引是不可变索引。可变索引是指插入或删除数据的时候会同时更新索引；不可变索引适用于只写入一次不再更改的表，索引只建立一次，再插入数据不会更新索引。上面使用的语句是创建可变索引，需要在hbase-site.xml中进行相关配置使其支持可变索引（不可变索引无需另外配置，默认支持）。</p>
</li>
<li><p>解决：对HMaster和HRegionserver节点分别增加配置,然后重启HBase集群</p>
<ul>
<li>HMaster</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> &lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</div><div class="line">   &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line"> &lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.master.loadbalancer.class&lt;/name&gt;</div><div class="line">  &lt;value&gt;org.apache.phoenix.hbase.index.balancer.IndexLoadBalancer&lt;/value&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line"> &lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.coprocessor.master.classes&lt;/name&gt;</div><div class="line">  &lt;value&gt;org.apache.phoenix.hbase.index.master.IndexMasterObserver&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<ul>
<li>HRegionserver</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.regionserver.wal.codec&lt;/name&gt;</div><div class="line">    &lt;value&gt;org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec&lt;/value&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line"> &lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.region.server.rpc.scheduler.factory.class&lt;/name&gt; </div><div class="line">   &lt;value&gt;org.apache.hadoop.hbase.ipc.PhoenixRpcSchedulerFactory&lt;/value&gt;</div><div class="line">   &lt;description&gt;Factory to create the Phoenix RPC Scheduler that usesseparate queues for index and metadata updates&lt;/description&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line"> &lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.rpc.controllerfactory.class&lt;/name&gt;</div><div class="line">   &lt;value&gt;org.apache.hadoop.hbase.ipc.controller.ServerRpcControllerFactory&lt;/value&gt;</div><div class="line">   &lt;description&gt;Factory to create the Phoenix RPCScheduler that uses separate queues for index and metadataupdates&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.coprocessor.regionserver.classes&lt;/name&gt;</div><div class="line">   &lt;value&gt;org.apache.hadoop.hbase.regionserver.LocalIndexMerger&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2-对10亿数据查询时，报错如下："><a href="#2-2-对10亿数据查询时，报错如下：" class="headerlink" title="2.2. 对10亿数据查询时，报错如下："></a>2.2. 对10亿数据查询时，报错如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">16/11/29 10:33:50 WARN client.ScannerCallable: Ignore, probably already closed</div><div class="line">org.apache.hadoop.hbase.regionserver.LeaseException: org.apache.hadoop.hbase.regionserver.LeaseException: lease &apos;1132&apos; does not exist</div><div class="line">	at org.apache.hadoop.hbase.regionserver.Leases.removeLease(Leases.java:221)</div><div class="line">	at org.apache.hadoop.hbase.regionserver.Leases.cancelLease(Leases.java:206)</div><div class="line">...</div><div class="line">org.apache.phoenix.exception.PhoenixIOException: org.apache.phoenix.exception.PhoenixIOException: Failed after attempts=36, exceptions:</div><div class="line">Tue Nov 29 10:33:50 CST 2016, null, java.net.SocketTimeoutException: callTimeout=60000, callDuration=60321: row &apos;��s,d&apos; on table &apos;TEST11&apos; at region=TEST11,\x11\x00\x00\x00\x00\x00\x00\x00\x00,1479985615575.c3adb68acea8d88d223bffd3acc16c2e., hostname=node-20-105,60020,1480385981798, seqNum=1244662</div><div class="line">...</div><div class="line">Caused by: org.apache.hadoop.hbase.ipc.CallTimeoutException: Call id=18173, waitTime=60001, operationTimeout=60000 expired.</div><div class="line">	at org.apache.hadoop.hbase.ipc.Call.checkAndSetTimeout(Call.java:70)</div><div class="line">	at org.apache.hadoop.hbase.ipc.RpcClientImpl.call(RpcClientImpl.java:1197)</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>原因：</li>
</ul>
<p>某些查询需要很长时间才能返回结果，被HBase的超时机制杀掉了。</p>
<ul>
<li>思路：</li>
</ul>
<p>增大超时时间，在hbase-site.xml里增加了如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.rpc.timeout&lt;/name&gt;</div><div class="line">  &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.client.operation.timeout&lt;/name&gt;</div><div class="line">  &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.client.scanner.timeout.period&lt;/name&gt;</div><div class="line">  &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.regionserver.lease.period&lt;/name&gt;</div><div class="line">  &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;phoenix.query.timeoutMs&lt;/name&gt;</div><div class="line"> &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;phoenix.query.keepAliveMs&lt;/name&gt;</div><div class="line"> &lt;value&gt;600000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.client.ipc.pool.type&lt;/name&gt;</div><div class="line">   &lt;value&gt;RoundRobinPool&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;hbase.client.ipc.pool.size&lt;/name&gt;</div><div class="line">   &lt;value&gt;10&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<p>最终虽然配置生效了，但是还是报同样的错。已经将网上说的可能的配置项都配了还是无法解决超时问题。等增加了机器，查询时间变短，10亿数据的查询应该就没有超时问题了。</p>
<h2 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h2><ul>
<li>不可变索引默认支持，不需要另外配置；可变索引需要如上添加配置才能支持</li>
<li><p>创建不可变表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE TABLENAME (pk long PRIMARY KEY,col1 int) IMMUTABLE_ROWS=true;</div></pre></td></tr></table></figure>
</li>
<li><p>创建索引有以下几种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1);</div><div class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1,COLUMN2);</div><div class="line">CREATE INDEX ind_name ON TABLENAME(COLUMN1) INCLUDE(COLUMN2);</div></pre></td></tr></table></figure>
</li>
<li><p>执行查询的时候，Phoenix查询优化器将选择合适的索引。可以使用explain plan进行查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">0: jdbc:phoenix:localhost&gt; explain select ff3,if1 from testinput where ff3 &gt;= 0.7 and ff3 &lt; 0.9 order by if1;</div><div class="line">+------------------------------------------+</div><div class="line">|                   PLAN                   |</div><div class="line">+------------------------------------------+</div><div class="line">| CLIENT 1-CHUNK PARALLEL 1-WAY RANGE SCAN OVER IND_4 [0.7] - [0.9] |</div><div class="line">|     SERVER SORTED BY [&quot;IF1&quot;]             |</div><div class="line">| CLIENT MERGE SORT                        |</div><div class="line">+------------------------------------------+</div></pre></td></tr></table></figure>
</li>
<li><p>除非所有查询使用的列被索引或者覆盖列，否则二级索引不会被使用</p>
</li>
<li>建索引的时候不要包括primary key，否则索引不会被使用；可以单独对primary key建索引</li>
<li>where条件里有primary key的时候会使用Range Scan，因为表本来就是按照primary key的顺序排列的</li>
<li>primary key在插入时是自动排序的，插入完成后primary key保持有序（如果该表只有一个分区，则全局有序；如果有多个分区，则在每个分区内部有序，并非全局有序）</li>
<li>对某几个（1个或多个）列建索引，则会生成一张索引表，该表由创建索引的这几个列组成，并在最后一列添加primary key列。也就是说索引表也是一张表，只不过该表列数比原表少。</li>
<li>索引表的第一列是有序的</li>
<li>upsert into一个跟之前一样的primary key，会将之前那个primary key的记录替换成新的。</li>
<li>phoenix虽然不支持update语句，但是可以用upsert into tablename(id,columnname) values(id,newvalue)来实现同样的功能。</li>
<li>local index 对应的索引表的分区跟表的分区在同一个region server上（索引表分区数必须跟表分区数一样）</li>
<li>global index 对应的索引表的分区跟表的分区不一定在同一个region server上（索引表分区数必须跟表分区数一样）</li>
<li>对一张表建了多个local index，对于HBase来讲，其实只存了一张索引表。但是global index则不同。</li>
</ul>
<h2 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h2><ul>
<li><a href="https://github.com/forcedotcom/phoenix/wiki/Secondary-Indexing" target="_blank" rel="external">https://github.com/forcedotcom/phoenix/wiki/Secondary-Indexing</a></li>
<li><a href="http://phoenix.apache.org/language/index.html#create_index" target="_blank" rel="external">http://phoenix.apache.org/language/index.html#create_index</a></li>
<li><a href="http://blog.csdn.net/jiangshouzhuang/article/details/52387718" target="_blank" rel="external">http://blog.csdn.net/jiangshouzhuang/article/details/52387718</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix表和索引分区数对插入和查询性能的影响]]></title>
      <url>http://linbingdong.com/2016/11/30/Phoenix%E8%A1%A8%E5%92%8C%E7%B4%A2%E5%BC%95%E5%88%86%E5%8C%BA%E6%95%B0%E5%AF%B9%E6%8F%92%E5%85%A5%E5%92%8C%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      <content type="html"><![CDATA[<p>Phoenix在建表和建索引的时候可以指定SALT_BUCKETS数，即分区数，从而提高插入和查询性能。</p>
<p>通过指定分区，可以将对一张表的操作分配给多个Region Server进行处理，从而提高效率。 </p>
<a id="more"></a>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-HBase概述"><a href="#1-1-HBase概述" class="headerlink" title="1.1 HBase概述"></a>1.1 HBase概述</h3><p>HBase由master节点和region server节点组成。在100-105集群上，100和101是master节点，102-105是region server节点。</p>
<p>每个region server管理很多region，每个region只会属于一个region server。一个region的大小可以自己配置（100-105集群上一个region大小为100GB）。</p>
<p>在HBase中创建一张表时，刚开始默认是一个region，若表越来越大，超过一个region的大小，则会split成两个region。当然也可以在建表的时候预分区几个region，如果表的大小超过了预分区的region的大小也会split。</p>
<h3 id="1-2-Phoenix分区"><a href="#1-2-Phoenix分区" class="headerlink" title="1.2 Phoenix分区"></a>1.2 Phoenix分区</h3><p>Phoenix在建表和建索引的时候可以指定SALT_BUCKETS数，即分区数，从而提高插入和查询性能。方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS test1 (pk BIGINT PRIMARY KEY,ff1 DOUBLE,sf1 VARCHAR,if1 INTEGER) SALT_BUCKETS=20;</div></pre></td></tr></table></figure>
<p>通过指定分区，可以将对一张表的操作分配给多个Region Server进行处理，从而提高效率。 </p>
<p>但是官网上并没有对分区数应设为多少比较合适给出建议，网上有博客说应该指定为region server总CPU核数的0.5~1倍之间。测试集群region sever每个节点40核，4个节点共160核。</p>
<h3 id="1-3-目的"><a href="#1-3-目的" class="headerlink" title="1.3 目的"></a>1.3 目的</h3><p>测试并确定分区数对Phoenix插入和查询性能的影响，确定当前集群在表分区和索引分区数分别为多少的情况下性能最优，接下来Phoenix性能测试采用该最优方案。</p>
<h2 id="2-方案"><a href="#2-方案" class="headerlink" title="2. 方案"></a>2. 方案</h2><h3 id="2-1-方案设计"><a href="#2-1-方案设计" class="headerlink" title="2.1 方案设计"></a>2.1 方案设计</h3><p>创建多张表，除了表和索引的分区数不同外其他条件均相同，分别执行插入和查询操作，对比插入和查询时间。</p>
<p>相同的条件有：</p>
<ol>
<li>用90*2线程执行插入</li>
<li>用1个线程进行查询</li>
<li>每轮查询执行42条查询语句，重复10次</li>
<li>表的总记录数为1000万</li>
<li>表的字段数和每个字段的类型</li>
<li>每个表都建3个global index</li>
</ol>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS test4 (pk BIGINT PRIMARY KEY,ff1 DOUBLE,ff2 DOUBLE,sf1 VARCHAR,if1 INTEGER,if2 INTEGER,if3 INTEGER,if4 INTEGER,if5 INTEGER,if6 INTEGER) SALT_BUCKETS=40;</div><div class="line">CREATE INDEX ind_l4 ON test4(pk) SALT_BUCKETS=20;</div><div class="line">CREATE INDEX ind_l4_1 ON test4(ff1,ff2,sf1) SALT_BUCKETS=20;</div><div class="line">CREATE INDEX ind_l4_2 ON test4(if1) SALT_BUCKETS=20;</div></pre></td></tr></table></figure>
<p><strong>注：若只指定了表的分区数，未指定索引的分区数，则默认索引的分区数跟表分区数一样。</strong></p>
<h3 id="2-2-测试用例"><a href="#2-2-测试用例" class="headerlink" title="2.2 测试用例"></a>2.2 测试用例</h3><table>
<thead>
<tr>
<th style="text-align:center">用例编号</th>
<th style="text-align:center">表分区数</th>
<th style="text-align:center">索引分区数</th>
<th style="text-align:center">插入时间</th>
<th style="text-align:center">查询时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T2</td>
<td style="text-align:center">12</td>
<td style="text-align:center">12</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T3</td>
<td style="text-align:center">20</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T4</td>
<td style="text-align:center">20</td>
<td style="text-align:center">20</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T5</td>
<td style="text-align:center">40</td>
<td style="text-align:center">20</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T6</td>
<td style="text-align:center">40</td>
<td style="text-align:center">40</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T7</td>
<td style="text-align:center">60</td>
<td style="text-align:center">60</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T8</td>
<td style="text-align:center">80</td>
<td style="text-align:center">12</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T9</td>
<td style="text-align:center">80</td>
<td style="text-align:center">40</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T10</td>
<td style="text-align:center">80</td>
<td style="text-align:center">80</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T11</td>
<td style="text-align:center">120</td>
<td style="text-align:center">40</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">T12</td>
<td style="text-align:center">120</td>
<td style="text-align:center">120</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="3-结果"><a href="#3-结果" class="headerlink" title="3. 结果"></a>3. 结果</h2><h3 id="3-1-软硬件环境"><a href="#3-1-软硬件环境" class="headerlink" title="3.1 软硬件环境"></a>3.1 软硬件环境</h3><ul>
<li>Master服务器<ul>
<li>IP：192.168.20.100,192.168.20.101</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 <em> 2（300G、2.5吋、10K）      SAS硬盘 </em> 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>Phoenix 4.6</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>Region服务器<ul>
<li>IP：192.168.20.102, 192.168.20.103, 192.168.20.104, 192.168.20.105</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 <em> 2（300G、2.5吋、10K）      SAS硬盘 </em> 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1<ul>
<li>软件：</li>
</ul>
</li>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>客户端服务器<ul>
<li>IP：192.168.20.100,192.168.20.102</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 <em> 2（300G、2.5吋、10K）      SAS硬盘 </em> 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
<li>Phoenix客户端<ul>
<li>IP：192.168.20.101</li>
<li>硬件：<ul>
<li>CPU：Intel E5-2670v3 * 2（2.3GHz、L3 Cache 25M）vCore:40</li>
<li>内存：16G DDR4 * 16  2133 MHz  Cache 28G</li>
<li>硬盘：SAS硬盘 <em> 2（300G、2.5吋、10K）      SAS硬盘 </em> 12（3T、2.5吋、7200转）</li>
<li>网卡： 曙光万兆双口光纤（含光模块） * 1</li>
</ul>
</li>
<li>软件：<ul>
<li>Centos 7</li>
<li>jdk-7u65-linux-x64</li>
<li>Phoenix 4.6</li>
<li>HBase 1.0.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-结果"><a href="#3-2-结果" class="headerlink" title="3.2 结果"></a>3.2 结果</h3><table>
<thead>
<tr>
<th style="text-align:center">用例编号</th>
<th style="text-align:center">表分区数</th>
<th style="text-align:center">索引分区数</th>
<th style="text-align:center">插入时间</th>
<th style="text-align:center">查询时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">779</td>
<td style="text-align:center">4490</td>
</tr>
<tr>
<td style="text-align:center">T2</td>
<td style="text-align:center">12</td>
<td style="text-align:center">12</td>
<td style="text-align:center">303</td>
<td style="text-align:center">735</td>
</tr>
<tr>
<td style="text-align:center">T3</td>
<td style="text-align:center">20</td>
<td style="text-align:center">1</td>
<td style="text-align:center">203</td>
<td style="text-align:center">1200</td>
</tr>
<tr>
<td style="text-align:center">T4</td>
<td style="text-align:center">20</td>
<td style="text-align:center">20</td>
<td style="text-align:center">319</td>
<td style="text-align:center">697</td>
</tr>
<tr>
<td style="text-align:center">T5</td>
<td style="text-align:center">40</td>
<td style="text-align:center">20</td>
<td style="text-align:center">380</td>
<td style="text-align:center">592</td>
</tr>
<tr>
<td style="text-align:center">T6</td>
<td style="text-align:center">40</td>
<td style="text-align:center">40</td>
<td style="text-align:center">369</td>
<td style="text-align:center">531</td>
</tr>
<tr>
<td style="text-align:center">T7</td>
<td style="text-align:center">60</td>
<td style="text-align:center">60</td>
<td style="text-align:center">441</td>
<td style="text-align:center">587</td>
</tr>
<tr>
<td style="text-align:center">T8</td>
<td style="text-align:center">80</td>
<td style="text-align:center">12</td>
<td style="text-align:center">384</td>
<td style="text-align:center">714</td>
</tr>
<tr>
<td style="text-align:center">T9</td>
<td style="text-align:center">80</td>
<td style="text-align:center">40</td>
<td style="text-align:center">522</td>
<td style="text-align:center">653</td>
</tr>
<tr>
<td style="text-align:center">T10</td>
<td style="text-align:center">80</td>
<td style="text-align:center">80</td>
<td style="text-align:center">478</td>
<td style="text-align:center">623</td>
</tr>
<tr>
<td style="text-align:center">T11</td>
<td style="text-align:center">120</td>
<td style="text-align:center">40</td>
<td style="text-align:center">512</td>
<td style="text-align:center">764</td>
</tr>
<tr>
<td style="text-align:center">T12</td>
<td style="text-align:center">120</td>
<td style="text-align:center">120</td>
<td style="text-align:center">526</td>
<td style="text-align:center">753</td>
</tr>
</tbody>
</table>
<p>插入时间和查询时间单位均为秒。<br>查询时间为执行42个查询每个查询10次的总时间。</p>
<h2 id="4-分析"><a href="#4-分析" class="headerlink" title="4. 分析"></a>4. 分析</h2><p>通过观察3.2结果中的数据，可得出以下结论：</p>
<p>对比T1和其他可知，<strong>有分区相对无分区在插入和查询上都有极大的性能提升。</strong></p>
<p>对比T3和T4,T8和T9可知，<strong>在一定范围内，增大索引分区数使插入变慢，查询变快。</strong></p>
<p>对比T11和T12可知，<strong>当索引分区达到一定大小后，再增加分区数已经无法提升查询性能。</strong></p>
<p>综合比较来看，<strong>当前集群在表分区数和索引分区数均为40时插入和查询的综合性能最好。</strong></p>
<p>因此，Phoenix的性能测试中将采用表分区数和索引分区数均为40的方案。</p>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析列式存储格式Parquet]]></title>
      <url>http://linbingdong.com/2016/11/30/Parquet%E8%B0%83%E7%A0%94/</url>
      <content type="html"><![CDATA[<p>Apache Parquet是Hadoop生态圈中一种<strong>新型列式存储格式</strong>，它可以兼容Hadoop生态圈中大多数计算框架(Hadoop、Spark等)，被多种查询引擎支持(Hive、Impala、Drill等)，并且它是语言和平台无关的。Parquet最初是由Twitter和Cloudera(由于Impala的缘故)合作开发完成并开源，2015年5月从Apache的孵化器里毕业成为Apache顶级项目，最新的版本是1.8.1。</p>
<a id="more"></a>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Apache Parquet是Hadoop生态圈中一种<strong>新型列式存储格式</strong>，它可以兼容Hadoop生态圈中大多数计算框架(Hadoop、Spark等)，被多种查询引擎支持(Hive、Impala、Drill等)，并且它是语言和平台无关的。Parquet最初是由Twitter和Cloudera(由于Impala的缘故)合作开发完成并开源，2015年5月从Apache的孵化器里毕业成为Apache顶级项目，最新的版本是1.8.1。</p>
<p>Parquet是语言无关的，而且不与任何一种数据处理框架绑定在一起，适配多种语言和组件，能够与Parquet配合的组件有：</p>
<p>查询引擎: Hive, Impala, Pig, Presto, Drill, Tajo, HAWQ, IBM Big SQL</p>
<p>计算框架: MapReduce, Spark, Cascading, Crunch, Scalding, Kite</p>
<p>数据模型: Avro, Thrift, Protocol Buffers, POJOs</p>
<p>那么Parquet是如何与这些组件协作的呢？这个可以通过下图来说明。数据从内存到Parquet文件或者反过来的过程主要由以下三个部分组成：</p>
<ol>
<li><p>存储格式(storage format)</p>
<p>parquet-format项目定义了Parquet内部的数据类型、存储格式等。</p>
</li>
<li><p>对象模型转换器(object model converters)</p>
<p>这部分功能由parquet-mr项目来实现，主要完成外部对象模型与Parquet内部数据类型的映射。</p>
</li>
<li><p>对象模型(object models)</p>
<p>对象模型可以简单理解为内存中的数据表示，Avro, Thrift, Protocol Buffers, Hive SerDe, Pig Tuple, Spark SQL InternalRow等这些都是对象模型。Parquet也提供了一个example object model 帮助大家理解。</p>
</li>
</ol>
<p>例如parquet-mr项目里的parquet-pig项目就是负责把内存中的Pig Tuple序列化并按列存储成Parquet格式，以及反过来把Parquet文件的数据反序列化成Pig Tuple。</p>
<p>这里需要注意的是Avro, Thrift, Protocol Buffers都有他们自己的存储格式，但是Parquet并没有使用他们，而是使用了自己在parquet-format项目里定义的存储格式。所以如果你的应用使用了Avro等对象模型，这些数据序列化到磁盘还是使用的parquet-mr定义的转换器把他们转换成Parquet自己的存储格式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-403f3636be9fab06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="module.png"></p>
<h3 id="1-2-列式存储"><a href="#1-2-列式存储" class="headerlink" title="1.2 列式存储"></a>1.2 列式存储</h3><p>列式存储，顾名思义就是按照列进行存储数据，把某一列的数据连续的存储，每一行中的不同列的值离散分布。列式存储技术并不新鲜，在关系数据库中都已经在使用，尤其是在针对OLAP场景下的数据存储，由于OLAP场景下的数据大部分情况下都是批量导入，基本上不需要支持单条记录的增删改操作，而查询的时候大多数都是只使用部分列进行过滤、聚合，对少数列进行计算(基本不需要select * from xx之类的查询)。</p>
<p><strong>example：</strong></p>
<p>以下这张表有A、B、C三个字段：</p>
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A1</td>
<td style="text-align:center">B1</td>
<td style="text-align:center">C1</td>
</tr>
<tr>
<td style="text-align:center">A2</td>
<td style="text-align:center">B2</td>
<td style="text-align:center">C2</td>
</tr>
<tr>
<td style="text-align:center">A3</td>
<td style="text-align:center">B3</td>
<td style="text-align:center">C3</td>
</tr>
</tbody>
</table>
<p>行存储：</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>B1</th>
<th>C1</th>
<th>A2</th>
<th>B2</th>
<th>C2</th>
<th>A3</th>
<th>B3</th>
<th>C3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>列存储</p>
<table>
<thead>
<tr>
<th>A1</th>
<th>A2</th>
<th>A3</th>
<th>B1</th>
<th>B2</th>
<th>B3</th>
<th>C1</th>
<th>C2</th>
<th>C3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>列式存储可以大大提升这类查询的性能，较之于行是存储，列式存储能够带来这些优化：</p>
<ol>
<li>查询的时候不需要扫描全部的数据，而只需要读取每次查询涉及的列，这样可以将I/O消耗降低N倍，另外可以保存每一列的统计信息(min、max、sum等)，实现部分的谓词下推。</li>
<li>由于每一列的成员都是同构的，可以针对不同的数据类型使用更高效的数据压缩算法，进一步减小I/O。</li>
<li>由于每一列的成员的同构性，可以使用更加适合CPU pipeline的编码方式，减小CPU的缓存失效。</li>
</ol>
<h2 id="2-Parquet详解"><a href="#2-Parquet详解" class="headerlink" title="2. Parquet详解"></a>2. Parquet详解</h2><h3 id="2-1-数据模型"><a href="#2-1-数据模型" class="headerlink" title="2.1 数据模型"></a>2.1 数据模型</h3><p>理解Parquet首先要理解这个列存储格式的数据模型。我们以一个下面这样的schema和数据为例来说明这个问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">message AddressBook &#123;</div><div class="line"> required string owner;</div><div class="line"> repeated string ownerPhoneNumbers;</div><div class="line"> repeated group contacts &#123;</div><div class="line">   required string name;</div><div class="line">   optional string phoneNumber;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个schema中每条记录表示一个人的AddressBook。有且只有一个owner，owner可以有0个或者多个ownerPhoneNumbers，owner可以有0个或者多个contacts。每个contact有且只有一个name，这个contact的phoneNumber可有可无。</p>
<p>每个schema的结构是这样的：根叫做message，message包含多个fields。每个field包含三个属性：repetition, type, name。repetition可以是以下三种：required（出现1次），optional（出现0次或者1次），repeated（出现0次或者多次）。type可以是一个group或者一个primitive类型。</p>
<p>Parquet格式的数据类型不需要复杂的Map, List, Set等，而是使用repeated fields 和 groups来表示。例如List和Set可以被表示成一个repeated field，Map可以表示成一个包含有key-value 对的repeated group<br>，而且key是required的。</p>
<p>List(或Set)可以用repeated field来表示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-dd058fe3ef60b330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="list.png"></p>
<p>Map可以用包含key-value对且key是required的repeated group来表示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ee4c0e31b36b3bd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="map.png"></p>
<h3 id="2-2-列存储格式"><a href="#2-2-列存储格式" class="headerlink" title="2.2 列存储格式"></a>2.2 列存储格式</h3><p>列存储通过将相同基本类型（primitive type）的值存储在一起来提供高效的编码和解码。为了用列存储来存储如上嵌套的数据结构，我们需要将该schema用某种方式映射到一系列的列使我们能够将记录写到列中并且能读取成原来的嵌套的数据结构。</p>
<p>在Parquet格式的存储中，一个schema的树结构有几个叶子节点（叶子节点都是primitive type），实际的存储中就会有多少column。</p>
<p>上面的schema的树结构如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f0ab3f129c141de1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree struct.png"></p>
<p>上面这个schema的数据存储实际上有四个column，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-dd696d1f23d6dac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="storage.png"></p>
<p>只有字段值不能表达清楚记录的结构。给出一个repeated field的两个值，我们不知道此值是按什么‘深度’被重复的（比如，这些值是来自两个不同的记录，还是相同的记录中两个重复的值）。同样的，给出一个缺失的可选字段，我们不知道整个路径有多少字段被显示定义了。因此我们将介绍repetition level 和 definition level的概念。</p>
<p><strong>example：</strong></p>
<p>两条嵌套的记录和它们的schema：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-afe42d8c1d9b1c2f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two sample nested records and their schema"></p>
<p>将上图的两条记录用列存储表示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-8a5a0ef51aeb61d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Column-striped representation"></p>
<p>上面的例子主要是想让大家对嵌套结构的列式存储有个直观的印象，包括repetition level 和 definition level的应用，接下来详细介绍repetition level 和 definition level。</p>
<h3 id="2-3-Definition-levels"><a href="#2-3-Definition-levels" class="headerlink" title="2.3 Definition levels"></a>2.3 Definition levels</h3><p>Definition level指明该列的路径上多少个可选field被定义了。</p>
<p>嵌套数据类型的特点是有些field（optional field 和 repeated field）可以是空的，也就是没有定义。如果一个field是定义的，那么它的所有的父节点都是被定义的。从根节点开始遍历，当某一个field的路径上的节点开始是空的时候我们记录下当前的深度作为这个field的Definition Level。如果一个field的definition Level等于这个field的最大definition Level就说明这个field是有数据的。对于required类型的field必须是有定义的，所以这个Definition Level是不需要的。在关系型数据中，optional类型的field被编码成0表示空和1表示非空（或者反之）。</p>
<p>注：definition Level是该路径上有定义的repeated field 和 optional field的个数，不包括required field，因为required field是必须有定义的。</p>
<p>再举个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">message ExampleDefinitionLevel &#123;</div><div class="line">  optional group a &#123;</div><div class="line">	required group b &#123;</div><div class="line">      optional string c;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-4ed98adc8c87fb51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="example"></p>
<p>因为b是required field，所以第3行c的definition level为1而不是2（因为b是required field，所有不需计算在内）；第4行c的definition level为2而不是3（理由同上）.</p>
<h3 id="2-4-Repetition-levels"><a href="#2-4-Repetition-levels" class="headerlink" title="2.4 Repetition levels"></a>2.4 Repetition levels</h3><p>Repetition level指明该值在路径中哪个repeated field重复。</p>
<p>Repetition level是针对repeted field的。注意在图2中的Code字段。可以看到它在r1出现了3次。‘en-us’、‘en’在第一个Name中，而‘en-gb’在第三个Name中。结合了图2你肯定能理解我上一句话并知道‘en-us’、‘en’、‘en-gb’出现在r1中的具体位置，但是不看图的话呢？怎么用文字，或者说是一种定义、一种属性、一个数值，诠释清楚它们出现的位置？这就是重复深度这个概念的作用，它能用一个数字告诉我们在路径中的什么重复字段，此值重复了，以此来确定此值的位置（注意，这里的重复，特指在某个repeated类型的字段下“重复”出现的“重复”）。我们用深度0表示一个纪录的开头（虚拟的根节点），深度的计算忽略非重复字段（标签不是repeated的字段都不算在深度里）。所以在Name.Language.Code这个路径中，包含两个重复字段，Name和Language，如果在Name处重复，重复深度为1（虚拟的根节点是0，下一级就是1），在Language处重复就是2，不可能在Code处重复，它是required类型，表示有且仅有一个；同样的，在路径Links.Forward中，Links是optional的，不参与深度计算（不可能重复），Forward是repeated的，因此只有在Forward处重复时重复深度为1。现在我们从上至下扫描纪录r1。当我们遇到’en-us’，我们没看到任何重复字段，也就是说，重复深度是0。当我们遇到‘en’，字段Language重复了（在‘en-us’的路径里已经出现过一个Language），所以重复深度是2.最终，当我们遇到’en-gb‘，Name重复了（Name在前面‘en-us’和‘en’的路径里已经出现过一次，而此Name后Language只出现过一次，没有重复），所以重复深度是1。因此，r1中Code的值的重复深度是0、2、1.</p>
<p>要注意第二个Name在r1中没有包含任何Code值。为了确定‘en-gb’出现在第三个Name而不是第二个，我们添加一个NULL值在‘en’和‘en-gb’之间（如图3所示）。</p>
<h3 id="2-5-Striping-and-assembly"><a href="#2-5-Striping-and-assembly" class="headerlink" title="2.5 Striping and assembly"></a>2.5 Striping and assembly</h3><p>下面用AddressBook的例子来说明Striping和assembly的过程。</p>
<p>对于每个column的最大的Repetion Level和 Definition Level下图所示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-2866b5d27fae6d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="max definition level and max repetition level"></p>
<p>下面这样两条record：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">AddressBook &#123;</div><div class="line"> owner: &quot;Julien Le Dem&quot;,</div><div class="line"> ownerPhoneNumbers: &quot;555 123 4567&quot;,</div><div class="line"> ownerPhoneNumbers: &quot;555 666 1337&quot;,</div><div class="line"> contacts: &#123;</div><div class="line">   name: &quot;Dmitriy Ryaboy&quot;,</div><div class="line">   phoneNumber: &quot;555 987 6543&quot;,</div><div class="line"> &#125;,</div><div class="line"> contacts: &#123;</div><div class="line">   name: &quot;Chris Aniszczyk&quot;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">AddressBook &#123;</div><div class="line"> owner: &quot;A. Nonymous&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以contacts.phoneNumber这一列为例，”555 987 6543”这个contacts.phoneNumber的Definition Level是最大Definition Level=2。而如果一个contact没有phoneNumber，那么它的Definition Level就是1。如果连contact都没有，那么它的Definition Level就是0。</p>
<p>下面我们拿掉其他三个column只看contacts.phoneNumber这个column，把上面的两条record简化成下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">AddressBook &#123;</div><div class="line"> contacts: &#123;</div><div class="line">   phoneNumber: &quot;555 987 6543&quot;</div><div class="line"> &#125;</div><div class="line"> contacts: &#123;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line">AddressBook &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两条记录的序列化过程如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c9dc4e06937c42c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="serilizer.png"></p>
<p>如果我们要把这个column写到磁盘上，磁盘上会写入这样的数据：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-a58b136b95a46e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="data in disk.png"></p>
<p>注意：NULL实际上不会被存储，如果一个column value的Definition Level小于该column最大Definition Level的话，那么就表示这是一个空值。</p>
<p>下面是从磁盘上读取数据并反序列化成AddressBook对象的过程：</p>
<ol>
<li><p>读取第一个三元组R=0, D=2, Value=”555 987 6543”</p>
<p> R=0 表示是一个新的record，要根据schema创建一个新的nested record直到Definition Level=2。</p>
<p> D=2 说明Definition Level=Max Definition Level，那么这个Value就是contacts.phoneNumber这一列的值，赋值操作contacts.phoneNumber=”555 987 6543”。</p>
<hr>
</li>
<li><p>读取第二个三元组 R=1, D=1</p>
<p> R=1 表示不是一个新的record，是上一个record中一个新的contacts。</p>
<p> D=1 表示contacts定义了，但是contacts的下一个级别也就是phoneNumber没有被定义，所以创建一个空的contacts。</p>
<hr>
</li>
<li><p>读取第三个三元组 R=0, D=0</p>
<p> R=0 表示一个新的record，根据schema创建一个新的nested record直到Definition Level=0，也就是创建一个AddressBook根节点。</p>
</li>
</ol>
<p>可以看出在Parquet列式存储中，对于一个schema的所有叶子节点会被当成column存储，而且叶子节点一定是primitive类型的数据。对于这样一个primitive类型的数据会衍生出三个sub columns (R, D, Value)，也就是从逻辑上看除了数据本身以外会存储大量的Definition Level和Repetition Level。那么这些Definition Level和Repetition Level是否会带来额外的存储开销呢？实际上这部分额外的存储开销是可以忽略的。因为对于一个schema来说level都是有上限的，而且非repeated类型的field不需要Repetition Level，required类型的field不需要Definition Level，也可以缩短这个上限。例如对于Twitter的7层嵌套的schema来说，只需要3个bits就可以表示这两个Level了。</p>
<p>对于存储关系型的record，record中的元素都是非空的（NOT NULL in SQL）。Repetion Level和Definition Level都是0，所以这两个sub column就完全不需要存储了。所以在存储非嵌套类型的时候，Parquet格式也是一样高效的。</p>
<h3 id="2-6-文件格式"><a href="#2-6-文件格式" class="headerlink" title="2.6 文件格式"></a>2.6 文件格式</h3><ul>
<li><p>行组(Row Group)：按照行将数据物理上划分为多个单元，每一个行组包含一定的行数。一个行组包含这个行组对应的区间内的所有列的列块。</p>
<p>  官方建议：</p>
<blockquote>
<p>更大的行组意味着更大的列块，使得能够做更大的序列IO。我们建议设置更大的行组（512MB-1GB）。因为一次可能需要读取整个行组，所以我们想让一个行组刚好在一个HDFS块中。因此，HDFS块的大小也需要被设得更大。一个最优的读设置是：1GB的行组，1GB的HDFS块，1个HDFS块放一个HDFS文件。</p>
</blockquote>
</li>
<li><p>列块(Column Chunk)：在一个行组中每一列保存在一个列块中，行组中的所有列连续的存储在这个行组文件中。不同的列块可能使用不同的算法进行压缩。一个列块由多个页组成。</p>
</li>
<li><p>页(Page)：每一个列块划分为多个页，页是压缩和编码的单元，对数据模型来说页是透明的。在同一个列块的不同页可能使用不同的编码方式。官方建议一个页为8KB。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7ef8c17e74f82158.gif?imageMogr2/auto-orient/strip" alt="file format"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e5bf0d9e184f1c31.gif?imageMogr2/auto-orient/strip" alt="metadata"></p>
<p>上图展示了一个Parquet文件的结构，一个文件中可以存储多个行组，文件的首位都是该文件的Magic Code，用于校验它是否是一个Parquet文件，Footer length存储了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和当前文件的Schema信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：数据页、字典页和索引页。数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页，但是在后面的版本中增加。</p>
<h3 id="2-7-映射下推-Project-PushDown"><a href="#2-7-映射下推-Project-PushDown" class="headerlink" title="2.7 映射下推(Project PushDown)"></a>2.7 映射下推(Project PushDown)</h3><p>说到列式存储的优势，映射下推是最突出的，它意味着在获取表中原始数据时只需要扫描查询中需要的列，由于每一列的所有值都是连续存储的，所以分区取出每一列的所有值就可以实现TableScan算子，而避免扫描整个表文件内容。</p>
<p>在Parquet中原生就支持映射下推，执行查询的时候可以通过Configuration传递需要读取的列的信息，这些列必须是Schema的子集，映射每次会扫描一个Row Group的数据，然后一次性得将该Row Group里所有需要的列的Cloumn Chunk都读取到内存中，每次读取一个Row Group的数据能够大大降低随机读的次数，除此之外，Parquet在读取的时候会考虑列是否连续，如果某些需要的列是存储位置是连续的，那么一次读操作就可以把多个列的数据读取到内存。</p>
<h3 id="2-8-谓词下推-Predicate-PushDown"><a href="#2-8-谓词下推-Predicate-PushDown" class="headerlink" title="2.8 谓词下推(Predicate PushDown)"></a>2.8 谓词下推(Predicate PushDown)</h3><p>在数据库之类的查询系统中最常用的优化手段就是谓词下推了，通过将一些过滤条件尽可能的在最底层执行可以减少每一层交互的数据量，从而提升性能，例如”select count(1) from A Join B on A.id = B.id where A.a &gt; 10 and B.b &lt; 100″SQL查询中，在处理Join操作之前需要首先对A和B执行TableScan操作，然后再进行Join，再执行过滤，最后计算聚合函数返回，但是如果把过滤条件A.a &gt; 10和B.b &lt; 100分别移到A表的TableScan和B表的TableScan的时候执行，可以大大降低Join操作的输入数据。</p>
<p>无论是行式存储还是列式存储，都可以在将过滤条件在读取一条记录之后执行以判断该记录是否需要返回给调用者，在Parquet做了更进一步的优化，优化的方法时对每一个Row Group的每一个Column Chunk在存储的时候都计算对应的统计信息，包括该Column Chunk的最大值、最小值和空值个数。通过这些统计值和该列的过滤条件可以判断该Row Group是否需要扫描。另外Parquet未来还会增加诸如Bloom Filter和Index等优化数据，更加有效的完成谓词下推。</p>
<h2 id="3-性能"><a href="#3-性能" class="headerlink" title="3. 性能"></a>3. 性能</h2><h3 id="3-1-压缩"><a href="#3-1-压缩" class="headerlink" title="3.1 压缩"></a>3.1 压缩</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-df5f4199acfd424e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="compression"></p>
<p>上图是展示了使用不同格式存储TPC-H和TPC-DS数据集中两个表数据的文件大小对比，可以看出Parquet较之于其他的二进制文件存储格式能够更有效的利用存储空间，而新版本的Parquet(2.0版本)使用了更加高效的页存储方式，进一步的提升存储空间。</p>
<h3 id="3-2-查询"><a href="#3-2-查询" class="headerlink" title="3.2 查询"></a>3.2 查询</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-73358da8b860aa3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="query1"></p>
<p>上图展示了Twitter在Impala中使用不同格式文件执行TPC-DS基准测试的结果，测试结果可以看出Parquet较之于其他的行式存储格式有较明显的性能提升。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-6cd291a62214cd00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="query2"></p>
<p>上图展示了criteo公司在Hive中使用ORC和Parquet两种列式存储格式执行TPC-DS基准测试的结果，测试结果可以看出在数据存储方面，两种存储格式在都是用snappy压缩的情况下量中存储格式占用的空间相差并不大，查询的结果显示Parquet格式稍好于ORC格式，两者在功能上也都有优缺点，Parquet原生支持嵌套式数据结构，而ORC对此支持的较差，这种复杂的Schema查询也相对较差;而Parquet不支持数据的修改和ACID，但是ORC对此提供支持，但是在OLAP环境下很少会对单条数据修改，更多的则是批量导入。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文介绍了一种支持嵌套数据模型对的列式存储格式Parquet，作为大数据系统中OLAP查询的优化方案，它已经被多种查询引擎原生支持，并且部分高性能引擎将其作为默认的文件存储格式。通过数据编码和压缩，以及映射下推和谓词下推功能，Parquet的性能也较之其它文件格式有所提升，可以预见，随着数据模型的丰富和Ad hoc查询的需求，Parquet将会被更广泛的使用。</p>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li>Google论文：Dremel: Interactive Analysis of Web-Scale Datasets</li>
<li>Twitter博文：Dremel made simple with Parquet</li>
<li><a href="http://www.importnew.com/2617.html" target="_blank" rel="external">http://www.importnew.com/2617.html</a></li>
<li><a href="http://www.2cto.com/database/201605/509506.html" target="_blank" rel="external">http://www.2cto.com/database/201605/509506.html</a></li>
<li><a href="http://www.infoq.com/cn/articles/in-depth-analysis-of-parquet-column-storage-format/" target="_blank" rel="external">http://www.infoq.com/cn/articles/in-depth-analysis-of-parquet-column-storage-format/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 列式存储 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Parquet </tag>
            
            <tag> 列式存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive on Spark调优]]></title>
      <url>http://linbingdong.com/2016/11/30/Hive%20on%20Spark%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<p>之前在<code>Hive on Spark</code>跑<code>TPCx-BB</code>测试时，100g的数据量要跑十几个小时，一看CPU和内存的监控，发现    <code>POWER_TEST</code>阶段（依次执行30个查询）CPU只用了百分之十几，也就是没有把整个集群的性能利用起来，导致跑得很慢。因此，如何调整参数，使整个集群发挥最大性能显得尤为重要。</p>
<a id="more"></a>
<h2 id="Spark作业运行原理"><a href="#Spark作业运行原理" class="headerlink" title="Spark作业运行原理"></a>Spark作业运行原理</h2><p><img src="http://upload-images.jianshu.io/upload_images/1752522-30cb518018e5486b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-base-mech.jpg"></p>
<p>详细原理见上图。我们使用spark-submit提交一个Spark作业之后，这个作业就会启动一个对应的Driver进程。根据你使用的部署模式（deploy-mode）不同，Driver进程可能在本地启动，也可能在集群中某个工作节点上启动。Driver进程本身会根据我们设置的参数，占有一定数量的内存和CPU core。而Driver进程要做的第一件事情，就是向集群管理器（可以是Spark Standalone集群，也可以是其他的资源管理集群，美团•大众点评使用的是YARN作为资源管理集群）申请运行Spark作业需要使用的资源，这里的资源指的就是Executor进程。YARN集群管理器会根据我们为Spark作业设置的资源参数，在各个工作节点上，启动一定数量的Executor进程，每个Executor进程都占有一定数量的内存和CPU core。</p>
<p>Spark是根据shuffle类算子来进行stage的划分。如果我们的代码中执行了某个shuffle类算子（比如reduceByKey、join等），那么就会在该算子处，划分出一个stage界限来。可以大致理解为，shuffle算子执行之前的代码会被划分为一个stage，shuffle算子执行以及之后的代码会被划分为下一个stage。因此一个stage刚开始执行的时候，它的每个task可能都会从上一个stage的task所在的节点，去通过网络传输拉取需要自己处理的所有key，然后对拉取到的所有相同的key使用我们自己编写的算子函数执行聚合操作（比如reduceByKey()算子接收的函数）。这个过程就是shuffle。</p>
<p>task的执行速度是跟每个Executor进程的CPU core数量有直接关系的。一个CPU core同一时间只能执行一个线程。而每个Executor进程上分配到的多个task，都是以每个task一条线程的方式，多线程并发运行的。如果CPU core数量比较充足，而且分配到的task数量比较合理，那么通常来说，可以比较快速和高效地执行完这些task线程。</p>
<p>以上就是Spark作业的基本运行原理的说明，大家可以结合上图来理解。理解作业基本原理，是我们进行资源参数调优的基本前提。</p>
<h2 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h2><p>了解完了Spark作业运行的基本原理之后，对资源相关的参数就容易理解了。所谓的Spark资源参数调优，其实主要就是对Spark运行过程中各个使用资源的地方，通过调节各种参数，来优化资源使用的效率，从而提升Spark作业的执行性能。以下参数就是Spark中主要的资源参数，每个参数都对应着作业运行原理中的某个部分。</p>
<p><strong>num-executors/spark.executor.instances</strong></p>
<ul>
<li><p>参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。</p>
</li>
<li><p>参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。</p>
</li>
</ul>
<p><strong>executor-memory/spark.executor.memory</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。</p>
</li>
<li><p>参数调优建议：每个Executor进程的内存设置4G~8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1/3~1/2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。</p>
</li>
</ul>
<p><strong>executor-cores/spark.executor.cores</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。</p>
</li>
<li><p>参数调优建议：Executor的CPU core数量设置为2~4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，那么num-executors * executor-cores不要超过队列总CPU core的1/3~1/2左右比较合适，也是避免影响其他同学的作业运行。</p>
</li>
</ul>
<p><strong>driver-memory</strong></p>
<ul>
<li>参数说明：该参数用于设置Driver进程的内存。</li>
</ul>
<ul>
<li>参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。</li>
</ul>
<p><strong>spark.default.parallelism</strong></p>
<ul>
<li><p>参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。</p>
</li>
<li><p>参数调优建议：Spark作业的默认task数量为500~1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。</p>
</li>
</ul>
<p><strong>spark.storage.memoryFraction</strong></p>
<ul>
<li><p>参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。</p>
</li>
<li><p>参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</p>
</li>
</ul>
<p><strong>spark.shuffle.memoryFraction</strong></p>
<ul>
<li><p>参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。</p>
</li>
<li><p>参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</p>
</li>
</ul>
<h2 id="调优过程"><a href="#调优过程" class="headerlink" title="调优过程"></a>调优过程</h2><h3 id="数据量：10g"><a href="#数据量：10g" class="headerlink" title="数据量：10g"></a>数据量：10g</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-7d2f266269a7638b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-29 上午10.39.00.png"></p>
<p>可以看出：</p>
<ul>
<li>随着每个executor占用的CPU core数增加，q04查询的时间显著下降，q03也下降，但幅度没那么大。</li>
</ul>
<p>本次调优只设置了<code>spark.executor.memory</code>和<code>spark.executor.cores</code>两个参数，没有涉及到<code>spark.executor.instances</code>参数，而默认的<code>spark.executor.instances</code>为2，也就是每个作业只用到2个executor，因此还没将性能发挥到最佳。</p>
<p>接下来采用100g的数据量，并且增加<code>spark.executor.instances</code>参数的设置。</p>
<h3 id="数据量：100g"><a href="#数据量：100g" class="headerlink" title="数据量：100g"></a>数据量：100g</h3><p><img src="http://upload-images.jianshu.io/upload_images/1752522-129acaa890a2163e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-09-29 上午10.51.55.png"></p>
<p>可以看出：</p>
<ul>
<li>调优前后查询时间有了很大的飞跃；</li>
<li>增加<code>spark.executor.instances</code>设置项指定每个作业占用的executor个数后性能又有很大提升（通过监控我们发现此时CPU利用率平均有好几十，甚至可以高到百分之九十几）；</li>
<li>至此，我们终于将整个集群性能充分发挥出来，达到目的。</li>
</ul>
<p>最后一列配置项是根据美团技术团队博客的建议设置的，可以看出性能相比我们之前自己的设置还是有一定提升的，至少该博客里建议的设置是比较通用的，因此之后我们都采取最后一列的设置来跑<code>TPCx-BB</code>测试。</p>
<p>最后来张大图展示调优前和调优后跑100g数据的对比：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7181c6fa8ed0bb19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="调优前后100g.jpg.png"></p>
<p>可以看出：</p>
<ul>
<li>绝大多数查询调优前后查询时间有了极大的飞跃；</li>
<li>但是像q01/q04/q14…这几个查询，可能因为查询涉及到的表比较小，调优前时间就很短，因此调优后也看不出很多差别，如果想看到大的差别，可能需要提高数据量，比如1T，3T；</li>
<li>q10和q18调优前后时间都较长，而且调优后性能没有提升，需要再深入探索下是什么原因。</li>
</ul>
<p>最后，用调优后的集群，分别跑10g、30g、100g的数据，结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-e4b1b02a7909468f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10g、30g、100g.jpg.png"></p>
<p>可以看出：</p>
<ul>
<li>随着数据量增大，很多查询时间并没有明显增加，可能是因为集群性能太强，而且数据量还不够大，可以增大数据量继续观察</li>
<li>对于q10、q18和q30，随着数据量增大，时间明显增大，需再深入分析</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://tech.meituan.com/spark-tuning-basic.html" target="_blank" rel="external">http://tech.meituan.com/spark-tuning-basic.html</a></p>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive on Spark安装配置详解]]></title>
      <url>http://linbingdong.com/2016/10/10/Hive%20on%20Spark%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录如何安装配置Hive on Spark，在执行以下步骤之前，请先确保已经安装Hadoop集群，Hive，MySQL，JDK，Scala，具体安装步骤不再赘述。</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Hive默认使用MapReduce作为执行引擎，即Hive on mr。实际上，Hive还可以使用Tez和Spark作为其执行引擎，分别为Hive on Tez和Hive on Spark。由于MapReduce中间计算均需要写入磁盘，而Spark是放在内存中，所以总体来讲Spark比MapReduce快很多。因此，Hive on Spark也会比Hive on mr快。为了对比Hive on Spark和Hive on mr的速度，需要在已经安装了Hadoop集群的机器上安装Spark集群（Spark集群是建立在Hadoop集群之上的，也就是需要先装Hadoop集群，再装Spark集群，因为Spark用了Hadoop的HDFS、YARN等），然后把Hive的执行引擎设置为Spark。</p>
<p>Spark运行模式分为三种1、Spark on YARN 2、Standalone Mode 3、Spark on Mesos。<br>Hive on Spark默认支持Spark on YARN模式，因此我们选择Spark on YARN模式。Spark on YARN就是使用YARN作为Spark的资源管理器。分为Cluster和Client两种模式。</p>
<h2 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a>一、环境说明</h2><p>本教程Hadoop相关软件全部基于CDH5.5.1，用yum安装，系统环境如下：</p>
<ul>
<li>操作系统：CentOS 7.2</li>
<li>Hadoop 2.6.0</li>
<li>Hive1.1.0</li>
<li>Spark1.5.0</li>
<li>MySQL 5.6</li>
<li>JDK 1.8</li>
<li>Maven 3.3.3</li>
<li>Scala 2.10</li>
</ul>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">192.168.117.51     Goblin01           nn1  jn1  rm1  worker  master  hive  metastore  mysql</div><div class="line">192.168.117.52     Goblin02    zk2    nn2  jn2  rm2  worker          hive</div><div class="line">192.168.117.53     Goblin03    zk3    dn1  jn3       worker          hive</div><div class="line">192.168.117.54     Goblin04    zk4    dn2            worker          hive</div></pre></td></tr></table></figure>
<p>说明：Goblin01~04是每台机器的hostname，zk代表zookeeper，nn代表hadoop的namenode，dn代表datanode，jn代表journalnode，rm代表resourcemanager，worker代表Spark的slaves，master代表Spark的master</p>
<h2 id="二、编译和安装Spark（Spark-on-YARN）"><a href="#二、编译和安装Spark（Spark-on-YARN）" class="headerlink" title="二、编译和安装Spark（Spark on YARN）"></a>二、编译和安装Spark（Spark on YARN）</h2><h3 id="2-1-编译Spark源码"><a href="#2-1-编译Spark源码" class="headerlink" title="2.1 编译Spark源码"></a>2.1 编译Spark源码</h3><p>要使用Hive on Spark，所用的Spark版本必须不包含Hive的相关jar包，hive on spark 的官网上说“Note that you must have a version of Spark which does not include the Hive jars”。在spark官网下载的编译的Spark都是有集成Hive的，因此需要自己下载源码来编译，并且编译的时候不指定Hive。</p>
<p>我们这里用的Spark源码是spark-1.5.0-cdh5.5.1版本,下载地址如下：</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.5.1-src.tar.gz" target="_blank" rel="external">http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.5.1-src.tar.gz</a></p>
<p>下载完后用 tar xzvf 命令解压，进入解压完的文件夹，准备编译。</p>
<p><strong>注意：编译前请确保已经安装JDK、Maven和Scala，maven为3.3.3及以上版本，并在/etc/profile里配置环境变量。</strong></p>
<p>命令行进入在源码根目录下，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./make-distribution.sh --name &quot;hadoop2-without-hive&quot; --tgz &quot;-Pyarn,hadoop-provided,hadoop-2.6,parquet-provided&quot;</div></pre></td></tr></table></figure>
<p>若编译过程出现内存不足的情况，需要在运行编译命令之前先运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export MAVEN_OPTS=&quot;-Xmx2g -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512m&quot;</div></pre></td></tr></table></figure>
<p>来设置Maven的内存。</p>
<p>编译过程由于要下载很多Maven依赖的jar包，需要时间较长（大概一两个小时），要保证网络状况良好，不然很容易编译失败。若出现以下结果，则编译成功：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-321065dbcb3c6608.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译成功.jpg"></p>
<p>编译成功后，会在源码根目录下多出一个文件(红色部分）：</p>
<p>spark-1.5.0-cdh5.5.1-bin-hadoop2-without-hive.tgz</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-f4575e21c44dbbf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编译完生成的文件.png"></p>
<h3 id="2-2-安装Spark"><a href="#2-2-安装Spark" class="headerlink" title="2.2 安装Spark"></a>2.2 安装Spark</h3><ul>
<li><p>将编译完生成的spark-1.5.0-cdh5.5.1-bin-hadoop2-without-hive.tgz拷贝到Spark的安装路径，并用 tar -xzvf 命令解压</p>
</li>
<li><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$vim /etc/profile</div><div class="line">export SPARK_HOME=spark安装路径</div><div class="line">$source /etc/profile</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-配置Spark"><a href="#2-3-配置Spark" class="headerlink" title="2.3 配置Spark"></a>2.3 配置Spark</h3><p>配置spark-env.sh、slaves和spark-defaults.conf三个文件</p>
<ul>
<li>spark-env.sh </li>
</ul>
<p>主要配置JAVA\_HOME、SCALA\_HOME、HADOOP\_HOME、HADOOP\_CONF\_DIR、SPARK\_MASTER\_IP等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java</div><div class="line">export SCALA_HOME=/root/scala</div><div class="line">export HADOOP_HOME=/usr/lib/hadoop</div><div class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop </div><div class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</div><div class="line">export SPARK_LAUNCH_WITH_SCALA=0</div><div class="line">export SPARK_WORKER_MEMORY=1g</div><div class="line">export SPARK_DRIVER_MEMORY=1g</div><div class="line">export SPARK_MASTER_IP=192.168.117.51</div><div class="line">export SPARK_LIBRARY_PATH=/root/spark-without-hive/lib</div><div class="line">export SPARK_MASTER_WEBUI_PORT=18080</div><div class="line">export SPARK_WORKER_DIR=/root/spark-without-hive/work</div><div class="line">export SPARK_MASTER_PORT=7077</div><div class="line">export SPARK_WORKER_PORT=7078</div><div class="line">export SPARK_LOG_DIR=/root/spark-without-hive/log</div><div class="line">export SPARK_PID_DIR=&apos;/root/spark-without-hive/run&apos;</div></pre></td></tr></table></figure>
<ul>
<li>slaves（将所有节点都加入，master节点同时也是worker节点）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Goblin01</div><div class="line">Goblin02</div><div class="line">Goblin03</div><div class="line">Goblin04</div></pre></td></tr></table></figure>
<ul>
<li>spark-defaults.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">spark.master                     yarn-cluster</div><div class="line">spark.home                       /root/spark-without-hive</div><div class="line">spark.eventLog.enabled           true</div><div class="line">spark.eventLog.dir               hdfs://Goblin01:8020/spark-log</div><div class="line">spark.serializer                 org.apache.spark.serializer.KryoSerializer</div><div class="line">spark.executor.memory            1g</div><div class="line">spark.driver.memory              1g</div><div class="line">spark.executor.extraJavaOptions  -XX:+PrintGCDetails -Dkey=value -Dnumbers=&quot;one two three&quot;</div></pre></td></tr></table></figure>
<p>spark.master指定Spark运行模式，可以是yarn-client、yarn-cluster…</p>
<p>spark.home指定SPARK_HOME路径</p>
<p>spark.eventLog.enabled需要设为true</p>
<p>spark.eventLog.dir指定路径，放在master节点的hdfs中，端口要跟hdfs设置的端口一致（默认为8020），否则会报错</p>
<p>spark.executor.memory和spark.driver.memory指定executor和dirver的内存，512m或1g，既不能太大也不能太小，因为太小运行不了，太大又会影响其他服务</p>
<h2 id="三、配置YARN"><a href="#三、配置YARN" class="headerlink" title="三、配置YARN"></a>三、配置YARN</h2><p>配置yarn-site.xml，跟hdfs-site.xml在同一个路径下（$HADOOP_HOME/etc/hadoop)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;yarn.resourcemanager.scheduler.class&lt;/name&gt;</div><div class="line">  &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h2 id="四、配置Hive"><a href="#四、配置Hive" class="headerlink" title="四、配置Hive"></a>四、配置Hive</h2><ul>
<li>添加spark依赖到hive(将spark-assembly-1.5.0-cdh5.5.1-hadoop2.6.0.jar拷贝到$HIVE\_HOME/lib目录下）</li>
</ul>
<p>进入SPARK\_HOME</p>
<pre><code>cp spark-assembly-1.5.0-cdh5.5.1-hadoop2.6.0.jar /usr/lib/hive/lib
</code></pre><ul>
<li>配置hive-site.xml</li>
</ul>
<p>配置的内容与spark-defaults.conf相同，只是形式不一样,以下内容是追加到hive-site.xml文件中的,并且注意前两个配置，如果不设置hive的spark引擎用不了，在后面会有详细的错误说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.execution.engine&lt;/name&gt;</div><div class="line">  &lt;value&gt;spark&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.enable.spark.execution.engine&lt;/name&gt;</div><div class="line">  &lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.home&lt;/name&gt;</div><div class="line">  &lt;value&gt;/root/spark-without-hive&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.master&lt;/name&gt;</div><div class="line">  &lt;value&gt;yarn-client&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.enentLog.enabled&lt;/name&gt;</div><div class="line">  &lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.enentLog.dir&lt;/name&gt;</div><div class="line">  &lt;value&gt;hdfs://Goblin01:8020/spark-log&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.serializer&lt;/name&gt;</div><div class="line">&lt;value&gt;org.apache.spark.serializer.KryoSerializer&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.executor.memeory&lt;/name&gt;</div><div class="line">  &lt;value&gt;1g&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.driver.memeory&lt;/name&gt;</div><div class="line">  &lt;value&gt;1g&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;spark.executor.extraJavaOptions&lt;/name&gt;</div><div class="line">  &lt;value&gt;-XX:+PrintGCDetails -Dkey=value -Dnumbers=&quot;one two three&quot;&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h2 id="五、验证是否安装配置成功"><a href="#五、验证是否安装配置成功" class="headerlink" title="五、验证是否安装配置成功"></a>五、验证是否安装配置成功</h2><h3 id="1-验证Spark集群"><a href="#1-验证Spark集群" class="headerlink" title="1.验证Spark集群"></a>1.验证Spark集群</h3><p><strong>注意：在启动Spark集群之前，要确保Hadoop集群和YARN均已启动</strong></p>
<ul>
<li>进入$SPARK_HOME目录，执行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sbin/start-all.sh</div></pre></td></tr></table></figure>
<p>用jps命令查看51节点上的master和worker，52、53、54节点上的worker是否都启动了</p>
<ul>
<li>同样在$SPARK_HOME目录下，提交计算Pi的任务，验证Spark集群是否能正常工作，运行如下命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn --deploy-mode client lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</div></pre></td></tr></table></figure>
<p>若无报错，并且算出Pi的值，说明Spark集群能正常工作</p>
<h3 id="2-验证Hive-on-Spark是否可用"><a href="#2-验证Hive-on-Spark是否可用" class="headerlink" title="2.验证Hive on Spark是否可用"></a>2.验证Hive on Spark是否可用</h3><ul>
<li>命令行输入 hive，进入hive CLI</li>
<li>set hive.execution.engine=spark; (将执行引擎设为Spark，默认是mr，退出hive CLI后，回到默认设置。若想让引擎默认为Spark，需要在hive-site.xml里设置）</li>
<li>create table test(ts BIGINT,line STRING); (创建表）</li>
<li>select count(*) from test;</li>
<li>若整个过程没有报错，并出现正确结果，则Hive on Spark配置成功。</li>
</ul>
<h2 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h2><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><p>编译spark基于maven有两种方式</p>
<ul>
<li>用mvn 命令编译</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./build/mvn -Pyarn -Phadoop-2.6 -Dhadoop.version=2.6.0 -DskipTests clean package</div></pre></td></tr></table></figure>
<p>编译到倒数MQTT模块一直报错，而且编译出的文件比较大，不适合安装集群，因此不推荐。使用Intellij IDEA maven 插件报错如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-569bec7cf6264afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-build-fail.png"></p>
<ul>
<li>使用spark提供的预编译脚本，网络状况稳定，会编译出需要的安装版本，<strong><em>推荐</em></strong>。命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./make-distribution.sh --name &quot;hadoop2-without-hive&quot; --tgz &quot;-Pyarn,hadoop-provided,hadoop-2.6,parquet-provided&quot;</div></pre></td></tr></table></figure>
<p>结果如上文所述。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi  --master yarn  lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</div></pre></td></tr></table></figure>
<p>报错：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-b0e45240c1db92a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spark-fail.png"></p>
<p>原因：</p>
<p>hdfs的默认端口为8020 ，而我们在spark-default.conf中配置成了8021端口，导致连接不上HDFS报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spark.eventLog.enabled           true</div><div class="line">spark.eventLog.dir              hdfs://Goblin01:8021/spark-log</div></pre></td></tr></table></figure>
<p>解决：</p>
<p>配置spark-default.conf中的spark.eventLog.dir 为本地路径，也就是不持久化日志到hdfs上，也就没有和hdfs的通行</p>
<p>or</p>
<p>spark-default.conf 注释掉 spark.eventLog.enabled   true</p>
<p>or</p>
<p>在spark-default.conf里配置的eventLog端口跟hdfs的默认端口（8020）一致</p>
<p>or</p>
<p>由于配置的hdfs是高可用的，51,52都可以作为namenode,我们的spark集群的主节点在51上，当51上的namenode变成standby，导致无法访问hdfs的8020端口（hdfs默认端口），也就是说在51上读不出hdfs上spark-log的内容，在spark-default.conf中配置为spark.eventLog.dir   hdfs://Goblin01:8021/spark-log，如果发生这种情况，直接kill掉52，让namenode只在51上运行。（这个后面要搭建spark的高可用模式解决）</p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>运行：</p>
<p>在hive里设置引擎为spark，执行select count(*) from a; </p>
<p>报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to execute spark task, with exception &apos;org.apache.hadoop.hive.ql.metadata.HiveException(Unsupported execution engine: Spark. Please set hive.execution.engine=mr)&apos;</div></pre></td></tr></table></figure>
<p>解决：</p>
<p>这是因为CDH版的Hive默认运行支持Hive on Spark（By default, Hive on Spark is not enabled）.</p>
<p>需要用cloudera manager（cloudera官网给的的方法，但是要装cloudera manager，比较麻烦，不建议）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Go to the Hive service.</div><div class="line">Click the Configuration tab.</div><div class="line">Enter Enable Hive on Sparkin the Search field.</div><div class="line">Check the box for Enable Hive on Spark (Unsupported).</div><div class="line">Locate the Spark On YARN Service and click SPARK_ON_YARN.</div><div class="line">Click Save Changes to commit the changes.</div></pre></td></tr></table></figure>
<p>或者</p>
<p>在hive-site.xml添加配置(简单、推荐）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hive.enable.spark.execution.engine&lt;/name&gt;</div><div class="line">&lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>终端输入hive无法启动hive CLI</p>
<p>原因：namenode挂了</p>
<p>解决：重启namenode</p>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master yarn --deploy-mode client lib/spark-examples-1.5.0-cdh5.5.1-hadoop2.6.0.jar 10</div></pre></td></tr></table></figure>
<p>问题：</p>
<p>没有报错，但是出现以下情况，停不下来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-5752bec7fb013e94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="停不下来.png"></p>
<p>原因：</p>
<ol>
<li>ResourceManager或者NodeManager挂掉，一直没有NodeManager响应，任务无法执行，所有停不下来。</li>
<li>还有一种情况是spark有别的application在运行，导致本次spark任务的等待或者失败</li>
</ol>
<p>解决：</p>
<ol>
<li>对于原因1，重启ResourceManager和NodeManager。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service hadoop-yarn-resourcemanager start;</div><div class="line">service hadoop-yarn-nodemanager start;</div></pre></td></tr></table></figure>
<ol>
<li>对于原因2，解决办法是在hadoop配置文件中设置yarn的并行度，在<code>/etc/hadoop/conf/capacity-scheduler.xml</code>文件中配置yarn.scheduler.capacity.maximum-am-resource-percent from 0.1 to 0.5</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">   &lt;name&gt;yarn.scheduler.capacity.maximum-am-resource-percent&lt;/name&gt;</div><div class="line">   &lt;value&gt;0.5&lt;/value&gt;</div><div class="line">   &lt;description&gt;</div><div class="line">     Maximum percent of resources in the cluster which can be used to run</div><div class="line">     application masters i.e. controls number of concurrent running</div><div class="line">     applications.</div><div class="line">   &lt;/description&gt;</div><div class="line"> &lt;/property&gt;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/Hive+on+Spark:+Getting+Started" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/Hive/Hive+on+Spark:+Getting+Started</a></li>
<li><a href="http://www.cloudera.com/documentation/enterprise/5-5-x/topics/admin_hos_config.html" target="_blank" rel="external">http://www.cloudera.com/documentation/enterprise/5-5-x/topics/admin_hos_config.html</a></li>
<li><a href="http://spark.apache.org/docs/latest/building-spark.html" target="_blank" rel="external">http://spark.apache.org/docs/latest/building-spark.html</a></li>
<li><a href="http://stackoverflow.com/questions/31743586/apache-spark-running-locally-giving-refused-connection-error" target="_blank" rel="external">http://stackoverflow.com/questions/31743586/apache-spark-running-locally-giving-refused-connection-error</a></li>
<li><a href="http://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi" target="_blank" rel="external">http://stackoverflow.com/questions/30828879/application-report-for-application-state-accepted-never-ends-for-spark-submi</a></li>
<li><a href="http://www.voidcn.com/blog/tianyiii/article/p-5986990.html" target="_blank" rel="external">http://www.voidcn.com/blog/tianyiii/article/p-5986990.html</a></li>
<li><a href="http://www.imooc.com/article/8613" target="_blank" rel="external">http://www.imooc.com/article/8613</a></li>
<li><a href="http://lxw1234.com/archives/2016/05/673.htm" target="_blank" rel="external">http://lxw1234.com/archives/2016/05/673.htm</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
            <tag> Spark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据基准测试工具TPCx-BB源码分析]]></title>
      <url>http://linbingdong.com/2016/09/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7TPCx-BB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>TPCx-BB是大数据基准测试工具,它通过模拟零售商的30个应用场景，执行30个查询来衡量基于Hadoop的大数据系统的包括硬件和软件的性能。其中一些场景还用到了机器学习算法（聚类、线性回归等）。为了更好地了解被测试的系统的性能，需要对TPCx-BB整个测试流程深入了解。本文详细分析了整个TPCx-BB测试工具的源码，希望能够对大家理解TPCx-BB有所帮助。</p>
<a id="more"></a>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>主目录（<code>$BENCH_MARK_HOME</code>）下有：</p>
<ul>
<li>bin</li>
<li>conf</li>
<li>data-generator</li>
<li>engines</li>
<li>tools</li>
</ul>
<p>几个子目录。</p>
<p><strong>bin</strong>下有几个 <code>module</code> ,是执行时需要用到的脚本：<strong>bigBench</strong>、cleanLogs、logEnvInformation、<strong>runBenchmark</strong>、zipLogs等</p>
<p><strong>conf</strong>下有两个配置文件：<code>bigBench.properties</code> 和 <code>userSettings.conf</code></p>
<p><code>bigBench.properties</code> 主要设置 <code>workload</code>（执行的benchmarkPhases）和 <code>power_test_0</code>（<code>POWER_TEST</code> 阶段需要执行的SQL查询）</p>
<p>默认 <code>workload</code> ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workload=CLEAN_ALL,ENGINE_VALIDATION_DATA_GENERATION,ENGINE_VALIDATION_LOAD_TEST,ENGINE_VALIDATION_POWER_TEST,ENGINE_VALIDATION_RESULT_VALIDATION,CLEAN_DATA,DATA_GENERATION,BENCHMARK_START,LOAD_TEST,POWER_TEST,THROUGHPUT_TEST_1,BENCHMARK_STOP,VALIDATE_POWER_TEST,VALIDATE_THROUGHPUT_TEST_1</div></pre></td></tr></table></figure>
<p>默认 <code>power_test_0</code> ：<code>1-30</code></p>
<p><code>userSetting.conf</code> 是一些基本设置，包括JAVA environment 、default settings for benchmark（database、engine、map_tasks、scale_factor …）、HADOOP environment、<br>HDFS config and paths、Hadoop data generation options(DFS_REPLICATION、HADOOP_JVM_ENV…)</p>
<p><strong>data-generator</strong>下是跟数据生成相关的脚本及配置文件。详细内容在下面介绍。</p>
<p><strong>engines</strong>下是TPCx-BB支持的4种引擎：biginsights、hive、impala、spark_sql。默认引擎为hive。实际上，只有hive目录下不为空，其他三个目录下均为空，估计是现在还未完善。</p>
<p><strong>tools</strong>下有两个jar包：<code>HadoopClusterExec.jar</code> 和 <code>RunBigBench.jar</code> 。其中 <code>RunBigBench.jar</code> 是执行TPCx-BB测试的一个非常重要的文件，大部分程序都在该jar包内。</p>
<h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><p>数据生成相关程序和配置都在 <code>data-generator</code> 目录下。该目录下有一个 <code>pdgf.jar</code> 包和 <code>config、dicts、extlib</code> 三个子目录。</p>
<p><strong>pdgf.jar</strong>是数据生成的Java程序，代码量很大。config下有两个配置文件：<code>bigbench-generation.xml</code> 和 <code>bigbench-schema.xml</code> 。</p>
<p><code>bigbench-generation.xml</code> 主要设置生成的原始数据（不是数据库表）包含哪几张表、每张表的表名以及表输出的目录、表文件的后缀、分隔符、字符编码等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"default"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tables</span>&gt;</span>	</div><div class="line">		<span class="comment">&lt;!-- not refreshed tables --&gt;</span>	</div><div class="line">			</div><div class="line">			<span class="comment">&lt;!-- tables not used in benchmark, but some tables have references to them. not refreshed. Kept for legacy reasons  --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"income_band"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"reason"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"ship_mode"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"web_site"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>		</div><div class="line">			<span class="comment">&lt;!-- /tables not used in benchmark  --&gt;</span></div><div class="line">			</div><div class="line">			<span class="comment">&lt;!-- Static tables (fixed small size, generated only on node 1, skipped on others, not generated during refresh) --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"date_dim"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"time_dim"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"customer_demographics"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"household_demographics"</span> <span class="attr">static</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- /static tables --&gt;</span></div><div class="line">			</div><div class="line">			<span class="comment">&lt;!-- "normal" tables. split over all nodes. not generated during refresh --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"store"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"warehouse"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"promotion"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"web_page"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- /"normal" tables.--&gt;</span></div><div class="line">			</div><div class="line">		<span class="comment">&lt;!-- /not refreshed tables --&gt;</span>	</div><div class="line">			</div><div class="line">			<span class="comment">&lt;!-- </span></div><div class="line">			refreshed tables. Generated on all nodes. </div><div class="line">			Refresh tables generate extra data during refresh (e.g. add new data to the existing tables)</div><div class="line">			In "normal"-Phase  generate table rows:  [0,REFRESH_PERCENTAGE*Table.Size]; </div><div class="line">			In "refresh"-Phase generate table rows:  [REFRESH_PERCENTAGE*Table.Size+1, Table.Size] </div><div class="line">			.Has effect only if  $&#123;REFRESH_SYSTEM_ENABLED&#125;==1. </div><div class="line">			--&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"customer"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">scheduler</span> <span class="attr">name</span>=<span class="string">"DefaultScheduler"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">partitioner</span></span></div><div class="line">						<span class="attr">name</span>=<span class="string">"pdgf.core.dataGenerator.scheduler.TemplatePartitioner"</span>&gt;</div><div class="line">						<span class="tag">&lt;<span class="name">prePartition</span>&gt;</span>&lt;![CDATA[</div><div class="line">					if($&#123;REFRESH_SYSTEM_ENABLED&#125;&gt;0)&#123;</div><div class="line">						int tableID = table.getTableID();</div><div class="line">						int timeID = 0;</div><div class="line">						long lastTableRow=table.getSize()-1;</div><div class="line">						long rowStart;</div><div class="line">						long rowStop;</div><div class="line">						boolean exclude=false;</div><div class="line">						long refreshRows=table.getSize()*(1.0-$&#123;REFRESH_PERCENTAGE&#125;);</div><div class="line">						if($&#123;REFRESH_PHASE&#125;&gt;0)&#123;</div><div class="line">							//Refresh part</div><div class="line">							rowStart = lastTableRow - refreshRows +1;</div><div class="line">							rowStop  = lastTableRow;</div><div class="line">							if(refreshRows&lt;=0)&#123;</div><div class="line">								exclude=true;</div><div class="line">							&#125;</div><div class="line">							</div><div class="line">						&#125;else&#123;</div><div class="line">							//"normal" part</div><div class="line">							rowStart = 0;</div><div class="line">							rowStop = lastTableRow - refreshRows;</div><div class="line">						&#125;</div><div class="line">						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);</div><div class="line">					&#125;else&#123;</div><div class="line">						//DEFAULT</div><div class="line">						return getParentPartitioner().getDefaultPrePartition(project, table);				</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">					]]&gt;<span class="tag">&lt;/<span class="name">prePartition</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">partitioner</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">scheduler</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"SplitFileOutputWrapper"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- DEFAULT output for all Tables, if no table specific output is specified--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"CSVRowOutput"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">fileTemplate</span>&gt;</span>&lt;![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]&gt;<span class="tag">&lt;/<span class="name">fileTemplate</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">outputDir</span>&gt;</span>output/<span class="tag">&lt;/<span class="name">outputDir</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">fileEnding</span>&gt;</span>.dat<span class="tag">&lt;/<span class="name">fileEnding</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>|<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">sortByRowID</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sortByRowID</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">output</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"StatisticsOutput"</span> <span class="attr">active</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>$&#123;item_size&#125;<span class="tag">&lt;/<span class="name">size</span>&gt;</span><span class="comment">&lt;!-- a counter per item .. initialize later--&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">fileTemplate</span>&gt;</span>&lt;![CDATA[outputDir + table.getName()+"_audit" +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]&gt;<span class="tag">&lt;/<span class="name">fileTemplate</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">outputDir</span>&gt;</span>output/<span class="tag">&lt;/<span class="name">outputDir</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">fileEnding</span>&gt;</span>.csv<span class="tag">&lt;/<span class="name">fileEnding</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">delimiter</span>&gt;</span>,<span class="tag">&lt;/<span class="name">delimiter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="comment">&lt;!--"" + pdgf.util.Constants.DEFAULT_LINESEPARATOR--&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>bigbench-schema.xml</code> 设置了很多参数，有跟表的规模有关的，比如每张表的大小（记录的条数）;绝大多数是跟表的字段有关的，比如时间的起始、结束、性别比例、结婚比例、指标的上下界等。还具体定义了每个字段是怎么生成的，以及限制条件。示例如下：</p>
<p>生成的数据大小由 <code>SCALE_FACTOR（-f）</code> 决定。如 <code>-f 1</code>，则生成的数据总大小约为1G；<code>-f 100</code>，则生成的数据总大小约为100G。那么<code>SCALE_FACTOR（-f）</code> 是怎么精确控制生成的数据的大小呢？</p>
<p>原因是 <code>SCALE_FACTOR（-f）</code> 决定了每张表的记录数。如下，<code>customer</code> 表的记录数为 <code>100000.0d * ${SF_sqrt}</code>，即如果 <code>-f 1</code> 则 <code>customer</code> 表的记录数为 <code>100000*sqrt(1)= 10万条</code> ;如果 <code>-f 100</code> 则 <code>customer</code> 表的记录数为 <code>100000*sqrt(100)= 100万条</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;customer_size&#125;"</span> <span class="attr">type</span>=<span class="string">"long"</span>&gt;</span>100000.0d * $&#123;SF_sqrt&#125;<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;DIMENSION_TABLES_START_DAY&#125;"</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span>2000-01-03 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;DIMENSION_TABLES_END_DAY&#125;"</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span>2004-01-05 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;gender_likelihood&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;married_likelihood&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>0.3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;WP_LINK_MIN&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"$&#123;WP_LINK_MAX&#125;"</span> <span class="attr">type</span>=<span class="string">"double"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"d_date"</span> <span class="attr">size</span>=<span class="string">"13"</span> <span class="attr">type</span>=<span class="string">"CHAR"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">gen_DateTime</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">disableRng</span>&gt;</span>true<span class="tag">&lt;/<span class="name">disableRng</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">useFixedStepSize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useFixedStepSize</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">startDate</span>&gt;</span>$&#123;date_dim_begin_date&#125;<span class="tag">&lt;/<span class="name">startDate</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">endDate</span>&gt;</span>$&#123;date_dim_end_date&#125;<span class="tag">&lt;/<span class="name">endDate</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">outputFormat</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">outputFormat</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">gen_DateTime</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"t_time_id"</span> <span class="attr">size</span>=<span class="string">"16"</span> <span class="attr">type</span>=<span class="string">"CHAR"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">gen_ConvertNumberToString</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">gen_Id</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">size</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">size</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">characters</span>&gt;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="tag">&lt;/<span class="name">characters</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">gen_ConvertNumberToString</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"cd_dep_employed_count"</span> <span class="attr">size</span>=<span class="string">"10"</span> <span class="attr">type</span>=<span class="string">"INTEGER"</span> <span class="attr">primary</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">gen_Null</span> <span class="attr">probability</span>=<span class="string">"$&#123;NULL_CHANCE&#125;"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">gen_WeightedListItem</span> <span class="attr">filename</span>=<span class="string">"dicts/bigbench/ds-genProbabilities.txt"</span> <span class="attr">list</span>=<span class="string">"dependent_count"</span> <span class="attr">valueColumn</span>=<span class="string">"0"</span> <span class="attr">weightColumn</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">gen_Null</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>dicts</strong>下有city.dict、country.dict、male.dict、female.dict、state.dict、mail_provider.dict等字典文件，表里每一条记录的各个字段应该是从这些字典里生成的。</p>
<p><strong>extlib</strong>下是引用的外部程序jar包。有 <code>lucene-core-4.9.0.jar</code>、<code>commons-net-3.3.jar</code>、<code>xml-apis.jar</code>和<code>log4j-1.2.15.jar</code>等</p>
<p><strong>总结</strong>：</p>
<p><code>pdgf.jar</code>根据<code>bigbench-generation.xml</code> 和 <code>bigbench-schema.xml</code>两个文件里的配置（表名、字段名、表的记录条数、每个字段生成的规则），从 <code>dicts</code> 目录下对应的 <code>.dict</code><br>文件获取表中每一条记录、每个字段的值，生成原始数据。</p>
<p><code>customer</code> 表里的某条记录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 AAAAAAAAAAAAAAAA 1824793 3203 2555 28776 14690 Ms. Marisa Harrington N 17 4 1988 UNITED ARAB EMIRATES RRCyuY3XfE3a Marisa.Harrington@lawyer.com   gdMmGdU9</div></pre></td></tr></table></figure>
<p>如果执行 TPCx-BB 测试时指定 <code>-f 1（SCALE_FACTOR = 1）</code> 则最终生成的原始数据总大小约为 1G(977M+8.6M)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@node-20-100 ~]<span class="comment"># hdfs dfs -du -h /user/root/benchmarks/bigbench/data</span></div><div class="line">12.7 M   38.0 M   /user/root/benchmarks/bigbench/data/customer</div><div class="line">5.1 M    15.4 M   /user/root/benchmarks/bigbench/data/customer_address</div><div class="line">74.2 M   222.5 M  /user/root/benchmarks/bigbench/data/customer_demographics</div><div class="line">14.7 M   44.0 M   /user/root/benchmarks/bigbench/data/date_dim</div><div class="line">151.5 K  454.4 K  /user/root/benchmarks/bigbench/data/household_demographics</div><div class="line">327      981      /user/root/benchmarks/bigbench/data/income_band</div><div class="line">405.3 M  1.2 G    /user/root/benchmarks/bigbench/data/inventory</div><div class="line">6.5 M    19.5 M   /user/root/benchmarks/bigbench/data/item</div><div class="line">4.0 M    12.0 M   /user/root/benchmarks/bigbench/data/item_marketprices</div><div class="line">53.7 M   161.2 M  /user/root/benchmarks/bigbench/data/product_reviews</div><div class="line">45.3 K   135.9 K  /user/root/benchmarks/bigbench/data/promotion</div><div class="line">3.0 K    9.1 K    /user/root/benchmarks/bigbench/data/reason</div><div class="line">1.2 K    3.6 K    /user/root/benchmarks/bigbench/data/ship_mode</div><div class="line">3.3 K    9.9 K    /user/root/benchmarks/bigbench/data/store</div><div class="line">4.1 M    12.4 M   /user/root/benchmarks/bigbench/data/store_returns</div><div class="line">88.5 M   265.4 M  /user/root/benchmarks/bigbench/data/store_sales</div><div class="line">4.9 M    14.6 M   /user/root/benchmarks/bigbench/data/time_dim</div><div class="line">584      1.7 K    /user/root/benchmarks/bigbench/data/warehouse</div><div class="line">170.4 M  511.3 M  /user/root/benchmarks/bigbench/data/web_clickstreams</div><div class="line">7.9 K    23.6 K   /user/root/benchmarks/bigbench/data/web_page</div><div class="line">5.1 M    15.4 M   /user/root/benchmarks/bigbench/data/web_returns</div><div class="line">127.6 M  382.8 M  /user/root/benchmarks/bigbench/data/web_sales</div><div class="line">8.6 K    25.9 K   /user/root/benchmarks/bigbench/data/web_site</div></pre></td></tr></table></figure>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>要执行TPCx-BB测试，首先需要切换到TPCx-BB源程序的目录下，然后进入bin目录，执行以下语句：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bigBench runBenchmark <span class="_">-f</span> 1 -m 8 <span class="_">-s</span> 2 -j 5</div></pre></td></tr></table></figure>
<p>其中，-f、-m、-s、-j都是参数，用户可根据集群的性能以及自己的需求来设置。如果不指定，则使用默认值，默认值在 <code>conf</code> 目录下的 <code>userSetting.conf</code> 文件指定，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_DATABASE=<span class="string">"bigbench"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_ENGINE=<span class="string">"hive"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_MAP_TASKS=<span class="string">"80"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_SCALE_FACTOR=<span class="string">"1000"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"2"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DEFAULT_BENCHMARK_PHASE=<span class="string">"run_query"</span></div></pre></td></tr></table></figure>
<p>默认 <code>MAP_TASKS</code> 为 <code>80（-m 80）</code>、<code>SCALE_FACTOR</code> 为 <code>1000（-f 1000）</code>、<code>NUMBER_OF_PARALLEL_STREAMS</code> 为 <code>2（-s 2）</code>。</p>
<p>所有可选参数及其意义如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">General options:</div><div class="line"><span class="_">-d</span>  使用的数据库 (默认: <span class="variable">$BIG_BENCH_DEFAULT_DATABASE</span> -&gt; bigbench)</div><div class="line"><span class="_">-e</span>  使用的引擎 (默认: <span class="variable">$BIG_BENCH_DEFAULT_ENGINE</span> -&gt; hive)</div><div class="line"><span class="_">-f</span>  数据集的规模因子（scale factor） (默认: <span class="variable">$BIG_BENCH_DEFAULT_SCALE_FACTOR</span> -&gt; 1000)</div><div class="line">-h  显示帮助</div><div class="line">-m  数据生成的`map tasks`数 (default: <span class="variable">$BIG_BENCH_DEFAULT_MAP_TASKS</span>)<span class="string">"</span></div><div class="line">-s  并行的`stream`数 (默认: <span class="variable">$BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS</span> -&gt; 2)</div><div class="line">Driver specific options:</div><div class="line">-a  伪装模式执行</div><div class="line">-b  执行期间将调用的bash脚本在标准输出中打印出来</div><div class="line">-i  指定需要执行的阶段 (详情见<span class="variable">$BIG_BENCH_CONF_DIR</span>/bigBench.properties)</div><div class="line">-j  指定需要执行的查询 (默认：1-30共30个查询均执行)"</div><div class="line">-U  解锁专家模式</div></pre></td></tr></table></figure>
<p>若指定了<code>-U</code>,即解锁了专家模式，则：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"EXPERT MODE ACTIVE"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"WARNING - INTERNAL USE ONLY:"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Only set manually if you know what you are doing!"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Ignoring them is probably the best solution"</span> </div><div class="line"><span class="built_in">echo</span> <span class="string">"Running individual modules:"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage: `basename <span class="variable">$0</span>` module [options]"</span></div><div class="line">-D  指定需要debug的查询部分. 大部分查询都只有一个单独的部分</div><div class="line">-p  需要执行的benchmark phase (默认: <span class="variable">$BIG_BENCH_DEFAULT_BENCHMARK_PHASE</span> -&gt; run_query)<span class="string">"</span></div><div class="line">-q  指定需要执行哪个查询</div><div class="line">-t  指定执行查询时的stream数</div><div class="line">-v  metastore population的sql脚本 (默认: <span class="variable">$&#123;USER_POPULATE_FILE:-"$BIG_BENCH_POPULATION_DIR/hiveCreateLoad.sql"&#125;</span>)"</div><div class="line">-w  metastore refresh的sql脚本 (默认: <span class="variable">$&#123;USER_REFRESH_FILE:-"$BIG_BENCH_REFRESH_DIR/hiveRefreshCreateLoad.sql"&#125;</span>)<span class="string">"</span></div><div class="line">-y  含额外的用户自定义查询参数的文件 (global: <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/queryParameters.sql)"</div><div class="line">-z  含额外的用户自定义引擎设置的文件 (global: <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/engineSettings.sql)<span class="string">"</span></div><div class="line">List of available modules:</div><div class="line">    <span class="variable">$BIG_BENCH_ENGINE_BIN_DIR</span></div></pre></td></tr></table></figure>
<p>回到刚刚执行TPCx-BB测试的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bigBench runBenchmark -f 1 -m 8 -s 2 -j 5</div></pre></td></tr></table></figure>
<h3 id="bigBench"><a href="#bigBench" class="headerlink" title="bigBench"></a>bigBench</h3><p><code>bigBench</code>是主脚本，<code>runBenchmark</code>是module。</p>
<p><code>bigBench</code> 里设置了很多环境变量，因为后面调用 <code>runBigBench.jar</code> 的时候需要在Java程序里读取这些环境变量。</p>
<p><code>bigBench</code> 前面都是在做一些基本工作，如设置环境变量、解析用户输入参数、赋予文件权限、设置路径等等。到最后一步调用 <code>runBenchmark</code> 的 <code>runModule()</code> 方法：</p>
<p>1.设置基本路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BIG_BENCH_VERSION=<span class="string">"1.0"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_BIN_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/bin"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_CONF_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/conf"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DATA_GENERATOR_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/data-generator"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_TOOLS_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/tools"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_LOGS_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/logs"</span></div></pre></td></tr></table></figure>
<p>2.指定 <code>core-site.xml</code> 和 <code>hdfs-site.xml</code> 的路径</p>
<p>数据生成时要用到Hadoop集群，生成在hdfs上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BIG_BENCH_DATAGEN_CORE_SITE=<span class="string">"<span class="variable">$BIG_BENCH_HADOOP_CONF</span>/core-site.xml"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DATAGEN_HDFS_SITE=<span class="string">"<span class="variable">$BIG_BENCH_HADOOP_CONF</span>/hdfs-site.xml"</span></div></pre></td></tr></table></figure>
<p>3.赋予整个包下所有可执行文件权限（.sh/.jar/.py）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.sh'</span> -exec chmod 755 &#123;&#125; +</div><div class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.jar'</span> -exec chmod 755 &#123;&#125; +</div><div class="line">find <span class="string">"<span class="variable">$BIG_BENCH_HOME</span>"</span> -name <span class="string">'*.py'</span> -exec chmod 755 &#123;&#125; +</div></pre></td></tr></table></figure>
<p>4.设置 <code>userSetting.conf</code> 的路径并 <code>source</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER_SETTINGS=<span class="string">"<span class="variable">$BIG_BENCH_CONF_DIR</span>/userSettings.conf"</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="string">"<span class="variable">$USER_SETTINGS</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"User settings file <span class="variable">$USER_SETTINGS</span> not found"</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">else</span></div><div class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$USER_SETTINGS</span>"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>5.解析输入参数和选项并根据选项的内容作设置</p>
<p>第一个参数必须是<code>module_name</code></p>
<p>如果没有输入参数或者第一个参数以”-“开头，说明用户没有输入需要运行的module。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> <span class="_">-eq</span> 0 || <span class="string">"`echo "</span><span class="variable">$1</span><span class="string">" | cut -c1`"</span> = <span class="string">"-"</span> ]]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">export</span> MODULE_NAME=<span class="string">""</span></div><div class="line">	 SHOW_HELP=<span class="string">"1"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	 <span class="built_in">export</span> MODULE_NAME=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line">	 <span class="built_in">shift</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">export</span> LIST_OF_USER_OPTIONS=<span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure>
<p>解析用户输入的参数</p>
<p>根据用户输入的参数来设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">":d:D:e:f:hm:p:q:s:t:Uv:w:y:z:abi:j:"</span> OPT; <span class="keyword">do</span></div><div class="line">   <span class="keyword">case</span> <span class="string">"<span class="variable">$OPT</span>"</span> <span class="keyword">in</span></div><div class="line">    <span class="comment"># script options</span></div><div class="line">    d)</div><div class="line">      <span class="comment">#echo "-d was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_DATABASE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    D)</div><div class="line">      <span class="comment">#echo "-D was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      DEBUG_QUERY_PART=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    e)</div><div class="line">      <span class="comment">#echo "-e was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_ENGINE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    f)</div><div class="line">      <span class="comment">#echo "-f was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_SCALE_FACTOR=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    h)</div><div class="line">      <span class="comment">#echo "-h was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      SHOW_HELP=<span class="string">"1"</span></div><div class="line">    ;;</div><div class="line">    m)</div><div class="line">      <span class="comment">#echo "-m was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_MAP_TASKS=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    p)</div><div class="line">      <span class="comment">#echo "-p was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_BENCHMARK_PHASE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    q)</div><div class="line">      <span class="comment">#echo "-q was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      QUERY_NUMBER=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    s)</div><div class="line">      <span class="comment">#echo "-t was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    t)</div><div class="line">      <span class="comment">#echo "-s was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_STREAM_NUMBER=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    U)</div><div class="line">      <span class="comment">#echo "-U was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_EXPERT_MODE=<span class="string">"1"</span></div><div class="line">    ;;</div><div class="line">    v)</div><div class="line">      <span class="comment">#echo "-v was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_POPULATE_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    w)</div><div class="line">      <span class="comment">#echo "-w was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_REFRESH_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    y)</div><div class="line">      <span class="comment">#echo "-y was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_QUERY_PARAMS_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    z)</div><div class="line">      <span class="comment">#echo "-z was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      USER_ENGINE_SETTINGS_FILE=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    <span class="comment"># driver options</span></div><div class="line">    a)</div><div class="line">      <span class="comment">#echo "-a was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      <span class="built_in">export</span> USER_PRETEND_MODE=<span class="string">"1"</span></div><div class="line">    ;;</div><div class="line">    b)</div><div class="line">      <span class="comment">#echo "-b was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      <span class="built_in">export</span> USER_PRINT_STD_OUT=<span class="string">"1"</span></div><div class="line">    ;;</div><div class="line">    i)</div><div class="line">      <span class="comment">#echo "-i was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      <span class="built_in">export</span> USER_DRIVER_WORKLOAD=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    j)</div><div class="line">      <span class="comment">#echo "-j was triggered, Parameter: $OPTARG" &gt;&amp;2</span></div><div class="line">      <span class="built_in">export</span> USER_DRIVER_QUERIES_TO_RUN=<span class="string">"<span class="variable">$OPTARG</span>"</span></div><div class="line">    ;;</div><div class="line">    \?)</div><div class="line">      <span class="built_in">echo</span> <span class="string">"Invalid option: -<span class="variable">$OPTARG</span>"</span> &gt;&amp;2</div><div class="line">      <span class="built_in">exit</span> 1</div><div class="line">    ;;</div><div class="line">    :)</div><div class="line">      <span class="built_in">echo</span> <span class="string">"Option -<span class="variable">$OPTARG</span> requires an argument."</span> &gt;&amp;2</div><div class="line">      <span class="built_in">exit</span> 1</div><div class="line">  ;;</div><div class="line">  <span class="keyword">esac</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>6.设置全局变量</p>
<p>如果用户指定了某个参数的值，则采用该值，否则使用默认值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BIG_BENCH_EXPERT_MODE=<span class="string">"<span class="variable">$&#123;USER_EXPERT_MODE:-"0"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> SHOW_HELP=<span class="string">"<span class="variable">$&#123;SHOW_HELP:-"0"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_DATABASE=<span class="string">"<span class="variable">$&#123;USER_DATABASE:-"$BIG_BENCH_DEFAULT_DATABASE"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE=<span class="string">"<span class="variable">$&#123;USER_ENGINE:-"$BIG_BENCH_DEFAULT_ENGINE"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_MAP_TASKS=<span class="string">"<span class="variable">$&#123;USER_MAP_TASKS:-"$BIG_BENCH_DEFAULT_MAP_TASKS"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_SCALE_FACTOR=<span class="string">"<span class="variable">$&#123;USER_SCALE_FACTOR:-"$BIG_BENCH_DEFAULT_SCALE_FACTOR"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS=<span class="string">"<span class="variable">$&#123;USER_NUMBER_OF_PARALLEL_STREAMS:-"$BIG_BENCH_DEFAULT_NUMBER_OF_PARALLEL_STREAMS"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_BENCHMARK_PHASE=<span class="string">"<span class="variable">$&#123;USER_BENCHMARK_PHASE:-"$BIG_BENCH_DEFAULT_BENCHMARK_PHASE"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_STREAM_NUMBER=<span class="string">"<span class="variable">$&#123;USER_STREAM_NUMBER:-"0"&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE_DIR=<span class="string">"<span class="variable">$BIG_BENCH_HOME</span>/engines/<span class="variable">$BIG_BENCH_ENGINE</span>"</span></div><div class="line"><span class="built_in">export</span> BIG_BENCH_ENGINE_CONF_DIR=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_DIR</span>/conf"</span></div></pre></td></tr></table></figure>
<p>7.检测 -s -m -f -j的选项是否为数字</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_MAP_TASKS</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_MAP_TASKS</span> is not a number"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_SCALE_FACTOR</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_SCALE_FACTOR</span> is not a number"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span> is not a number"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"`echo "</span><span class="variable">$BIG_BENCH_STREAM_NUMBER</span><span class="string">" | sed -e 's/[0-9]*//g'`"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$BIG_BENCH_STREAM_NUMBER</span> is not a number"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>8.检查引擎是否存在</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_DIR</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"Engine directory <span class="variable">$BIG_BENCH_ENGINE_DIR</span> not found. Aborting script..."</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Engine configuration directory <span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span> not found. Aborting script..."</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>9.设置 <code>engineSetting.conf</code> 路径并 <code>source</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ENGINE_SETTINGS=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_CONF_DIR</span>/engineSettings.conf"</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="string">"<span class="variable">$ENGINE_SETTINGS</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"Engine settings file <span class="variable">$ENGINE_SETTINGS</span> not found"</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">else</span></div><div class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$ENGINE_SETTINGS</span>"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>10.检查module是否存在</p>
<p>当输入某个module时，系统会先到<code>$BIG_BENCH_ENGINE_BIN_DIR/</code>目录下去找该module是否存在，如果存在，就<code>source &quot;$MODULE&quot;</code>；如果该目录下不存在指定的module，再到<code>export MODULE=&quot;$BIG_BENCH_BIN_DIR/&quot;</code>目录下找该module，如果存在，就<code>source &quot;$MODULE&quot;</code>；否则，输出<code>Module $MODULE not found, aborting script.</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> MODULE=<span class="string">"<span class="variable">$BIG_BENCH_ENGINE_BIN_DIR</span>/<span class="variable">$MODULE_NAME</span>"</span></div><div class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$MODULE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$MODULE</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	 <span class="built_in">export</span> MODULE=<span class="string">"<span class="variable">$BIG_BENCH_BIN_DIR</span>/<span class="variable">$MODULE_NAME</span>"</span></div><div class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$MODULE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">source</span> <span class="string">"<span class="variable">$MODULE</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"Module <span class="variable">$MODULE</span> not found, aborting script."</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>11.检查module里的runModule（）、helpModule ( )、runEngineCmd()方法是否有定义</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MODULE_RUN_METHOD=<span class="string">"runModule"</span></div><div class="line"><span class="keyword">if</span> ! <span class="built_in">declare</span> -F <span class="string">"<span class="variable">$MODULE_RUN_METHOD</span>"</span> &gt; /dev/null 2&gt;&amp;1</div><div class="line"><span class="keyword">then</span></div><div class="line">	 <span class="built_in">echo</span> <span class="string">"<span class="variable">$MODULE_RUN_METHOD</span> was not implemented, aborting script"</span></div><div class="line">	 <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>12.运行<code>module</code></p>
<p>如果module是runBenchmark，执行<br><code>runCmdWithErrorCheck &quot;$MODULE_RUN_METHOD&quot;</code><br>也就是<br><code>runCmdWithErrorCheck runModule（）</code></p>
<p><strong>由上可以看出，bigBench脚本主要执行一些如设置环境变量、赋予权限、检查并解析输入参数等基础工作，最终调用<code>runBenchmark</code>的<code>runModule()</code>方法继续往下执行。</strong></p>
<h3 id="runBenchmark"><a href="#runBenchmark" class="headerlink" title="runBenchmark"></a>runBenchmark</h3><p>接下来看看<code>runBenchmark</code>脚本。</p>
<p><code>runBenchmark</code>里有两个函数：<code>helpModule ()</code>和<code>runModule ()</code>。</p>
<p><code>helpModule ()</code>就是显示帮助。</p>
<p><code>runModule ()</code>是运行<code>runBenchmark</code>模块时真正调用的函数。该函数主要做四件事：</p>
<ol>
<li>清除之前生成的日志</li>
<li>调用<code>RunBigBench.jar</code>来执行</li>
<li>logEnvInformation</li>
<li>将日志文件夹打包成zip</li>
</ol>
<p>源码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">runModule</span></span> () &#123;</div><div class="line">  <span class="comment">#check input parameters</span></div><div class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS</span>"</span> -le 0 ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"The number of parallel streams -s must be greater than 0"</span></div><div class="line">    <span class="built_in">return</span> 1</div><div class="line">  <span class="keyword">fi</span></div><div class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> cleanLogs -U <span class="variable">$LIST_OF_USER_OPTIONS</span></div><div class="line">  <span class="string">"<span class="variable">$BIG_BENCH_JAVA</span>"</span> -jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/RunBigBench.jar"</span></div><div class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> <span class="built_in">log</span>EnvInformation -U <span class="variable">$LIST_OF_USER_OPTIONS</span></div><div class="line">  <span class="string">"<span class="variable">$&#123;BIG_BENCH_BIN_DIR&#125;</span>/bigBench"</span> zipLogs -U <span class="variable">$LIST_OF_USER_OPTIONS</span></div><div class="line">  <span class="built_in">return</span> $?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相当于运行<code>runBenchmark</code>模块时又调用了<code>cleanLogs</code>、<code>logEnvInformation</code>、<code>zipLogs</code>三个模块以及<code>RunBigBench.jar</code>。其中<code>RunBigBench.jar</code>是TCPx-BB测试执行的核心代码，用Java语言编写。接下来分析<code>RunBigBench.jar</code>源码。</p>
<h3 id="runModule"><a href="#runModule" class="headerlink" title="runModule()"></a>runModule()</h3><p>runModule()函数用来执行某个module。我们已知，执行某个module需要切换到主目录下的bin目录，然后执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bigBench module_name arguments</div></pre></td></tr></table></figure>
<p>在runModule()函数里，cmdLine用来生成如上命令。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList cmdLine = <span class="keyword">new</span> ArrayList();</div><div class="line">cmdLine.add(<span class="string">"bash"</span>);</div><div class="line">cmdLine.add(<span class="keyword">this</span>.runScript);</div><div class="line">cmdLine.add(benchmarkPhase.getRunModule());</div><div class="line">cmdLine.addAll(arguments);</div></pre></td></tr></table></figure>
<p>其中，<code>this.runScript</code>为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runScript = (String)env.get(<span class="string">"BIG_BENCH_BIN_DIR"</span>) + <span class="string">"/bigBench"</span>;</div></pre></td></tr></table></figure>
<p><code>benchmarkPhase.getRunModule()</code>用来获得需要执行的module。</p>
<p><code>arguments</code>为用户输入的参数。</p>
<p>至此，cmdLine为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash <span class="variable">$BIG_BENCH_BIN_DIR</span>/bigBench module_name arguments</div></pre></td></tr></table></figure>
<p><strong>那么，怎么让系统执行该bash命令呢？答案是调用<code>runCmd()</code>方法。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> successful = <span class="keyword">this</span>.runCmd(<span class="keyword">this</span>.homeDir, benchmarkPhase.isPrintStdOut(), (String[])cmdLine.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</div></pre></td></tr></table></figure>
<p>接下来介绍rumCmd()方法</p>
<h3 id="runCmd"><a href="#runCmd" class="headerlink" title="runCmd()"></a>runCmd()</h3><p>runCmd()方法通过<code>ProcessBuilder</code>来创建一个操作系统进程，并用该进程执行以上的bash命令。</p>
<p><code>ProcessBuilder</code>还可以设置工作目录和环境。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder(command);</div><div class="line">pb.directory(<span class="keyword">new</span> File(workingDirectory));</div><div class="line">Process p = <span class="keyword">null</span>;</div><div class="line">---</div><div class="line">p = pb.start();</div></pre></td></tr></table></figure>
<h3 id="getQueryList"><a href="#getQueryList" class="headerlink" title="getQueryList()"></a>getQueryList()</h3><p>getQueryList()用来获得需要执行的查询列表。从<code>$BIG_BENCH_LOGS_DIR/bigBench.properties</code>文件中读取。与<code>$BIG_BENCH_HOME/conf/bigBench.properties</code>内容一致。</p>
<p><code>bigBench.properties</code>里<code>power_test_0=1-30</code>规定了<code>powter_test_0</code>阶段需要执行的查询及其顺序。</p>
<p>可以用区间如 <code>5-12</code> 或者单个数字如 <code>21</code> 表示，中间用 <code>,</code> 隔开。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">power_test_0=28-25,2-5,10,22,30</div></pre></td></tr></table></figure>
<p>表示<code>powter_test_0</code>阶段需要执行的查询及其顺序为：<code>25,26,27,28,2,3,4,5,10,22,30</code></p>
<p>如果想让30个查询按顺序执行，则：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">power_test_0=1-30</div></pre></td></tr></table></figure>
<p>获得查询列表的源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getQueryList</span><span class="params">(BigBench.BenchmarkPhase benchmarkPhase, <span class="keyword">int</span> streamNumber)</span> </span>&#123;</div><div class="line">    String SHUFFLED_NAME_PATTERN = <span class="string">"shuffledQueryList"</span>;</div><div class="line">    BigBench.BenchmarkPhase queryOrderBasicPhase = BigBench.BenchmarkPhase.POWER_TEST;</div><div class="line">    String propertyKey = benchmarkPhase.getQueryListProperty(streamNumber);</div><div class="line">    <span class="keyword">boolean</span> queryOrderCached = benchmarkPhase.isQueryOrderCached();</div><div class="line">    <span class="keyword">if</span>(queryOrderCached &amp;&amp; <span class="keyword">this</span>.queryListCache.containsKey(propertyKey)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList((Collection)<span class="keyword">this</span>.queryListCache.get(propertyKey));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Object queryList;</div><div class="line">        String basicPhaseNamePattern;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.properties.containsKey(propertyKey)) &#123;</div><div class="line">            <span class="keyword">if</span>(benchmarkPhase.isQueryOrderRandom()) &#123;</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.queryListCache.containsKey(<span class="string">"shuffledQueryList"</span>)) &#123;</div><div class="line">                    basicPhaseNamePattern = queryOrderBasicPhase.getQueryListProperty(<span class="number">0</span>);</div><div class="line">                    <span class="keyword">if</span>(!<span class="keyword">this</span>.properties.containsKey(basicPhaseNamePattern)) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property "</span> + basicPhaseNamePattern + <span class="string">" is not defined, but is the basis for shuffling the query list."</span>);</div><div class="line">                    &#125;                      <span class="keyword">this</span>.queryListCache.put(<span class="string">"shuffledQueryList"</span>, <span class="keyword">this</span>.getQueryList(queryOrderBasicPhase, <span class="number">0</span>));</div><div class="line">                &#125;</div><div class="line">                queryList = (List)<span class="keyword">this</span>.queryListCache.get(<span class="string">"shuffledQueryList"</span>);                  <span class="keyword">this</span>.shuffleList((List)queryList, <span class="keyword">this</span>.rnd);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                queryList = <span class="keyword">this</span>.getQueryList(queryOrderBasicPhase, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            queryList = <span class="keyword">new</span> ArrayList();</div><div class="line">            String[] var11;</div><div class="line">            <span class="keyword">int</span> var10 = (var11 = <span class="keyword">this</span>.properties.getProperty(propertyKey).split(<span class="string">","</span>)).length;</div><div class="line">            label65:</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var9 = <span class="number">0</span>; var9 &lt; var10; ++var9) &#123;</div><div class="line">                basicPhaseNamePattern = var11[var9];</div><div class="line">                String[] queryRange = basicPhaseNamePattern.trim().split(<span class="string">"-"</span>);</div><div class="line">                <span class="keyword">switch</span>(queryRange.length) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:                       ((List)queryList).add(Integer.valueOf(Integer.parseInt(queryRange[<span class="number">0</span>].trim())));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    <span class="keyword">int</span> startQuery = Integer.parseInt(queryRange[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">int</span> endQuery = Integer.parseInt(queryRange[<span class="number">1</span>]);</div><div class="line">                    <span class="keyword">int</span> i;</div><div class="line">                    <span class="keyword">if</span>(startQuery &gt; endQuery) &#123;</div><div class="line">                        i = startQuery;</div><div class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">                            <span class="keyword">if</span>(i &lt; endQuery) &#123;</div><div class="line">                                <span class="keyword">continue</span> label65;</div><div class="line">                            &#125;                               ((List)queryList).add(Integer.valueOf(i));</div><div class="line">                            --i;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        i = startQuery;</div><div class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">                            <span class="keyword">if</span>(i &gt; endQuery) &#123;</div><div class="line">                                <span class="keyword">continue</span> label65;</div><div class="line">                            &#125;                              ((List)queryList).add(Integer.valueOf(i));</div><div class="line">                            ++i;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Query numbers must be in the form X or X-Y, comma separated."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(queryOrderCached) &#123;              <span class="keyword">this</span>.queryListCache.put(propertyKey, <span class="keyword">new</span> ArrayList((Collection)queryList));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList((Collection)queryList);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="parseEnvironment"><a href="#parseEnvironment" class="headerlink" title="parseEnvironment()"></a>parseEnvironment()</h3><p>parseEnvironment()读取系统的环境变量并解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Map env = System.getenv();</div><div class="line"><span class="keyword">this</span>.version = (String)env.get(<span class="string">"BIG_BENCH_VERSION"</span>);</div><div class="line"><span class="keyword">this</span>.homeDir = (String)env.get(<span class="string">"BIG_BENCH_HOME"</span>);</div><div class="line"><span class="keyword">this</span>.confDir = (String)env.get(<span class="string">"BIG_BENCH_CONF_DIR"</span>);</div><div class="line"><span class="keyword">this</span>.runScript = (String)env.get(<span class="string">"BIG_BENCH_BIN_DIR"</span>) + <span class="string">"/bigBench"</span>;</div><div class="line"><span class="keyword">this</span>.datagenDir = (String)env.get(<span class="string">"BIG_BENCH_DATA_GENERATOR_DIR"</span>);</div><div class="line"><span class="keyword">this</span>.logDir = (String)env.get(<span class="string">"BIG_BENCH_LOGS_DIR"</span>);</div><div class="line"><span class="keyword">this</span>.dataGenLogFile = (String)env.get(<span class="string">"BIG_BENCH_DATAGEN_STAGE_LOG"</span>);</div><div class="line"><span class="keyword">this</span>.loadLogFile = (String)env.get(<span class="string">"BIG_BENCH_LOADING_STAGE_LOG"</span>);</div><div class="line"><span class="keyword">this</span>.engine = (String)env.get(<span class="string">"BIG_BENCH_ENGINE"</span>);</div><div class="line"><span class="keyword">this</span>.database = (String)env.get(<span class="string">"BIG_BENCH_DATABASE"</span>);</div><div class="line"><span class="keyword">this</span>.mapTasks = (String)env.get(<span class="string">"BIG_BENCH_MAP_TASKS"</span>);</div><div class="line"><span class="keyword">this</span>.numberOfParallelStreams = Integer.parseInt((String)env.get(<span class="string">"BIG_BENCH_NUMBER_OF_PARALLEL_STREAMS"</span>));</div><div class="line"><span class="keyword">this</span>.scaleFactor = Long.parseLong((String)env.get(<span class="string">"BIG_BENCH_SCALE_FACTOR"</span>));</div><div class="line"><span class="keyword">this</span>.stopAfterFailure = ((String)env.get(<span class="string">"BIG_BENCH_STOP_AFTER_FAILURE"</span>)).equals(<span class="string">"1"</span>);</div></pre></td></tr></table></figure>
<p>并自动在用户指定的参数后面加上 <code>-U</code> (解锁专家模式)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.userArguments.add(<span class="string">"-U"</span>);</div></pre></td></tr></table></figure>
<p>如果用户指定了 <code>PRETEND_MODE</code>、<code>PRINT_STD_OUT</code>、<code>WORKLOAD</code>、<code>QUERIES_TO_RUN</code>，则以用户指定的参数为准，否则使用默认值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_PRETEND_MODE"</span>)) &#123;</div><div class="line">	<span class="keyword">this</span>.properties.setProperty(<span class="string">"pretend_mode"</span>, (String)env.get(<span class="string">"USER_PRETEND_MODE"</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_PRINT_STD_OUT"</span>)) &#123;  <span class="keyword">this</span>.properties.setProperty(<span class="string">"show_command_stdout"</span>, (String)env.get(<span class="string">"USER_PRINT_STD_OUT"</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_DRIVER_WORKLOAD"</span>)) &#123;</div><div class="line">   <span class="keyword">this</span>.properties.setProperty(<span class="string">"workload"</span>, (String)env.get(<span class="string">"USER_DRIVER_WORKLOAD"</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(env.containsKey(<span class="string">"USER_DRIVER_QUERIES_TO_RUN"</span>)) &#123;	<span class="keyword">this</span>.properties.setProperty(BigBench.BenchmarkPhase.POWER_TEST.getQueryListProperty(<span class="number">0</span>), (String)env.get(<span class="string">"USER_DRIVER_QUERIES_TO_RUN"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>读取 <code>workload</code> 并赋值 <code>benchmarkPhases</code>。如果 <code>workload</code> 里不包含 <code>BENCHMARK_START</code> 和 <code>BENCHMARK_STOP</code>，自动在 <code>benchmarkPhases</code> 的首位和末位分别加上 <code>BENCHMARK_START</code> 和 <code>BENCHMARK_STOP</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.benchmarkPhases = <span class="keyword">new</span> ArrayList();</div><div class="line">Iterator var7 = Arrays.asList(<span class="keyword">this</span>.properties.getProperty(<span class="string">"workload"</span>).split(<span class="string">","</span>)).iterator();</div><div class="line">	</div><div class="line"><span class="keyword">while</span>(var7.hasNext()) &#123;</div><div class="line">    String benchmarkPhase = (String)var7.next();</div><div class="line">    <span class="keyword">this</span>.benchmarkPhases.add(BigBench.BenchmarkPhase.valueOf(benchmarkPhase.trim()));</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.benchmarkPhases.contains(BigBench.BenchmarkPhase.BENCHMARK_START)) &#123;</div><div class="line">    <span class="keyword">this</span>.benchmarkPhases.add(<span class="number">0</span>, BigBench.BenchmarkPhase.BENCHMARK_START);</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.benchmarkPhases.contains(BigBench.BenchmarkPhase.BENCHMARK_STOP)) &#123;</div><div class="line">    <span class="keyword">this</span>.benchmarkPhases.add(BigBench.BenchmarkPhase.BENCHMARK_STOP);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><p><code>run()</code> 方法是 <code>RunBigBench.jar</code> 里核心的方法。所有的执行都是通过 <code>run()</code> 方法调用的。比如 <code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code>等。<code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code> 又通过调用 <code>runCmd()</code> 方法来创建操作系统进程，执行bash命令，调用bash脚本。</p>
<p><code>run()</code> 方法里通过一个 <code>while</code> 循环来逐一执行 <code>workload</code> 里的每一个 <code>benchmarkPhase</code>。 不同的 <code>benchmarkPhase</code> 会调用 <code>runQueries()</code>、<code>runModule()</code>、<code>generateData()</code>…中的不同方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">long</span> e = <span class="number">0L</span>;</div><div class="line"><span class="keyword">this</span>.log.finer(<span class="string">"Benchmark phases: "</span> + <span class="keyword">this</span>.benchmarkPhases);</div><div class="line">Iterator startCheckpoint = <span class="keyword">this</span>.benchmarkPhases.iterator();</div><div class="line"><span class="keyword">long</span> throughputStart;</div><div class="line"><span class="keyword">while</span>(startCheckpoint.hasNext()) &#123;</div><div class="line">    BigBench.BenchmarkPhase children = (BigBench.BenchmarkPhase)startCheckpoint.next();</div><div class="line">    <span class="keyword">if</span>(children.isPhaseDone()) &#123;</div><div class="line">        <span class="keyword">this</span>.log.info(<span class="string">"The phase "</span> + children.name() + <span class="string">" was already performed earlier. Skipping this phase"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">switch</span>($SWITCH_TABLE$io$bigdatabenchmark$v1$driver$BigBench$BenchmarkPhase()[children.ordinal()]) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">20</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The value "</span> + children.name() + <span class="string">" is only used internally."</span>);</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:                                    <span class="keyword">this</span>.log.info(children.getConsoleMessage());</div><div class="line">                e = System.currentTimeMillis();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">if</span>(!BigBench.BenchmarkPhase.BENCHMARK_START.isPhaseDone()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Error: Cannot stop the benchmark before starting it"</span>);</div><div class="line">                &#125;</div><div class="line">                throughputStart = System.currentTimeMillis();</div><div class="line">              <span class="keyword">this</span>.log.info(String.format(<span class="string">"%-55s finished. Time: %25s"</span>, <span class="keyword">new</span> Object[]&#123;children.getConsoleMessage(), BigBench.Helper.formatTime(throughputStart - e)&#125;));               <span class="keyword">this</span>.logTreeRoot.setCheckpoint(<span class="keyword">new</span> BigBench.Checkpoint(BigBench.BenchmarkPhase.BENCHMARK, -<span class="number">1L</span>, -<span class="number">1L</span>, e, throughputStart, <span class="keyword">this</span>.logTreeRoot.isSuccessful()));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">15</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">18</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">22</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">27</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">28</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">29</span>:</div><div class="line">                <span class="keyword">this</span>.runModule(children, <span class="keyword">this</span>.userArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">11</span>:</div><div class="line">                <span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, validationArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">                <span class="keyword">this</span>.runModule(children, validationArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, validationArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, validationArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">12</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">19</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">24</span>:</div><div class="line">                <span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, <span class="keyword">this</span>.userArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">13</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">14</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">21</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">23</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">25</span>:</div><div class="line">            <span class="keyword">case</span> <span class="number">26</span>:</div><div class="line">                <span class="keyword">this</span>.runQueries(children, <span class="keyword">this</span>.numberOfParallelStreams, <span class="keyword">this</span>.userArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">16</span>:</div><div class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, <span class="keyword">this</span>.userArguments);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">17</span>:</div><div class="line">                <span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, <span class="keyword">this</span>.userArguments);</div><div class="line">            &#125;</div><div class="line">            children.setPhaseDone(<span class="keyword">true</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException var21) &#123;</div><div class="line">            <span class="keyword">this</span>.log.info(<span class="string">"==============\nBenchmark run terminated\nReason: An error occured while running a command in phase "</span> + children + <span class="string">"\n=============="</span>);</div><div class="line">            var21.printStackTrace();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.stopAfterFailure || children.mustSucceed()) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 <code>case 1-29</code> 并不是 <code>1-29</code> 条查询，而是枚举类型里的 <code>1-29</code> 个 <code>benmarkPhase</code> 。如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">enum</span> BenchmarkPhase &#123;</div><div class="line">BENCHMARK((String)<span class="keyword">null</span>, <span class="string">"benchmark"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark"</span>),</div><div class="line">BENCHMARK_START((String)<span class="keyword">null</span>, <span class="string">"benchmark_start"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark: Start"</span>),</div><div class="line">BENCHMARK_STOP((String)<span class="keyword">null</span>, <span class="string">"benchmark_stop"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench benchmark: Stop"</span>),</div><div class="line">CLEAN_ALL(<span class="string">"cleanAll"</span>, <span class="string">"clean_all"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean all"</span>),</div><div class="line">ENGINE_VALIDATION_CLEAN_POWER_TEST(<span class="string">"cleanQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean power test queries"</span>),</div><div class="line">ENGINE_VALIDATION_CLEAN_LOAD_TEST(<span class="string">"cleanMetastore"</span>, <span class="string">"engine_validation_metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean metastore"</span>),</div><div class="line">ENGINE_VALIDATION_CLEAN_DATA(<span class="string">"cleanData"</span>, <span class="string">"engine_validation_data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Clean data"</span>),</div><div class="line">ENGINE_VALIDATION_DATA_GENERATION(<span class="string">"dataGen"</span>, <span class="string">"engine_validation_data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench engine validation: Data generation"</span>),</div><div class="line">ENGINE_VALIDATION_LOAD_TEST(<span class="string">"populateMetastore"</span>, <span class="string">"engine_validation_metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench engine validation: Populate metastore"</span>),</div><div class="line">ENGINE_VALIDATION_POWER_TEST(<span class="string">"runQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Power test"</span>),</div><div class="line">ENGINE_VALIDATION_RESULT_VALIDATION(<span class="string">"validateQuery"</span>, <span class="string">"engine_validation_power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench engine validation: Check all query results"</span>),</div><div class="line">CLEAN_POWER_TEST(<span class="string">"cleanQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean power test queries"</span>),</div><div class="line">CLEAN_THROUGHPUT_TEST_1(<span class="string">"cleanQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean first throughput test queries"</span>),</div><div class="line">CLEAN_THROUGHPUT_TEST_2(<span class="string">"cleanQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Clean second throughput test queries"</span>),</div><div class="line">CLEAN_LOAD_TEST(<span class="string">"cleanMetastore"</span>, <span class="string">"metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Load test"</span>),</div><div class="line">CLEAN_DATA(<span class="string">"cleanData"</span>, <span class="string">"data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench clean: Data"</span>),</div><div class="line">DATA_GENERATION(<span class="string">"dataGen"</span>, <span class="string">"data"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench preparation: Data generation"</span>),</div><div class="line">LOAD_TEST(<span class="string">"populateMetastore"</span>, <span class="string">"metastore"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="string">"BigBench phase 1: Load test"</span>),</div><div class="line">POWER_TEST(<span class="string">"runQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 2: Power test"</span>),</div><div class="line">THROUGHPUT_TEST((String)<span class="keyword">null</span>, <span class="string">"throughput_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Throughput test"</span>),</div><div class="line">THROUGHPUT_TEST_1(<span class="string">"runQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: First throughput test run"</span>),</div><div class="line">THROUGHPUT_TEST_REFRESH(<span class="string">"refreshMetastore"</span>, <span class="string">"throughput_test_refresh"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Throughput test data refresh"</span>),</div><div class="line">THROUGHPUT_TEST_2(<span class="string">"runQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="string">"BigBench phase 3: Second throughput test run"</span>),</div><div class="line">VALIDATE_POWER_TEST(<span class="string">"validateQuery"</span>, <span class="string">"power_test"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: Power test results"</span>),</div><div class="line">VALIDATE_THROUGHPUT_TEST_1(<span class="string">"validateQuery"</span>, <span class="string">"throughput_test_1"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: First throughput test results"</span>),</div><div class="line">VALIDATE_THROUGHPUT_TEST_2(<span class="string">"validateQuery"</span>, <span class="string">"throughput_test_2"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench validation: Second throughput test results"</span>),</div><div class="line">SHOW_TIMES(<span class="string">"showTimes"</span>, <span class="string">"show_times"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query times"</span>),</div><div class="line">SHOW_ERRORS(<span class="string">"showErrors"</span>, <span class="string">"show_errors"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query errors"</span>),</div><div class="line">SHOW_VALIDATION(<span class="string">"showValidation"</span>, <span class="string">"show_validation"</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="string">"BigBench: show query validation results"</span>);</div><div class="line"><span class="keyword">private</span> String runModule;</div><div class="line"><span class="keyword">private</span> String namePattern;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> queryOrderRandom;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> queryOrderCached;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> printStdOut;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mustSucceed;</div><div class="line"><span class="keyword">private</span> String consoleMessage;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> phaseDone;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">BenchmarkPhase</span><span class="params">(String runModule, String namePattern, <span class="keyword">boolean</span> queryOrderRandom, <span class="keyword">boolean</span> queryOrderCached, <span class="keyword">boolean</span> printStdOut, <span class="keyword">boolean</span> mustSucceed, String consoleMessage)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.runModule = runModule;</div><div class="line">    <span class="keyword">this</span>.namePattern = namePattern;</div><div class="line">    <span class="keyword">this</span>.queryOrderRandom = queryOrderRandom;</div><div class="line">    <span class="keyword">this</span>.queryOrderCached = queryOrderCached;</div><div class="line">    <span class="keyword">this</span>.printStdOut = printStdOut;</div><div class="line">    <span class="keyword">this</span>.mustSucceed = mustSucceed;</div><div class="line">    <span class="keyword">this</span>.consoleMessage = consoleMessage;</div><div class="line">    <span class="keyword">this</span>.phaseDone = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3对应 <code>BENCHMARK_STOP</code>，4对应 <code>CLEAN_ALL</code>,29对应 <code>SHOW_VALIDATION</code>，依此类推…</p>
<p>可以看出：</p>
<p><code>CLEAN_ALL、CLEAN_LOAD_TEST、LOAD_TEST、THROUGHPUT_TEST_REFRESH、SHOW_TIMES、SHOW_ERRORS、SHOW_VALIDATION</code>等benchmarkPhases调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runModule(children, <span class="keyword">this</span>.userArguments);</div></pre></td></tr></table></figure>
<p>方法是 <code>runModule</code> ，参数是 <code>this.userArguments</code>。</p>
<p><code>ENGINE_VALIDATION_CLEAN_POWER_TEST、ENGINE_VALIDATION_POWER_TEST、ENGINE_VALIDATION_RESULT_VALIDATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, validationArguments);</div></pre></td></tr></table></figure>
<p>方法是 <code>runQueries</code> ，参数是 <code>1</code>(stream number) 和 <code>validationArguments</code>。</p>
<p><code>ENGINE_VALIDATION_CLEAN_LOAD_TEST</code> 和 <code>ENGINE_VALIDATION_LOAD_TEST</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runModule(children, validationArguments);</div></pre></td></tr></table></figure>
<p><code>ENGINE_VALIDATION_CLEAN_DATA</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, validationArguments);</div></pre></td></tr></table></figure>
<p><code>ENGINE_VALIDATION_DATA_GENERATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, validationArguments);</div></pre></td></tr></table></figure>
<p><code>CLEAN_POWER_TEST</code>、<code>POWER_TEST</code>、<code>VALIDATE_POWER_TEST</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runQueries(children, <span class="number">1</span>, <span class="keyword">this</span>.userArguments);</div></pre></td></tr></table></figure>
<p><code>CLEAN_THROUGHPUT_TEST_1``CLEAN_THROUGHPUT_TEST_2``THROUGHPUT_TEST_1``THROUGHPUT_TEST_2``VALIDATE_THROUGHPUT_TEST_1</code> <code>VALIDATE_THROUGHPUT_TEST_2</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.runQueries(children, <span class="keyword">this</span>.numberOfParallelStreams, <span class="keyword">this</span>.userArguments);</div></pre></td></tr></table></figure>
<p><code>CLEAN_DATA</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">false</span>, <span class="keyword">this</span>.userArguments);</div></pre></td></tr></table></figure>
<p><code>DATA_GENERATION</code> 调用的是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.generateData(children, <span class="keyword">true</span>, <span class="keyword">this</span>.userArguments);</div></pre></td></tr></table></figure>
<p>总结一下以上的方法调用可以发现：</p>
<ul>
<li>跟 <code>ENGINE_VALIDATION</code> 相关的benchmarkPhase用的参数都是 <code>validationArguments</code>。其余用的是 <code>userArguments</code></li>
<li>跟 <code>POWER_TEST</code> 相关的都是调用 <code>runQueries()</code> 方法，因为 <code>POWER_TEST</code> 就是执行SQL查询</li>
<li>跟 <code>CLEAN_DATA</code> <code>DATA_GENERATION</code> 相关的都是调用 <code>generateData()</code> 方法</li>
<li>跟 <code>LOAD_TEST</code> <code>SHOW</code> 相关的都是调用 <code>runModule()</code> 方法</li>
</ul>
<h3 id="benchmarkPhase-和-module-对应关系"><a href="#benchmarkPhase-和-module-对应关系" class="headerlink" title="benchmarkPhase 和 module 对应关系"></a>benchmarkPhase 和 module 对应关系</h3><p>具体每个 <code>benchmarkPhase</code> 跟 <code>module</code>（执行的脚本）的对应关系如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">CLEAN_ALL -&gt; <span class="string">"cleanAll"</span></div><div class="line">ENGINE_VALIDATION_CLEAN_POWER_TEST -&gt; <span class="string">"cleanQuery"</span></div><div class="line">ENGINE_VALIDATION_CLEAN_LOAD_TEST -&gt; <span class="string">"cleanMetastore"</span>,</div><div class="line">ENGINE_VALIDATION_CLEAN_DATA -&gt; <span class="string">"cleanData"</span></div><div class="line">ENGINE_VALIDATION_DATA_GENERATION -&gt; <span class="string">"dataGen"</span></div><div class="line">ENGINE_VALIDATION_LOAD_TEST -&gt; <span class="string">"populateMetastore"</span></div><div class="line">ENGINE_VALIDATION_POWER_TEST -&gt; <span class="string">"runQuery"</span></div><div class="line">ENGINE_VALIDATION_RESULT_VALIDATION -&gt; <span class="string">"validateQuery"</span></div><div class="line">CLEAN_POWER_TEST -&gt; <span class="string">"cleanQuery"</span></div><div class="line">CLEAN_THROUGHPUT_TEST_1 -&gt; <span class="string">"cleanQuery"</span></div><div class="line">CLEAN_THROUGHPUT_TEST_2 -&gt; <span class="string">"cleanQuery"</span></div><div class="line">CLEAN_LOAD_TEST -&gt; <span class="string">"cleanMetastore"</span></div><div class="line">CLEAN_DATA -&gt; <span class="string">"cleanData"</span></div><div class="line">DATA_GENERATION -&gt; <span class="string">"dataGen"</span></div><div class="line">LOAD_TEST -&gt; <span class="string">"populateMetastore"</span></div><div class="line">POWER_TEST -&gt; <span class="string">"runQuery"</span></div><div class="line">THROUGHPUT_TEST -&gt; (String)<span class="keyword">null</span></div><div class="line">THROUGHPUT_TEST_1 -&gt; <span class="string">"runQuery"</span></div><div class="line">THROUGHPUT_TEST_REFRESH -&gt; <span class="string">"refreshMetastore"</span></div><div class="line">THROUGHPUT_TEST_2 -&gt; <span class="string">"runQuery"</span></div><div class="line">VALIDATE_POWER_TEST -&gt; <span class="string">"validateQuery"</span></div><div class="line">VALIDATE_THROUGHPUT_TEST_1 -&gt; <span class="string">"validateQuery"</span></div><div class="line">VALIDATE_THROUGHPUT_TEST_2 -&gt; <span class="string">"validateQuery"</span></div><div class="line">SHOW_TIMES -&gt; <span class="string">"showTimes"</span></div><div class="line">SHOW_ERRORS -&gt; <span class="string">"showErrors"</span></div><div class="line">SHOW_VALIDATION -&gt; <span class="string">"showValidation"</span></div></pre></td></tr></table></figure>
<p>当执行某个 <code>benchmarkPhase</code> 时会去调用如上该 <code>benchmarkPhase</code> 对应的 <code>module</code> （脚本位于 <code>$BENCH_MARK_HOME/engines/hive/bin</code> 目录下）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmdLine.add(benchmarkPhase.getRunModule());</div></pre></td></tr></table></figure>
<h3 id="程序调用流程"><a href="#程序调用流程" class="headerlink" title="程序调用流程"></a>程序调用流程</h3><p><img src="./bigBench.png" alt="Alt text"></p>
<p>接下来介绍每个module的功能</p>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><h3 id="cleanAll"><a href="#cleanAll" class="headerlink" title="cleanAll"></a>cleanAll</h3><pre><code>1. DROP DATABASE
2. 删除hdfs上的源数据
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"dropping database (with all tables)"</span></div><div class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-e</span> <span class="string">"DROP DATABASE IF EXISTS <span class="variable">$BIG_BENCH_DATABASE</span> CASCADE;"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_HOME&#125;</span>"</span></div><div class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_HOME&#125;</span>"</span></div></pre></td></tr></table></figure>
<h3 id="cleanQuery"><a href="#cleanQuery" class="headerlink" title="cleanQuery"></a>cleanQuery</h3><pre><code>1. 删除对应的 Query 生成的临时表
2. 删除对应的 Query 生成的结果表
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-e</span> <span class="string">"DROP TABLE IF EXISTS <span class="variable">$TEMP_TABLE1</span>; DROP TABLE IF EXISTS <span class="variable">$TEMP_TABLE2</span>; DROP TABLE IF EXISTS <span class="variable">$RESULT_TABLE</span>;"</span></div><div class="line"><span class="built_in">return</span> $?</div></pre></td></tr></table></figure>
<h3 id="cleanMetastore"><a href="#cleanMetastore" class="headerlink" title="cleanMetastore"></a>cleanMetastore</h3><pre><code>1. 调用 `dropTables.sql` 将23张表依次DROP
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"cleaning metastore tables"</span></div><div class="line">runCmdWithErrorCheck runEngineCmd <span class="_">-f</span> <span class="string">"<span class="variable">$BIG_BENCH_CLEAN_METASTORE_FILE</span>"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> BIG_BENCH_CLEAN_METASTORE_FILE=<span class="string">"<span class="variable">$BIG_BENCH_CLEAN_DIR</span>/dropTables.sql"</span></div></pre></td></tr></table></figure>
<p><code>dropTables.sql</code> 将23张表依次DROP,源码如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerAddressTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerDemographicsTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:dateTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:householdDemographicsTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:incomeTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:itemTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:promotionTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:reasonTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:shipModeTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:timeTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:warehouseTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webSiteTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webPageTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:inventoryTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeSalesTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:storeReturnsTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webSalesTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:webReturnsTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:marketPricesTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:clickstreamsTableName&#125;;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:reviewsTableName&#125;;</div></pre></td></tr></table></figure>
<h3 id="cleanData"><a href="#cleanData" class="headerlink" title="cleanData"></a>cleanData</h3><pre><code>1. 删除hdfs上 /user/root/benchmarks/bigbench/data 目录
2. 删除hdfs上 /user/root/benchmarks/bigbench/data_refresh 目录
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></div><div class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"cleaning <span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></div><div class="line">hadoop fs -rm -r <span class="_">-f</span> -skipTrash <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></div><div class="line">```	</div><div class="line"></div><div class="line"><span class="comment">### dataGen</span></div><div class="line"></div><div class="line">	1. 创建目录 /user/root/benchmarks/bigbench/data 并赋予权限</div><div class="line">	2. 创建目录 /user/root/benchmarks/bigbench/data_refresh 并赋予权限</div><div class="line">	3. 调用 HadoopClusterExec.jar 和 pdgf.jar 生成 base data 到 /user/root/benchmarks/bigbench/data 目录下</div><div class="line">	4. 调用 HadoopClusterExec.jar 和 pdgf.jar 生成 refresh data 到 /user/root/benchmarks/bigbench/data_refresh 目录下</div><div class="line"></div><div class="line"></div><div class="line">创建目录 /user/root/benchmarks/bigbench/data 并赋予权限</div><div class="line"></div><div class="line">```bash</div><div class="line">runCmdWithErrorCheck hadoop fs -mkdir -p <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></div><div class="line">runCmdWithErrorCheck hadoop fs -chmod 777 <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>创建目录 /user/root/benchmarks/bigbench/data_refresh 并赋予权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">runCmdWithErrorCheck hadoop fs -mkdir -p <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></div><div class="line">runCmdWithErrorCheck hadoop fs -chmod 777 <span class="string">"<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>"</span></div></pre></td></tr></table></figure>
<p>调用 HadoopClusterExec.jar 和 pdgf.jar 生成 base data</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runCmdWithErrorCheck hadoop jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/HadoopClusterExec.jar"</span> -archives <span class="string">"<span class="variable">$&#123;PDGF_ARCHIVE_PATH&#125;</span>"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_EXEC_DEBUG&#125;</span> -taskFailOnNonZeroReturnValue -execCWD <span class="string">"<span class="variable">$&#123;PDGF_DISTRIBUTED_NODE_DIR&#125;</span>"</span> <span class="variable">$&#123;HadoopClusterExecOptions&#125;</span> -exec <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_JVM_ENV&#125;</span> -cp <span class="string">"<span class="variable">$&#123;HADOOP_CP&#125;</span>:pdgf.jar"</span> <span class="variable">$&#123;PDGF_CLUSTER_CONF&#125;</span> pdgf.Controller -nc HadoopClusterExec.tasks -nn HadoopClusterExec.taskNumber -ns -c -sp REFRESH_PHASE 0 -o <span class="string">"'<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_INIT_DATA_DIR&#125;</span>/'+table.getName()+'/'"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_OPTIONS&#125;</span> <span class="_">-s</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_TABLES&#125;</span> <span class="variable">$&#123;PDGF_OPTIONS&#125;</span> <span class="string">"<span class="variable">$@</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$BIG_BENCH_DATAGEN_STAGE_LOG</span>"</span> 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p>调用 HadoopClusterExec.jar 和 pdgf.jar 生成 refresh data</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runCmdWithErrorCheck hadoop jar <span class="string">"<span class="variable">$&#123;BIG_BENCH_TOOLS_DIR&#125;</span>/HadoopClusterExec.jar"</span> -archives <span class="string">"<span class="variable">$&#123;PDGF_ARCHIVE_PATH&#125;</span>"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_EXEC_DEBUG&#125;</span> -taskFailOnNonZeroReturnValue -execCWD <span class="string">"<span class="variable">$&#123;PDGF_DISTRIBUTED_NODE_DIR&#125;</span>"</span> <span class="variable">$&#123;HadoopClusterExecOptions&#125;</span> -exec <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_JVM_ENV&#125;</span> -cp <span class="string">"<span class="variable">$&#123;HADOOP_CP&#125;</span>:pdgf.jar"</span> <span class="variable">$&#123;PDGF_CLUSTER_CONF&#125;</span> pdgf.Controller -nc HadoopClusterExec.tasks -nn HadoopClusterExec.taskNumber -ns -c -sp REFRESH_PHASE 1 -o <span class="string">"'<span class="variable">$&#123;BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;</span>/'+table.getName()+'/'"</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_HADOOP_OPTIONS&#125;</span> <span class="_">-s</span> <span class="variable">$&#123;BIG_BENCH_DATAGEN_TABLES&#125;</span> <span class="variable">$&#123;PDGF_OPTIONS&#125;</span> <span class="string">"<span class="variable">$@</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$BIG_BENCH_DATAGEN_STAGE_LOG</span>"</span> 2&gt;&amp;1</div></pre></td></tr></table></figure>
<h3 id="populateMetastore"><a href="#populateMetastore" class="headerlink" title="populateMetastore"></a>populateMetastore</h3><p> 该过程是真正的创建数据库表的过程。建表的过程调用的是 <code>$BENCH_MARK_HOME/engines/hive/population/</code> 目录下的 <code>hiveCreateLoad.sql</code> ,通过该sql文件来建数据库表。</p>
<ol>
<li>从 /user/root/benchmarks/bigbench/data 路径下读取 .dat 的原始数据，生成 TEXTFILE 格式的外部临时表</li>
<li>用 <code>select * from 临时表</code> 来创建最终的 ORC 格式的数据库表</li>
<li>删除外部临时表。</li>
</ol>
<p>从 /user/root/benchmarks/bigbench/data 路径下读取 .dat 的原始数据，生成 TEXTFILE 格式的外部临时表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</div><div class="line">  ( c_customer_sk             <span class="built_in">bigint</span>              <span class="comment">--not null</span></div><div class="line">  , c_customer_id             <span class="keyword">string</span>              <span class="comment">--not null</span></div><div class="line">  , c_current_cdemo_sk        <span class="built_in">bigint</span></div><div class="line">  , c_current_hdemo_sk        <span class="built_in">bigint</span></div><div class="line">  , c_current_addr_sk         <span class="built_in">bigint</span></div><div class="line">  , c_first_shipto_date_sk    <span class="built_in">bigint</span></div><div class="line">  , c_first_sales_date_sk     <span class="built_in">bigint</span></div><div class="line">  , c_salutation              <span class="keyword">string</span></div><div class="line">  , c_first_name              <span class="keyword">string</span></div><div class="line">  , c_last_name               <span class="keyword">string</span></div><div class="line">  , c_preferred_cust_flag     <span class="keyword">string</span></div><div class="line">  , c_birth_day               <span class="built_in">int</span></div><div class="line">  , c_birth_month             <span class="built_in">int</span></div><div class="line">  , c_birth_year              <span class="built_in">int</span></div><div class="line">  , c_birth_country           <span class="keyword">string</span></div><div class="line">  , c_login                   <span class="keyword">string</span></div><div class="line">  , c_email_address           <span class="keyword">string</span></div><div class="line">  , c_last_review_date        <span class="keyword">string</span></div><div class="line">  )</div><div class="line">  <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$&#123;hiveconf:fieldDelimiter&#125;'</span></div><div class="line">  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE LOCATION <span class="string">'$&#123;hiveconf:hdfsDataPath&#125;/$&#123;hiveconf:customerTableName&#125;'</span></div><div class="line">;</div></pre></td></tr></table></figure>
<p>用 <code>select * from 临时表</code> 来创建最终的 ORC 格式的数据库表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;</div><div class="line"><span class="keyword">STORED</span> <span class="keyword">AS</span> $&#123;hiveconf:tableFormat&#125;</div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</div><div class="line">;</div></pre></td></tr></table></figure>
<p>删除外部临时表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</div></pre></td></tr></table></figure>
<p>总结下执行以下 <code>TPCx-BB</code> 测试命令代码的执行步骤:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bigBench runBenchmark -f <span class="number">1</span> -m <span class="number">8</span> -s <span class="number">2</span> -j <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="runQuery"><a href="#runQuery" class="headerlink" title="runQuery"></a>runQuery</h3><pre><code>1. runQuery 调用每个query下的 run.sh 里的 `query_run_main_method()` 方法
2. `query_run_main_method()` 调用 `runEngineCmd` 来执行query脚本（qxx.sql）
</code></pre><p>runQuery 调用每个query下的 run.sh 里的 <code>query_run_main_method()</code> 方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QUERY_MAIN_METHOD=<span class="string">"query_run_main_method"</span></div><div class="line">-----------------------------------------</div><div class="line"><span class="string">"<span class="variable">$QUERY_MAIN_METHOD</span>"</span> 2&gt;&amp;1 | tee <span class="_">-a</span> <span class="string">"<span class="variable">$LOG_FILE_NAME</span>"</span> 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p><code>query_run_main_method()</code> 调用 <code>runEngineCmd</code> 来执行query脚本（qxx.sql）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">query_run_main_method</span></span> () &#123;</div><div class="line">	QUERY_SCRIPT=<span class="string">"<span class="variable">$QUERY_DIR</span>/<span class="variable">$QUERY_NAME</span>.sql"</span></div><div class="line">	<span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$QUERY_SCRIPT</span>"</span> ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"SQL file <span class="variable">$QUERY_SCRIPT</span> can not be read."</span></div><div class="line">		<span class="built_in">exit</span> 1</div><div class="line">	<span class="keyword">fi</span></div><div class="line">	runCmdWithErrorCheck runEngineCmd <span class="_">-f</span> <span class="string">"<span class="variable">$QUERY_SCRIPT</span>"</span></div><div class="line">	<span class="built_in">return</span> $?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>一般情况下 <code>query_run_main_method ()</code> 方法只是执行对应的query脚本，但是像 q05、q20… 这些查询，用到了机器学习算法，所以在执行对应的query脚本后会把生成的结果表作为输入，然后调用执行机器学习算法（如聚类、逻辑回归）的jar包继续执行，得到最终的结果。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">runEngineCmd</span></span> () &#123;</div><div class="line">  <span class="keyword">if</span> addInitScriptsToParams</div><div class="line">  <span class="keyword">then</span></div><div class="line">    <span class="string">"<span class="variable">$BINARY</span>"</span> <span class="string">"<span class="variable">$&#123;BINARY_PARAMS[@]&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;INIT_PARAMS[@]&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="built_in">return</span> 1</div><div class="line">  <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line">BINARY=<span class="string">"/usr/bin/hive"</span></div><div class="line">BINARY_PARAMS+=(--hiveconf BENCHMARK_PHASE=<span class="variable">$BIG_BENCH_BENCHMARK_PHASE</span> --hiveconf STREAM_NUMBER=<span class="variable">$BIG_BENCH_STREAM_NUMBER</span> --hiveconf QUERY_NAME=<span class="variable">$QUERY_NAME</span> --hiveconf QUERY_DIR=<span class="variable">$QUERY_DIR</span> --hiveconf RESULT_TABLE=<span class="variable">$RESULT_TABLE</span> --hiveconf RESULT_DIR=<span class="variable">$RESULT_DIR</span> --hiveconf TEMP_TABLE=<span class="variable">$TEMP_TABLE</span> --hiveconf TEMP_DIR=<span class="variable">$TEMP_DIR</span> --hiveconf TABLE_PREFIX=<span class="variable">$TABLE_PREFIX</span>)</div><div class="line">INIT_PARAMS=(-i <span class="string">"<span class="variable">$BIG_BENCH_QUERY_PARAMS_FILE</span>"</span> -i <span class="string">"<span class="variable">$BIG_BENCH_ENGINE_SETTINGS_FILE</span>"</span>)</div><div class="line">INIT_PARAMS+=(-i <span class="string">"<span class="variable">$LOCAL_QUERY_ENGINE_SETTINGS_FILE</span>"</span>)</div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"User defined query parameter file found. Adding <span class="variable">$USER_QUERY_PARAMS_FILE</span> to hive init."</span></div><div class="line">  INIT_PARAMS+=(-i <span class="string">"<span class="variable">$USER_QUERY_PARAMS_FILE</span>"</span>)</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"User query parameter file <span class="variable">$USER_QUERY_PARAMS_FILE</span> can not be read."</span></div><div class="line">  <span class="built_in">return</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"User defined engine settings file found. Adding <span class="variable">$USER_ENGINE_SETTINGS_FILE</span> to hive init."</span></div><div class="line">  INIT_PARAMS+=(-i <span class="string">"<span class="variable">$USER_ENGINE_SETTINGS_FILE</span>"</span>)</div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"User hive settings file <span class="variable">$USER_ENGINE_SETTINGS_FILE</span> can not be read."</span></div><div class="line">  <span class="built_in">return</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">return</span> 0</div></pre></td></tr></table></figure>
<h3 id="validateQuery"><a href="#validateQuery" class="headerlink" title="validateQuery"></a>validateQuery</h3><pre><code>1. 调用每个query下的 run.sh 里的 `query_run_validate_method()` 方法
2. `query_run_validate_method()` 比较 `$BENCH_MARK_HOME/engines/hive/queries/qxx/results/qxx-result` 和hdfs上 `/user/root/benchmarks/bigbench/queryResults/qxx_hive_${BIG_BENCH_BENCHMARK_PHASE}_${BIG_BENCH_STREAM_NUMBER}_result` 两个文件，如果一样，则验证通过，否则验证失败。
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> diff -q <span class="string">"<span class="variable">$VALIDATION_RESULTS_FILENAME</span>"</span> &lt;(hadoop fs -cat <span class="string">"<span class="variable">$RESULT_DIR</span>/*"</span>)</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Validation of <span class="variable">$VALIDATION_RESULTS_FILENAME</span> passed: Query returned correct results"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Validation of <span class="variable">$VALIDATION_RESULTS_FILENAME</span> failed: Query returned incorrect results"</span></div><div class="line">	VALIDATION_PASSED=<span class="string">"0"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><strong>SF为1时(-f 1)，用上面的方法比较，SF不为1（&gt;1）时,只要hdfs上的结果表中行数大于等于1即验证通过</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ `hadoop fs -cat <span class="string">"<span class="variable">$RESULT_DIR</span>/*"</span> | head -n 10 | wc <span class="_">-l</span>` -ge 1 ]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Validation passed: Query returned results"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Validation failed: Query did not return results"</span></div><div class="line">	<span class="built_in">return</span> 1</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h3 id="refreshMetastore"><a href="#refreshMetastore" class="headerlink" title="refreshMetastore"></a>refreshMetastore</h3><pre><code>1. 调用 `$BENCH_MARK_HOME/engines/hive/refresh/` 目录下的 `hiveRefreshCreateLoad.sql` 脚本
2. `hiveRefreshCreateLoad.sql` 将hdfs上 `/user/root/benchmarks/bigbench/data_refresh/` 目录下每个表数据插入外部临时表
3. 外部临时表再将每个表的数据插入Hive数据库对应的表中
</code></pre><p><code>hiveRefreshCreateLoad.sql</code> 将hdfs上 <code>/user/root/benchmarks/bigbench/data_refresh/</code> 目录下每个表数据插入外部临时表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</div><div class="line">  ( c_customer_sk             <span class="built_in">bigint</span>              <span class="comment">--not null</span></div><div class="line">  , c_customer_id             <span class="keyword">string</span>              <span class="comment">--not null</span></div><div class="line">  , c_current_cdemo_sk        <span class="built_in">bigint</span></div><div class="line">  , c_current_hdemo_sk        <span class="built_in">bigint</span></div><div class="line">  , c_current_addr_sk         <span class="built_in">bigint</span></div><div class="line">  , c_first_shipto_date_sk    <span class="built_in">bigint</span></div><div class="line">  , c_first_sales_date_sk     <span class="built_in">bigint</span></div><div class="line">  , c_salutation              <span class="keyword">string</span></div><div class="line">  , c_first_name              <span class="keyword">string</span></div><div class="line">  , c_last_name               <span class="keyword">string</span></div><div class="line">  , c_preferred_cust_flag     <span class="keyword">string</span></div><div class="line">  , c_birth_day               <span class="built_in">int</span></div><div class="line">  , c_birth_month             <span class="built_in">int</span></div><div class="line">  , c_birth_year              <span class="built_in">int</span></div><div class="line">  , c_birth_country           <span class="keyword">string</span></div><div class="line">  , c_login                   <span class="keyword">string</span></div><div class="line">  , c_email_address           <span class="keyword">string</span></div><div class="line">  , c_last_review_date        <span class="keyword">string</span></div><div class="line">  )</div><div class="line">  <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$&#123;hiveconf:fieldDelimiter&#125;'</span></div><div class="line">  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE LOCATION <span class="string">'$&#123;hiveconf:hdfsDataPath&#125;/$&#123;hiveconf:customerTableName&#125;'</span></div><div class="line">;</div><div class="line"><span class="keyword">set</span> hdfsDataPath=$&#123;env:BIG_BENCH_HDFS_ABSOLUTE_REFRESH_DATA_DIR&#125;;</div><div class="line">``` </div><div class="line"></div><div class="line">外部临时表再将每个表的数据插入Hive数据库对应的表中</div><div class="line"></div><div class="line">```sql</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> $&#123;hiveconf:customerTableName&#125;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> $&#123;hiveconf:customerTableName&#125;$&#123;hiveconf:temporaryTableSuffix&#125;</div><div class="line">;</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在测试之前会先用PDGF（并行数据生成框架）生成数据。指定Scale Factor为1（1GB），生成以下共23张表。以下是每张表的建表语句及每张表里的某一条记录。</p>
<h3 id="23张表"><a href="#23张表" class="headerlink" title="23张表"></a>23张表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">hive&gt; show tables;</div><div class="line">OK</div><div class="line">customer</div><div class="line">customer_address</div><div class="line">customer_demographics</div><div class="line">date_dim</div><div class="line">household_demographics</div><div class="line">income_band</div><div class="line">inventory</div><div class="line">item</div><div class="line">item_marketprices</div><div class="line">product_reviews</div><div class="line">promotion</div><div class="line">reason</div><div class="line">ship_mode</div><div class="line">store</div><div class="line">store_returns</div><div class="line">store_sales</div><div class="line">time_dim</div><div class="line">warehouse</div><div class="line">web_clickstreams</div><div class="line">web_page</div><div class="line">web_returns</div><div class="line">web_sales</div><div class="line">web_site</div><div class="line">Time taken: 0.017 seconds, Fetched: 23 row(s)</div></pre></td></tr></table></figure>
<h3 id="customer-（99000行）4-03MB"><a href="#customer-（99000行）4-03MB" class="headerlink" title="customer （99000行）4.03MB"></a>customer （99000行）4.03MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table customer;</div><div class="line">OK</div><div class="line">CREATE TABLE `customer`(</div><div class="line"> `c_customer_sk` bigint,</div><div class="line"> `c_customer_id` string,</div><div class="line"> `c_current_cdemo_sk` bigint,</div><div class="line"> `c_current_hdemo_sk` bigint,</div><div class="line"> `c_current_addr_sk` bigint,</div><div class="line"> `c_first_shipto_date_sk` bigint,</div><div class="line"> `c_first_sales_date_sk` bigint,</div><div class="line"> `c_salutation` string,</div><div class="line"> `c_first_name` string,</div><div class="line"> `c_last_name` string,</div><div class="line"> `c_preferred_cust_flag` string,</div><div class="line"> `c_birth_day` int,</div><div class="line"> `c_birth_month` int,</div><div class="line"> `c_birth_year` int,</div><div class="line"> `c_birth_country` string,</div><div class="line"> `c_login` string,</div><div class="line"> `c_email_address` string,</div><div class="line"> `c_last_review_date` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'99000\',</div><div class="line"> \'rawDataSize\'=\'88084062\',</div><div class="line"> \'totalSize\'=\'4221267\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167154\')</div><div class="line">Time taken: 0.116 seconds, Fetched: 34 row(s)</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 AAAAAAAAAAAAAAAA 1824793 3203 2555 28776 14690 Ms. Marisa Harrington N 17 4 1988 UNITED ARAB EMIRATES RRCyuY3XfE3a Marisa.Harrington@lawyer.com 	gdMmGdU9</div></pre></td></tr></table></figure>
<h3 id="customer-address（49500行）-0-92MB"><a href="#customer-address（49500行）-0-92MB" class="headerlink" title="customer_address（49500行） 0.92MB"></a>customer_address（49500行） 0.92MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table customer_address;</div><div class="line">OK</div><div class="line">CREATE TABLE `customer_address`(</div><div class="line"> `ca_address_sk` bigint,</div><div class="line"> `ca_address_id` string,</div><div class="line"> `ca_street_number` string,</div><div class="line"> `ca_street_name` string,</div><div class="line"> `ca_street_type` string,</div><div class="line"> `ca_suite_number` string,</div><div class="line"> `ca_city` string,</div><div class="line"> `ca_county` string,</div><div class="line"> `ca_state` string,</div><div class="line"> `ca_zip` string,</div><div class="line"> `ca_country` string,</div><div class="line"> `ca_gmt_offset` decimal(5,2),</div><div class="line"> `ca_location_type` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer_address\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'49500\',</div><div class="line"> \'rawDataSize\'=\'55836000\',</div><div class="line"> \'totalSize\'=\'966548\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167160\')</div><div class="line">Time taken: 0.043 seconds, Fetched: 29 row(s)</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6187 AAAAAAAAAAAAAJDZ 536 6th Lake Drive UKL8bE5C Lowell Brule County SD 18464 United States -6 apartment</div></pre></td></tr></table></figure>
<h3 id="customer-demographics-19200800行）6-84MB"><a href="#customer-demographics-19200800行）6-84MB" class="headerlink" title="customer_demographics (19200800行）6.84MB"></a>customer_demographics (19200800行）6.84MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table customer_demographics;</div><div class="line">OK</div><div class="line">CREATE TABLE `customer_demographics`(</div><div class="line"> `cd_demo_sk` bigint,</div><div class="line"> `cd_gender` string,</div><div class="line"> `cd_marital_status` string,</div><div class="line"> `cd_education_status` string,</div><div class="line"> `cd_purchase_estimate` int,</div><div class="line"> `cd_credit_rating` string,</div><div class="line"> `cd_dep_count` int,</div><div class="line"> `cd_dep_employed_count` int,</div><div class="line"> `cd_dep_college_count` int)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/customer_demographics\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'1\',</div><div class="line"> \'numRows\'=\'1920800\',</div><div class="line"> \'rawDataSize\'=\'718371044\',</div><div class="line"> \'totalSize\'=\'7167503\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167169\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 F 	U Primary 6000 Good 0 5 0</div></pre></td></tr></table></figure>
<h3 id="date-dim-（109573行）-1-67MB"><a href="#date-dim-（109573行）-1-67MB" class="headerlink" title="date_dim （109573行） 1.67MB"></a>date_dim （109573行） 1.67MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table date_dim;</div><div class="line">OK</div><div class="line">CREATE TABLE `date_dim`(</div><div class="line"> `d_date_sk` bigint,</div><div class="line"> `d_date_id` string,</div><div class="line"> `d_date` string,</div><div class="line"> `d_month_seq` int,</div><div class="line"> `d_week_seq` int,</div><div class="line"> `d_quarter_seq` int,</div><div class="line"> `d_year` int,</div><div class="line"> `d_dow` int,</div><div class="line"> `d_moy` int,</div><div class="line"> `d_dom` int,</div><div class="line"> `d_qoy` int,</div><div class="line"> `d_fy_year` int,</div><div class="line"> `d_fy_quarter_seq` int,</div><div class="line"> `d_fy_week_seq` int,</div><div class="line"> `d_day_name` string,</div><div class="line"> `d_quarter_name` string,</div><div class="line"> `d_holiday` string,</div><div class="line"> `d_weekend` string,</div><div class="line"> `d_following_holiday` string,</div><div class="line"> `d_first_dom` int,</div><div class="line"> `d_last_dom` int,</div><div class="line"> `d_same_day_ly` int,</div><div class="line"> `d_same_day_lq` int,</div><div class="line"> `d_current_day` string,</div><div class="line"> `d_current_week` string,</div><div class="line"> `d_current_month` string,</div><div class="line"> `d_current_quarter` string,</div><div class="line"> `d_current_year` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/date_dim\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'1\',</div><div class="line"> \'numRows\'=\'109573\',</div><div class="line"> \'rawDataSize\'=\'123050479\',</div><div class="line"> \'totalSize\'=\'1748707\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167172\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 AAAAAAAAAAAAAAAA 1900-01-01 0 0 0 1900 1 1 1 1 1900 0 0 Monday 1900Q1 Y 	N 	N 2448812 2458802 2472542 2420941 N 	N 	NN 	N</div></pre></td></tr></table></figure>
<h3 id="household-demographics-（7200行）-14-31KB"><a href="#household-demographics-（7200行）-14-31KB" class="headerlink" title="household_demographics （7200行） 14.31KB"></a>household_demographics （7200行） 14.31KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table household_demographics;</div><div class="line">OK</div><div class="line">CREATE TABLE `household_demographics`(</div><div class="line"> `hd_demo_sk` bigint,</div><div class="line"> `hd_income_band_sk` bigint,</div><div class="line"> `hd_buy_potential` string,</div><div class="line"> `hd_dep_count` int,</div><div class="line"> `hd_vehicle_count` int)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/household_demographics\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'1\',</div><div class="line"> \'numRows\'=\'7200\',</div><div class="line"> \'rawDataSize\'=\'835168\',</div><div class="line"> \'totalSize\'=\'14655\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167173\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 3 1001-5000 0 0</div></pre></td></tr></table></figure>
<h3 id="income-band-（20行）-754B"><a href="#income-band-（20行）-754B" class="headerlink" title="income_band （20行） 754B"></a>income_band （20行） 754B</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table income_band;</div><div class="line">OK</div><div class="line">CREATE TABLE `income_band`(</div><div class="line"> `ib_income_band_sk` bigint,</div><div class="line"> `ib_lower_bound` int,</div><div class="line"> `ib_upper_bound` int)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/income_band\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'20\',</div><div class="line"> \'rawDataSize\'=\'320\',</div><div class="line"> \'totalSize\'=\'754\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167179\')</div><div class="line">Time taken: 0.032 seconds, Fetched: 19 row(s)</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 1 10000</div></pre></td></tr></table></figure>
<h3 id="inventory-（23255100行）-34-55MB"><a href="#inventory-（23255100行）-34-55MB" class="headerlink" title="inventory （23255100行） 34.55MB"></a>inventory （23255100行） 34.55MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table inventory;</div><div class="line">OK</div><div class="line">CREATE TABLE `inventory`(</div><div class="line"> `inv_date_sk` bigint,</div><div class="line"> `inv_item_sk` bigint,</div><div class="line"> `inv_warehouse_sk` bigint,</div><div class="line"> `inv_quantity_on_hand` int)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/inventory\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'3\',</div><div class="line"> \'numRows\'=\'23255100\',</div><div class="line"> \'rawDataSize\'=\'651118804\',</div><div class="line"> \'totalSize\'=\'36234106\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167235\')</div><div class="line">Time taken: 0.031 seconds, Fetched: 20 row(s)</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">36890 0 0 503</div></pre></td></tr></table></figure>
<h3 id="item-（17820行）-2-36MB"><a href="#item-（17820行）-2-36MB" class="headerlink" title="item （17820行） 2.36MB"></a>item （17820行） 2.36MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table item;</div><div class="line">OK</div><div class="line">CREATE TABLE `item`(</div><div class="line"> `i_item_sk` bigint,</div><div class="line"> `i_item_id` string,</div><div class="line"> `i_rec_start_date` string,</div><div class="line"> `i_rec_end_date` string,</div><div class="line"> `i_item_desc` string,</div><div class="line"> `i_current_price` decimal(7,2),</div><div class="line"> `i_wholesale_cost` decimal(7,2),</div><div class="line"> `i_brand_id` int,</div><div class="line"> `i_brand` string,</div><div class="line"> `i_class_id` int,</div><div class="line"> `i_class` string,</div><div class="line"> `i_category_id` int,</div><div class="line"> `i_category` strong,</div><div class="line"> `i_manufact_id` int,</div><div class="line"> `i_manufact` string,</div><div class="line"> `i_size` string,</div><div class="line"> `i_formulation` string,</div><div class="line"> `i_color` string,</div><div class="line"> `i_units` string,</div><div class="line"> `i_container` string,</div><div class="line"> `i_manager_id` int,</div><div class="line"> `i_product_name` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/item\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'1\',</div><div class="line"> \'numRows\'=\'17820\',</div><div class="line"> \'rawDataSize\'=\'31238428\',</div><div class="line"> \'totalSize\'=\'2472973\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167181\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 AAAAAAAAAAAAAAAA 2000-01-14 quickly even dinos beneath the frays must have to boost boldly careful bold escapades: stealthily even forges over the dependencies integrate always past the quiet sly decoys-- notornis sol 72.29 64.96 3898712 71TS7NSbvH1YbdiQMG6ttBHKAljiNoIRB 1 Fan Shop 9 Sports &amp; Outdoors 995 2VOxvrIWwlJQTSk6 small 99Ee1r6uFbZSSClAX3 dodger Oz Unknown 18 8m9n5Q7T33DNWidoA6nWlg6ydmpA1SKOoOJLXiLVb</div></pre></td></tr></table></figure>
<h3 id="item-marketprices-（89100行）-0-63MB"><a href="#item-marketprices-（89100行）-0-63MB" class="headerlink" title="item_marketprices （89100行） 0.63MB"></a>item_marketprices （89100行） 0.63MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table item_marketprices;</div><div class="line">OK</div><div class="line">CREATE TABLE `item_marketprices`(</div><div class="line"> `imp_sk` bigint,</div><div class="line"> `imp_item_sk` bigint,</div><div class="line"> `imp_competitor` string,</div><div class="line"> `imp_competitor_price` decimal(7,2),</div><div class="line"> `imp_start_date` bigint,</div><div class="line"> `imp_end_date` bigint)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/item_marketprices\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'89100\',</div><div class="line"> \'rawDataSize\'=\'21736912\',</div><div class="line"> \'totalSize\'=\'657024\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167275\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5 4737 AAAAAAAAAAAAAAIN 66.4 36890 36958</div></pre></td></tr></table></figure>
<h3 id="product-reviews-（89991行）-24-36MB"><a href="#product-reviews-（89991行）-24-36MB" class="headerlink" title="product_reviews （89991行） 24.36MB"></a>product_reviews （89991行） 24.36MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table product_reviews;</div><div class="line">OK</div><div class="line">CREATE TABLE `product_reviews`(</div><div class="line"> `pr_review_sk` bigint,</div><div class="line"> `pr_review_date` string,</div><div class="line"> `pr_review_time` string,</div><div class="line"> `pr_review_rating` int,</div><div class="line"> `pr_item_sk` bigint,</div><div class="line"> `pr_user_sk` bigint,</div><div class="line"> `pr_order_sk` bigint,</div><div class="line"> `pr_review_content` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/product_reviews\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'89991\',</div><div class="line"> \'rawDataSize\'=\'79597043\',</div><div class="line"> \'totalSize\'=\'25546821\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167305\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4 2004-02-25 21:43:07 1 3683 88783 41241 Had to offset the praise handed down by so many years is probably the result of some sin committed (obviously so grievous don\&apos;t &quot;get&quot; it. Why all the original artwork by Stephen Gammel.</div></pre></td></tr></table></figure>
<h3 id="promotion-（300行）-15-83KB"><a href="#promotion-（300行）-15-83KB" class="headerlink" title="promotion （300行） 15.83KB"></a>promotion （300行） 15.83KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table promotion;</div><div class="line">OK</div><div class="line">CREATE TABLE `promotion`(</div><div class="line"> `p_promo_sk` bigint,</div><div class="line"> `p_promo_id` string,</div><div class="line"> `p_start_date_sk` bigint,</div><div class="line"> `p_end_date_sk` bigint,</div><div class="line"> `p_item_sk` bigint,</div><div class="line"> `p_cost` decimal(15,2),</div><div class="line"> `p_response_target` int,</div><div class="line"> `p_promo_name` string,</div><div class="line"> `p_channel_dmail` string,</div><div class="line"> `p_channel_email` string,</div><div class="line"> `p_channel_catalog` string,</div><div class="line"> `p_channel_tv` string,</div><div class="line"> `p_channel_radio` string,</div><div class="line"> `p_channel_press` string,</div><div class="line"> `p_channel_event` string,</div><div class="line"> `p_channel_demo` string,</div><div class="line"> `p_channel_details` string,</div><div class="line"> `p_purpose` string,</div><div class="line"> `p_discount_active` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/promotion\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'300\',</div><div class="line"> \'rawDataSize\'=\'404926\',</div><div class="line"> \'totalSize\'=\'16204\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167186\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">7 AAAAAAAAAAAAAAAH 94455 108529 13511 427.76 1 bar 	YN 	Y 	N 	N 	N 	N 	N 	blithe grouches past the blithe quick epitaphs print rut Unknown N</div></pre></td></tr></table></figure>
<h3 id="reason-（35行）-3-17KB"><a href="#reason-（35行）-3-17KB" class="headerlink" title="reason （35行） 3.17KB"></a>reason （35行） 3.17KB</h3><p>建表语句:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table reason;</div><div class="line">OK</div><div class="line">CREATE TABLE `reason`(</div><div class="line"> `r_reason_sk` bigint,</div><div class="line"> `r_reason_id` string,</div><div class="line"> `r_reason_desc` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/reason\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'35\',</div><div class="line"> \'rawDataSize\'=\'9027\',</div><div class="line"> \'totalSize\'=\'3240\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167190\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5 uy 	busily sly excuses hang: slow braids to the daring somas was toward the epitaphs-- gifts betw</div></pre></td></tr></table></figure>
<h3 id="ship-mode-（20行）-2-93KB"><a href="#ship-mode-（20行）-2-93KB" class="headerlink" title="ship_mode （20行） 2.93KB"></a>ship_mode （20行） 2.93KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table ship_mode;</div><div class="line">OK</div><div class="line">CREATE TABLE `ship_mode`(</div><div class="line"> `sm_ship_mode_sk` bigint,</div><div class="line"> `sm_ship_mode_id` string,</div><div class="line"> `sm_type` string,</div><div class="line"> `sm_code` string,</div><div class="line"> `sm_carrier` strong,</div><div class="line"> `sm_contract` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/ship_mode\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'20\',</div><div class="line"> \'rawDataSize\'=\'9576\',</div><div class="line"> \'totalSize\'=\'3001\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167196\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">12 wGyozLRZ3uL 	iCTZsMlNzsQ 	cBRc FlWM9v tm0ehuQ2</div></pre></td></tr></table></figure>
<h3 id="store-（12行）-8-03KB"><a href="#store-（12行）-8-03KB" class="headerlink" title="store （12行） 8.03KB"></a>store （12行） 8.03KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table store;</div><div class="line">OK</div><div class="line">CREATE TABLE `store`(</div><div class="line"> `s_store_sk` bigint,</div><div class="line"> `s_store_id` string,</div><div class="line"> `s_rec_start_date` string,</div><div class="line"> `s_rec_end_date` string,</div><div class="line"> `s_closed_date_sk` bigint,</div><div class="line"> `s_store_name` string,</div><div class="line"> `s_number_employees` int,</div><div class="line"> `s_floor_space` int,</div><div class="line"> `s_hours` string,</div><div class="line"> `s_manager` string,</div><div class="line"> `s_market_id` int,</div><div class="line"> `s_geography_class` string,</div><div class="line"> `s_market_desc` string,</div><div class="line"> `s_market_manager` string,</div><div class="line"> `s_division_id` int,</div><div class="line"> `s_division_name` string,</div><div class="line"> `s_company_id` int,</div><div class="line"> `s_company_name` string,</div><div class="line"> `s_street_number` string,</div><div class="line"> `s_street_name` string,</div><div class="line"> `s_street_type` string,</div><div class="line"> `s_suite_number` string,</div><div class="line"> `s_city` string,</div><div class="line"> `s_county` string,</div><div class="line"> `s_state` string,</div><div class="line"> `s_zip` string,</div><div class="line"> `s_country` string,</div><div class="line"> `s_gmt_offset` decimal(5,2),</div><div class="line"> `s_tax_precentage` decimal(5,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'12\',</div><div class="line"> \'rawDataSize\'=\'25962\',</div><div class="line"> \'totalSize\'=\'8214\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167201\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 AAAAAAAAAAAAAAAK 2000-11-01 6235 Avalon 254 6468537 8AM-12AM Michael Barlow 6 Unknown final sly gifts by the even final dependencies x-ray under the fluffy Barry Shaw 1 Unknown1Unknown 993 Mill Pkwy aQV Cold Springs Cumberland County TN 95692 United States -5 0.03</div></pre></td></tr></table></figure>
<h3 id="store-returns-37902行）-1-19MB"><a href="#store-returns-37902行）-1-19MB" class="headerlink" title="store_returns (37902行） 1.19MB"></a>store_returns (37902行） 1.19MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table store_returns;</div><div class="line">OK</div><div class="line">CREATE TABLE `store_returns`(</div><div class="line"> `sr_returned_date_sk` bigint,</div><div class="line"> `sr_return_time_sk` bigint,</div><div class="line"> `sr_item_sk` bigint,</div><div class="line"> `sr_customer_sk` bigint,</div><div class="line"> `sr_cdemo_sk` bigint,</div><div class="line"> `sr_hdemo_sk` bigint,</div><div class="line"> `sr_addr_sk` bigint,</div><div class="line"> `sr_store_sk` bigint,</div><div class="line"> `sr_reason_sk` bigint,</div><div class="line"> `sr_ticket_number` bigint,</div><div class="line"> `sr_return_quantity` int,</div><div class="line"> `sr_return_amt` decimal(7,2),</div><div class="line"> `sr_return_tax` decimal(7,2),</div><div class="line"> `sr_return_amt_inc_tax` decimal(7,2),</div><div class="line"> `sr_fee` decimal(7,2),</div><div class="line"> `sr_return_ship_cost` decimal(7,2),</div><div class="line"> `sr_refunded_cash` decimal(7,2),</div><div class="line"> `sr_reversed_charge` decimal(7,2),</div><div class="line"> `sr_store_credit` decimal(7,2),</div><div class="line"> `sr_net_loss` decimal(7,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store_returns\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'37902\',</div><div class="line"> \'rawDataSize\'=\'41388272\',</div><div class="line"> \'totalSize\'=\'1250563\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167251\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">37375 38182 11520 7640 242073 6754 25731 2 22 20293 33 1990.89 119.45 2110.34 34.14 2433.41 477.81 559.84 953.24 2672.31</div></pre></td></tr></table></figure>
<h3 id="store-sales-（667579行）-23-49MB"><a href="#store-sales-（667579行）-23-49MB" class="headerlink" title="store_sales （667579行） 23.49MB"></a>store_sales （667579行） 23.49MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table store_sales;</div><div class="line">OK</div><div class="line">CREATE TABLE `store_sales`(</div><div class="line"> `ss_sold_date_sk` bigint,</div><div class="line"> `ss_sold_time_sk` bigint,</div><div class="line"> `ss_item_sk` bigint,</div><div class="line"> `ss_customer_sk` bigint,</div><div class="line"> `ss_cdemo_sk` bigint,</div><div class="line"> `ss_hdemo_sk` bigint,</div><div class="line"> `ss_addr_sk` bigint,</div><div class="line"> `ss_store_sk` bigint,</div><div class="line"> `ss_promo_sk` bigint,</div><div class="line"> `ss_ticket_number` bigint,</div><div class="line"> `ss_quantity` int,</div><div class="line"> `ss_wholesale_cost` decimal(7,2),</div><div class="line"> `ss_list_price` decimal(7,2),</div><div class="line"> `ss_sales_price` decimal(7,2),</div><div class="line"> `ss_ext_discount_amt` decimal(7,2),</div><div class="line"> `ss_ext_sales_price` decimal(7,2),</div><div class="line"> `ss_ext_wholesale_cost` decimal(7,2),</div><div class="line"> `ss_ext_list_price` decimal(7,2),</div><div class="line"> `ss_ext_tax` decimal(7,2),</div><div class="line"> `ss_coupon_amt` decimal(7,2),</div><div class="line"> `ss_net_paid` decimal(7,2),</div><div class="line"> `ss_net_paid_inc_tax` decimal(7,2),</div><div class="line"> `ss_net_profit` decimal(7,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/store_sales\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'667579\',</div><div class="line"> \'rawDataSize\'=\'953293700\',</div><div class="line"> \'totalSize\'=\'24629162\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167245\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">37115 20244 16481 98676 1211207 5239 37107 9 38 11138 93 56.47 82.45 36.28 4293.81 3374.04 5251.71 7667.85 101.22 0 3374.04 3475.26 -1877.67</div></pre></td></tr></table></figure>
<h3 id="time-dim-（86400行）-219-49KB"><a href="#time-dim-（86400行）-219-49KB" class="headerlink" title="time_dim （86400行） 219.49KB"></a>time_dim （86400行） 219.49KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table time_dim;</div><div class="line">OK</div><div class="line">CREATE TABLE `time_dim`(</div><div class="line"> `t_time_sk` bigint,</div><div class="line"> `t_time_id` string,</div><div class="line"> `t_time` int,</div><div class="line"> `t_hour` int,</div><div class="line"> `t_minute` int,</div><div class="line"> `t_second` int,</div><div class="line"> `t_am_pm` string,</div><div class="line"> `t_shift` string,</div><div class="line"> `t_sub_shift` string,</div><div class="line"> `t_meal_time` string)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/time_dim\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'1\',</div><div class="line"> \'numRows\'=\'86400\',</div><div class="line"> \'rawDataSize\'=\'41040000\',</div><div class="line"> \'totalSize\'=\'224757\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167202\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 AAAAAAAAAAAAAAAC 2 0 0 2 AM 	third 	night</div></pre></td></tr></table></figure>
<h3 id="warehouse-（5行）-1-94KB"><a href="#warehouse-（5行）-1-94KB" class="headerlink" title="warehouse （5行） 1.94KB"></a>warehouse （5行） 1.94KB</h3><p>建表语句:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table warehouse;</div><div class="line">OK</div><div class="line">CREATE TABLE `warehouse`(</div><div class="line"> `w_warehouse_sk` bigint,</div><div class="line"> `w_warehouse_id` string,</div><div class="line"> `w_warehouse_name` string,</div><div class="line"> `w_warehouse_sq_ft` int,</div><div class="line"> `w_street_number` string,</div><div class="line"> `w_street_name` string,</div><div class="line"> `w_street_type` string,</div><div class="line"> `w_suite_number` string,</div><div class="line"> `w_city` string,</div><div class="line"> `w_county` string,</div><div class="line"> `w_state` string,</div><div class="line"> `w_zip` string,</div><div class="line"> `w_country` string,</div><div class="line"> `w_gmt_offset` decimal(5,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/warehouse\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'5\',</div><div class="line"> \'rawDataSize\'=\'5695\',</div><div class="line"> \'totalSize\'=\'1980\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167204\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 AAAAAAAAAAAAAAAB 	frets would sleep 845707 181 9th 13thCourt kQ Sherwood Forest Teton County WY 87891 United States -7</div></pre></td></tr></table></figure>
<h3 id="web-clickstreams-（6770550行）-34-11MB"><a href="#web-clickstreams-（6770550行）-34-11MB" class="headerlink" title="web_clickstreams （6770550行） 34.11MB"></a>web_clickstreams （6770550行） 34.11MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table web_clickstreams;</div><div class="line">OK</div><div class="line">CREATE TABLE `web_clickstreams`(</div><div class="line"> `wcs_click_date_sk` bigint,</div><div class="line"> `wcs_click_time_sk` bigint,</div><div class="line"> `wcs_sales_sk` bigint,</div><div class="line"> `wcs_item_sk` bigint,</div><div class="line"> `wcs_web_page_sk` bigint,</div><div class="line"> `wcs_user_sk` bigint)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_clickstreams\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'6770550\',</div><div class="line"> \'rawDataSize\'=\'253337416\',</div><div class="line"> \'totalSize\'=\'35768476\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167298\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">36890 27089 NULL 15465 47 NULL</div></pre></td></tr></table></figure>
<h3 id="web-page-（60行）-6-81KB"><a href="#web-page-（60行）-6-81KB" class="headerlink" title="web_page （60行） 6.81KB"></a>web_page （60行） 6.81KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table web_page;</div><div class="line">OK</div><div class="line">CREATE TABLE `web_page`(</div><div class="line"> `wp_web_page_sk` bigint,</div><div class="line"> `wp_web_page_id` string,</div><div class="line"> `wp_rec_start_date` string,</div><div class="line"> `wp_rec_end_date` string,</div><div class="line"> `wp_creation_date_sk` bigint,</div><div class="line"> `wp_access_date_sk` bigint,</div><div class="line"> `wp_autogen_flag` string,</div><div class="line"> `wp_customer_sk` bigint,</div><div class="line"> `wp_url` string,</div><div class="line"> `wp_type` string,</div><div class="line"> `wp_char_count` int,</div><div class="line"> `wp_link_count` int,</div><div class="line"> `wp_image_count` int,</div><div class="line"> `wp_max_ad_count` int)</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_page\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'60\',</div><div class="line"> \'rawDataSize\'=\'38763\',</div><div class="line"> \'totalSize\'=\'6969\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167215\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">24 AAAAAAAAAAAAAAAY 2000-12-19 38819 69008 0 44446 http://www.C8jdri37RmtbDNeFnXjmYbyBPzeO4WWK9pVYP6xtBJbaQ5yIj4s.com 	feedback	4340 	23 	5 	2</div></pre></td></tr></table></figure>
<h3 id="web-returns-（38487行）-1-40MB"><a href="#web-returns-（38487行）-1-40MB" class="headerlink" title="web_returns （38487行） 1.40MB"></a>web_returns （38487行） 1.40MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table web_returns;</div><div class="line">OK</div><div class="line">CREATE TABLE `web_returns`(</div><div class="line"> `wr_returned_date_sk` bigint,</div><div class="line"> `wr_returned_time_sk` bigint,</div><div class="line"> `wr_item_sk` bigint,</div><div class="line"> `wr_refunded_customer_sk` bigint,</div><div class="line"> `wr_refunded_cdemo_sk` bigint,</div><div class="line"> `wr_refunded_hdemo_sk` bigint,</div><div class="line"> `wr_refunded_addr_sk` bigint,</div><div class="line"> `wr_returning_customer_sk` bigint,</div><div class="line"> `wr_returning_cdemo_sk` bigint,</div><div class="line"> `wr_returning_hdemo_sk` bigint,</div><div class="line"> `wr_returning_addr_sk` bigint,</div><div class="line"> `wr_web_page_sk` bigint,</div><div class="line"> `wr_reason_sk` bigint,</div><div class="line"> `wr_order_number` bigint,</div><div class="line"> `wr_return_quantity` int,</div><div class="line"> `wr_return_amt` decimal(7,2),</div><div class="line"> `wr_return_tax` decimal(7,2),</div><div class="line"> `wr_return_amt_inc_tax` decimal(7,2),</div><div class="line"> `wr_fee` decimal(7,2),</div><div class="line"> `wr_return_ship_cost` decimal(7,2),</div><div class="line"> `wr_refunded_cash` decimal(7,2),</div><div class="line"> `wr_reversed_charge` decimal(7,2),</div><div class="line"> `wr_account_credit` decimal(7,2),</div><div class="line"> `wr_net_loss` decimal(7,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_returns\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'38487\',</div><div class="line"> \'rawDataSize\'=\'43257220\',</div><div class="line"> \'totalSize\'=\'1471571\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167269\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">38952 68126 9590 52948 893223 2020 6942 52948 893223 2020 6942 32 13 63444 33 626.0125.04 651.05 18.74 958.4 244.14 286.4 95.47 1008.48</div></pre></td></tr></table></figure>
<h3 id="web-sales-（668052行）-32-99MB"><a href="#web-sales-（668052行）-32-99MB" class="headerlink" title="web_sales （668052行） 32.99MB"></a>web_sales （668052行） 32.99MB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table web_sales;</div><div class="line">OK</div><div class="line">CREATE TABLE `web_sales`(</div><div class="line"> `ws_sold_date_sk` bigint,</div><div class="line"> `ws_sold_time_sk` bigint,</div><div class="line"> `ws_ship_date_sk` bigint,</div><div class="line"> `ws_item_sk` bigint,</div><div class="line"> `ws_bill_customer_sk` bigint,</div><div class="line"> `ws_bill_cdemo_sk` bigint,</div><div class="line"> `ws_bill_hdemo_sk` bigint,</div><div class="line"> `ws_bill_addr_sk` bigint,</div><div class="line"> `ws_ship_customer_sk` bigint,</div><div class="line"> `ws_ship_cdemo_sk` bigint,</div><div class="line"> `ws_ship_hdemo_sk` bigint,</div><div class="line"> `ws_ship_addr_sk` bigint,</div><div class="line"> `ws_web_page_sk` bigint,</div><div class="line"> `ws_web_site_sk` bigint,</div><div class="line"> `ws_ship_mode_sk` bigint,</div><div class="line"> `ws_warehouse_sk` bigint,</div><div class="line"> `ws_promo_sk` bigint,</div><div class="line"> `ws_order_number` bigint,</div><div class="line"> `ws_quantity` int,</div><div class="line"> `ws_wholesale_cost` decimal(7,2),</div><div class="line"> `ws_list_price` decimal(7,2),</div><div class="line"> `ws_sales_price` decimal(7,2),</div><div class="line"> `ws_ext_discount_amt` decimal(7,2),</div><div class="line"> `ws_ext_sales_price` decimal(7,2),</div><div class="line"> `ws_ext_wholesale_cost` decimal(7,2),</div><div class="line"> `ws_ext_list_price` decimal(7,2),</div><div class="line"> `ws_ext_tax` decimal(7,2),</div><div class="line"> `ws_coupon_amt` decimal(7,2),</div><div class="line"> `ws_ext_ship_cost` decimal(7,2),</div><div class="line"> `ws_net_paid` decimal(7,2),</div><div class="line"> `ws_net_paid_inc_tax` decimal(7,2),</div><div class="line"> `ws_net_paid_inc_ship` decimal(7,2),</div><div class="line"> `ws_net_paid_inc_ship_tax` decimal(7,2),</div><div class="line"> `ws_net_profit` decimal(7,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_sales\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'668052\',</div><div class="line"> \'rawDataSize\'=\'1221174888\',</div><div class="line"> \'totalSize\'=\'34585166\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167263\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">36890 26789 36993 794 85457 380790 2436 42649 29934 1583844 5251 525 2 14 1 3 120 0 93 32.62 81.22 59.29 2039.49 5513.97 3033.66 7553.46 330.84 0 1661.76 5513.97 5844.81 7175.73 7506.57 2480.31</div></pre></td></tr></table></figure>
<h3 id="web-site-（30行）10-31KB"><a href="#web-site-（30行）10-31KB" class="headerlink" title="web_site （30行）10.31KB"></a>web_site （30行）10.31KB</h3><p>建表语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">hive&gt; show create table web_site;</div><div class="line">OK</div><div class="line">CREATE TABLE `web_site`(</div><div class="line"> `web_site_sk` bigint,</div><div class="line"> `web_site_id` string,</div><div class="line"> `web_rec_start_date` string,</div><div class="line"> `web_rec_end_date` string,</div><div class="line"> `web_name` string,</div><div class="line"> `web_open_date_sk` bigint,</div><div class="line"> `web_close_date_sk` bigint,</div><div class="line"> `web_class` string,</div><div class="line"> `web_manager` string,</div><div class="line"> `web_mkt_id` int,</div><div class="line"> `web_mkt_class` string,</div><div class="line"> `web_mkt_desc` string,</div><div class="line"> `web_market_manager` string,</div><div class="line"> `web_company_id` int,</div><div class="line"> `web_company_name` string,</div><div class="line"> `web_street_number` string,</div><div class="line"> `web_street_name` string,</div><div class="line"> `web_street_type` string,</div><div class="line"> `web_suite_number` string,</div><div class="line"> `web_city` string,</div><div class="line"> `web_county` string,</div><div class="line"> `web_state` string,</div><div class="line"> `web_zip` string,</div><div class="line"> `web_country` string,</div><div class="line"> `web_gmt_offset` decimal(5,2),</div><div class="line"> `web_tax_percentage` decimal(5,2))</div><div class="line">ROW FORMAT SERDE</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcSerde\'</div><div class="line">STORED AS INPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat\'</div><div class="line">OUTPUTFORMAT</div><div class="line"> \'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat\'</div><div class="line">LOCATION</div><div class="line"> \'hdfs://mycluster/usr/hive/warehouse/bigbench.db/web_site\'</div><div class="line">TBLPROPERTIES (</div><div class="line"> \'COLUMN_STATS_ACCURATE\'=\'true\',</div><div class="line"> \'numFiles\'=\'2\',</div><div class="line"> \'numRows\'=\'30\',</div><div class="line"> \'rawDataSize\'=\'62832\',</div><div class="line"> \'totalSize\'=\'10554\',</div><div class="line"> \'transient_lastDdlTime\'=\'1473167210\')</div></pre></td></tr></table></figure>
<p>某一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 AAAAAAAAAAAAAAAC 2002-07-17 site_0 16450 91500 Unknown Gregory George 1 sheaves despite the quietly sly asymp 	thin enticing frets except the sometimes final courts might promise blithe dino Frank Hernandez 1 ese 17 5th Ave EbDxJVL Georgetown Guadalupe County TX 75435 United States -6 0.01</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> TPCx-BB </tag>
            
            <tag> 基准测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习笔记（持续更新）]]></title>
      <url>http://linbingdong.com/2016/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<ul>
<li>任何一个有效的机器学习算法必须有一个归纳偏好（bias），否则无法产生确定的学习结果  bias的大小决定学习算法尽可能特殊或尽可能一般 可用“奥卡姆剃刀”原则来选择bias<a id="more"></a></li>
<li>“奥卡姆剃刀”原则：如无必要，勿增实体 Entities should not be multiplied unnecessarily</li>
<li>NFL（No Free Lunch)原理：在某些问题上算法A比B好，必定存在某些问题，B比A好   所有评价学习算法好坏要针对具体问题</li>
<li>分类的目标是让泛化误差最小，但是只能从经验误差入手（因为不知道新样本是什么）因此不能让经验误差太小（太专注特殊，没有一般性），否则经常过拟合，泛化性能很差</li>
<li>过拟合无法完全避免，只能缓解 通过使用测试集来测试学习器对新样本的判别能力  以测试集上的测试误差（testing error）作为泛化误差的近似</li>
<li>测试集尽量不出现在训练集中</li>
<li>评估方法（留出法、交叉验证法、留一法、自助法）一般用留出法（训练集、测试集、验证集按比例分 8:1:1）</li>
<li>调参工作量很大（实数范围的，不可能穷举）</li>
<li>两类参数：模型的参数（可以很多，深度神经网络百亿个）、算法自身的参数（较少，一般10以内）</li>
</ul>
<ul>
<li>SVM</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1.SVM由Vapnik提出，具有坚实的统计学理论基础</div><div class="line">2.主要是用于二分类的，多分类要  专门推广，不是很方便</div><div class="line">3.可以很好用于高维分类，避免维数灾</div><div class="line">4.基于判别式分类，使用最大间隔原理（Max Margin）</div><div class="line">5.使不等式成立的点为支持向量 最大间隔为 2/||W|| 因为便签为 +1 -1</div><div class="line">6.SVM基本型如下：</div><div class="line">7.SVM基本型是一个凸优化问题，更具体说是一个二次规划问题（目标函数是二次的，约束条件是线性的）</div><div class="line">8.通过拉格朗日对偶(Lagrange Duality) 变换到对偶变量（dual veriable）的优化问题进行求解</div><div class="line">9.可以引入核函数，推广到非线性分类问题</div><div class="line">10.对于非线性可分问题，可以映射到高维空间，使样本在新的特征空间变成线性可分（如果原始空间是有限维，一定存在一个高维特征空间使样本线性可分）引入核函数避开高维障碍</div><div class="line">11.高维空间中两个向量的内积等于它们在原始空间中对应的向量通过核函数运算的结果</div><div class="line">12.核函数隐式地定义了特征空间，所有核函数如果选择不当，意味着将原始空间映射到了一个不合适的特征空间，导致性能不佳</div><div class="line">13.目前还没有什么方法来确定核函数（研究点）</div><div class="line">14.SVM的兴起曾把神经网络再次打入低谷</div></pre></td></tr></table></figure>
<ul>
<li>神经网络</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. 每个神经元都是一个感知机</div><div class="line">2. 若每个激活函数都是线性函数，最终只得到线性变换（线性函数的组合还是线性函数）</div><div class="line">3. 一般都用非线性激活函数 （对数、双曲正切、阶跃、修正线性）</div><div class="line">4. BP算法基于梯度下降策略，以误差函数的负梯度方向对参数进行调整（权重和阈值）</div><div class="line">5. 梯度下降法：一种常用的一阶优化方法（只使用目标函数的一阶导数），求解无约束优化问题最经典的方法之一</div><div class="line">6. 学习率控制每一步更新的步长，太大容易震荡，太小收敛慢</div><div class="line">7. 神经网络只需输入样本和学习率 连接权重和阈值在（0，1）随机初始化</div><div class="line">8. 深度学习中更常用的做法是将softmax作为最后一层的激活函数，此时用的代价函数是log-likelihood（对数自然）</div><div class="line">9. 标准BP（每次用一个样本来更新）和累积BP（先读取一遍训练集）算法的区别，类似于随机梯度下降和（最快）梯度下降的区别 </div><div class="line">10. 神经网络模型越复杂则1.参数越多，训练效率低（慢）2.容易过拟合  解决办法1.云计算（计算能力强）2.大数据（样本多）</div><div class="line">11. 改进：1.用交叉熵代价函数代替方差代价函数 2.用分段线性函数（修正线性函数）代替sigmoid函数作隐含层激活函数</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phoenix综述（SQL on HBase）]]></title>
      <url>http://linbingdong.com/2016/09/02/Phoenix%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="1-Phoenix概述"><a href="#1-Phoenix概述" class="headerlink" title="1. Phoenix概述"></a>1. Phoenix概述</h2><p>Phoenix最早是saleforce的一个开源项目，后来成为Apache基金的顶级项目。</p>
<a id="more"></a>
<p>Phoenix是构建在HBase上的一个SQL层，能让我们用标准的JDBC APIs而不是HBase客户端APIs来创建表，插入数据和对HBase数据进行查询。</p>
<blockquote>
<p>put the SQL back in NoSQL</p>
</blockquote>
<p>Phoenix完全使用Java编写，作为HBase内嵌的JDBC驱动。Phoenix查询引擎会将SQL查询转换为一个或多个HBase扫描，并编排执行以生成标准的JDBC结果集。直接使用HBase API、协同处理器与自定义过滤器，对于简单查询来说，其性能量级是毫秒，对于百万级别的行数来说，其性能量级是秒。 </p>
<p>HBase的查询工具有很多，如：Hive、Tez、Impala、Spark SQL、Phoenix等。</p>
<p>Phoenix通过以下方式使我们可以少写代码，并且性能比我们自己写代码更好：</p>
<ul>
<li>将SQL编译成原生的HBase scans。</li>
<li>确定scan关键字的最佳开始和结束</li>
<li>让scan并行执行</li>
<li>…</li>
</ul>
<p>使用Phoenix的公司</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-ab4f066b9dfce30a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="2-历史演进"><a href="#2-历史演进" class="headerlink" title="2. 历史演进"></a>2. 历史演进</h2><ul>
<li><strong>3.0/4.0 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/array_type.html" target="_blank" rel="external">ARRAY Type</a></strong>. 支持标准的JDBC数组类型</p>
<p><strong><a href="http://phoenix.apache.org/sequences.html" target="_blank" rel="external">Sequences</a></strong>. 支持 CREATE/DROP SEQUENCE, NEXT VALUE FOR, CURRENT VALUE FOR也实现了</p>
<p><strong><a href="http://phoenix.apache.org/multi-tenancy.html" target="_blank" rel="external">Multi-tenancy</a></strong>. 同一张HBase物理表上，不同的租户可以创建相互独立的视图</p>
<p><strong><a href="http://phoenix.apache.org/views.html" target="_blank" rel="external">Views</a></strong>. 同一张HBase物理表上可以创建不同的视图</p>
<ul>
<li><strong>3.1/4.1 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/pig_integration.html#Pig_Loader" target="_blank" rel="external">Apache Pig Loader</a></strong> . 通过pig来处理数据时支持pig加载器来利用Phoenix的性能</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-136" target="_blank" rel="external">Derived Tables</a></strong>. 允许在一个FROM子句中使用SELECT子句来定义一张衍生表</p>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Local_Indexing" target="_blank" rel="external">Local Indexing</a></strong>. 后面介绍</p>
<p><strong><a href="http://phoenix.apache.org/tracing.html" target="_blank" rel="external">Tracing</a></strong>. 后面介绍</p>
<ul>
<li><strong>3.2/4.2 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/subqueries.html" target="_blank" rel="external">Subqueries</a></strong> 支持在WHERE和FROM子句中的独立子查询和相关子查询</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-167" target="_blank" rel="external">Semi/anti joins</a></strong>. 通过标准的[NOT] IN 和 [NOT] EXISTS关键字来支持半/反连接</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-852" target="_blank" rel="external">Optimize foreign key joins</a></strong>. 通过利用跳跃扫描过滤器来优化外键连接</p>
<p><strong><a href="http://phoenix.apache.org/update_statistics.html" target="_blank" rel="external">Statistics Collection</a></strong>. 通过收集表的统计信息来提高并行查询能力</p>
<ul>
<li><strong>3.3/4.3 release</strong></li>
</ul>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1179" target="_blank" rel="external">Many-to-many joins</a></strong>. 支持两边都太大以至于无法放进内存的连接</p>
<p><strong><a href="http://phoenix.apache.org/phoenix_mr.html" target="_blank" rel="external">Map-reduce Integration</a></strong>. 支持Map-reduce集成</p>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Functional_Indexes" target="_blank" rel="external">Functional Indexes</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.4 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/udf.html" target="_blank" rel="external">User Defined Functions</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.5 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/secondary_indexing.html#Asynchronous_Index_Population" target="_blank" rel="external">Asynchronous Index Population</a></strong>. 通过一个Map-reduce job，索引可以被异步创建</p>
<ul>
<li><strong>4.6 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/rowtimestamp.html" target="_blank" rel="external">Time series Optimization</a></strong>. 优化针对时间序列数据的查询</p>
<ul>
<li><strong>4.7 release</strong></li>
</ul>
<p><strong><a href="http://phoenix.apache.org/transactions.html" target="_blank" rel="external">Transaction Support</a></strong>. 后面介绍</p>
<ul>
<li><strong>4.8 release</strong></li>
</ul>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-258" target="_blank" rel="external">DISTINCT Query Optimization</a></strong>. 使用搜索逻辑来大幅提高 SELECT DISTINCT 和 COUNT DISTINCT的查询性能 </p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1734" target="_blank" rel="external">Local Index Improvements</a></strong>. Reworked 后面介绍</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-2743" target="_blank" rel="external">Hive Integration</a></strong>. 能够在Phoenix内使用Hive来支持大表和大表之间的连接</p>
<p><strong><a href="https://issues.apache.org/jira/browse/PHOENIX-1311" target="_blank" rel="external">Namespace Mapping</a></strong>. 将Phoenix schema映射到HBase的命名空间来增强不同schema之间的隔离性</p>
<h2 id="3-特性"><a href="#3-特性" class="headerlink" title="3. 特性"></a>3. 特性</h2><h3 id="3-1-Transactions-beta-事务"><a href="#3-1-Transactions-beta-事务" class="headerlink" title="3.1 Transactions (beta)  事务"></a>3.1 <a href="http://phoenix.apache.org/transactions.html" target="_blank" rel="external">Transactions (beta)</a>  事务</h3><p>该特性还处于beta版，并非正式版。通过集成<a href="http://tephra.incubator.apache.org/" target="_blank" rel="external">Tephra</a>,Phoenix可以支持ACID特性。Tephra也是Apache的一个项目,是事务管理器，它在像HBase这样的分布式数据存储上提供全局一致事务。HBase本身在行层次和区层次上支持强一致性，Tephra额外提供交叉区、交叉表的一致性来支持可扩展性。</p>
<p>要想让Phoenix支持事务特性，需要以下步骤：</p>
<ul>
<li>配置客户端hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;phoenix.transactions.enabled&lt;/name&gt;</div><div class="line">  &lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<ul>
<li>配置服务端hbase-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;data.tx.snapshot.dir&lt;/name&gt;</div><div class="line">  &lt;value&gt;/tmp/tephra/snapshots&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;data.tx.timeout&lt;/name&gt;</div><div class="line">  &lt;value&gt;60&lt;/value&gt;</div><div class="line">  &lt;description&gt; set the transaction timeout (time after which open transactions become invalid) to a reasonable value.&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<ul>
<li>配置$HBASE_HOME并启动Tephra</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/tephra</div></pre></td></tr></table></figure>
<p>通过以上配置，Phoenix已经支持了事务特性，但创建表的时候默认还是不支持的。如果想创建一个表支持事务特性，需要显示声明，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE my_table (k BIGINT PRIMARY KEY, v VARCHAR) TRANSACTIONAL=true;</div></pre></td></tr></table></figure>
<p>就是在建表语句末尾增加 <code>TRANSACTIONAL=true</code>。</p>
<p>原本存在的表也可以更改成支持事务的，需要注意的是，事务表无法改回非事务的，因此更改的时候要小心。一旦改成事务的，就改不回去了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE my_other_table SET TRANSACTIONAL=true;</div></pre></td></tr></table></figure>
<h3 id="3-2-User-defined-functions-UDFs-用户定义函数"><a href="#3-2-User-defined-functions-UDFs-用户定义函数" class="headerlink" title="3.2 User-defined functions(UDFs)  用户定义函数"></a>3.2 <a href="http://phoenix.apache.org/udf.html" target="_blank" rel="external">User-defined functions(UDFs)</a>  用户定义函数</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><p>Phoenix从4.4.0版本开始支持用户自定义函数。</p>
<p>用户可以创建临时或永久的用户自定义函数。这些用户自定义函数可以像内置的create、upsert、delete一样被调用。临时函数是针对特定的会话或连接，对其他会话或连接不可见。永久函数的元信息会被存储在一张叫做SYSTEM.FUNCTION的系统表中，对任何会话或连接均可见。</p>
<h4 id="3-2-2-配置"><a href="#3-2-2-配置" class="headerlink" title="3.2.2 配置"></a>3.2.2 配置</h4><ul>
<li>hive-site.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;phoenix.functions.allowUserDefinedFunctions&lt;/name&gt;</div><div class="line">  &lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;fs.hdfs.impl&lt;/name&gt;</div><div class="line">  &lt;value&gt;org.apache.hadoop.hdfs.DistributedFileSystem&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class="line">  &lt;value&gt;$&#123;hbase.tmp.dir&#125;/hbase&lt;/value&gt;</div><div class="line">  &lt;description&gt;The directory shared by region servers and into</div><div class="line">    which HBase persists.  The URL should be &apos;fully-qualified&apos;</div><div class="line">    to include the filesystem scheme.  For example, to specify the</div><div class="line">    HDFS directory &apos;/hbase&apos; where the HDFS instance&apos;s namenode is</div><div class="line">    running at namenode.example.org on port 9000, set this value to:</div><div class="line">    hdfs://namenode.example.org:9000/hbase.  By default, we write</div><div class="line">    to whatever $&#123;hbase.tmp.dir&#125; is set too -- usually /tmp --</div><div class="line">    so change this configuration or else all data will be lost on</div><div class="line">    machine restart.&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.dynamic.jars.dir&lt;/name&gt;</div><div class="line">  &lt;value&gt;$&#123;hbase.rootdir&#125;/lib&lt;/value&gt;</div><div class="line">  &lt;description&gt;</div><div class="line">    The directory from which the custom udf jars can be loaded</div><div class="line">    dynamically by the phoenix client/region server without the need to restart. However,</div><div class="line">    an already loaded udf class would not be un-loaded. See</div><div class="line">    HBASE-1936 for more details.</div><div class="line">  &lt;/description&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<p>后两个配置需要跟hbse服务端的配置一致。</p>
<p>以上配置完后，在JDBC连接时还需要执行以下语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Properties props = new Properties();</div><div class="line">props.setProperty(&quot;phoenix.functions.allowUserDefinedFunctions&quot;, &quot;true&quot;);</div><div class="line">Connection conn = DriverManager.getConnection(&quot;jdbc:phoenix:localhost&quot;, props);</div></pre></td></tr></table></figure>
<p>以下是可选的配置，用于动态类加载的时候把jar包从hdfs拷贝到本地文件系统</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hbase.local.dir&lt;/name&gt;</div><div class="line">  &lt;value&gt;$&#123;hbase.tmp.dir&#125;/local/&lt;/value&gt;</div><div class="line">  &lt;description&gt;Directory on the local filesystem to be used</div><div class="line">    as a local storage.&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h3 id="3-3-Secondary-Indexing-二级索引"><a href="#3-3-Secondary-Indexing-二级索引" class="headerlink" title="3.3 Secondary Indexing  二级索引"></a>3.3 <a href="http://phoenix.apache.org/secondary_indexing.html" target="_blank" rel="external">Secondary Indexing</a>  二级索引</h3><p>在HBase中，只有一个单一的按照字典序排序的rowKey索引，当使用rowKey来进行数据查询的时候速度较快，但是如果不使用rowKey来查询的话就会使用filter来对全表进行扫描，很大程度上降低了检索性能。而Phoenix提供了二级索引技术来应对这种使用rowKey之外的条件进行检索的场景。</p>
<ul>
<li>Covered Indexes</li>
</ul>
<blockquote>
<p>只需要通过索引就能返回所要查询的数据，所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)</p>
</blockquote>
<ul>
<li>Functional Indexes</li>
</ul>
<blockquote>
<p>从Phoeinx4.3以上就支持函数索引，其索引不局限于列，可以合适任意的表达式来创建索引，当在查询时用到了这些表达式时就直接返回表达式结果</p>
</blockquote>
<ul>
<li>Global Indexes</li>
</ul>
<blockquote>
<p>Global indexing适用于多读少写的业务场景。<br>使用Global indexing的话在写数据的时候会消耗大量开销，因为所有对数据表的更新操作（DELETE, UPSERT VALUES and UPSERT SELECT）,会引起索引表的更新，而索引表是分布在不同的数据节点上的，跨节点的数据传输带来了较大的性能消耗。在读数据的时候Phoenix会选择索引表来降低查询消耗的时间。在默认情况下如果想查询的字段不是索引字段的话索引表不会被使用，也就是说不会带来查询速度的提升。</p>
</blockquote>
<ul>
<li>Local Indexes</li>
</ul>
<blockquote>
<p>Local indexing适用于写操作频繁的场景。<br>与Global indexing一样，Phoenix会自动判定在进行查询的时候是否使用索引。使用Local indexing时，索引数据和数据表的数据是存放在相同的服务器中的避免了在写操作的时候往不同服务器的索引表中写索引带来的额外开销。使用Local indexing的时候即使查询的字段不是索引字段索引表也会被使用，这会带来查询速度的提升，这点跟Global indexing不同。一个数据表的所有索引数据都存储在一个单一的独立的可共享的表中。</p>
</blockquote>
<h3 id="3-4-Statistics-Collection-统计信息收集"><a href="#3-4-Statistics-Collection-统计信息收集" class="headerlink" title="3.4 Statistics Collection  统计信息收集"></a>3.4 <a href="http://phoenix.apache.org/update_statistics.html" target="_blank" rel="external">Statistics Collection</a>  统计信息收集</h3><blockquote>
<p>UPDATE STATISTICS可以更新某张表的统计信息，以提高查询性能</p>
</blockquote>
<h3 id="3-5-Row-timestamp-时间戳"><a href="#3-5-Row-timestamp-时间戳" class="headerlink" title="3.5 Row timestamp  时间戳"></a>3.5 <a href="http://phoenix.apache.org/rowtimestamp.html" target="_blank" rel="external">Row timestamp</a>  时间戳</h3><blockquote>
<p>从4.6版本开始，Phoenix提供了一种将HBase原生的row timestamp映射到Phoenix列的方法。这样有利于充分利用HBase提供的针对存储文件的时间范围的各种优化，以及Phoenix内置的各种查询优化。</p>
</blockquote>
<h3 id="3-6-Paged-Queries-分页查询"><a href="#3-6-Paged-Queries-分页查询" class="headerlink" title="3.6 Paged Queries  分页查询"></a>3.6 <a href="http://phoenix.apache.org/paged.html#" target="_blank" rel="external">Paged Queries</a>  分页查询</h3><blockquote>
<p>Phoenix支持分页查询：</p>
<ul>
<li>Row Value Constructors (RVC)</li>
<li>OFFSET with limit</li>
</ul>
</blockquote>
<h3 id="3-7-Salted-Tables-散步表"><a href="#3-7-Salted-Tables-散步表" class="headerlink" title="3.7 Salted Tables  散步表"></a>3.7 <a href="http://phoenix.apache.org/salted.html" target="_blank" rel="external">Salted Tables</a>  散步表</h3><blockquote>
<p>如果row key是自动增长的，那么HBase的顺序写会导致region server产生数据热点的问题，Phoenix的Salted Tables技术可以解决region server的热点问题</p>
</blockquote>
<h3 id="3-8-Skip-Scan-跳跃扫描"><a href="#3-8-Skip-Scan-跳跃扫描" class="headerlink" title="3.8 Skip Scan  跳跃扫描"></a>3.8 <a href="http://phoenix.apache.org/skip_scan.html" target="_blank" rel="external">Skip Scan</a>  跳跃扫描</h3><blockquote>
<p>可以在范围扫描的时候提高性能</p>
</blockquote>
<h3 id="3-9-Views-视图"><a href="#3-9-Views-视图" class="headerlink" title="3.9 Views  视图"></a>3.9 <a href="http://phoenix.apache.org/views.html" target="_blank" rel="external">Views</a>  视图</h3><blockquote>
<p>标准的SQL视图语法现在在Phoenix上也支持了。这使得能在同一张底层HBase物理表上创建多个虚拟表。</p>
</blockquote>
<h3 id="3-10-Multi-tenancy-多租户"><a href="#3-10-Multi-tenancy-多租户" class="headerlink" title="3.10 Multi tenancy  多租户"></a>3.10 <a href="http://phoenix.apache.org/multi-tenancy.html" target="_blank" rel="external">Multi tenancy</a>  多租户</h3><blockquote>
<p>通过指定不同的租户连接实现数据访问的隔离</p>
</blockquote>
<h3 id="3-11-Dynamic-Columns-动态列"><a href="#3-11-Dynamic-Columns-动态列" class="headerlink" title="3.11 Dynamic Columns  动态列"></a>3.11 <a href="http://phoenix.apache.org/dynamic_columns.html" target="_blank" rel="external">Dynamic Columns</a>  动态列</h3><blockquote>
<p>Phoenix 1.2, specifying columns dynamically is now supported by allowing column definitions to included in parenthesis after the table in the FROM clause on a SELECT statement. Although this is not standard SQL, it is useful to surface this type of functionality to leverage the late binding ability of HBase.</p>
</blockquote>
<h3 id="3-12-Bulk-CSV-Data-Loading-大量CSV数据加载"><a href="#3-12-Bulk-CSV-Data-Loading-大量CSV数据加载" class="headerlink" title="3.12 Bulk CSV Data Loading  大量CSV数据加载"></a>3.12 <a href="http://phoenix.apache.org/bulk_dataload.html" target="_blank" rel="external">Bulk CSV Data Loading</a>  大量CSV数据加载</h3><blockquote>
<p>加载CSV数据到Phoenix表有两种方式：1. 通过psql命令以单线程的方式加载，数据量少的情况下适用。 2. 基于MapReduce的bulk load工具，适用于数据量大的情况</p>
</blockquote>
<h3 id="3-13-Query-Server-查询服务器"><a href="#3-13-Query-Server-查询服务器" class="headerlink" title="3.13 Query Server  查询服务器"></a>3.13 <a href="http://phoenix.apache.org/server.html" target="_blank" rel="external">Query Server</a>  查询服务器</h3><blockquote>
<p>Phoenix4.4引入的一个单独的服务器来提供thin客户端的连接</p>
</blockquote>
<h3 id="3-14-Tracing-追踪"><a href="#3-14-Tracing-追踪" class="headerlink" title="3.14 Tracing  追踪"></a>3.14 <a href="http://phoenix.apache.org/tracing.html" target="_blank" rel="external">Tracing</a>  追踪</h3><blockquote>
<p>从4.1版本开始Phoenix增加这个特性来追踪每条查询的踪迹，这使用户能够看到每一条查询或插入操作背后从客户端到HBase端执行的每一步。</p>
</blockquote>
<h3 id="3-15-Metrics-指标"><a href="#3-15-Metrics-指标" class="headerlink" title="3.15 Metrics  指标"></a>3.15 <a href="http://phoenix.apache.org/metrics.html" target="_blank" rel="external">Metrics</a>  指标</h3><blockquote>
<p>Phoenix提供各种各样的指标使我们能够知道Phoenix客户端在执行不同SQL语句的时候其内部发生了什么。这些指标在客户端JVM中通过两种方式来收集：</p>
<ul>
<li><strong>Request level metrics</strong> - collected at an individual SQL statement<br>level</li>
<li><strong>Global metrics</strong> - collected at the client JVM level</li>
</ul>
</blockquote>
<h2 id="4-架构和组成"><a href="#4-架构和组成" class="headerlink" title="4. 架构和组成"></a>4. 架构和组成</h2><ul>
<li>Phoenix架构</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c0f2f49522ae3da2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Phoenix Architecture.png"></p>
<ul>
<li>Phoenix在Hadoop生态系统中的位置</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-684d1b6dcfcdf8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="位置.png"></p>
<h2 id="5-数据存储"><a href="#5-数据存储" class="headerlink" title="5. 数据存储"></a>5. 数据存储</h2><blockquote>
<p>Phoenix将HBase的数据模型映射到关系型世界</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-3d6f52d14720d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Data Model.png"></p>
<h2 id="6-对QL的支持"><a href="#6-对QL的支持" class="headerlink" title="6. 对QL的支持"></a>6. 对QL的支持</h2><p>支持的命令如下：</p>
<ul>
<li>SELECT</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">SELECT * FROM TEST LIMIT 1000;</div><div class="line">SELECT * FROM TEST LIMIT 1000 OFFSET 100;</div><div class="line">SELECT full_name FROM SALES_PERSON WHERE ranking &gt;= 5.0 UNION ALL SELECT reviewer_name FROM CUSTOMER_REVIEW WHERE score &gt;= 8.0</div></pre></td></tr></table></figure>
<ul>
<li>UPSERT VALUES</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">UPSERT INTO TEST VALUES(&apos;foo&apos;,&apos;bar&apos;,3);</div><div class="line">UPSERT INTO TEST(NAME,ID) VALUES(&apos;foo&apos;,123);</div></pre></td></tr></table></figure>
<ul>
<li>UPSERT SELECT</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">UPSERT INTO test.targetTable(col1, col2) SELECT col3, col4 FROM test.sourceTable WHERE col5 &lt; 100</div><div class="line">UPSERT INTO foo SELECT * FROM bar;</div></pre></td></tr></table></figure>
<ul>
<li>DELETE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DELETE FROM TEST;</div><div class="line">DELETE FROM TEST WHERE ID=123;</div><div class="line">DELETE FROM TEST WHERE NAME LIKE &apos;foo%&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>CREATE TABLE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE my_schema.my_table ( id BIGINT not null primary key, date)</div><div class="line">CREATE TABLE my_table ( id INTEGER not null primary key desc, date DATE not null,m.db_utilization DECIMAL, i.db_utilization) m.DATA_BLOCK_ENCODING=&apos;DIFF&apos;</div><div class="line">CREATE TABLE stats.prod_metrics ( host char(50) not null, created_date date not null,txn_count bigint CONSTRAINT pk PRIMARY KEY (host, created_date) )</div><div class="line">CREATE TABLE IF NOT EXISTS &quot;my_case_sensitive_table&quot;</div><div class="line">    ( &quot;id&quot; char(10) not null primary key, &quot;value&quot; integer)</div><div class="line">    DATA_BLOCK_ENCODING=&apos;NONE&apos;,VERSIONS=5,MAX_FILESIZE=2000000 split on (?, ?, ?)</div><div class="line">CREATE TABLE IF NOT EXISTS my_schema.my_table (org_id CHAR(15), entity_id CHAR(15), payload binary(1000),CONSTRAINT pk PRIMARY KEY (org_id, entity_id) )TTL=86400</div></pre></td></tr></table></figure>
<ul>
<li>DROP TABLE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP TABLE my_schema.my_table;</div><div class="line">DROP TABLE IF EXISTS my_table;</div><div class="line">DROP TABLE my_schema.my_table CASCADE;</div></pre></td></tr></table></figure>
<ul>
<li>CREATE FUNCTION</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">CREATE FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos; using jar &apos;hdfs:/localhost:8080/hbase/lib/myjar.jar&apos;</div><div class="line">CREATE FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos;</div><div class="line">CREATE FUNCTION my_increment(integer, integer constant defaultvalue=&apos;10&apos;) returns integer as &apos;com.mypackage.MyIncrementFunction&apos; using jar &apos;/hbase/lib/myincrement.jar&apos;</div><div class="line">CREATE TEMPORARY FUNCTION my_reverse(varchar) returns varchar as &apos;com.mypackage.MyReverseFunction&apos; using jar &apos;hdfs:/localhost:8080/hbase/lib/myjar.jar&apos;</div></pre></td></tr></table></figure>
<ul>
<li>DROP FUNCTION</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP FUNCTION IF EXISTS my_reverse</div><div class="line">DROP FUNCTION my_reverse</div></pre></td></tr></table></figure>
<ul>
<li>CREATE VIEW</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">CREATE VIEW &quot;my_hbase_table&quot;( k VARCHAR primary key, &quot;v&quot; UNSIGNED_LONG) default_column_family=&apos;a&apos;;</div><div class="line">CREATE VIEW my_view ( new_col SMALLINT ) AS SELECT * FROM my_table WHERE k = 100;</div><div class="line">CREATE VIEW my_view_on_view AS SELECT * FROM my_view WHERE new_col &gt; 70;</div></pre></td></tr></table></figure>
<ul>
<li>DROP VIEW</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP VIEW my_view</div><div class="line">DROP VIEW IF EXISTS my_schema.my_view</div><div class="line">DROP VIEW IF EXISTS my_schema.my_view CASCADE</div></pre></td></tr></table></figure>
<ul>
<li>CREATE SEQUENCE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">CREATE SEQUENCE my_sequence;</div><div class="line">CREATE SEQUENCE my_sequence START WITH -1000</div><div class="line">CREATE SEQUENCE my_sequence INCREMENT BY 10</div><div class="line">CREATE SEQUENCE my_schema.my_sequence START 0 CACHE 10</div></pre></td></tr></table></figure>
<ul>
<li>DROP SEQUENCE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP SEQUENCE my_sequence</div><div class="line">DROP SEQUENCE IF EXISTS my_schema.my_sequence</div></pre></td></tr></table></figure>
<ul>
<li>ALTER</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">ALTER TABLE my_schema.my_table ADD d.dept_id char(10) VERSIONS=10</div><div class="line">ALTER TABLE my_table ADD dept_name char(50), parent_id char(15) null primary key</div><div class="line">ALTER TABLE my_table DROP COLUMN d.dept_id, parent_id;</div><div class="line">ALTER VIEW my_view DROP COLUMN new_col;</div><div class="line">ALTER TABLE my_table SET IMMUTABLE_ROWS=true,DISABLE_WAL=true;</div></pre></td></tr></table></figure>
<ul>
<li>CREATE INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">CREATE INDEX my_idx ON sales.opportunity(last_updated_date DESC)</div><div class="line">CREATE INDEX my_idx ON log.event(created_date DESC) INCLUDE (name, payload) SALT_BUCKETS=10</div><div class="line">CREATE INDEX IF NOT EXISTS my_comp_idx ON server_metrics ( gc_time DESC, created_date DESC ) DATA_BLOCK_ENCODING=&apos;NONE&apos;,VERSIONS=?,MAX_FILESIZE=2000000 split on (?, ?, ?)</div><div class="line">CREATE INDEX my_idx ON sales.opportunity(UPPER(contact_name))</div></pre></td></tr></table></figure>
<ul>
<li>DROP INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP INDEX my_idx ON sales.opportunity</div><div class="line">DROP INDEX IF EXISTS my_idx ON server_metrics</div></pre></td></tr></table></figure>
<ul>
<li>ALTER INDEX</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">ALTER INDEX my_idx ON sales.opportunity DISABLE</div><div class="line">ALTER INDEX IF EXISTS my_idx ON server_metrics REBUILD</div></pre></td></tr></table></figure>
<ul>
<li>EXPLAIN</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">EXPLAIN SELECT NAME, COUNT(*) FROM TEST GROUP BY NAME HAVING COUNT(*) &gt; 2;</div><div class="line">EXPLAIN SELECT entity_id FROM CORE.CUSTOM_ENTITY_DATA WHERE organization_id=&apos;00D300000000XHP&apos; AND SUBSTR(entity_id,1,3) = &apos;002&apos; AND created_date &lt; CURRENT_DATE()-1;</div></pre></td></tr></table></figure>
<ul>
<li>UPDATE STATISTICS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">UPDATE STATISTICS my_table</div><div class="line">UPDATE STATISTICS my_schema.my_table INDEX</div><div class="line">UPDATE STATISTICS my_index</div><div class="line">UPDATE STATISTICS my_table COLUMNS</div><div class="line">UPDATE STATISTICS my_table SET phoenix.stats.guidepost.width=50000000</div></pre></td></tr></table></figure>
<ul>
<li>CREATE SCHEMA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">CREATE SCHEMA IF NOT EXISTS my_schema</div><div class="line">CREATE SCHEMA my_schema</div></pre></td></tr></table></figure>
<ul>
<li>USE</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">USE my_schema</div><div class="line">USE DEFAULT</div></pre></td></tr></table></figure>
<ul>
<li>DROP SCHEMA</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Example:</div><div class="line">DROP SCHEMA IF EXISTS my_schema</div><div class="line">DROP SCHEMA my_schema</div></pre></td></tr></table></figure>
<h2 id="7-安装部署"><a href="#7-安装部署" class="headerlink" title="7. 安装部署"></a>7. 安装部署</h2><h3 id="7-1-安装预编译的Phoenix"><a href="#7-1-安装预编译的Phoenix" class="headerlink" title="7.1 安装预编译的Phoenix"></a>7.1 安装预编译的Phoenix</h3><ul>
<li><p>下载并解压最新版的phoenix-[version]-bin.tar包</p>
</li>
<li><p>将phoenix-[version]-server.jar放入服务端和master节点的HBase的lib目录下</p>
</li>
<li><p>重启HBase</p>
</li>
<li><p>将phoenix-[version]-client.jar添加到所有Phoenix客户端的classpath</p>
</li>
</ul>
<h3 id="7-2-使用Phoenix"><a href="#7-2-使用Phoenix" class="headerlink" title="7.2 使用Phoenix"></a>7.2 使用Phoenix</h3><h4 id="7-2-1-命令行"><a href="#7-2-1-命令行" class="headerlink" title="7.2.1 命令行"></a>7.2.1 命令行</h4><p>若要在命令行执行交互式SQL语句：</p>
<p>1.切换到bin目录</p>
<p>2.执行以下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sqlline.py localhost</div></pre></td></tr></table></figure>
<p>若要在命令行执行SQL脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sqlline.py localhost ../examples/stock_symbol.sql</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c1a747aba143487f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h4 id="7-2-2-客户端"><a href="#7-2-2-客户端" class="headerlink" title="7.2.2 客户端"></a>7.2.2 客户端</h4><p> <a href="http://squirrel-sql.sourceforge.net/" target="_blank" rel="external">SQuirrel</a>是用来连接Phoenix的客户端。</p>
<p>SQuirrel安装步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. Remove prior phoenix-[*oldversion*]-client.jar from the lib directory of SQuirrel, copy phoenix-[*newversion*]-client.jar to the lib directory (*newversion* should be compatible with the version of the phoenix server jar used with your HBase installation)</div><div class="line">2. Start SQuirrel and add new driver to SQuirrel (Drivers -&gt; New Driver)</div><div class="line">3. In Add Driver dialog box, set Name to Phoenix, and set the Example URL to jdbc:phoenix:localhost.</div><div class="line">4. Type “org.apache.phoenix.jdbc.PhoenixDriver” into the Class Name textbox and click OK to close this dialog.</div><div class="line">5. Switch to Alias tab and create the new Alias (Aliases -&gt; New Aliases)</div><div class="line">6. In the dialog box, Name: *any name*, Driver: Phoenix, User Name: *anything*, Password: *anything*</div><div class="line">7. Construct URL as follows: jdbc:phoenix: *zookeeper quorum server*. For example, to connect to a local HBase use: jdbc:phoenix:localhost</div><div class="line">8. Press Test (which should succeed if everything is setup correctly) and press OK to close.</div><div class="line">9. Now double click on your newly created Phoenix alias and click Connect. Now you are ready to run SQL queries against Phoenix.</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-30cf6769ba33e129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8. 测试"></a>8. 测试</h2><h3 id="8-1-Pherf"><a href="#8-1-Pherf" class="headerlink" title="8.1 Pherf"></a>8.1 Pherf</h3><p>Pherf是可以通过Phoenix来进行性能和功能测试的工具。Pherf可以用来生成高度定制的数据集，并且测试SQL在这些数据集上的性能。</p>
<h4 id="8-1-1-构建Pherf"><a href="#8-1-1-构建Pherf" class="headerlink" title="8.1.1 构建Pherf"></a>8.1.1 构建Pherf</h4><p>Pherf是在用maven构建Phoenix的过程中同时构建的。可以用两种不同的配置来构建：</p>
<ol>
<li>集群（默认）</li>
</ol>
<blockquote>
<p>This profile builds Pherf such that it can run along side an existing cluster. The dependencies are pulled from the HBase classpath.</p>
</blockquote>
<ol>
<li>独立</li>
</ol>
<blockquote>
<p>This profile builds all of Pherf’s dependencies into a single standalone jar. The deps will be pulled from the versions specified in Phoenix’s pom.</p>
</blockquote>
<ul>
<li>构建全部的Phoenix。包含Pherf的默认配置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package -DskipTests</div></pre></td></tr></table></figure>
<ul>
<li>用Pherf的独立配置来构建Phoenix。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package -P standalone -DskipTests</div></pre></td></tr></table></figure>
<h4 id="8-1-2-安装"><a href="#8-1-2-安装" class="headerlink" title="8.1.2 安装"></a>8.1.2 安装</h4><p>用以上的Maven命令构建完Pherf后，会在该模块的目标目录下生成一个zip文件。</p>
<ol>
<li>将该zip文件解压到合适的目录</li>
<li>配置<code>env.sh</code>文件</li>
<li>./pherf.sh -h</li>
<li>想要在一个真正的集群上测试，运行如下命令: </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./pherf.sh -drop all -l -q -z localhost -schemaFile .*user_defined_schema.sql -scenarioFile .*user_defined_scenario.xml</div></pre></td></tr></table></figure>
<h4 id="8-1-3-命令示例"><a href="#8-1-3-命令示例" class="headerlink" title="8.1.3 命令示例"></a>8.1.3 命令示例</h4><ul>
<li>列出所有可运行的场景文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./pherf.sh -listFiles</div></pre></td></tr></table></figure>
<ul>
<li>删掉全部场景文件中存在的特定的表、加载和查询数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$./pherf.sh -drop all -l -q -z localhost</div></pre></td></tr></table></figure>
<h4 id="8-1-4-参数"><a href="#8-1-4-参数" class="headerlink" title="8.1.4 参数"></a>8.1.4 参数</h4><blockquote>
<p>-h Help<br>-l Apply schema and load data<br>-q Executes Multi-threaded query sets and write results<br>-z [quorum] Zookeeper quorum<br>-m Enable monitor for statistics<br>-monitorFrequency [frequency in Ms] _Frequency at which the monitor will snopshot stats to log file.<br>-drop [pattern] Regex drop all tables with schema name as PHERF. Example drop Event tables: -drop .(EVENT). Drop all: -drop .<em> or -drop all</em><br>-scenarioFile Regex or file name of a specific scenario file to run.<br>-schemaFile Regex or file name of a specific schema file to run.<br>-export Exports query results to CSV files in CSV_EXPORT directory<br>-diff Compares results with previously exported results<br>-hint Executes all queries with specified hint. Example SMALL<br>-rowCountOverride<br>-rowCountOverride [number of rows] Specify number of rows to be upserted rather than using row count specified in schema</p>
</blockquote>
<h4 id="8-1-5-为数据生成增加规则"><a href="#8-1-5-为数据生成增加规则" class="headerlink" title="8.1.5 为数据生成增加规则"></a>8.1.5 为数据生成增加规则</h4><h4 id="8-1-6-定义场景"><a href="#8-1-6-定义场景" class="headerlink" title="8.1.6 定义场景"></a>8.1.6 定义场景</h4><h4 id="8-1-7-结果"><a href="#8-1-7-结果" class="headerlink" title="8.1.7 结果"></a>8.1.7 结果</h4><p>结果实时写入结果目录中。可以打开.jpg格式文件来实时可视化。</p>
<h4 id="8-1-8-测试"><a href="#8-1-8-测试" class="headerlink" title="8.1.8 测试"></a>8.1.8 测试</h4><blockquote>
<p>Run unit tests: mvn test -DZK_QUORUM=localhost<br>Run a specific method: mvn -Dtest=ClassName#methodName test<br>More to come…</p>
</blockquote>
<h3 id="8-2-性能"><a href="#8-2-性能" class="headerlink" title="8.2 性能"></a>8.2 性能</h3><p>Phoenix通过以下方法来奉行<code>把计算带到离数据近的地方</code>的哲学：</p>
<ul>
<li><p>协处理器<br>在服务端执行操作来最小化服务端和客户端的数据传输</p>
</li>
<li><p>定制的过滤器<br>为了删减数据使之尽可能地靠近源数据并最小化启动代价，Phoenix使用原生的HBase APIs而不是使用Map/Reduce框架</p>
</li>
</ul>
<h4 id="8-2-1-Phoenix对比相近产品"><a href="#8-2-1-Phoenix对比相近产品" class="headerlink" title="8.2.1 Phoenix对比相近产品"></a>8.2.1 Phoenix对比相近产品</h4><h5 id="8-2-1-1-Phoenix-vs-Hive-running-over-HDFS-and-HBase"><a href="#8-2-1-1-Phoenix-vs-Hive-running-over-HDFS-and-HBase" class="headerlink" title="8.2.1.1 Phoenix vs Hive (running over HDFS and HBase)"></a>8.2.1.1 Phoenix vs Hive (running over HDFS and HBase)</h5><p><img src="http://upload-images.jianshu.io/upload_images/1752522-697a95a8cab3a28d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Query: select count(1) from table over 10M and 100M rows. Data is 5 narrow columns. Number of Region Servers: 4 (HBase heap: 10GB, Processor: 6 cores @ 3.3GHz Xeon)</div></pre></td></tr></table></figure>
<h5 id="8-2-1-2-Phoenix-vs-Impala-running-over-HBase"><a href="#8-2-1-2-Phoenix-vs-Impala-running-over-HBase" class="headerlink" title="8.2.1.2 Phoenix vs Impala (running over HBase)"></a>8.2.1.2 Phoenix vs Impala (running over HBase)</h5><p><img src="http://upload-images.jianshu.io/upload_images/1752522-38710062c800a26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Query: select count(1) from table over 1M and 5M rows. Data is 3 narrow columns. Number of Region Server: 1 (Virtual Machine, HBase heap: 2GB, Processor: 2 cores @ 3.3GHz Xeon)</div></pre></td></tr></table></figure>
<h4 id="8-2-2-Latest-Automated-Performance-Run"><a href="#8-2-2-Latest-Automated-Performance-Run" class="headerlink" title="8.2.2 Latest Automated Performance Run"></a>8.2.2 Latest Automated Performance Run</h4><p><a href="http://phoenix-bin.github.io/client/performance/latest.htm" target="_blank" rel="external">Latest Automated Performance Run</a> | <a href="http://phoenix-bin.github.io/client/performance/" target="_blank" rel="external">Automated Performance Runs History</a></p>
<h4 id="8-2-3-Phoenix1-2性能提升"><a href="#8-2-3-Phoenix1-2性能提升" class="headerlink" title="8.2.3 Phoenix1.2性能提升"></a>8.2.3 Phoenix1.2性能提升</h4><ul>
<li>Essential Column Family</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-c642457642dacd1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Skip Scan</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-7c15c329a370c654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Salting</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-9079f69e939c61e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>Top-N</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1752522-81d30687fe0f32ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul>
<li><a href="http://phoenix.apache.org" target="_blank" rel="external">http://phoenix.apache.org</a></li>
<li><a href="http://phoenix.apache.org/Phoenix-in-15-minutes-or-less.html" target="_blank" rel="external">http://phoenix.apache.org/Phoenix-in-15-minutes-or-less.html</a></li>
<li><a href="http://hadooptutorial.info/apache-phoenix-hbase-an-sql-layer-on-hbase/" target="_blank" rel="external">http://hadooptutorial.info/apache-phoenix-hbase-an-sql-layer-on-hbase/</a></li>
<li><a href="http://www.phoenixframework.org/docs/resources" target="_blank" rel="external">http://www.phoenixframework.org/docs/resources</a></li>
<li><a href="https://en.wikipedia.org/wiki/Apache_Phoenix" target="_blank" rel="external">https://en.wikipedia.org/wiki/Apache_Phoenix</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Phoenix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Phoenix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hive安装配置文档（含Hive Metastore三种配置方式详解）]]></title>
      <url>http://linbingdong.com/2016/09/02/Hive%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>本文介绍Hive安装配置的整个过程，包括MySQL、Hive及Metastore的安装配置，并分析了Metastore三种配置方式的区别。</p>
<a id="more"></a>
<p>网上有很多介绍Hive Metastore三种配置方式的文章，但是理解都不对，给读者造成了很多误导。本人详细阅读Apache和CDH官方文档中关于Hive Metastore的部分，并经过实践，终于填好各种坑，安装配置成功，遂记录下本文，供大家参考。</p>
<h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h2><p>Hive Metastore有三种配置方式，分别是：</p>
<ol>
<li>Embedded Metastore Database (Derby)  内嵌模式</li>
<li>Local Metastore Server   本地元存储</li>
<li>Remote Metastore Server  远程元存储</li>
</ol>
<h3 id="Metadata、Metastore作用"><a href="#Metadata、Metastore作用" class="headerlink" title="Metadata、Metastore作用"></a>Metadata、Metastore作用</h3><ul>
<li><p>metadata即元数据。元数据包含用Hive创建的database、tabel等的元信息。<br>元数据存储在关系型数据库中。如Derby、MySQL等。</p>
</li>
<li><p>Metastore的作用是：客户端连接metastore服务，metastore再去连接MySQL数据库来存取元数据。有了metastore服务，就可以有多个客户端同时连接，而且这些客户端不需要知道MySQL数据库的用户名和密码，只需要连接metastore 服务即可。</p>
</li>
</ul>
<h3 id="三种配置方式区别"><a href="#三种配置方式区别" class="headerlink" title="三种配置方式区别"></a>三种配置方式区别</h3><ul>
<li><p>内嵌模式使用的是内嵌的Derby数据库来存储元数据，也不需要额外起Metastore服务。这个是默认的，配置简单，但是一次只能一个客户端连接，适用于用来实验，不适用于生产环境。</p>
</li>
<li><p>本地元存储和远程元存储都采用外部数据库来存储元数据，目前支持的数据库有：MySQL、Postgres、Oracle、MS SQL Server.在这里我们使用MySQL。</p>
</li>
<li><p>本地元存储和远程元存储的区别是：本地元存储不需要单独起metastore服务，用的是跟hive在同一个进程里的metastore服务。远程元存储需要单独起metastore服务，然后每个客户端都在配置文件里配置连接到该metastore服务。远程元存储的metastore服务和hive运行在不同的进程里。</p>
</li>
</ul>
<p>在生产环境中，建议用远程元存储来配置Hive Metastore。</p>
<h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><p>本教程Hadoop相关软件全部基于CDH5.5.1，用yum安装，系统环境如下：</p>
<ul>
<li>操作系统：CentOS 7.2</li>
<li>Hadoop 2.6.0</li>
<li>Hive1.1.0</li>
<li>Spark1.5.0</li>
<li>MySQL 5.6</li>
<li>JDK 1.8</li>
<li>Maven 3.3.3</li>
<li>Scala 2.10</li>
</ul>
<p>各节点规划如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">192.168.117.51     Goblin01           nn1  jn1  rm1  worker  master  hive  metastore  mysql</div><div class="line">192.168.117.52     Goblin02    zk2    nn2  jn2  rm2  worker          hive  metastore</div><div class="line">192.168.117.53     Goblin03    zk3    dn1  jn3       worker          hive</div><div class="line">192.168.117.54     Goblin04    zk4    dn2            worker          hive</div></pre></td></tr></table></figure>
<p>说明：Goblin01~04是每台机器的hostname，zk代表zookeeper，nn代表hadoop的namenode，dn代表datanode，jn代表journalnode，rm代表resourcemanager，worker代表Spark的slaves，master代表Spark的master</p>
<p>如果不需要Hive on Spark，只需要Hive on MR，则不需要安装Spark、Maven和Scala。</p>
<p>我们把metastore服务和MySQL都装在51上（装在哪一台都可以），51-54都安装Hive，这样多个客户端可以同时执行Hive命令。</p>
<p>在执行以下步骤之前，请确保已经安装了Hadoop集群</p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ol>
<li>下载mysql的repo源</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure>
<ol>
<li>安装mysql-community-release-el7-5.noarch.rpm包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure>
<p>安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo。</p>
<ol>
<li>安装mysql</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install mysql-server</div></pre></td></tr></table></figure>
<h2 id="配置MySQL和metastore"><a href="#配置MySQL和metastore" class="headerlink" title="配置MySQL和metastore"></a>配置MySQL和metastore</h2><p>Step 1: Install and start MySQL if you have not<br>already done so</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install mysql-server</div><div class="line">$ sudo service mysqld start</div></pre></td></tr></table></figure>
<p>Step 2: Configure the MySQL Service and Connector</p>
<p>因为使用MySQL作为存储元数据的数据库，所以需要把连接MySQL的jar包放入或链接到$HIVE_HOME/lib目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install mysql-connector-java</div><div class="line">$ ln -s /usr/share/java/mysql-connector-java.jar /usr/lib/hive/lib/mysql-connector-java.jar</div></pre></td></tr></table></figure>
<p>To set the MySQL root password:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ sudo /usr/bin/mysql_secure_installation</div><div class="line">[...]</div><div class="line">Enter current password for root (enter for none):</div><div class="line">OK, successfully used password, moving on...</div><div class="line">[...]</div><div class="line">Set root password? [Y/n] y</div><div class="line">New password:</div><div class="line">Re-enter new password:</div><div class="line">Remove anonymous users? [Y/n] Y</div><div class="line">[...]</div><div class="line">Disallow root login remotely? [Y/n] N</div><div class="line">[...]</div><div class="line">Remove test database and access to it [Y/n] Y</div><div class="line">[...]</div><div class="line">Reload privilege tables now? [Y/n] Y</div><div class="line">All done!</div></pre></td></tr></table></figure>
<p>To make sure the MySQL server starts at boot:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo /sbin/chkconfig mysqld on</div><div class="line">$ sudo /sbin/chkconfig --list mysqld</div><div class="line">mysqld          0:off   1:off   2:on    3:on    4:on    5:on    6:off</div></pre></td></tr></table></figure>
<p>Step 3. Create the Database and User</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">Enter password:</div><div class="line">mysql&gt; CREATE DATABASE metastore;</div><div class="line">mysql&gt; USE metastore;</div><div class="line">mysql&gt; SOURCE /usr/lib/hive/scripts/metastore/upgrade/mysql/hive-schema-0.12.0.mysql.sql;</div><div class="line">mysql&gt; CREATE USER &apos;hive&apos;@&apos;metastorehost&apos; IDENTIFIED BY &apos;mypassword&apos;;</div><div class="line">...</div><div class="line">mysql&gt; REVOKE ALL PRIVILEGES, GRANT OPTION FROM &apos;hive&apos;@&apos;metastorehost&apos;;</div><div class="line">mysql&gt; GRANT ALL ON metastore.* TO &apos;hive&apos;@&apos;metastorehost&apos; IDENTIFIED BY &apos;hive&apos;;</div><div class="line">mysql&gt; GRANT ALL ON metastore.* TO &apos;hive&apos;@&apos;%&apos; IDENTIFIED BY &apos;hive&apos;;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div><div class="line">mysql&gt; ALTER DATABASE metastore CHARACTER SET latin1;</div><div class="line">mysql&gt; quit;</div></pre></td></tr></table></figure>
<p>Step 4. Format the Database</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/lib/hive/bin</div><div class="line">$ ./schematool --dbType mysql --initSchema</div></pre></td></tr></table></figure>
<h2 id="Hive配置"><a href="#Hive配置" class="headerlink" title="Hive配置"></a>Hive配置</h2><h3 id="HDFS存储位置配置"><a href="#HDFS存储位置配置" class="headerlink" title="HDFS存储位置配置"></a>HDFS存储位置配置</h3><p>Hive配置文件里要用到HDFS的一些路径，需要先手动创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hdfs dfs -mkdir -p /usr/hive/warehouse</div><div class="line">hdfs dfs -mkdir -p /usr/hive/tmp</div><div class="line">hdfs dfs -mkdir -p /usr/hive/log</div><div class="line">hdfs dfs -chmod g+w /usr/hive/warehouse</div><div class="line">hdfs dfs -chmod g+w /usr/hive/tmp</div><div class="line">hdfs dfs -chmod g+w /usr/hive/log</div></pre></td></tr></table></figure>
<p>上述语句涉及hive-site.xml hive.metastore.warehouse.dir等，表示数据在hdfs中的存储位置</p>
<h3 id="hive-env-sh-所有节点）"><a href="#hive-env-sh-所有节点）" class="headerlink" title="hive-env.sh (所有节点）"></a>hive-env.sh (所有节点）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export HADOOP_HOME=/usr/lib/hadoop</div><div class="line">export HIVE_CONF_DIR=/usr/lib/hive/conf</div></pre></td></tr></table></figure>
<h3 id="hive-log4j-properties（所有节点）"><a href="#hive-log4j-properties（所有节点）" class="headerlink" title="hive-log4j.properties（所有节点）"></a>hive-log4j.properties（所有节点）</h3><p>首先创建log存放的文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/lib/hive/logs</div></pre></td></tr></table></figure>
<p>然后配置hive-log4j.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hive.log.dir=/usr/lib/hive/logs</div></pre></td></tr></table></figure>
<h3 id="服务端hive-site-xml"><a href="#服务端hive-site-xml" class="headerlink" title="服务端hive-site.xml"></a>服务端hive-site.xml</h3><p>服务端指的是Metastore服务所在的机器，即安装metastore的机器，这里是51和52。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</div><div class="line">  &lt;value&gt;jdbc:mysql://Goblin01:3306/metastore?createDatabaseIfNotExist=true&lt;/value&gt;</div><div class="line">  &lt;description&gt;the URL of the MySQL database&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</div><div class="line">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</div><div class="line">  &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</div><div class="line">  &lt;value&gt;hive&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</div><div class="line">  &lt;value&gt;hive&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</div><div class="line"> &lt;value&gt;/usr/hive/warehouse&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hive.exec.scratchdir&lt;/name&gt;</div><div class="line">&lt;value&gt;/usr/hive/tmp&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">&lt;name&gt;hive.querylog.location&lt;/name&gt;</div><div class="line">&lt;value&gt;/usr/hive/log&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h3 id="客户端hive-site-xml"><a href="#客户端hive-site-xml" class="headerlink" title="客户端hive-site.xml"></a>客户端hive-site.xml</h3><p>这里指的是53和54。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hive.metastore.uris&lt;/name&gt;</div><div class="line">  &lt;value&gt;thrift://Goblin01:9083,Goblin02:9083&lt;/value&gt;</div><div class="line">  &lt;description&gt;IP address (or fully-qualified domain name) and port of the metastore host&lt;/description&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</div><div class="line"> &lt;value&gt;/usr/hive/warehouse&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;hive.exec.scratchdir&lt;/name&gt;</div><div class="line"> &lt;value&gt;/usr/hive/tmp&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line"> &lt;name&gt;hive.querylog.location&lt;/name&gt;</div><div class="line"> &lt;value&gt;/usr/hive/log&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure>
<h2 id="启动Hive"><a href="#启动Hive" class="headerlink" title="启动Hive"></a>启动Hive</h2><ol>
<li>启动MySQL</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service mysqld start</div></pre></td></tr></table></figure>
<ol>
<li>启动metastore服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service hive-metastore start</div></pre></td></tr></table></figure>
<ol>
<li>启动Hive CLI</li>
</ol>
<p>因为在4台机器上都安装了hive，并且作了相关的配置，所有四台机器均可以启动Hive CLI（Hive交互式shell）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hive</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin#AdminManualMetastoreAdmin-RemoteMetastoreDatabase" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/Hive/AdminManual+MetastoreAdmin#AdminManualMetastoreAdmin-RemoteMetastoreDatabase</a></p>
</li>
<li><p><a href="http://www.cloudera.com/documentation/archive/cdh/4-x/4-2-0/CDH4-Installation-Guide/cdh4ig_topic_18_4.html" target="_blank" rel="external">http://www.cloudera.com/documentation/archive/cdh/4-x/4-2-0/CDH4-Installation-Guide/cdh4ig_topic_18_4.html</a></p>
</li>
</ul>
<p></p>
]]></content>
      
        <categories>
            
            <category> Hive </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hive </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python读书笔记（持续更新）]]></title>
      <url>http://linbingdong.com/2016/08/27/Python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>书籍：《Python基础教程》《Python核心编程》《Python Cookbook》《Python源码剖析》</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量。这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言</p>
</li>
<li><p>在Python中，通常用全部大写的变量名表示常量。用全部大写的变量名表示常量只是一个习惯上的用法，其实它还是一个变量</p>
</li>
<li><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。</p>
</li>
<li><p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</p>
</li>
<li><p>把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据</p>
</li>
<li><p>ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
</li>
<li><p>Python里的字典{ }相当于键值对，不过一个键只能存放一个值，后放的值会覆盖前面的。删除用d.pop( );dict的key必须是不可变对象</p>
</li>
<li><p>*args是可变参数，args接收的是一个tuple；</p>
</li>
<li><p>**kw是关键字参数，kw接收的是一个dict。</p>
</li>
<li><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<strong>，在Python中，实例的变量名如果以</strong>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，</p>
</li>
<li><p>不能直接访问<strong>name是因为Python解释器对外把</strong>name变量改成了_Student<strong>name，所以，仍然可以通过_Student</strong>name来访问__name变量</p>
</li>
<li><p>类中没有的属性可以在实例中动态绑定，也可调用MethodType来为实例绑定类中没有的方法。</p>
</li>
<li><p>如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加name和age属性。为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<strong>slots</strong>变量，来限制该class实例能添加的属性</p>
</li>
<li><p>class Student(object):<br>  <strong>slots</strong> = (‘name’, ‘age’) # 用tuple定义允许绑定的属性名称<br>使用<strong>slots</strong>要注意，<strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的<br>类可以绑定原本没定义的外部方法</p>
</li>
<li><p>Python内置的@property装饰器就是负责把一个方法变成属性调用的</p>
</li>
<li><p>整除  “//“  双反斜杠 把小数点后面的数去掉，即使是浮点数相除</p>
</li>
<li><p>幂次方用      <strong>      如2 </strong> 4 = 16</p>
</li>
<li><p>大数 大于20亿  后面加L表示（转换成长整型）   如  10000000000000L  说明这是个长整型 其实Python会自动转换 所有我们不用管 直接用 甚至不用写L</p>
</li>
<li><p>十六进制以0x开头   八进制以0开头   都是数字零</p>
</li>
<li><p>In Python 3.0, print is a function, which means you need to write print(42) instead of print 42 </p>
</li>
</ul>
<ul>
<li><p>要得到某个数的几次方  可以用pow( )函数 如pow(2,4)=16</p>
</li>
<li><p>round( )函数用来四舍五入浮点数 round(3.6788,3) = 3.679 保留三位小数</p>
</li>
<li><p>math.floor( )用来向下取浮点数  math.ceil( )用来向上取浮点数</p>
</li>
<li><p>cmath是用来处理复数的库</p>
</li>
<li><p>str( ) repr( )和反引号 <code> </code></p>
</li>
<li><p>raw_input( )把所有输入都当作字符串 都加上 ‘ ‘             input( ) 则数字就是数字   Python3里input跟Python2的raw_input等同</p>
</li>
<li><p>要输入一串很长的字符串 里面有单引号 双引号 甚至跨行  可以用三引号’’’  string  ‘’’</p>
</li>
<li><p>若要输出的里面有很多反斜杠 \  比如C:\LBD\LSKE\NO 可以用r’ ——‘表示原始字符串，即忽略反斜杠的作用 不然得在每个\前面再加一个\</p>
</li>
<li><p>在不想让序列被改变的情况下用元组 否则一般用列表</p>
</li>
<li><p>字符串也可以切片</p>
</li>
<li><p>[2:20:3]  [20:3:-2]   for a positive step size, it moves from the beginning toward the end, and for a negative step size, it moves from the end toward the beginning. </p>
</li>
<li><p>None 代表什么都没有，但是占了个位置</p>
</li>
<li><p>print( )完自动换行 print(a,b,c)   a b c 自动空格</p>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><p>in 可以判断x是否在字符串或列表中</p>
</li>
<li><p>字符串不能被修改  可以转成list</p>
</li>
<li><p>list（）函数用来将字符串或序列转成列表</p>
</li>
<li><p>‘ ‘.join(iterable)可以将序列用’ ‘ 连接起来 序列必须由字符串组成</p>
</li>
<li><p>可以将字符串转成序列（方便处理），也可以把序列转成字符串</p>
</li>
<li><p>切片不改变序列本身</p>
</li>
<li><p>列表有特性：可以给某个位置赋值，删除某个位置，给切片赋值(还可以跳跃赋值，只是跳跃赋值的话提供的值数量要跟跳跃的相等）</p>
</li>
<li><p>python2中range( )函数产生一个列表 python3则不行，主要用来迭代次数 可以list(range(3,9,2)来将其转为列表</p>
</li>
<li><p>ls.count( <em> )可以得到 </em>在列表ls中出现的次数 *可以是列表</p>
</li>
<li><p>ls.append( )，在列表末尾加一个元素，append( )一个列表，该列表成为原列表的一个元素</p>
</li>
<li><p>ls.extend( )在列表末尾加一个序列(iterable)，该序列里的元素全部成为原序列的元素 也可以通过 + 将两个列表相连，但是此时不改变原列表</p>
</li>
<li><p>列表里什么都能放，包括数字、字符串、列表、元组、字典等 而且可以同时混合放</p>
</li>
<li><p>切片x[a:b] 含左不含右</p>
</li>
<li><p>ls.index( <em> ) 返回第一次出现</em>的索引</p>
</li>
<li><p>ls.insert(a,* )可以在a位置插入a这个元素</p>
</li>
<li><p>x.pop( )默认将最后一个元素弹出并返回 del只移除不返回 还可以指定移除某个位置的 x.pop(1)  pop( )是唯一一个既能修改列表又能返回值得列表方法</p>
</li>
<li><p>若要移除某个已知的元素 而不是某个位置的元素 用ls.remove( <em> ) 只移除第一次出现的 </em> 后面的 * 不移除 </p>
</li>
<li><p>ls.reverse( )可以将列表反转 什么都不返回 列表操作里有返回值得只有pop</p>
</li>
<li><p>ls.sort( )可以对列表进行排序 不返回任何东西 只能用于列表排序</p>
</li>
<li><p>ls.sort(cmp = None,key = None,reverse = False)    key用来决定用什么来排序（长度、字母表、。。）reverse决定要不要反转</p>
</li>
</ul>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li><p>决定是否是元组的是逗号，有逗号就是   除了空元组，其他都有逗号  如果只有一个元素，在后面加逗号表明这是一个元组</p>
</li>
<li><p>元组用小括号（圆括号）表示</p>
</li>
<li><p>tuple( )函数可以把序列转成元组 ,元祖方法跟列表类似，少了很多</p>
</li>
<li><p>序列（sequence）包含列表、元祖、字符串</p>
</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>字符串  要格式化两个以上的值，需要用元祖或字典</p>
</li>
<li><p>也可以用模板字符串来对字符串进行格式化 </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> from string import Template  </div><div class="line"> s = Template(&apos;A $thing must never $action.&apos;)</div><div class="line"> d = &#123;&#125;</div><div class="line"> d[&apos;thing&apos;] = &apos;gentleman&apos;</div><div class="line"> d[&apos;action&apos;] = &apos;show his socks&apos;</div><div class="line"> s.substitute(d)</div><div class="line">&apos;A gentleman must never show his socks.&apos;</div></pre></td></tr></table></figure>
<ul>
<li><p>%-10.2f   总宽度为10 保留2位小数  左对齐（默认是右对齐）   %010.2f  左边用0填充</p>
</li>
<li><p>%+5d   显示正负号（正的也要显示）</p>
</li>
<li><p>‘%-<em>s’ %(10,’ilovezxy) 左对齐 宽度为10  </em>号用来接收宽度或精度</p>
</li>
<li><p>find( )  在长字符串中找某个子字符串用 s.find(‘lbd’) 返回位置（最左边的） 若无 返回-1  还可以指定起始和结束位置s.find(‘lbd’,3,10)</p>
</li>
<li><p>join( )   s = (‘lbd’,’zxy’,’lxy’)    ‘/‘.join(s)    lbd/zxy/lxy        与split( )方法相反   将序列连接处字符串</p>
</li>
<li><p>lower( ) 返回小写字符串   </p>
</li>
<li><p>title( )  ‘i love python’.title( )  f-&gt; ‘I Love Python’  首字母大写 其他小写   string.capwords(“that’s all”)</p>
</li>
<li><p>replace( )  用来替换某个子串   ‘ldljeijkldsfe’.replace(‘a’,’b’)把所有的a都替换成b</p>
</li>
<li><p>split( ) 将字符串分割成序列（列表）’/lbd/zxy/lks/‘.split(‘/‘) -&gt; [‘’, ‘lbd’, ‘zxy’, ‘lks’, ‘’]    不加参数默认用空格分割</p>
</li>
<li><p>strip( ) 去除字符串两边的空格  并将去除空格后的字符串返回 已可以去除指定字符 ‘dsfsfw’.strip(‘#@$1*e’)</p>
</li>
<li><p>translate( ) table = maketrans(‘cs’,’kz’)   ‘this is a incredible test’.translate(table)   需要同时替换多个字母时使用</p>
</li>
<li><p>电话号码应表示为字符串</p>
</li>
</ul>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li><p>键不能重复，值可以重复</p>
</li>
<li><p>dict( ) 用来创建字典  可以用（key，value）键值对 或 name=’lbd’，age=’23’ 这样来赋值 b = dict(name = ‘zxy’,age = 18,gender = ‘female’) or  items=[(‘name’,’lbd’),(‘age’,23)] d = dict(items)</p>
</li>
<li><p>为某个键赋值时  若原本字典中没这个键  则会自动将此键值对添加进去</p>
</li>
<li><p>value 可以是一个字典 里面包含多个键值对</p>
</li>
<li><p>除了有元组的格式化字符串，还有字典的格式化字符串</p>
</li>
<li><p>clear( )     dict.clear( ) 清除字典里的所有内容  列表用 del x[ : ]实现</p>
</li>
<li><p>copy（ ）dict.copy( )  返回一份dict的拷贝（新的，不是原本那份）  y=x.copy( ) 此时y和x不是指向同一个对象 更新操作互不影响 删除操作会影响 若y=x 则两个指向相同内容 操作相互影响   列表虽然没有copy这个函数 但是可以用切片[ : ]实现  y=deepcopy(x)是深拷贝，完全不影响</p>
</li>
<li><p>get( )  y.get( keyname ,’default’ )  得到key对应的value get方法更宽松 如果不存在该键不会报错 返回default   x[‘keyname’]不存在会报错</p>
</li>
<li><p>has_key( )  判断是否存在某个key   </p>
</li>
<li><p>items( ) and iteritems( )   x.items( )  将x的内容以列表返回 [(‘age’, 18), (‘name’, ‘lbd’)]    iteritems( )类似 只不过会返回一个迭代器而不是列表</p>
</li>
<li><p>keys( ) and iterkeys( )  将keys以列表的形式返回</p>
</li>
<li><p>pop( )  x.pop(key)  将key对应的value返回 并删除key-value对</p>
</li>
<li><p>popitem( ) x.popitem( )  随机弹出（删除）一个键值对，并将其返回</p>
</li>
<li><p>setdefault(key,default)  与get(key,default)类似，只不过若key不存在 setdefault()会加入</p>
</li>
<li><p>update( ) x.update(y) update可以用y字典来更新x字典 同意的key替换成y的value  不存在的key—value加入x</p>
</li>
<li><p>values( ) and itervalues( )  以列表的形式返回所有value </p>
</li>
<li><p>一个key只能对应一个value</p>
</li>
</ul>
<hr>
<ul>
<li><p>x,y,z = 1,2,3  or x,y,z = (1,2,3)  解包 可以给多个变量同时赋值 values = (4,5,6) x,y,z = values   x,y,z = z,x,y 可以三个互换  x,y = y,x</p>
</li>
<li><p>if  … elif …else</p>
</li>
<li><p>还可以用     2<x<3 x="">=y</x<3></p>
</li>
<li><p>==比较的是值（相等性） 5 == 5.0  is 比较的是对象(同一性） 指向相同对象才相等  is一般用在可变值里</p>
</li>
<li><p>name = input(‘please input your name: ‘) or ‘default’   如果没有输入 则name=default</p>
</li>
<li><p>x = 2 if 1&gt;2 else 3       x=3</p>
</li>
<li><p>xrange( ) 一次只产生一个数 range( )一次性把所有数都产生出来  Python3中 range( ) 会被转化成 xrange( )</p>
</li>
<li><p>d={ }  for k,v in d.items( )</p>
</li>
<li><p>zip(a,b) 可以把a，b两个可迭代的按顺序合并到一起称为一对 [ (a[0],b[0]) ,…, ] 用来进行并行迭代  短的结束后即停止</p>
</li>
<li><p>for index,string in enumerate(strings):   strings[index] = ‘xxx’  用来迭代index-value对</p>
</li>
<li><p>[ x*x for x in range(10) ] -&gt;[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p>
</li>
<li><p>[x*x for x in range(10) if x%3 == 0]-&gt;[0, 9, 36, 81]</p>
</li>
<li><p>[(x,y) for x in range(3) for y in range(3)]-&gt;[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</p>
</li>
<li><p>如果想让程序什么都不干，用pass</p>
</li>
<li><p>若x = [1,2,3]   y = x 则del x[0] 对y有影响   del x 对y无影响（编译器检测到还有变量指向该列表，所以不会真的删除这个列表）</p>
</li>
<li><p>Python编译器会自动回收不需要的东西，所以不要自己操心</p>
</li>
<li><p>exec可以用来执行字符串中的代码    exec “print ‘hello world!’”</p>
</li>
<li><p>eval(‘8+3*4)  20  eval( )可以对字符串里的算式进行计算</p>
</li>
<li><p>exec and eval are both not  safe</p>
</li>
<li><p>scope = {‘x’:3,’y’:2} eval(‘x*y’,scope)  6</p>
</li>
<li><p>为某个函数加注释可以直接在：下一行写字符串 然后调用func.<strong>doc</strong>可以查看函数文档   <strong>doc</strong>是特殊函数属性</p>
</li>
<li><p>def print_argument(<em>arg):           print_argument(3,4,’sll’,[2,4])  (3, 4, ‘sll’, [2, 4]) </em>arg将输入的所有参数放到元组arg里</p>
</li>
<li><p>def print_argument2(*<em>arg):   print_argument2(x=1,y=2,z=’lbd’) {‘y’: 2, ‘x’: 1, ‘z’: ‘lbd’}*</em>arg把所有输入的参数放到字典arg里 参数必须是x=a的形式</p>
</li>
<li><p>以上两种方法都可以让用户输入任意多的参数 收集参数为元组或字典（在定义中使用<em> 或 *</em>）</p>
</li>
<li><p>若定义中有多个参数，调用函数时参数为<em>arg 或 *</em>arg 可将元组arg1或字典arg2分割为多个参数</p>
</li>
<li><p>同一个函数要么定义时用<em>或** 要么调用时用</em>或**  不要在定义和调用时同时用</p>
</li>
<li><p>如果有全局变量x 函数内部又有x 则后者为局部变量，不会对外面的x产生影响 若想要在函数内引用全局变量x 应声明为 global x</p>
</li>
<li><p>map(str, range(10)) -&gt; [‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’]<br>filter(lambda x:x.isalnum(),seq)<br>num = [2,3,4,2,2,3,4,4] reduce(lambda x,y:x+y,num)  -&gt;24</p>
</li>
<li><p>有函数可以调用的话就不要自己写，因为内置的一般效率更高</p>
</li>
<li><p>绑定到对象特性上面的函数称为方法（method）</p>
</li>
<li><p>多态就是不用管对象的类型，真的不同类型的对象会自动选取对应的方法</p>
</li>
<li><p>类的属性，若想变成私有 1.双下划线<strong> 此时可以用ob._class</strong>attribute来访问 2.单下划线_ 外面无法访问     Python没有真正的私有化支持</p>
</li>
<li><p>issubclass(a,b) 判断a是否b的子类</p>
</li>
<li><p>isinstance(a,b) 判断a是否b的一个实例</p>
</li>
<li><p>a.<strong>bases</strong> a类的基类</p>
</li>
<li><p>a.<strong>class</strong> a是哪个类的对象（a这个对象属于哪个类）或者用 type(a)更直接</p>
</li>
<li><p>class a(b,c) a类继承b类和c类 叫做多重继承 若b、c中有相同的某个方法，则b会重写c 所有有顺序之分</p>
</li>
<li><p>捕获异常是为了发生异常时按我们的想法来运行，而不是直接崩溃（前提是你知道此处可能会有异常）</p>
</li>
<li><p>try：           except：         or     try：      except（exc1，exc2，…）：<br>except (ZeroDivisionError,NameError,TypeError) as e: print(e) 把异常打印出来 程序继续运行</p>
</li>
<li><p>try:  except:   else:  finally:   没有异常的时候会执行else里的内容，有异常不会,finally里的语句一定会执行，不管有没有发生异常<br>类的构造方法  def <strong>init</strong>(self):  创建新对象是会自动执行里面的内容</p>
</li>
<li><p>__del__是析构方法，在对象被垃圾回收之前调用，自己不要去用</p>
</li>
<li><p>正常情况下，子类会重写超类的构造方法（新建子类对象是只会初始化子类的构造方法，不会初始化超类的构造方法）两种方法解决：1.调用超类构造方法的未绑定版本 2.使用super函数（现在用这个）</p>
</li>
<li><p>在调用一个实例的方法时，该方法的self参数会自动绑定到该实例上</p>
</li>
<li><p>如果直接调用类的方法，该方法就不会绑定到实例上<br>可以用type()函数创建出class 内部也是这么执行的<br>Hello = type(‘Hello’,(object,),dict(hello = fn)) 创建的Hello类，继承object类，里面有个hello方法，该方法与fn函数绑定</p>
</li>
<li><p>metaclass是元类 很高级 可以把类看作metaclass的实例<br>两种方法实现新式类：1. 开头添加 <strong>metaclass</strong> = type 2.继承object类</p>
</li>
<li><p>property（）函数：屏蔽类访问器方法  如  size = property(getSize,setSize)</p>
</li>
<li><p>静态方法和类成员方法  静态方法没有self参数，可以被类直接调用 类成员方法有个类似于self参数的cls参数    除此之外还要加上装饰器 @staticmethod  @classmethod</p>
</li>
<li><p>一个实现了__iter__方法的对象是可迭代的，一个实现了next方法的对象是迭代器 next()返回迭代器的下一个值，__iter__返回迭代器本身</p>
</li>
<li><p>it = iter((1,2,3,4))  iter()为内建函数 可以将可迭代对象变成迭代器</p>
</li>
<li><p>list(iter) 可以将迭代器转化成列表</p>
</li>
<li><p>g = ((i+2)**2 for i in range(2,27)) g是个生成器，可以使用g.next(）</p>
</li>
<li><p>生成器是一个包含yield关键字的函数 生成器由两部分组成：生成器的函数和生成器的迭代器</p>
</li>
<li><p>import sys   sys.path.append(‘/Users/linbingdong/Desktop’) 此时可以import放在该路径下的xxx.py文件 import xxx</p>
</li>
<li><p>模块在第一次被导入时会自动执行（生成xxx.pyc文件），以后就不会</p>
</li>
<li><p>在主程序中，__name__ == __main__ 在导入的模块中 __name__ == 模块名   用作测试代码</p>
</li>
<li><p>def test():  if ‘__name__‘ == ‘__main__‘: test()   </p>
</li>
<li><p>import pprint     pprint更加智能 可以打印的更好看  比如自动换行</p>
</li>
<li><p>查看sys.path  找到site-packages目录 将自己写的模块放入该目录 其他程序就都可以import</p>
</li>
<li><p>import自己写的模块两种方法 1.放入site-packages目录 2.sys.path.append（ ）</p>
</li>
<li><p>dir()函数可以查看模块包含的内容 如 import copy   dir(copy)</p>
</li>
<li><p>copy.<strong>all</strong> 定义了模块的公有接口  from copy import <em> 只能导入copy.<strong>all</strong>里的内容 相当于将一些程序员不太需要的过滤掉  因此from copy import </em>一般已经足够了</p>
</li>
<li><p>copy.<strong>file</strong> 显示copy这个模块所在的路径</p>
</li>
<li><p>copy<strong>doc</strong> 显示copy的描述文档</p>
</li>
<li><p>sys.argv是个参数列表</p>
</li>
<li><p>os.sep 路径名中的分隔符 /</p>
</li>
<li><p>os.pathsep  分割路径名（不同路径名） :</p>
</li>
<li><p>os.linesep  换行符  \n</p>
</li>
<li><p>os.system(‘路径名’) 可以启动应用程序</p>
</li>
<li><p>import webbrowser     webbrowser.open(‘<a href="http://www.qq.com" target="_blank" rel="external">http://www.qq.com</a>‘) 会调用默认浏览器打开该网址</p>
</li>
<li><p>set集合 set([1,2,3,3,2,3,4]) -&gt; set([1,2,3,4])    顺序随意  </p>
</li>
<li><p>求两个集合的并集  a.union(b)  or  a | b</p>
</li>
<li><p>求两个集合的交集  a.intersection(b) or  a &amp; b</p>
</li>
<li><p>a中特有的（a中有，b中没有）  a.difference(b) or a - b</p>
</li>
<li><p>a、b中不共有的  a.symmetric_difference(b) or a ^ b</p>
</li>
<li><p>集合是可变的    字典中的键必须是不可变的  </p>
</li>
<li><p>frozenset(b)将b集合变成不可变的</p>
</li>
<li><p>forzenset()函数创建给定集合的副本</p>
</li>
<li><p>Python没有独立的“堆”类型 有个’heapq‘模块 通过heappush(heap,n) 得到的heap列表就是堆 或者用 heapify(heap) 将heap建成堆  其实可以把可迭代对象直接看成堆</p>
</li>
<li><p>heappop(heap) 每次弹出heap中的最小数</p>
</li>
<li><p>先执行heappop()再执行heappush()等价于  heapreplace(heap,x) 返回弹出的数</p>
</li>
<li><p>返回iter的前k大数  nlargest(k,iter）    返回前k小数    nsmallest(k,iter)</p>
</li>
<li><p>双端队列 deque  ‘from collections import deque’   q = deque(range(5)) </p>
</li>
<li><p>deque与list的区别在于 deque可以从左端加入和弹出  </p>
</li>
<li><p>q.appendleft(x)  q.popleft() q.rotate(3)右移三位 q.rotate(-3)左移三位  都是循环移位</p>
</li>
<li><p>time 模块   import time    time.asctime()   </p>
</li>
<li><p>time.localtime()   time.mktime()…   sleep(k) 等待k秒</p>
</li>
<li><p>random 模块  from random import *      </p>
</li>
<li><p>random(）返回0~1之间的浮点数</p>
</li>
<li><p>uniform(a,b) 返回a~b之间的数</p>
</li>
<li><p>randrange(a,b) 返回a~b之间的随机整数</p>
</li>
<li><p>randrange(1,b,2)  返回小于b的随机正奇数</p>
</li>
<li><p>re模块 正则表达式</p>
</li>
<li><p>re.split(‘[, ]+’,text) 将text用任意长度的逗号或空格分开</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中System.arraycopy()和Arrays.copyOf()的区别]]></title>
      <url>http://linbingdong.com/2016/08/27/Java%E4%B8%ADSystem.arraycopy()%E5%92%8CArrays.copyOf()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>先看看System.arraycopy()的声明：</p>
<pre><code>public static native void arraycopy(Object src,int srcPos, Object dest, int destPos,int length);`
</code></pre><a id="more"></a>
<p>src - 源数组。<br>srcPos - 源数组中的起始位置。<br>dest - 目标数组。<br>destPos - 目标数据中的起始位置。<br>length - 要复制的数组元素的数量。</p>
<p>该方法用了native关键字，说明调用的是其他语言写的底层函数。</p>
<p>再看Arrays.copyOf()</p>
<pre><code>public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) {
   @SuppressWarnings(&quot;unchecked&quot;)    
   T[] copy = ((Object)newType == (Object)Object[].class)?(T[]) new Object[newLength]:(T[])    
   Array.newInstance(newType.getComponentType(), newLength);System.arraycopy(original,0, copy,0,                       
   Math.min(original.length, newLength));    
   return copy;
}
</code></pre><p>该方法对应不同的数据类型都有各自的重载方法<br>original - 要复制的数组<br>newLength - 要返回的副本的长度<br>newType - 要返回的副本的类型<br>仔细观察发现，copyOf()内部调用了System.arraycopy()方法</p>
<h3 id="区别在于："><a href="#区别在于：" class="headerlink" title="区别在于："></a>区别在于：</h3><ol>
<li>arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置</li>
<li>copyOf()是系统自动在内部新建一个数组，调用arraycopy()将original内容复制到copy中去，并且长度为newLength。返回copy; 即将原数组拷贝到一个长度为newLength的新数组中，并返回该数组。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Array.copyOf()可以看作是受限的System.arraycopy(),它主要是用来将原数组全部拷贝到一个新长度的数组，适用于数组扩容。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[统计每个单词出现的次数]]></title>
      <url>http://linbingdong.com/2016/08/27/%E7%BB%9F%E8%AE%A1%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<pre><code>/**统计单词出现的次数
 * this is a cat and this is a mice and where is the food?
 * 思路
 * 1.分割字符串
 * 2.分拣存储
 * 3.查看单词出现的次数
 * Created by linbingdong on 16/3/19.
 */
</code></pre><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package cn.lbd.Collection;</div><div class="line">import java.util.HashMap;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.Map;</div><div class="line">import java.util.Set;</div><div class="line">public class MapDemo01 &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        //分割字符串</div><div class="line">        String[] arr = &quot;this is a cat and this is a mice and where is the food?&quot;.split(&quot; &quot;);</div><div class="line">        //分拣存储</div><div class="line">        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</div><div class="line">        for (String key : arr)&#123;</div><div class="line">            //System.out.println(key);</div><div class="line">            if(!map.containsKey(key))&#123; //查看是否存在单词,不存在,加入</div><div class="line">                map.put(key,1);</div><div class="line">            &#125;else&#123; //存在,value+1</div><div class="line">                map.put(key,map.get(key)+1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">            //3.查看单词出现的次数</div><div class="line">        Set&lt;String&gt; keySet = map.keySet();//将map中的key放入集合中</div><div class="line">        Iterator&lt;String&gt; it = keySet.iterator();//调用迭代器遍历</div><div class="line">        while (it.hasNext())&#123;</div><div class="line">            String key = it.next();</div><div class="line">            Integer value = map.get(key);</div><div class="line">            System.out.println(key+&quot;---&gt;&quot;+value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[7] 反转整数]]></title>
      <url>http://linbingdong.com/2016/08/27/LeetCode%5B7%5D%20%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="Reverse-digits-of-an-integer"><a href="#Reverse-digits-of-an-integer" class="headerlink" title="Reverse digits of an integer."></a>Reverse digits of an integer.</h3><p>Example1: x = 123, return 321</p>
<p>Example2: x = -123, return -321</p>
<h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int reverse(int x) &#123;</div><div class="line">        long result=0;</div><div class="line">        while(x!=0)&#123;</div><div class="line">            result=result*10+x%10;</div><div class="line">            if(result&gt;Integer.MAX_VALUE||result&lt;Integer.MIN_VALUE)</div><div class="line">            return 0;</div><div class="line">            x/=10;</div><div class="line">        &#125;</div><div class="line">        return (int)result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[3] 最大字符不重复的子串]]></title>
      <url>http://linbingdong.com/2016/08/27/LeetCode%5B3%5D%20%E6%9C%80%E5%A4%A7%E5%AD%97%E7%AC%A6%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</p>
</blockquote>
<p>即给定一个字符串，返回最长的没有重复字符的子串的长度</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用一个HashMap来存储字符串。其中key为字符，value为该字符在字符串中的位置。</p>
<p>使用两个指针i，j来指示最长子串的位置。刚开始i，j都为0，指向第一个字符。然后i开始向右遍历。若遍历到的字符已在HashMap中，则更新它的value为现在i的位置。并且将j指向该字符的下一个位置（j只能往右移，或者不移，不能左移）。若未在HashMap中，则将该字符以及它的位置放入HashMap中。最大的（i-j+1）即为最长子串的长度。</p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int lengthOfLongestSubstring(String s) &#123;</div><div class="line">        if (s.length() == 0) return 0;</div><div class="line">        HashMap&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</div><div class="line">        int max=0;</div><div class="line">        for(int i=0,j=0;i&lt;s.length();i++)&#123;</div><div class="line">            if(map.containsKey(s.charAt(i)))&#123;</div><div class="line">                j = Math.max(j,map.get(s.charAt(i))+1);</div><div class="line">            &#125;</div><div class="line">            map.put(s.charAt(i),i);</div><div class="line">            max = Math.max(max,i-j+1);</div><div class="line">        &#125;</div><div class="line">        return max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode[5] 最长的回文子串]]></title>
      <url>http://linbingdong.com/2016/08/27/LeetCode%5B5%5D%20%E6%9C%80%E9%95%BF%E7%9A%84%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
</blockquote>
<p>即给定一个字符串，返回该字符串最长的回文子串<br>如给出“acabcddcbadike”,返回“abcddcba”。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>回文子串分为长度为偶数（中间两个字符相同，就像示例）和长度为奇数两种。<br>从头往后遍历s.length()趟，第i趟指针j，k从i（奇数）或j从i，k从i+1（偶数）向两边扩散（s.charAt(i)和s.charAt(j)相等才扩散），k-j-1为该回文子串长度，若比之前maxlen大，则更新maxlen。</p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    private int lo,maxlen;//子串的起始和长度</div><div class="line">    public String longestPalindrome(String s) &#123;</div><div class="line">        int len=s.length();</div><div class="line">        if (len&lt;2)</div><div class="line">            return s;</div><div class="line">        for (int i=0;i&lt;len-1;i++)&#123;//n躺遍历</div><div class="line">            extendPalindrome(s,i,i); //子串长度为奇数</div><div class="line">            extendPalindrome(s,i,i+1);//子串长度为偶数</div><div class="line">        &#125;</div><div class="line">        return s.substring(lo,lo + maxlen);</div><div class="line">    &#125;</div><div class="line">    private void extendPalindrome(String s,int j,int k)&#123;</div><div class="line">        while(j&gt;=0 &amp;&amp; k&lt;s.length() &amp;&amp; s.charAt(j)==s.charAt(k))&#123;</div><div class="line">            --j;      </div><div class="line">            ++k;</div><div class="line">        &#125;</div><div class="line">        if(maxlen&lt;k-j-1)&#123;</div><div class="line">            lo=j+1;</div><div class="line">            maxlen=k-j-1; </div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
            <category> 编程题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Comparable与Comparator的区别]]></title>
      <url>http://linbingdong.com/2016/08/27/Java%E4%B8%ADComparable%E4%B8%8EComparator%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h2><ul>
<li>Comparable和Comparator都是用来实现对象的比较、排序</li>
<li>要想对象比较、排序，都需要实现Comparable或Comparator接口</li>
<li>Comparable和Comparator都是Java的接口</li>
</ul>
<a id="more"></a> 
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>Comparator位于java.util包下，而Comparable位于java.lang包下</li>
<li>Comparable接口的实现是在类的内部（如 String、Integer已经实现了Comparable接口，自己就可以完成比较大小操作），Comparator接口的实现是在类的外部（可以理解为一个是自已完成比较，一个是外部程序实现比较）</li>
<li>实现Comparable接口要重写compareTo方法, 在compareTo方法里面实现比较</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Student implements Comparable &#123;</div><div class="line">     String name;</div><div class="line">     int age</div><div class="line">     public int compareTo(Student another) &#123;</div><div class="line">          int i = 0;</div><div class="line">          i = name.compareTo(another.name); </div><div class="line">          if(i == 0) &#123; </div><div class="line">               return age - another.age;</div><div class="line">          &#125; else &#123;</div><div class="line">               return i; </div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line">   这时我们可以直接用 Collections.sort( StudentList ) 对其排序了.(</div><div class="line">   **只需传入要排序的列表**）</div></pre></td></tr></table></figure>
<ul>
<li>实现Comparator需要重写 compare 方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Student&#123;</div><div class="line">     String name;</div><div class="line">     int age</div><div class="line">&#125;</div><div class="line">class StudentComparator implements Comparator &#123; </div><div class="line">     public int compare(Student one, Student another) &#123;</div><div class="line">          int i = 0;</div><div class="line">          i = one.name.compareTo(another.name); </div><div class="line">          if(i == 0) &#123; </div><div class="line">               return one.age - another.age;</div><div class="line">          &#125; else &#123;</div><div class="line">               return i;          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line">   Collections.sort( StudentList , new StudentComparator()) 可以对其排序（</div><div class="line">   **不仅要传入待排序的列表，还要传入实现了Comparator的类的对象**）</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>如果比较的方法只要用在一个类中，用该类实现Comparable接口就可以。</p>
</li>
<li><p>如果比较的方法在很多类中需要用到，就自己写个类实现Comparator接口，这样当要比较的时候把实现了Comparator接口的类传过去就可以，省得重复造轮子。这也是为什么Comparator会在java.util包下的原因。<br>使用Comparator的优点是：1.与实体类分离 2.方便应对多变的排序规则</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中四种引用]]></title>
      <url>http://linbingdong.com/2016/08/27/Java%E4%B8%AD%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了使能更加灵活地控制对象的生命周期。从JDK 1.2版本开始，把对象的引用分为4种级别。这4种级别由高到低依次为：强引用、软引用、弱引用和虚引用。</p>
</blockquote>
<a id="more"></a> 
<ul>
<li><p>强引用（StrongReference）<br>强引用是级别最高，也是最常用的引用。<strong>拥有强引用的对象绝不会被垃圾回收器回收</strong>。</p>
</li>
<li><p>软引用（SoftReference）<br>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；<strong>如果内存空间不足了，就会回收这些对象的内存</strong>。</p>
</li>
</ul>
<ul>
<li><p>弱引用（WeakReference）<br>只具有弱引用的对象拥有更短暂的生命周期。<strong>在执行gc的时候会被回收</strong>。</p>
</li>
<li><p>虚引用（PhantomReference）<br>“虚引用”顾名思义，就是形同虚设，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<strong>仅用于在发生gc时接收一个系统通知</strong>。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
